
FW_filament_dryer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b998  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000240c  0800ba50  0800ba50  0000ca50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de5c  0800de5c  0000f1fc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800de5c  0800de5c  0000f1fc  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800de5c  0800de5c  0000f1fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de5c  0800de5c  0000ee5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800de60  0800de60  0000ee60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001fc  20000000  0800de64  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000660  200001fc  0800e060  0000f1fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000085c  0800e060  0000f85c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000f1fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024515  00000000  00000000  0000f224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005465  00000000  00000000  00033739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000f025  00000000  00000000  00038b9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014b8  00000000  00000000  00047bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000171c  00000000  00000000  00049080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001acb9  00000000  00000000  0004a79c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027871  00000000  00000000  00065455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a75f  00000000  00000000  0008ccc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00127425  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004c10  00000000  00000000  00127468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000087  00000000  00000000  0012c078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200001fc 	.word	0x200001fc
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800ba38 	.word	0x0800ba38

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000200 	.word	0x20000200
 80000fc:	0800ba38 	.word	0x0800ba38

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_uqi>:
 8000110:	b402      	push	{r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	5c09      	ldrb	r1, [r1, r0]
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	448e      	add	lr, r1
 800011e:	bc02      	pop	{r1}
 8000120:	4770      	bx	lr
 8000122:	46c0      	nop			@ (mov r8, r8)

08000124 <__gnu_thumb1_case_shi>:
 8000124:	b403      	push	{r0, r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0040      	lsls	r0, r0, #1
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	5e09      	ldrsh	r1, [r1, r0]
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	448e      	add	lr, r1
 8000134:	bc03      	pop	{r0, r1}
 8000136:	4770      	bx	lr

08000138 <__gnu_thumb1_case_uhi>:
 8000138:	b403      	push	{r0, r1}
 800013a:	4671      	mov	r1, lr
 800013c:	0849      	lsrs	r1, r1, #1
 800013e:	0040      	lsls	r0, r0, #1
 8000140:	0049      	lsls	r1, r1, #1
 8000142:	5a09      	ldrh	r1, [r1, r0]
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	448e      	add	lr, r1
 8000148:	bc03      	pop	{r0, r1}
 800014a:	4770      	bx	lr

0800014c <__udivsi3>:
 800014c:	2200      	movs	r2, #0
 800014e:	0843      	lsrs	r3, r0, #1
 8000150:	428b      	cmp	r3, r1
 8000152:	d374      	bcc.n	800023e <__udivsi3+0xf2>
 8000154:	0903      	lsrs	r3, r0, #4
 8000156:	428b      	cmp	r3, r1
 8000158:	d35f      	bcc.n	800021a <__udivsi3+0xce>
 800015a:	0a03      	lsrs	r3, r0, #8
 800015c:	428b      	cmp	r3, r1
 800015e:	d344      	bcc.n	80001ea <__udivsi3+0x9e>
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d328      	bcc.n	80001b8 <__udivsi3+0x6c>
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d30d      	bcc.n	8000188 <__udivsi3+0x3c>
 800016c:	22ff      	movs	r2, #255	@ 0xff
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	ba12      	rev	r2, r2
 8000172:	0c03      	lsrs	r3, r0, #16
 8000174:	428b      	cmp	r3, r1
 8000176:	d302      	bcc.n	800017e <__udivsi3+0x32>
 8000178:	1212      	asrs	r2, r2, #8
 800017a:	0209      	lsls	r1, r1, #8
 800017c:	d065      	beq.n	800024a <__udivsi3+0xfe>
 800017e:	0b03      	lsrs	r3, r0, #12
 8000180:	428b      	cmp	r3, r1
 8000182:	d319      	bcc.n	80001b8 <__udivsi3+0x6c>
 8000184:	e000      	b.n	8000188 <__udivsi3+0x3c>
 8000186:	0a09      	lsrs	r1, r1, #8
 8000188:	0bc3      	lsrs	r3, r0, #15
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x46>
 800018e:	03cb      	lsls	r3, r1, #15
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b83      	lsrs	r3, r0, #14
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x52>
 800019a:	038b      	lsls	r3, r1, #14
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b43      	lsrs	r3, r0, #13
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x5e>
 80001a6:	034b      	lsls	r3, r1, #13
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0b03      	lsrs	r3, r0, #12
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x6a>
 80001b2:	030b      	lsls	r3, r1, #12
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0ac3      	lsrs	r3, r0, #11
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x76>
 80001be:	02cb      	lsls	r3, r1, #11
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a83      	lsrs	r3, r0, #10
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x82>
 80001ca:	028b      	lsls	r3, r1, #10
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a43      	lsrs	r3, r0, #9
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x8e>
 80001d6:	024b      	lsls	r3, r1, #9
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	0a03      	lsrs	r3, r0, #8
 80001de:	428b      	cmp	r3, r1
 80001e0:	d301      	bcc.n	80001e6 <__udivsi3+0x9a>
 80001e2:	020b      	lsls	r3, r1, #8
 80001e4:	1ac0      	subs	r0, r0, r3
 80001e6:	4152      	adcs	r2, r2
 80001e8:	d2cd      	bcs.n	8000186 <__udivsi3+0x3a>
 80001ea:	09c3      	lsrs	r3, r0, #7
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xa8>
 80001f0:	01cb      	lsls	r3, r1, #7
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0983      	lsrs	r3, r0, #6
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xb4>
 80001fc:	018b      	lsls	r3, r1, #6
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0943      	lsrs	r3, r0, #5
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xc0>
 8000208:	014b      	lsls	r3, r1, #5
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0903      	lsrs	r3, r0, #4
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xcc>
 8000214:	010b      	lsls	r3, r1, #4
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	08c3      	lsrs	r3, r0, #3
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xd8>
 8000220:	00cb      	lsls	r3, r1, #3
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0883      	lsrs	r3, r0, #2
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xe4>
 800022c:	008b      	lsls	r3, r1, #2
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	0843      	lsrs	r3, r0, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d301      	bcc.n	800023c <__udivsi3+0xf0>
 8000238:	004b      	lsls	r3, r1, #1
 800023a:	1ac0      	subs	r0, r0, r3
 800023c:	4152      	adcs	r2, r2
 800023e:	1a41      	subs	r1, r0, r1
 8000240:	d200      	bcs.n	8000244 <__udivsi3+0xf8>
 8000242:	4601      	mov	r1, r0
 8000244:	4152      	adcs	r2, r2
 8000246:	4610      	mov	r0, r2
 8000248:	4770      	bx	lr
 800024a:	e7ff      	b.n	800024c <__udivsi3+0x100>
 800024c:	b501      	push	{r0, lr}
 800024e:	2000      	movs	r0, #0
 8000250:	f000 f8f0 	bl	8000434 <__aeabi_idiv0>
 8000254:	bd02      	pop	{r1, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)

08000258 <__aeabi_uidivmod>:
 8000258:	2900      	cmp	r1, #0
 800025a:	d0f7      	beq.n	800024c <__udivsi3+0x100>
 800025c:	e776      	b.n	800014c <__udivsi3>
 800025e:	4770      	bx	lr

08000260 <__divsi3>:
 8000260:	4603      	mov	r3, r0
 8000262:	430b      	orrs	r3, r1
 8000264:	d47f      	bmi.n	8000366 <__divsi3+0x106>
 8000266:	2200      	movs	r2, #0
 8000268:	0843      	lsrs	r3, r0, #1
 800026a:	428b      	cmp	r3, r1
 800026c:	d374      	bcc.n	8000358 <__divsi3+0xf8>
 800026e:	0903      	lsrs	r3, r0, #4
 8000270:	428b      	cmp	r3, r1
 8000272:	d35f      	bcc.n	8000334 <__divsi3+0xd4>
 8000274:	0a03      	lsrs	r3, r0, #8
 8000276:	428b      	cmp	r3, r1
 8000278:	d344      	bcc.n	8000304 <__divsi3+0xa4>
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d328      	bcc.n	80002d2 <__divsi3+0x72>
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d30d      	bcc.n	80002a2 <__divsi3+0x42>
 8000286:	22ff      	movs	r2, #255	@ 0xff
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	ba12      	rev	r2, r2
 800028c:	0c03      	lsrs	r3, r0, #16
 800028e:	428b      	cmp	r3, r1
 8000290:	d302      	bcc.n	8000298 <__divsi3+0x38>
 8000292:	1212      	asrs	r2, r2, #8
 8000294:	0209      	lsls	r1, r1, #8
 8000296:	d065      	beq.n	8000364 <__divsi3+0x104>
 8000298:	0b03      	lsrs	r3, r0, #12
 800029a:	428b      	cmp	r3, r1
 800029c:	d319      	bcc.n	80002d2 <__divsi3+0x72>
 800029e:	e000      	b.n	80002a2 <__divsi3+0x42>
 80002a0:	0a09      	lsrs	r1, r1, #8
 80002a2:	0bc3      	lsrs	r3, r0, #15
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x4c>
 80002a8:	03cb      	lsls	r3, r1, #15
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b83      	lsrs	r3, r0, #14
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x58>
 80002b4:	038b      	lsls	r3, r1, #14
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b43      	lsrs	r3, r0, #13
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x64>
 80002c0:	034b      	lsls	r3, r1, #13
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0b03      	lsrs	r3, r0, #12
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x70>
 80002cc:	030b      	lsls	r3, r1, #12
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0ac3      	lsrs	r3, r0, #11
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x7c>
 80002d8:	02cb      	lsls	r3, r1, #11
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a83      	lsrs	r3, r0, #10
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x88>
 80002e4:	028b      	lsls	r3, r1, #10
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a43      	lsrs	r3, r0, #9
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0x94>
 80002f0:	024b      	lsls	r3, r1, #9
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	0a03      	lsrs	r3, r0, #8
 80002f8:	428b      	cmp	r3, r1
 80002fa:	d301      	bcc.n	8000300 <__divsi3+0xa0>
 80002fc:	020b      	lsls	r3, r1, #8
 80002fe:	1ac0      	subs	r0, r0, r3
 8000300:	4152      	adcs	r2, r2
 8000302:	d2cd      	bcs.n	80002a0 <__divsi3+0x40>
 8000304:	09c3      	lsrs	r3, r0, #7
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xae>
 800030a:	01cb      	lsls	r3, r1, #7
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0983      	lsrs	r3, r0, #6
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xba>
 8000316:	018b      	lsls	r3, r1, #6
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0943      	lsrs	r3, r0, #5
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xc6>
 8000322:	014b      	lsls	r3, r1, #5
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0903      	lsrs	r3, r0, #4
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xd2>
 800032e:	010b      	lsls	r3, r1, #4
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	08c3      	lsrs	r3, r0, #3
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xde>
 800033a:	00cb      	lsls	r3, r1, #3
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0883      	lsrs	r3, r0, #2
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xea>
 8000346:	008b      	lsls	r3, r1, #2
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	0843      	lsrs	r3, r0, #1
 800034e:	428b      	cmp	r3, r1
 8000350:	d301      	bcc.n	8000356 <__divsi3+0xf6>
 8000352:	004b      	lsls	r3, r1, #1
 8000354:	1ac0      	subs	r0, r0, r3
 8000356:	4152      	adcs	r2, r2
 8000358:	1a41      	subs	r1, r0, r1
 800035a:	d200      	bcs.n	800035e <__divsi3+0xfe>
 800035c:	4601      	mov	r1, r0
 800035e:	4152      	adcs	r2, r2
 8000360:	4610      	mov	r0, r2
 8000362:	4770      	bx	lr
 8000364:	e05d      	b.n	8000422 <__divsi3+0x1c2>
 8000366:	0fca      	lsrs	r2, r1, #31
 8000368:	d000      	beq.n	800036c <__divsi3+0x10c>
 800036a:	4249      	negs	r1, r1
 800036c:	1003      	asrs	r3, r0, #32
 800036e:	d300      	bcc.n	8000372 <__divsi3+0x112>
 8000370:	4240      	negs	r0, r0
 8000372:	4053      	eors	r3, r2
 8000374:	2200      	movs	r2, #0
 8000376:	469c      	mov	ip, r3
 8000378:	0903      	lsrs	r3, r0, #4
 800037a:	428b      	cmp	r3, r1
 800037c:	d32d      	bcc.n	80003da <__divsi3+0x17a>
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d312      	bcc.n	80003aa <__divsi3+0x14a>
 8000384:	22fc      	movs	r2, #252	@ 0xfc
 8000386:	0189      	lsls	r1, r1, #6
 8000388:	ba12      	rev	r2, r2
 800038a:	0a03      	lsrs	r3, r0, #8
 800038c:	428b      	cmp	r3, r1
 800038e:	d30c      	bcc.n	80003aa <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	1192      	asrs	r2, r2, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d308      	bcc.n	80003aa <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d304      	bcc.n	80003aa <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	d03a      	beq.n	800041a <__divsi3+0x1ba>
 80003a4:	1192      	asrs	r2, r2, #6
 80003a6:	e000      	b.n	80003aa <__divsi3+0x14a>
 80003a8:	0989      	lsrs	r1, r1, #6
 80003aa:	09c3      	lsrs	r3, r0, #7
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x154>
 80003b0:	01cb      	lsls	r3, r1, #7
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0983      	lsrs	r3, r0, #6
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x160>
 80003bc:	018b      	lsls	r3, r1, #6
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0943      	lsrs	r3, r0, #5
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x16c>
 80003c8:	014b      	lsls	r3, r1, #5
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	0903      	lsrs	r3, r0, #4
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x178>
 80003d4:	010b      	lsls	r3, r1, #4
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	08c3      	lsrs	r3, r0, #3
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x184>
 80003e0:	00cb      	lsls	r3, r1, #3
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	0883      	lsrs	r3, r0, #2
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x190>
 80003ec:	008b      	lsls	r3, r1, #2
 80003ee:	1ac0      	subs	r0, r0, r3
 80003f0:	4152      	adcs	r2, r2
 80003f2:	d2d9      	bcs.n	80003a8 <__divsi3+0x148>
 80003f4:	0843      	lsrs	r3, r0, #1
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d301      	bcc.n	80003fe <__divsi3+0x19e>
 80003fa:	004b      	lsls	r3, r1, #1
 80003fc:	1ac0      	subs	r0, r0, r3
 80003fe:	4152      	adcs	r2, r2
 8000400:	1a41      	subs	r1, r0, r1
 8000402:	d200      	bcs.n	8000406 <__divsi3+0x1a6>
 8000404:	4601      	mov	r1, r0
 8000406:	4663      	mov	r3, ip
 8000408:	4152      	adcs	r2, r2
 800040a:	105b      	asrs	r3, r3, #1
 800040c:	4610      	mov	r0, r2
 800040e:	d301      	bcc.n	8000414 <__divsi3+0x1b4>
 8000410:	4240      	negs	r0, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d500      	bpl.n	8000418 <__divsi3+0x1b8>
 8000416:	4249      	negs	r1, r1
 8000418:	4770      	bx	lr
 800041a:	4663      	mov	r3, ip
 800041c:	105b      	asrs	r3, r3, #1
 800041e:	d300      	bcc.n	8000422 <__divsi3+0x1c2>
 8000420:	4240      	negs	r0, r0
 8000422:	b501      	push	{r0, lr}
 8000424:	2000      	movs	r0, #0
 8000426:	f000 f805 	bl	8000434 <__aeabi_idiv0>
 800042a:	bd02      	pop	{r1, pc}

0800042c <__aeabi_idivmod>:
 800042c:	2900      	cmp	r1, #0
 800042e:	d0f8      	beq.n	8000422 <__divsi3+0x1c2>
 8000430:	e716      	b.n	8000260 <__divsi3>
 8000432:	4770      	bx	lr

08000434 <__aeabi_idiv0>:
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			@ (mov r8, r8)

08000438 <__aeabi_cdrcmple>:
 8000438:	4684      	mov	ip, r0
 800043a:	0010      	movs	r0, r2
 800043c:	4662      	mov	r2, ip
 800043e:	468c      	mov	ip, r1
 8000440:	0019      	movs	r1, r3
 8000442:	4663      	mov	r3, ip
 8000444:	e000      	b.n	8000448 <__aeabi_cdcmpeq>
 8000446:	46c0      	nop			@ (mov r8, r8)

08000448 <__aeabi_cdcmpeq>:
 8000448:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044a:	f002 f869 	bl	8002520 <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	d401      	bmi.n	8000456 <__aeabi_cdcmpeq+0xe>
 8000452:	2100      	movs	r1, #0
 8000454:	42c8      	cmn	r0, r1
 8000456:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000458 <__aeabi_dcmpeq>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 ffad 	bl	80023b8 <__eqdf2>
 800045e:	4240      	negs	r0, r0
 8000460:	3001      	adds	r0, #1
 8000462:	bd10      	pop	{r4, pc}

08000464 <__aeabi_dcmplt>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f002 f85b 	bl	8002520 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	db01      	blt.n	8000472 <__aeabi_dcmplt+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			@ (mov r8, r8)

08000478 <__aeabi_dcmple>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f002 f851 	bl	8002520 <__ledf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dd01      	ble.n	8000486 <__aeabi_dcmple+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			@ (mov r8, r8)

0800048c <__aeabi_dcmpgt>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 ffd7 	bl	8002440 <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	dc01      	bgt.n	800049a <__aeabi_dcmpgt+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_dcmpge>:
 80004a0:	b510      	push	{r4, lr}
 80004a2:	f001 ffcd 	bl	8002440 <__gedf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	da01      	bge.n	80004ae <__aeabi_dcmpge+0xe>
 80004aa:	2000      	movs	r0, #0
 80004ac:	bd10      	pop	{r4, pc}
 80004ae:	2001      	movs	r0, #1
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	46c0      	nop			@ (mov r8, r8)

080004b4 <__aeabi_cfrcmple>:
 80004b4:	4684      	mov	ip, r0
 80004b6:	0008      	movs	r0, r1
 80004b8:	4661      	mov	r1, ip
 80004ba:	e7ff      	b.n	80004bc <__aeabi_cfcmpeq>

080004bc <__aeabi_cfcmpeq>:
 80004bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004be:	f000 fbe1 	bl	8000c84 <__lesf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	d401      	bmi.n	80004ca <__aeabi_cfcmpeq+0xe>
 80004c6:	2100      	movs	r1, #0
 80004c8:	42c8      	cmn	r0, r1
 80004ca:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004cc <__aeabi_fcmpeq>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fb69 	bl	8000ba4 <__eqsf2>
 80004d2:	4240      	negs	r0, r0
 80004d4:	3001      	adds	r0, #1
 80004d6:	bd10      	pop	{r4, pc}

080004d8 <__aeabi_fcmplt>:
 80004d8:	b510      	push	{r4, lr}
 80004da:	f000 fbd3 	bl	8000c84 <__lesf2>
 80004de:	2800      	cmp	r0, #0
 80004e0:	db01      	blt.n	80004e6 <__aeabi_fcmplt+0xe>
 80004e2:	2000      	movs	r0, #0
 80004e4:	bd10      	pop	{r4, pc}
 80004e6:	2001      	movs	r0, #1
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	46c0      	nop			@ (mov r8, r8)

080004ec <__aeabi_fcmple>:
 80004ec:	b510      	push	{r4, lr}
 80004ee:	f000 fbc9 	bl	8000c84 <__lesf2>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	dd01      	ble.n	80004fa <__aeabi_fcmple+0xe>
 80004f6:	2000      	movs	r0, #0
 80004f8:	bd10      	pop	{r4, pc}
 80004fa:	2001      	movs	r0, #1
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	46c0      	nop			@ (mov r8, r8)

08000500 <__aeabi_fcmpgt>:
 8000500:	b510      	push	{r4, lr}
 8000502:	f000 fb77 	bl	8000bf4 <__gesf2>
 8000506:	2800      	cmp	r0, #0
 8000508:	dc01      	bgt.n	800050e <__aeabi_fcmpgt+0xe>
 800050a:	2000      	movs	r0, #0
 800050c:	bd10      	pop	{r4, pc}
 800050e:	2001      	movs	r0, #1
 8000510:	bd10      	pop	{r4, pc}
 8000512:	46c0      	nop			@ (mov r8, r8)

08000514 <__aeabi_fcmpge>:
 8000514:	b510      	push	{r4, lr}
 8000516:	f000 fb6d 	bl	8000bf4 <__gesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	da01      	bge.n	8000522 <__aeabi_fcmpge+0xe>
 800051e:	2000      	movs	r0, #0
 8000520:	bd10      	pop	{r4, pc}
 8000522:	2001      	movs	r0, #1
 8000524:	bd10      	pop	{r4, pc}
 8000526:	46c0      	nop			@ (mov r8, r8)

08000528 <__aeabi_f2uiz>:
 8000528:	219e      	movs	r1, #158	@ 0x9e
 800052a:	b510      	push	{r4, lr}
 800052c:	05c9      	lsls	r1, r1, #23
 800052e:	1c04      	adds	r4, r0, #0
 8000530:	f7ff fff0 	bl	8000514 <__aeabi_fcmpge>
 8000534:	2800      	cmp	r0, #0
 8000536:	d103      	bne.n	8000540 <__aeabi_f2uiz+0x18>
 8000538:	1c20      	adds	r0, r4, #0
 800053a:	f000 ffa9 	bl	8001490 <__aeabi_f2iz>
 800053e:	bd10      	pop	{r4, pc}
 8000540:	219e      	movs	r1, #158	@ 0x9e
 8000542:	1c20      	adds	r0, r4, #0
 8000544:	05c9      	lsls	r1, r1, #23
 8000546:	f000 fd3f 	bl	8000fc8 <__aeabi_fsub>
 800054a:	f000 ffa1 	bl	8001490 <__aeabi_f2iz>
 800054e:	2380      	movs	r3, #128	@ 0x80
 8000550:	061b      	lsls	r3, r3, #24
 8000552:	469c      	mov	ip, r3
 8000554:	4460      	add	r0, ip
 8000556:	e7f2      	b.n	800053e <__aeabi_f2uiz+0x16>

08000558 <__aeabi_d2uiz>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	2200      	movs	r2, #0
 800055c:	4b0c      	ldr	r3, [pc, #48]	@ (8000590 <__aeabi_d2uiz+0x38>)
 800055e:	0004      	movs	r4, r0
 8000560:	000d      	movs	r5, r1
 8000562:	f7ff ff9d 	bl	80004a0 <__aeabi_dcmpge>
 8000566:	2800      	cmp	r0, #0
 8000568:	d104      	bne.n	8000574 <__aeabi_d2uiz+0x1c>
 800056a:	0020      	movs	r0, r4
 800056c:	0029      	movs	r1, r5
 800056e:	f002 ff57 	bl	8003420 <__aeabi_d2iz>
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	4b06      	ldr	r3, [pc, #24]	@ (8000590 <__aeabi_d2uiz+0x38>)
 8000576:	2200      	movs	r2, #0
 8000578:	0020      	movs	r0, r4
 800057a:	0029      	movs	r1, r5
 800057c:	f002 fb24 	bl	8002bc8 <__aeabi_dsub>
 8000580:	f002 ff4e 	bl	8003420 <__aeabi_d2iz>
 8000584:	2380      	movs	r3, #128	@ 0x80
 8000586:	061b      	lsls	r3, r3, #24
 8000588:	469c      	mov	ip, r3
 800058a:	4460      	add	r0, ip
 800058c:	e7f1      	b.n	8000572 <__aeabi_d2uiz+0x1a>
 800058e:	46c0      	nop			@ (mov r8, r8)
 8000590:	41e00000 	.word	0x41e00000

08000594 <__aeabi_fadd>:
 8000594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000596:	024b      	lsls	r3, r1, #9
 8000598:	0a5a      	lsrs	r2, r3, #9
 800059a:	4694      	mov	ip, r2
 800059c:	004a      	lsls	r2, r1, #1
 800059e:	0fc9      	lsrs	r1, r1, #31
 80005a0:	46ce      	mov	lr, r9
 80005a2:	4647      	mov	r7, r8
 80005a4:	4689      	mov	r9, r1
 80005a6:	0045      	lsls	r5, r0, #1
 80005a8:	0246      	lsls	r6, r0, #9
 80005aa:	0e2d      	lsrs	r5, r5, #24
 80005ac:	0e12      	lsrs	r2, r2, #24
 80005ae:	b580      	push	{r7, lr}
 80005b0:	0999      	lsrs	r1, r3, #6
 80005b2:	0a77      	lsrs	r7, r6, #9
 80005b4:	0fc4      	lsrs	r4, r0, #31
 80005b6:	09b6      	lsrs	r6, r6, #6
 80005b8:	1aab      	subs	r3, r5, r2
 80005ba:	454c      	cmp	r4, r9
 80005bc:	d020      	beq.n	8000600 <__aeabi_fadd+0x6c>
 80005be:	2b00      	cmp	r3, #0
 80005c0:	dd0c      	ble.n	80005dc <__aeabi_fadd+0x48>
 80005c2:	2a00      	cmp	r2, #0
 80005c4:	d134      	bne.n	8000630 <__aeabi_fadd+0x9c>
 80005c6:	2900      	cmp	r1, #0
 80005c8:	d02a      	beq.n	8000620 <__aeabi_fadd+0x8c>
 80005ca:	1e5a      	subs	r2, r3, #1
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d100      	bne.n	80005d2 <__aeabi_fadd+0x3e>
 80005d0:	e08f      	b.n	80006f2 <__aeabi_fadd+0x15e>
 80005d2:	2bff      	cmp	r3, #255	@ 0xff
 80005d4:	d100      	bne.n	80005d8 <__aeabi_fadd+0x44>
 80005d6:	e0cd      	b.n	8000774 <__aeabi_fadd+0x1e0>
 80005d8:	0013      	movs	r3, r2
 80005da:	e02f      	b.n	800063c <__aeabi_fadd+0xa8>
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d060      	beq.n	80006a2 <__aeabi_fadd+0x10e>
 80005e0:	1b53      	subs	r3, r2, r5
 80005e2:	2d00      	cmp	r5, #0
 80005e4:	d000      	beq.n	80005e8 <__aeabi_fadd+0x54>
 80005e6:	e0ee      	b.n	80007c6 <__aeabi_fadd+0x232>
 80005e8:	2e00      	cmp	r6, #0
 80005ea:	d100      	bne.n	80005ee <__aeabi_fadd+0x5a>
 80005ec:	e13e      	b.n	800086c <__aeabi_fadd+0x2d8>
 80005ee:	1e5c      	subs	r4, r3, #1
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d100      	bne.n	80005f6 <__aeabi_fadd+0x62>
 80005f4:	e16b      	b.n	80008ce <__aeabi_fadd+0x33a>
 80005f6:	2bff      	cmp	r3, #255	@ 0xff
 80005f8:	d100      	bne.n	80005fc <__aeabi_fadd+0x68>
 80005fa:	e0b9      	b.n	8000770 <__aeabi_fadd+0x1dc>
 80005fc:	0023      	movs	r3, r4
 80005fe:	e0e7      	b.n	80007d0 <__aeabi_fadd+0x23c>
 8000600:	2b00      	cmp	r3, #0
 8000602:	dc00      	bgt.n	8000606 <__aeabi_fadd+0x72>
 8000604:	e0a4      	b.n	8000750 <__aeabi_fadd+0x1bc>
 8000606:	2a00      	cmp	r2, #0
 8000608:	d069      	beq.n	80006de <__aeabi_fadd+0x14a>
 800060a:	2dff      	cmp	r5, #255	@ 0xff
 800060c:	d100      	bne.n	8000610 <__aeabi_fadd+0x7c>
 800060e:	e0b1      	b.n	8000774 <__aeabi_fadd+0x1e0>
 8000610:	2280      	movs	r2, #128	@ 0x80
 8000612:	04d2      	lsls	r2, r2, #19
 8000614:	4311      	orrs	r1, r2
 8000616:	2b1b      	cmp	r3, #27
 8000618:	dc00      	bgt.n	800061c <__aeabi_fadd+0x88>
 800061a:	e0e9      	b.n	80007f0 <__aeabi_fadd+0x25c>
 800061c:	002b      	movs	r3, r5
 800061e:	3605      	adds	r6, #5
 8000620:	08f7      	lsrs	r7, r6, #3
 8000622:	2bff      	cmp	r3, #255	@ 0xff
 8000624:	d100      	bne.n	8000628 <__aeabi_fadd+0x94>
 8000626:	e0a5      	b.n	8000774 <__aeabi_fadd+0x1e0>
 8000628:	027a      	lsls	r2, r7, #9
 800062a:	0a52      	lsrs	r2, r2, #9
 800062c:	b2d8      	uxtb	r0, r3
 800062e:	e030      	b.n	8000692 <__aeabi_fadd+0xfe>
 8000630:	2dff      	cmp	r5, #255	@ 0xff
 8000632:	d100      	bne.n	8000636 <__aeabi_fadd+0xa2>
 8000634:	e09e      	b.n	8000774 <__aeabi_fadd+0x1e0>
 8000636:	2280      	movs	r2, #128	@ 0x80
 8000638:	04d2      	lsls	r2, r2, #19
 800063a:	4311      	orrs	r1, r2
 800063c:	2001      	movs	r0, #1
 800063e:	2b1b      	cmp	r3, #27
 8000640:	dc08      	bgt.n	8000654 <__aeabi_fadd+0xc0>
 8000642:	0008      	movs	r0, r1
 8000644:	2220      	movs	r2, #32
 8000646:	40d8      	lsrs	r0, r3
 8000648:	1ad3      	subs	r3, r2, r3
 800064a:	4099      	lsls	r1, r3
 800064c:	000b      	movs	r3, r1
 800064e:	1e5a      	subs	r2, r3, #1
 8000650:	4193      	sbcs	r3, r2
 8000652:	4318      	orrs	r0, r3
 8000654:	1a36      	subs	r6, r6, r0
 8000656:	0173      	lsls	r3, r6, #5
 8000658:	d400      	bmi.n	800065c <__aeabi_fadd+0xc8>
 800065a:	e071      	b.n	8000740 <__aeabi_fadd+0x1ac>
 800065c:	01b6      	lsls	r6, r6, #6
 800065e:	09b7      	lsrs	r7, r6, #6
 8000660:	0038      	movs	r0, r7
 8000662:	f003 f835 	bl	80036d0 <__clzsi2>
 8000666:	003b      	movs	r3, r7
 8000668:	3805      	subs	r0, #5
 800066a:	4083      	lsls	r3, r0
 800066c:	4285      	cmp	r5, r0
 800066e:	dd4d      	ble.n	800070c <__aeabi_fadd+0x178>
 8000670:	4eb4      	ldr	r6, [pc, #720]	@ (8000944 <__aeabi_fadd+0x3b0>)
 8000672:	1a2d      	subs	r5, r5, r0
 8000674:	401e      	ands	r6, r3
 8000676:	075a      	lsls	r2, r3, #29
 8000678:	d068      	beq.n	800074c <__aeabi_fadd+0x1b8>
 800067a:	220f      	movs	r2, #15
 800067c:	4013      	ands	r3, r2
 800067e:	2b04      	cmp	r3, #4
 8000680:	d064      	beq.n	800074c <__aeabi_fadd+0x1b8>
 8000682:	3604      	adds	r6, #4
 8000684:	0173      	lsls	r3, r6, #5
 8000686:	d561      	bpl.n	800074c <__aeabi_fadd+0x1b8>
 8000688:	1c68      	adds	r0, r5, #1
 800068a:	2dfe      	cmp	r5, #254	@ 0xfe
 800068c:	d154      	bne.n	8000738 <__aeabi_fadd+0x1a4>
 800068e:	20ff      	movs	r0, #255	@ 0xff
 8000690:	2200      	movs	r2, #0
 8000692:	05c0      	lsls	r0, r0, #23
 8000694:	4310      	orrs	r0, r2
 8000696:	07e4      	lsls	r4, r4, #31
 8000698:	4320      	orrs	r0, r4
 800069a:	bcc0      	pop	{r6, r7}
 800069c:	46b9      	mov	r9, r7
 800069e:	46b0      	mov	r8, r6
 80006a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006a2:	22fe      	movs	r2, #254	@ 0xfe
 80006a4:	4690      	mov	r8, r2
 80006a6:	1c68      	adds	r0, r5, #1
 80006a8:	0002      	movs	r2, r0
 80006aa:	4640      	mov	r0, r8
 80006ac:	4210      	tst	r0, r2
 80006ae:	d16b      	bne.n	8000788 <__aeabi_fadd+0x1f4>
 80006b0:	2d00      	cmp	r5, #0
 80006b2:	d000      	beq.n	80006b6 <__aeabi_fadd+0x122>
 80006b4:	e0dd      	b.n	8000872 <__aeabi_fadd+0x2de>
 80006b6:	2e00      	cmp	r6, #0
 80006b8:	d100      	bne.n	80006bc <__aeabi_fadd+0x128>
 80006ba:	e102      	b.n	80008c2 <__aeabi_fadd+0x32e>
 80006bc:	2900      	cmp	r1, #0
 80006be:	d0b3      	beq.n	8000628 <__aeabi_fadd+0x94>
 80006c0:	2280      	movs	r2, #128	@ 0x80
 80006c2:	1a77      	subs	r7, r6, r1
 80006c4:	04d2      	lsls	r2, r2, #19
 80006c6:	4217      	tst	r7, r2
 80006c8:	d100      	bne.n	80006cc <__aeabi_fadd+0x138>
 80006ca:	e136      	b.n	800093a <__aeabi_fadd+0x3a6>
 80006cc:	464c      	mov	r4, r9
 80006ce:	1b8e      	subs	r6, r1, r6
 80006d0:	d061      	beq.n	8000796 <__aeabi_fadd+0x202>
 80006d2:	2001      	movs	r0, #1
 80006d4:	4216      	tst	r6, r2
 80006d6:	d130      	bne.n	800073a <__aeabi_fadd+0x1a6>
 80006d8:	2300      	movs	r3, #0
 80006da:	08f7      	lsrs	r7, r6, #3
 80006dc:	e7a4      	b.n	8000628 <__aeabi_fadd+0x94>
 80006de:	2900      	cmp	r1, #0
 80006e0:	d09e      	beq.n	8000620 <__aeabi_fadd+0x8c>
 80006e2:	1e5a      	subs	r2, r3, #1
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d100      	bne.n	80006ea <__aeabi_fadd+0x156>
 80006e8:	e0ca      	b.n	8000880 <__aeabi_fadd+0x2ec>
 80006ea:	2bff      	cmp	r3, #255	@ 0xff
 80006ec:	d042      	beq.n	8000774 <__aeabi_fadd+0x1e0>
 80006ee:	0013      	movs	r3, r2
 80006f0:	e791      	b.n	8000616 <__aeabi_fadd+0x82>
 80006f2:	1a71      	subs	r1, r6, r1
 80006f4:	014b      	lsls	r3, r1, #5
 80006f6:	d400      	bmi.n	80006fa <__aeabi_fadd+0x166>
 80006f8:	e0d1      	b.n	800089e <__aeabi_fadd+0x30a>
 80006fa:	018f      	lsls	r7, r1, #6
 80006fc:	09bf      	lsrs	r7, r7, #6
 80006fe:	0038      	movs	r0, r7
 8000700:	f002 ffe6 	bl	80036d0 <__clzsi2>
 8000704:	003b      	movs	r3, r7
 8000706:	3805      	subs	r0, #5
 8000708:	4083      	lsls	r3, r0
 800070a:	2501      	movs	r5, #1
 800070c:	2220      	movs	r2, #32
 800070e:	1b40      	subs	r0, r0, r5
 8000710:	3001      	adds	r0, #1
 8000712:	1a12      	subs	r2, r2, r0
 8000714:	001e      	movs	r6, r3
 8000716:	4093      	lsls	r3, r2
 8000718:	40c6      	lsrs	r6, r0
 800071a:	1e5a      	subs	r2, r3, #1
 800071c:	4193      	sbcs	r3, r2
 800071e:	431e      	orrs	r6, r3
 8000720:	d039      	beq.n	8000796 <__aeabi_fadd+0x202>
 8000722:	0773      	lsls	r3, r6, #29
 8000724:	d100      	bne.n	8000728 <__aeabi_fadd+0x194>
 8000726:	e11b      	b.n	8000960 <__aeabi_fadd+0x3cc>
 8000728:	230f      	movs	r3, #15
 800072a:	2500      	movs	r5, #0
 800072c:	4033      	ands	r3, r6
 800072e:	2b04      	cmp	r3, #4
 8000730:	d1a7      	bne.n	8000682 <__aeabi_fadd+0xee>
 8000732:	2001      	movs	r0, #1
 8000734:	0172      	lsls	r2, r6, #5
 8000736:	d57c      	bpl.n	8000832 <__aeabi_fadd+0x29e>
 8000738:	b2c0      	uxtb	r0, r0
 800073a:	01b2      	lsls	r2, r6, #6
 800073c:	0a52      	lsrs	r2, r2, #9
 800073e:	e7a8      	b.n	8000692 <__aeabi_fadd+0xfe>
 8000740:	0773      	lsls	r3, r6, #29
 8000742:	d003      	beq.n	800074c <__aeabi_fadd+0x1b8>
 8000744:	230f      	movs	r3, #15
 8000746:	4033      	ands	r3, r6
 8000748:	2b04      	cmp	r3, #4
 800074a:	d19a      	bne.n	8000682 <__aeabi_fadd+0xee>
 800074c:	002b      	movs	r3, r5
 800074e:	e767      	b.n	8000620 <__aeabi_fadd+0x8c>
 8000750:	2b00      	cmp	r3, #0
 8000752:	d023      	beq.n	800079c <__aeabi_fadd+0x208>
 8000754:	1b53      	subs	r3, r2, r5
 8000756:	2d00      	cmp	r5, #0
 8000758:	d17b      	bne.n	8000852 <__aeabi_fadd+0x2be>
 800075a:	2e00      	cmp	r6, #0
 800075c:	d100      	bne.n	8000760 <__aeabi_fadd+0x1cc>
 800075e:	e086      	b.n	800086e <__aeabi_fadd+0x2da>
 8000760:	1e5d      	subs	r5, r3, #1
 8000762:	2b01      	cmp	r3, #1
 8000764:	d100      	bne.n	8000768 <__aeabi_fadd+0x1d4>
 8000766:	e08b      	b.n	8000880 <__aeabi_fadd+0x2ec>
 8000768:	2bff      	cmp	r3, #255	@ 0xff
 800076a:	d002      	beq.n	8000772 <__aeabi_fadd+0x1de>
 800076c:	002b      	movs	r3, r5
 800076e:	e075      	b.n	800085c <__aeabi_fadd+0x2c8>
 8000770:	464c      	mov	r4, r9
 8000772:	4667      	mov	r7, ip
 8000774:	2f00      	cmp	r7, #0
 8000776:	d100      	bne.n	800077a <__aeabi_fadd+0x1e6>
 8000778:	e789      	b.n	800068e <__aeabi_fadd+0xfa>
 800077a:	2280      	movs	r2, #128	@ 0x80
 800077c:	03d2      	lsls	r2, r2, #15
 800077e:	433a      	orrs	r2, r7
 8000780:	0252      	lsls	r2, r2, #9
 8000782:	20ff      	movs	r0, #255	@ 0xff
 8000784:	0a52      	lsrs	r2, r2, #9
 8000786:	e784      	b.n	8000692 <__aeabi_fadd+0xfe>
 8000788:	1a77      	subs	r7, r6, r1
 800078a:	017b      	lsls	r3, r7, #5
 800078c:	d46b      	bmi.n	8000866 <__aeabi_fadd+0x2d2>
 800078e:	2f00      	cmp	r7, #0
 8000790:	d000      	beq.n	8000794 <__aeabi_fadd+0x200>
 8000792:	e765      	b.n	8000660 <__aeabi_fadd+0xcc>
 8000794:	2400      	movs	r4, #0
 8000796:	2000      	movs	r0, #0
 8000798:	2200      	movs	r2, #0
 800079a:	e77a      	b.n	8000692 <__aeabi_fadd+0xfe>
 800079c:	22fe      	movs	r2, #254	@ 0xfe
 800079e:	1c6b      	adds	r3, r5, #1
 80007a0:	421a      	tst	r2, r3
 80007a2:	d149      	bne.n	8000838 <__aeabi_fadd+0x2a4>
 80007a4:	2d00      	cmp	r5, #0
 80007a6:	d000      	beq.n	80007aa <__aeabi_fadd+0x216>
 80007a8:	e09f      	b.n	80008ea <__aeabi_fadd+0x356>
 80007aa:	2e00      	cmp	r6, #0
 80007ac:	d100      	bne.n	80007b0 <__aeabi_fadd+0x21c>
 80007ae:	e0ba      	b.n	8000926 <__aeabi_fadd+0x392>
 80007b0:	2900      	cmp	r1, #0
 80007b2:	d100      	bne.n	80007b6 <__aeabi_fadd+0x222>
 80007b4:	e0cf      	b.n	8000956 <__aeabi_fadd+0x3c2>
 80007b6:	1872      	adds	r2, r6, r1
 80007b8:	0153      	lsls	r3, r2, #5
 80007ba:	d400      	bmi.n	80007be <__aeabi_fadd+0x22a>
 80007bc:	e0cd      	b.n	800095a <__aeabi_fadd+0x3c6>
 80007be:	0192      	lsls	r2, r2, #6
 80007c0:	2001      	movs	r0, #1
 80007c2:	0a52      	lsrs	r2, r2, #9
 80007c4:	e765      	b.n	8000692 <__aeabi_fadd+0xfe>
 80007c6:	2aff      	cmp	r2, #255	@ 0xff
 80007c8:	d0d2      	beq.n	8000770 <__aeabi_fadd+0x1dc>
 80007ca:	2080      	movs	r0, #128	@ 0x80
 80007cc:	04c0      	lsls	r0, r0, #19
 80007ce:	4306      	orrs	r6, r0
 80007d0:	2001      	movs	r0, #1
 80007d2:	2b1b      	cmp	r3, #27
 80007d4:	dc08      	bgt.n	80007e8 <__aeabi_fadd+0x254>
 80007d6:	0030      	movs	r0, r6
 80007d8:	2420      	movs	r4, #32
 80007da:	40d8      	lsrs	r0, r3
 80007dc:	1ae3      	subs	r3, r4, r3
 80007de:	409e      	lsls	r6, r3
 80007e0:	0033      	movs	r3, r6
 80007e2:	1e5c      	subs	r4, r3, #1
 80007e4:	41a3      	sbcs	r3, r4
 80007e6:	4318      	orrs	r0, r3
 80007e8:	464c      	mov	r4, r9
 80007ea:	0015      	movs	r5, r2
 80007ec:	1a0e      	subs	r6, r1, r0
 80007ee:	e732      	b.n	8000656 <__aeabi_fadd+0xc2>
 80007f0:	0008      	movs	r0, r1
 80007f2:	2220      	movs	r2, #32
 80007f4:	40d8      	lsrs	r0, r3
 80007f6:	1ad3      	subs	r3, r2, r3
 80007f8:	4099      	lsls	r1, r3
 80007fa:	000b      	movs	r3, r1
 80007fc:	1e5a      	subs	r2, r3, #1
 80007fe:	4193      	sbcs	r3, r2
 8000800:	4303      	orrs	r3, r0
 8000802:	18f6      	adds	r6, r6, r3
 8000804:	0173      	lsls	r3, r6, #5
 8000806:	d59b      	bpl.n	8000740 <__aeabi_fadd+0x1ac>
 8000808:	3501      	adds	r5, #1
 800080a:	2dff      	cmp	r5, #255	@ 0xff
 800080c:	d100      	bne.n	8000810 <__aeabi_fadd+0x27c>
 800080e:	e73e      	b.n	800068e <__aeabi_fadd+0xfa>
 8000810:	2301      	movs	r3, #1
 8000812:	494d      	ldr	r1, [pc, #308]	@ (8000948 <__aeabi_fadd+0x3b4>)
 8000814:	0872      	lsrs	r2, r6, #1
 8000816:	4033      	ands	r3, r6
 8000818:	400a      	ands	r2, r1
 800081a:	431a      	orrs	r2, r3
 800081c:	0016      	movs	r6, r2
 800081e:	0753      	lsls	r3, r2, #29
 8000820:	d004      	beq.n	800082c <__aeabi_fadd+0x298>
 8000822:	230f      	movs	r3, #15
 8000824:	4013      	ands	r3, r2
 8000826:	2b04      	cmp	r3, #4
 8000828:	d000      	beq.n	800082c <__aeabi_fadd+0x298>
 800082a:	e72a      	b.n	8000682 <__aeabi_fadd+0xee>
 800082c:	0173      	lsls	r3, r6, #5
 800082e:	d500      	bpl.n	8000832 <__aeabi_fadd+0x29e>
 8000830:	e72a      	b.n	8000688 <__aeabi_fadd+0xf4>
 8000832:	002b      	movs	r3, r5
 8000834:	08f7      	lsrs	r7, r6, #3
 8000836:	e6f7      	b.n	8000628 <__aeabi_fadd+0x94>
 8000838:	2bff      	cmp	r3, #255	@ 0xff
 800083a:	d100      	bne.n	800083e <__aeabi_fadd+0x2aa>
 800083c:	e727      	b.n	800068e <__aeabi_fadd+0xfa>
 800083e:	1871      	adds	r1, r6, r1
 8000840:	0849      	lsrs	r1, r1, #1
 8000842:	074a      	lsls	r2, r1, #29
 8000844:	d02f      	beq.n	80008a6 <__aeabi_fadd+0x312>
 8000846:	220f      	movs	r2, #15
 8000848:	400a      	ands	r2, r1
 800084a:	2a04      	cmp	r2, #4
 800084c:	d02b      	beq.n	80008a6 <__aeabi_fadd+0x312>
 800084e:	1d0e      	adds	r6, r1, #4
 8000850:	e6e6      	b.n	8000620 <__aeabi_fadd+0x8c>
 8000852:	2aff      	cmp	r2, #255	@ 0xff
 8000854:	d08d      	beq.n	8000772 <__aeabi_fadd+0x1de>
 8000856:	2080      	movs	r0, #128	@ 0x80
 8000858:	04c0      	lsls	r0, r0, #19
 800085a:	4306      	orrs	r6, r0
 800085c:	2b1b      	cmp	r3, #27
 800085e:	dd24      	ble.n	80008aa <__aeabi_fadd+0x316>
 8000860:	0013      	movs	r3, r2
 8000862:	1d4e      	adds	r6, r1, #5
 8000864:	e6dc      	b.n	8000620 <__aeabi_fadd+0x8c>
 8000866:	464c      	mov	r4, r9
 8000868:	1b8f      	subs	r7, r1, r6
 800086a:	e6f9      	b.n	8000660 <__aeabi_fadd+0xcc>
 800086c:	464c      	mov	r4, r9
 800086e:	000e      	movs	r6, r1
 8000870:	e6d6      	b.n	8000620 <__aeabi_fadd+0x8c>
 8000872:	2e00      	cmp	r6, #0
 8000874:	d149      	bne.n	800090a <__aeabi_fadd+0x376>
 8000876:	2900      	cmp	r1, #0
 8000878:	d068      	beq.n	800094c <__aeabi_fadd+0x3b8>
 800087a:	4667      	mov	r7, ip
 800087c:	464c      	mov	r4, r9
 800087e:	e77c      	b.n	800077a <__aeabi_fadd+0x1e6>
 8000880:	1870      	adds	r0, r6, r1
 8000882:	0143      	lsls	r3, r0, #5
 8000884:	d574      	bpl.n	8000970 <__aeabi_fadd+0x3dc>
 8000886:	4930      	ldr	r1, [pc, #192]	@ (8000948 <__aeabi_fadd+0x3b4>)
 8000888:	0840      	lsrs	r0, r0, #1
 800088a:	4001      	ands	r1, r0
 800088c:	0743      	lsls	r3, r0, #29
 800088e:	d009      	beq.n	80008a4 <__aeabi_fadd+0x310>
 8000890:	230f      	movs	r3, #15
 8000892:	4003      	ands	r3, r0
 8000894:	2b04      	cmp	r3, #4
 8000896:	d005      	beq.n	80008a4 <__aeabi_fadd+0x310>
 8000898:	2302      	movs	r3, #2
 800089a:	1d0e      	adds	r6, r1, #4
 800089c:	e6c0      	b.n	8000620 <__aeabi_fadd+0x8c>
 800089e:	2301      	movs	r3, #1
 80008a0:	08cf      	lsrs	r7, r1, #3
 80008a2:	e6c1      	b.n	8000628 <__aeabi_fadd+0x94>
 80008a4:	2302      	movs	r3, #2
 80008a6:	08cf      	lsrs	r7, r1, #3
 80008a8:	e6be      	b.n	8000628 <__aeabi_fadd+0x94>
 80008aa:	2520      	movs	r5, #32
 80008ac:	0030      	movs	r0, r6
 80008ae:	40d8      	lsrs	r0, r3
 80008b0:	1aeb      	subs	r3, r5, r3
 80008b2:	409e      	lsls	r6, r3
 80008b4:	0033      	movs	r3, r6
 80008b6:	1e5d      	subs	r5, r3, #1
 80008b8:	41ab      	sbcs	r3, r5
 80008ba:	4303      	orrs	r3, r0
 80008bc:	0015      	movs	r5, r2
 80008be:	185e      	adds	r6, r3, r1
 80008c0:	e7a0      	b.n	8000804 <__aeabi_fadd+0x270>
 80008c2:	2900      	cmp	r1, #0
 80008c4:	d100      	bne.n	80008c8 <__aeabi_fadd+0x334>
 80008c6:	e765      	b.n	8000794 <__aeabi_fadd+0x200>
 80008c8:	464c      	mov	r4, r9
 80008ca:	4667      	mov	r7, ip
 80008cc:	e6ac      	b.n	8000628 <__aeabi_fadd+0x94>
 80008ce:	1b8f      	subs	r7, r1, r6
 80008d0:	017b      	lsls	r3, r7, #5
 80008d2:	d52e      	bpl.n	8000932 <__aeabi_fadd+0x39e>
 80008d4:	01bf      	lsls	r7, r7, #6
 80008d6:	09bf      	lsrs	r7, r7, #6
 80008d8:	0038      	movs	r0, r7
 80008da:	f002 fef9 	bl	80036d0 <__clzsi2>
 80008de:	003b      	movs	r3, r7
 80008e0:	3805      	subs	r0, #5
 80008e2:	4083      	lsls	r3, r0
 80008e4:	464c      	mov	r4, r9
 80008e6:	3501      	adds	r5, #1
 80008e8:	e710      	b.n	800070c <__aeabi_fadd+0x178>
 80008ea:	2e00      	cmp	r6, #0
 80008ec:	d100      	bne.n	80008f0 <__aeabi_fadd+0x35c>
 80008ee:	e740      	b.n	8000772 <__aeabi_fadd+0x1de>
 80008f0:	2900      	cmp	r1, #0
 80008f2:	d100      	bne.n	80008f6 <__aeabi_fadd+0x362>
 80008f4:	e741      	b.n	800077a <__aeabi_fadd+0x1e6>
 80008f6:	2380      	movs	r3, #128	@ 0x80
 80008f8:	03db      	lsls	r3, r3, #15
 80008fa:	429f      	cmp	r7, r3
 80008fc:	d200      	bcs.n	8000900 <__aeabi_fadd+0x36c>
 80008fe:	e73c      	b.n	800077a <__aeabi_fadd+0x1e6>
 8000900:	459c      	cmp	ip, r3
 8000902:	d300      	bcc.n	8000906 <__aeabi_fadd+0x372>
 8000904:	e739      	b.n	800077a <__aeabi_fadd+0x1e6>
 8000906:	4667      	mov	r7, ip
 8000908:	e737      	b.n	800077a <__aeabi_fadd+0x1e6>
 800090a:	2900      	cmp	r1, #0
 800090c:	d100      	bne.n	8000910 <__aeabi_fadd+0x37c>
 800090e:	e734      	b.n	800077a <__aeabi_fadd+0x1e6>
 8000910:	2380      	movs	r3, #128	@ 0x80
 8000912:	03db      	lsls	r3, r3, #15
 8000914:	429f      	cmp	r7, r3
 8000916:	d200      	bcs.n	800091a <__aeabi_fadd+0x386>
 8000918:	e72f      	b.n	800077a <__aeabi_fadd+0x1e6>
 800091a:	459c      	cmp	ip, r3
 800091c:	d300      	bcc.n	8000920 <__aeabi_fadd+0x38c>
 800091e:	e72c      	b.n	800077a <__aeabi_fadd+0x1e6>
 8000920:	464c      	mov	r4, r9
 8000922:	4667      	mov	r7, ip
 8000924:	e729      	b.n	800077a <__aeabi_fadd+0x1e6>
 8000926:	2900      	cmp	r1, #0
 8000928:	d100      	bne.n	800092c <__aeabi_fadd+0x398>
 800092a:	e734      	b.n	8000796 <__aeabi_fadd+0x202>
 800092c:	2300      	movs	r3, #0
 800092e:	08cf      	lsrs	r7, r1, #3
 8000930:	e67a      	b.n	8000628 <__aeabi_fadd+0x94>
 8000932:	464c      	mov	r4, r9
 8000934:	2301      	movs	r3, #1
 8000936:	08ff      	lsrs	r7, r7, #3
 8000938:	e676      	b.n	8000628 <__aeabi_fadd+0x94>
 800093a:	2f00      	cmp	r7, #0
 800093c:	d100      	bne.n	8000940 <__aeabi_fadd+0x3ac>
 800093e:	e729      	b.n	8000794 <__aeabi_fadd+0x200>
 8000940:	08ff      	lsrs	r7, r7, #3
 8000942:	e671      	b.n	8000628 <__aeabi_fadd+0x94>
 8000944:	fbffffff 	.word	0xfbffffff
 8000948:	7dffffff 	.word	0x7dffffff
 800094c:	2280      	movs	r2, #128	@ 0x80
 800094e:	2400      	movs	r4, #0
 8000950:	20ff      	movs	r0, #255	@ 0xff
 8000952:	03d2      	lsls	r2, r2, #15
 8000954:	e69d      	b.n	8000692 <__aeabi_fadd+0xfe>
 8000956:	2300      	movs	r3, #0
 8000958:	e666      	b.n	8000628 <__aeabi_fadd+0x94>
 800095a:	2300      	movs	r3, #0
 800095c:	08d7      	lsrs	r7, r2, #3
 800095e:	e663      	b.n	8000628 <__aeabi_fadd+0x94>
 8000960:	2001      	movs	r0, #1
 8000962:	0172      	lsls	r2, r6, #5
 8000964:	d500      	bpl.n	8000968 <__aeabi_fadd+0x3d4>
 8000966:	e6e7      	b.n	8000738 <__aeabi_fadd+0x1a4>
 8000968:	0031      	movs	r1, r6
 800096a:	2300      	movs	r3, #0
 800096c:	08cf      	lsrs	r7, r1, #3
 800096e:	e65b      	b.n	8000628 <__aeabi_fadd+0x94>
 8000970:	2301      	movs	r3, #1
 8000972:	08c7      	lsrs	r7, r0, #3
 8000974:	e658      	b.n	8000628 <__aeabi_fadd+0x94>
 8000976:	46c0      	nop			@ (mov r8, r8)

08000978 <__aeabi_fdiv>:
 8000978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800097a:	4646      	mov	r6, r8
 800097c:	464f      	mov	r7, r9
 800097e:	46d6      	mov	lr, sl
 8000980:	0245      	lsls	r5, r0, #9
 8000982:	b5c0      	push	{r6, r7, lr}
 8000984:	0fc3      	lsrs	r3, r0, #31
 8000986:	0047      	lsls	r7, r0, #1
 8000988:	4698      	mov	r8, r3
 800098a:	1c0e      	adds	r6, r1, #0
 800098c:	0a6d      	lsrs	r5, r5, #9
 800098e:	0e3f      	lsrs	r7, r7, #24
 8000990:	d05b      	beq.n	8000a4a <__aeabi_fdiv+0xd2>
 8000992:	2fff      	cmp	r7, #255	@ 0xff
 8000994:	d021      	beq.n	80009da <__aeabi_fdiv+0x62>
 8000996:	2380      	movs	r3, #128	@ 0x80
 8000998:	00ed      	lsls	r5, r5, #3
 800099a:	04db      	lsls	r3, r3, #19
 800099c:	431d      	orrs	r5, r3
 800099e:	2300      	movs	r3, #0
 80009a0:	4699      	mov	r9, r3
 80009a2:	469a      	mov	sl, r3
 80009a4:	3f7f      	subs	r7, #127	@ 0x7f
 80009a6:	0274      	lsls	r4, r6, #9
 80009a8:	0073      	lsls	r3, r6, #1
 80009aa:	0a64      	lsrs	r4, r4, #9
 80009ac:	0e1b      	lsrs	r3, r3, #24
 80009ae:	0ff6      	lsrs	r6, r6, #31
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d020      	beq.n	80009f6 <__aeabi_fdiv+0x7e>
 80009b4:	2bff      	cmp	r3, #255	@ 0xff
 80009b6:	d043      	beq.n	8000a40 <__aeabi_fdiv+0xc8>
 80009b8:	2280      	movs	r2, #128	@ 0x80
 80009ba:	2000      	movs	r0, #0
 80009bc:	00e4      	lsls	r4, r4, #3
 80009be:	04d2      	lsls	r2, r2, #19
 80009c0:	4314      	orrs	r4, r2
 80009c2:	3b7f      	subs	r3, #127	@ 0x7f
 80009c4:	4642      	mov	r2, r8
 80009c6:	1aff      	subs	r7, r7, r3
 80009c8:	464b      	mov	r3, r9
 80009ca:	4072      	eors	r2, r6
 80009cc:	2b0f      	cmp	r3, #15
 80009ce:	d900      	bls.n	80009d2 <__aeabi_fdiv+0x5a>
 80009d0:	e09d      	b.n	8000b0e <__aeabi_fdiv+0x196>
 80009d2:	4971      	ldr	r1, [pc, #452]	@ (8000b98 <__aeabi_fdiv+0x220>)
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	58cb      	ldr	r3, [r1, r3]
 80009d8:	469f      	mov	pc, r3
 80009da:	2d00      	cmp	r5, #0
 80009dc:	d15a      	bne.n	8000a94 <__aeabi_fdiv+0x11c>
 80009de:	2308      	movs	r3, #8
 80009e0:	4699      	mov	r9, r3
 80009e2:	3b06      	subs	r3, #6
 80009e4:	0274      	lsls	r4, r6, #9
 80009e6:	469a      	mov	sl, r3
 80009e8:	0073      	lsls	r3, r6, #1
 80009ea:	27ff      	movs	r7, #255	@ 0xff
 80009ec:	0a64      	lsrs	r4, r4, #9
 80009ee:	0e1b      	lsrs	r3, r3, #24
 80009f0:	0ff6      	lsrs	r6, r6, #31
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d1de      	bne.n	80009b4 <__aeabi_fdiv+0x3c>
 80009f6:	2c00      	cmp	r4, #0
 80009f8:	d13b      	bne.n	8000a72 <__aeabi_fdiv+0xfa>
 80009fa:	2301      	movs	r3, #1
 80009fc:	4642      	mov	r2, r8
 80009fe:	4649      	mov	r1, r9
 8000a00:	4072      	eors	r2, r6
 8000a02:	4319      	orrs	r1, r3
 8000a04:	290e      	cmp	r1, #14
 8000a06:	d818      	bhi.n	8000a3a <__aeabi_fdiv+0xc2>
 8000a08:	4864      	ldr	r0, [pc, #400]	@ (8000b9c <__aeabi_fdiv+0x224>)
 8000a0a:	0089      	lsls	r1, r1, #2
 8000a0c:	5841      	ldr	r1, [r0, r1]
 8000a0e:	468f      	mov	pc, r1
 8000a10:	4653      	mov	r3, sl
 8000a12:	2b02      	cmp	r3, #2
 8000a14:	d100      	bne.n	8000a18 <__aeabi_fdiv+0xa0>
 8000a16:	e0b8      	b.n	8000b8a <__aeabi_fdiv+0x212>
 8000a18:	2b03      	cmp	r3, #3
 8000a1a:	d06e      	beq.n	8000afa <__aeabi_fdiv+0x182>
 8000a1c:	4642      	mov	r2, r8
 8000a1e:	002c      	movs	r4, r5
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d140      	bne.n	8000aa6 <__aeabi_fdiv+0x12e>
 8000a24:	2000      	movs	r0, #0
 8000a26:	2400      	movs	r4, #0
 8000a28:	05c0      	lsls	r0, r0, #23
 8000a2a:	4320      	orrs	r0, r4
 8000a2c:	07d2      	lsls	r2, r2, #31
 8000a2e:	4310      	orrs	r0, r2
 8000a30:	bce0      	pop	{r5, r6, r7}
 8000a32:	46ba      	mov	sl, r7
 8000a34:	46b1      	mov	r9, r6
 8000a36:	46a8      	mov	r8, r5
 8000a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a3a:	20ff      	movs	r0, #255	@ 0xff
 8000a3c:	2400      	movs	r4, #0
 8000a3e:	e7f3      	b.n	8000a28 <__aeabi_fdiv+0xb0>
 8000a40:	2c00      	cmp	r4, #0
 8000a42:	d120      	bne.n	8000a86 <__aeabi_fdiv+0x10e>
 8000a44:	2302      	movs	r3, #2
 8000a46:	3fff      	subs	r7, #255	@ 0xff
 8000a48:	e7d8      	b.n	80009fc <__aeabi_fdiv+0x84>
 8000a4a:	2d00      	cmp	r5, #0
 8000a4c:	d105      	bne.n	8000a5a <__aeabi_fdiv+0xe2>
 8000a4e:	2304      	movs	r3, #4
 8000a50:	4699      	mov	r9, r3
 8000a52:	3b03      	subs	r3, #3
 8000a54:	2700      	movs	r7, #0
 8000a56:	469a      	mov	sl, r3
 8000a58:	e7a5      	b.n	80009a6 <__aeabi_fdiv+0x2e>
 8000a5a:	0028      	movs	r0, r5
 8000a5c:	f002 fe38 	bl	80036d0 <__clzsi2>
 8000a60:	2776      	movs	r7, #118	@ 0x76
 8000a62:	1f43      	subs	r3, r0, #5
 8000a64:	409d      	lsls	r5, r3
 8000a66:	2300      	movs	r3, #0
 8000a68:	427f      	negs	r7, r7
 8000a6a:	4699      	mov	r9, r3
 8000a6c:	469a      	mov	sl, r3
 8000a6e:	1a3f      	subs	r7, r7, r0
 8000a70:	e799      	b.n	80009a6 <__aeabi_fdiv+0x2e>
 8000a72:	0020      	movs	r0, r4
 8000a74:	f002 fe2c 	bl	80036d0 <__clzsi2>
 8000a78:	1f43      	subs	r3, r0, #5
 8000a7a:	409c      	lsls	r4, r3
 8000a7c:	2376      	movs	r3, #118	@ 0x76
 8000a7e:	425b      	negs	r3, r3
 8000a80:	1a1b      	subs	r3, r3, r0
 8000a82:	2000      	movs	r0, #0
 8000a84:	e79e      	b.n	80009c4 <__aeabi_fdiv+0x4c>
 8000a86:	2303      	movs	r3, #3
 8000a88:	464a      	mov	r2, r9
 8000a8a:	431a      	orrs	r2, r3
 8000a8c:	4691      	mov	r9, r2
 8000a8e:	2003      	movs	r0, #3
 8000a90:	33fc      	adds	r3, #252	@ 0xfc
 8000a92:	e797      	b.n	80009c4 <__aeabi_fdiv+0x4c>
 8000a94:	230c      	movs	r3, #12
 8000a96:	4699      	mov	r9, r3
 8000a98:	3b09      	subs	r3, #9
 8000a9a:	27ff      	movs	r7, #255	@ 0xff
 8000a9c:	469a      	mov	sl, r3
 8000a9e:	e782      	b.n	80009a6 <__aeabi_fdiv+0x2e>
 8000aa0:	2803      	cmp	r0, #3
 8000aa2:	d02c      	beq.n	8000afe <__aeabi_fdiv+0x186>
 8000aa4:	0032      	movs	r2, r6
 8000aa6:	0038      	movs	r0, r7
 8000aa8:	307f      	adds	r0, #127	@ 0x7f
 8000aaa:	2800      	cmp	r0, #0
 8000aac:	dd47      	ble.n	8000b3e <__aeabi_fdiv+0x1c6>
 8000aae:	0763      	lsls	r3, r4, #29
 8000ab0:	d004      	beq.n	8000abc <__aeabi_fdiv+0x144>
 8000ab2:	230f      	movs	r3, #15
 8000ab4:	4023      	ands	r3, r4
 8000ab6:	2b04      	cmp	r3, #4
 8000ab8:	d000      	beq.n	8000abc <__aeabi_fdiv+0x144>
 8000aba:	3404      	adds	r4, #4
 8000abc:	0123      	lsls	r3, r4, #4
 8000abe:	d503      	bpl.n	8000ac8 <__aeabi_fdiv+0x150>
 8000ac0:	0038      	movs	r0, r7
 8000ac2:	4b37      	ldr	r3, [pc, #220]	@ (8000ba0 <__aeabi_fdiv+0x228>)
 8000ac4:	3080      	adds	r0, #128	@ 0x80
 8000ac6:	401c      	ands	r4, r3
 8000ac8:	28fe      	cmp	r0, #254	@ 0xfe
 8000aca:	dcb6      	bgt.n	8000a3a <__aeabi_fdiv+0xc2>
 8000acc:	01a4      	lsls	r4, r4, #6
 8000ace:	0a64      	lsrs	r4, r4, #9
 8000ad0:	b2c0      	uxtb	r0, r0
 8000ad2:	e7a9      	b.n	8000a28 <__aeabi_fdiv+0xb0>
 8000ad4:	2480      	movs	r4, #128	@ 0x80
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	20ff      	movs	r0, #255	@ 0xff
 8000ada:	03e4      	lsls	r4, r4, #15
 8000adc:	e7a4      	b.n	8000a28 <__aeabi_fdiv+0xb0>
 8000ade:	2380      	movs	r3, #128	@ 0x80
 8000ae0:	03db      	lsls	r3, r3, #15
 8000ae2:	421d      	tst	r5, r3
 8000ae4:	d001      	beq.n	8000aea <__aeabi_fdiv+0x172>
 8000ae6:	421c      	tst	r4, r3
 8000ae8:	d00b      	beq.n	8000b02 <__aeabi_fdiv+0x18a>
 8000aea:	2480      	movs	r4, #128	@ 0x80
 8000aec:	03e4      	lsls	r4, r4, #15
 8000aee:	432c      	orrs	r4, r5
 8000af0:	0264      	lsls	r4, r4, #9
 8000af2:	4642      	mov	r2, r8
 8000af4:	20ff      	movs	r0, #255	@ 0xff
 8000af6:	0a64      	lsrs	r4, r4, #9
 8000af8:	e796      	b.n	8000a28 <__aeabi_fdiv+0xb0>
 8000afa:	4646      	mov	r6, r8
 8000afc:	002c      	movs	r4, r5
 8000afe:	2380      	movs	r3, #128	@ 0x80
 8000b00:	03db      	lsls	r3, r3, #15
 8000b02:	431c      	orrs	r4, r3
 8000b04:	0264      	lsls	r4, r4, #9
 8000b06:	0032      	movs	r2, r6
 8000b08:	20ff      	movs	r0, #255	@ 0xff
 8000b0a:	0a64      	lsrs	r4, r4, #9
 8000b0c:	e78c      	b.n	8000a28 <__aeabi_fdiv+0xb0>
 8000b0e:	016d      	lsls	r5, r5, #5
 8000b10:	0160      	lsls	r0, r4, #5
 8000b12:	4285      	cmp	r5, r0
 8000b14:	d22d      	bcs.n	8000b72 <__aeabi_fdiv+0x1fa>
 8000b16:	231b      	movs	r3, #27
 8000b18:	2400      	movs	r4, #0
 8000b1a:	3f01      	subs	r7, #1
 8000b1c:	2601      	movs	r6, #1
 8000b1e:	0029      	movs	r1, r5
 8000b20:	0064      	lsls	r4, r4, #1
 8000b22:	006d      	lsls	r5, r5, #1
 8000b24:	2900      	cmp	r1, #0
 8000b26:	db01      	blt.n	8000b2c <__aeabi_fdiv+0x1b4>
 8000b28:	4285      	cmp	r5, r0
 8000b2a:	d301      	bcc.n	8000b30 <__aeabi_fdiv+0x1b8>
 8000b2c:	1a2d      	subs	r5, r5, r0
 8000b2e:	4334      	orrs	r4, r6
 8000b30:	3b01      	subs	r3, #1
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d1f3      	bne.n	8000b1e <__aeabi_fdiv+0x1a6>
 8000b36:	1e6b      	subs	r3, r5, #1
 8000b38:	419d      	sbcs	r5, r3
 8000b3a:	432c      	orrs	r4, r5
 8000b3c:	e7b3      	b.n	8000aa6 <__aeabi_fdiv+0x12e>
 8000b3e:	2301      	movs	r3, #1
 8000b40:	1a1b      	subs	r3, r3, r0
 8000b42:	2b1b      	cmp	r3, #27
 8000b44:	dd00      	ble.n	8000b48 <__aeabi_fdiv+0x1d0>
 8000b46:	e76d      	b.n	8000a24 <__aeabi_fdiv+0xac>
 8000b48:	0021      	movs	r1, r4
 8000b4a:	379e      	adds	r7, #158	@ 0x9e
 8000b4c:	40d9      	lsrs	r1, r3
 8000b4e:	40bc      	lsls	r4, r7
 8000b50:	000b      	movs	r3, r1
 8000b52:	1e61      	subs	r1, r4, #1
 8000b54:	418c      	sbcs	r4, r1
 8000b56:	4323      	orrs	r3, r4
 8000b58:	0759      	lsls	r1, r3, #29
 8000b5a:	d004      	beq.n	8000b66 <__aeabi_fdiv+0x1ee>
 8000b5c:	210f      	movs	r1, #15
 8000b5e:	4019      	ands	r1, r3
 8000b60:	2904      	cmp	r1, #4
 8000b62:	d000      	beq.n	8000b66 <__aeabi_fdiv+0x1ee>
 8000b64:	3304      	adds	r3, #4
 8000b66:	0159      	lsls	r1, r3, #5
 8000b68:	d413      	bmi.n	8000b92 <__aeabi_fdiv+0x21a>
 8000b6a:	019b      	lsls	r3, r3, #6
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	0a5c      	lsrs	r4, r3, #9
 8000b70:	e75a      	b.n	8000a28 <__aeabi_fdiv+0xb0>
 8000b72:	231a      	movs	r3, #26
 8000b74:	2401      	movs	r4, #1
 8000b76:	1a2d      	subs	r5, r5, r0
 8000b78:	e7d0      	b.n	8000b1c <__aeabi_fdiv+0x1a4>
 8000b7a:	1e98      	subs	r0, r3, #2
 8000b7c:	4243      	negs	r3, r0
 8000b7e:	4158      	adcs	r0, r3
 8000b80:	4240      	negs	r0, r0
 8000b82:	0032      	movs	r2, r6
 8000b84:	2400      	movs	r4, #0
 8000b86:	b2c0      	uxtb	r0, r0
 8000b88:	e74e      	b.n	8000a28 <__aeabi_fdiv+0xb0>
 8000b8a:	4642      	mov	r2, r8
 8000b8c:	20ff      	movs	r0, #255	@ 0xff
 8000b8e:	2400      	movs	r4, #0
 8000b90:	e74a      	b.n	8000a28 <__aeabi_fdiv+0xb0>
 8000b92:	2001      	movs	r0, #1
 8000b94:	2400      	movs	r4, #0
 8000b96:	e747      	b.n	8000a28 <__aeabi_fdiv+0xb0>
 8000b98:	0800ba60 	.word	0x0800ba60
 8000b9c:	0800baa0 	.word	0x0800baa0
 8000ba0:	f7ffffff 	.word	0xf7ffffff

08000ba4 <__eqsf2>:
 8000ba4:	b570      	push	{r4, r5, r6, lr}
 8000ba6:	0042      	lsls	r2, r0, #1
 8000ba8:	024e      	lsls	r6, r1, #9
 8000baa:	004c      	lsls	r4, r1, #1
 8000bac:	0245      	lsls	r5, r0, #9
 8000bae:	0a6d      	lsrs	r5, r5, #9
 8000bb0:	0e12      	lsrs	r2, r2, #24
 8000bb2:	0fc3      	lsrs	r3, r0, #31
 8000bb4:	0a76      	lsrs	r6, r6, #9
 8000bb6:	0e24      	lsrs	r4, r4, #24
 8000bb8:	0fc9      	lsrs	r1, r1, #31
 8000bba:	2aff      	cmp	r2, #255	@ 0xff
 8000bbc:	d010      	beq.n	8000be0 <__eqsf2+0x3c>
 8000bbe:	2cff      	cmp	r4, #255	@ 0xff
 8000bc0:	d00c      	beq.n	8000bdc <__eqsf2+0x38>
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	42a2      	cmp	r2, r4
 8000bc6:	d10a      	bne.n	8000bde <__eqsf2+0x3a>
 8000bc8:	42b5      	cmp	r5, r6
 8000bca:	d108      	bne.n	8000bde <__eqsf2+0x3a>
 8000bcc:	428b      	cmp	r3, r1
 8000bce:	d00f      	beq.n	8000bf0 <__eqsf2+0x4c>
 8000bd0:	2a00      	cmp	r2, #0
 8000bd2:	d104      	bne.n	8000bde <__eqsf2+0x3a>
 8000bd4:	0028      	movs	r0, r5
 8000bd6:	1e43      	subs	r3, r0, #1
 8000bd8:	4198      	sbcs	r0, r3
 8000bda:	e000      	b.n	8000bde <__eqsf2+0x3a>
 8000bdc:	2001      	movs	r0, #1
 8000bde:	bd70      	pop	{r4, r5, r6, pc}
 8000be0:	2001      	movs	r0, #1
 8000be2:	2cff      	cmp	r4, #255	@ 0xff
 8000be4:	d1fb      	bne.n	8000bde <__eqsf2+0x3a>
 8000be6:	4335      	orrs	r5, r6
 8000be8:	d1f9      	bne.n	8000bde <__eqsf2+0x3a>
 8000bea:	404b      	eors	r3, r1
 8000bec:	0018      	movs	r0, r3
 8000bee:	e7f6      	b.n	8000bde <__eqsf2+0x3a>
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	e7f4      	b.n	8000bde <__eqsf2+0x3a>

08000bf4 <__gesf2>:
 8000bf4:	b530      	push	{r4, r5, lr}
 8000bf6:	0042      	lsls	r2, r0, #1
 8000bf8:	0244      	lsls	r4, r0, #9
 8000bfa:	024d      	lsls	r5, r1, #9
 8000bfc:	0fc3      	lsrs	r3, r0, #31
 8000bfe:	0048      	lsls	r0, r1, #1
 8000c00:	0a64      	lsrs	r4, r4, #9
 8000c02:	0e12      	lsrs	r2, r2, #24
 8000c04:	0a6d      	lsrs	r5, r5, #9
 8000c06:	0e00      	lsrs	r0, r0, #24
 8000c08:	0fc9      	lsrs	r1, r1, #31
 8000c0a:	2aff      	cmp	r2, #255	@ 0xff
 8000c0c:	d018      	beq.n	8000c40 <__gesf2+0x4c>
 8000c0e:	28ff      	cmp	r0, #255	@ 0xff
 8000c10:	d00a      	beq.n	8000c28 <__gesf2+0x34>
 8000c12:	2a00      	cmp	r2, #0
 8000c14:	d11e      	bne.n	8000c54 <__gesf2+0x60>
 8000c16:	2800      	cmp	r0, #0
 8000c18:	d10a      	bne.n	8000c30 <__gesf2+0x3c>
 8000c1a:	2d00      	cmp	r5, #0
 8000c1c:	d029      	beq.n	8000c72 <__gesf2+0x7e>
 8000c1e:	2c00      	cmp	r4, #0
 8000c20:	d12d      	bne.n	8000c7e <__gesf2+0x8a>
 8000c22:	0048      	lsls	r0, r1, #1
 8000c24:	3801      	subs	r0, #1
 8000c26:	bd30      	pop	{r4, r5, pc}
 8000c28:	2d00      	cmp	r5, #0
 8000c2a:	d125      	bne.n	8000c78 <__gesf2+0x84>
 8000c2c:	2a00      	cmp	r2, #0
 8000c2e:	d101      	bne.n	8000c34 <__gesf2+0x40>
 8000c30:	2c00      	cmp	r4, #0
 8000c32:	d0f6      	beq.n	8000c22 <__gesf2+0x2e>
 8000c34:	428b      	cmp	r3, r1
 8000c36:	d019      	beq.n	8000c6c <__gesf2+0x78>
 8000c38:	2001      	movs	r0, #1
 8000c3a:	425b      	negs	r3, r3
 8000c3c:	4318      	orrs	r0, r3
 8000c3e:	e7f2      	b.n	8000c26 <__gesf2+0x32>
 8000c40:	2c00      	cmp	r4, #0
 8000c42:	d119      	bne.n	8000c78 <__gesf2+0x84>
 8000c44:	28ff      	cmp	r0, #255	@ 0xff
 8000c46:	d1f7      	bne.n	8000c38 <__gesf2+0x44>
 8000c48:	2d00      	cmp	r5, #0
 8000c4a:	d115      	bne.n	8000c78 <__gesf2+0x84>
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d1f2      	bne.n	8000c38 <__gesf2+0x44>
 8000c52:	e7e8      	b.n	8000c26 <__gesf2+0x32>
 8000c54:	2800      	cmp	r0, #0
 8000c56:	d0ef      	beq.n	8000c38 <__gesf2+0x44>
 8000c58:	428b      	cmp	r3, r1
 8000c5a:	d1ed      	bne.n	8000c38 <__gesf2+0x44>
 8000c5c:	4282      	cmp	r2, r0
 8000c5e:	dceb      	bgt.n	8000c38 <__gesf2+0x44>
 8000c60:	db04      	blt.n	8000c6c <__gesf2+0x78>
 8000c62:	42ac      	cmp	r4, r5
 8000c64:	d8e8      	bhi.n	8000c38 <__gesf2+0x44>
 8000c66:	2000      	movs	r0, #0
 8000c68:	42ac      	cmp	r4, r5
 8000c6a:	d2dc      	bcs.n	8000c26 <__gesf2+0x32>
 8000c6c:	0058      	lsls	r0, r3, #1
 8000c6e:	3801      	subs	r0, #1
 8000c70:	e7d9      	b.n	8000c26 <__gesf2+0x32>
 8000c72:	2c00      	cmp	r4, #0
 8000c74:	d0d7      	beq.n	8000c26 <__gesf2+0x32>
 8000c76:	e7df      	b.n	8000c38 <__gesf2+0x44>
 8000c78:	2002      	movs	r0, #2
 8000c7a:	4240      	negs	r0, r0
 8000c7c:	e7d3      	b.n	8000c26 <__gesf2+0x32>
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d1da      	bne.n	8000c38 <__gesf2+0x44>
 8000c82:	e7ee      	b.n	8000c62 <__gesf2+0x6e>

08000c84 <__lesf2>:
 8000c84:	b530      	push	{r4, r5, lr}
 8000c86:	0042      	lsls	r2, r0, #1
 8000c88:	0244      	lsls	r4, r0, #9
 8000c8a:	024d      	lsls	r5, r1, #9
 8000c8c:	0fc3      	lsrs	r3, r0, #31
 8000c8e:	0048      	lsls	r0, r1, #1
 8000c90:	0a64      	lsrs	r4, r4, #9
 8000c92:	0e12      	lsrs	r2, r2, #24
 8000c94:	0a6d      	lsrs	r5, r5, #9
 8000c96:	0e00      	lsrs	r0, r0, #24
 8000c98:	0fc9      	lsrs	r1, r1, #31
 8000c9a:	2aff      	cmp	r2, #255	@ 0xff
 8000c9c:	d017      	beq.n	8000cce <__lesf2+0x4a>
 8000c9e:	28ff      	cmp	r0, #255	@ 0xff
 8000ca0:	d00a      	beq.n	8000cb8 <__lesf2+0x34>
 8000ca2:	2a00      	cmp	r2, #0
 8000ca4:	d11b      	bne.n	8000cde <__lesf2+0x5a>
 8000ca6:	2800      	cmp	r0, #0
 8000ca8:	d10a      	bne.n	8000cc0 <__lesf2+0x3c>
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d01d      	beq.n	8000cea <__lesf2+0x66>
 8000cae:	2c00      	cmp	r4, #0
 8000cb0:	d12d      	bne.n	8000d0e <__lesf2+0x8a>
 8000cb2:	0048      	lsls	r0, r1, #1
 8000cb4:	3801      	subs	r0, #1
 8000cb6:	e011      	b.n	8000cdc <__lesf2+0x58>
 8000cb8:	2d00      	cmp	r5, #0
 8000cba:	d10e      	bne.n	8000cda <__lesf2+0x56>
 8000cbc:	2a00      	cmp	r2, #0
 8000cbe:	d101      	bne.n	8000cc4 <__lesf2+0x40>
 8000cc0:	2c00      	cmp	r4, #0
 8000cc2:	d0f6      	beq.n	8000cb2 <__lesf2+0x2e>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	d10c      	bne.n	8000ce2 <__lesf2+0x5e>
 8000cc8:	0058      	lsls	r0, r3, #1
 8000cca:	3801      	subs	r0, #1
 8000ccc:	e006      	b.n	8000cdc <__lesf2+0x58>
 8000cce:	2c00      	cmp	r4, #0
 8000cd0:	d103      	bne.n	8000cda <__lesf2+0x56>
 8000cd2:	28ff      	cmp	r0, #255	@ 0xff
 8000cd4:	d105      	bne.n	8000ce2 <__lesf2+0x5e>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d015      	beq.n	8000d06 <__lesf2+0x82>
 8000cda:	2002      	movs	r0, #2
 8000cdc:	bd30      	pop	{r4, r5, pc}
 8000cde:	2800      	cmp	r0, #0
 8000ce0:	d106      	bne.n	8000cf0 <__lesf2+0x6c>
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	425b      	negs	r3, r3
 8000ce6:	4318      	orrs	r0, r3
 8000ce8:	e7f8      	b.n	8000cdc <__lesf2+0x58>
 8000cea:	2c00      	cmp	r4, #0
 8000cec:	d0f6      	beq.n	8000cdc <__lesf2+0x58>
 8000cee:	e7f8      	b.n	8000ce2 <__lesf2+0x5e>
 8000cf0:	428b      	cmp	r3, r1
 8000cf2:	d1f6      	bne.n	8000ce2 <__lesf2+0x5e>
 8000cf4:	4282      	cmp	r2, r0
 8000cf6:	dcf4      	bgt.n	8000ce2 <__lesf2+0x5e>
 8000cf8:	dbe6      	blt.n	8000cc8 <__lesf2+0x44>
 8000cfa:	42ac      	cmp	r4, r5
 8000cfc:	d8f1      	bhi.n	8000ce2 <__lesf2+0x5e>
 8000cfe:	2000      	movs	r0, #0
 8000d00:	42ac      	cmp	r4, r5
 8000d02:	d2eb      	bcs.n	8000cdc <__lesf2+0x58>
 8000d04:	e7e0      	b.n	8000cc8 <__lesf2+0x44>
 8000d06:	2000      	movs	r0, #0
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	d1ea      	bne.n	8000ce2 <__lesf2+0x5e>
 8000d0c:	e7e6      	b.n	8000cdc <__lesf2+0x58>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d1e7      	bne.n	8000ce2 <__lesf2+0x5e>
 8000d12:	e7f2      	b.n	8000cfa <__lesf2+0x76>

08000d14 <__aeabi_fmul>:
 8000d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d16:	464f      	mov	r7, r9
 8000d18:	4646      	mov	r6, r8
 8000d1a:	46d6      	mov	lr, sl
 8000d1c:	0044      	lsls	r4, r0, #1
 8000d1e:	b5c0      	push	{r6, r7, lr}
 8000d20:	0246      	lsls	r6, r0, #9
 8000d22:	1c0f      	adds	r7, r1, #0
 8000d24:	0a76      	lsrs	r6, r6, #9
 8000d26:	0e24      	lsrs	r4, r4, #24
 8000d28:	0fc5      	lsrs	r5, r0, #31
 8000d2a:	2c00      	cmp	r4, #0
 8000d2c:	d100      	bne.n	8000d30 <__aeabi_fmul+0x1c>
 8000d2e:	e0da      	b.n	8000ee6 <__aeabi_fmul+0x1d2>
 8000d30:	2cff      	cmp	r4, #255	@ 0xff
 8000d32:	d074      	beq.n	8000e1e <__aeabi_fmul+0x10a>
 8000d34:	2380      	movs	r3, #128	@ 0x80
 8000d36:	00f6      	lsls	r6, r6, #3
 8000d38:	04db      	lsls	r3, r3, #19
 8000d3a:	431e      	orrs	r6, r3
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	4699      	mov	r9, r3
 8000d40:	469a      	mov	sl, r3
 8000d42:	3c7f      	subs	r4, #127	@ 0x7f
 8000d44:	027b      	lsls	r3, r7, #9
 8000d46:	0a5b      	lsrs	r3, r3, #9
 8000d48:	4698      	mov	r8, r3
 8000d4a:	007b      	lsls	r3, r7, #1
 8000d4c:	0e1b      	lsrs	r3, r3, #24
 8000d4e:	0fff      	lsrs	r7, r7, #31
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d074      	beq.n	8000e3e <__aeabi_fmul+0x12a>
 8000d54:	2bff      	cmp	r3, #255	@ 0xff
 8000d56:	d100      	bne.n	8000d5a <__aeabi_fmul+0x46>
 8000d58:	e08e      	b.n	8000e78 <__aeabi_fmul+0x164>
 8000d5a:	4642      	mov	r2, r8
 8000d5c:	2180      	movs	r1, #128	@ 0x80
 8000d5e:	00d2      	lsls	r2, r2, #3
 8000d60:	04c9      	lsls	r1, r1, #19
 8000d62:	4311      	orrs	r1, r2
 8000d64:	3b7f      	subs	r3, #127	@ 0x7f
 8000d66:	002a      	movs	r2, r5
 8000d68:	18e4      	adds	r4, r4, r3
 8000d6a:	464b      	mov	r3, r9
 8000d6c:	407a      	eors	r2, r7
 8000d6e:	4688      	mov	r8, r1
 8000d70:	b2d2      	uxtb	r2, r2
 8000d72:	2b0a      	cmp	r3, #10
 8000d74:	dc75      	bgt.n	8000e62 <__aeabi_fmul+0x14e>
 8000d76:	464b      	mov	r3, r9
 8000d78:	2000      	movs	r0, #0
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	dd0f      	ble.n	8000d9e <__aeabi_fmul+0x8a>
 8000d7e:	4649      	mov	r1, r9
 8000d80:	2301      	movs	r3, #1
 8000d82:	408b      	lsls	r3, r1
 8000d84:	21a6      	movs	r1, #166	@ 0xa6
 8000d86:	00c9      	lsls	r1, r1, #3
 8000d88:	420b      	tst	r3, r1
 8000d8a:	d169      	bne.n	8000e60 <__aeabi_fmul+0x14c>
 8000d8c:	2190      	movs	r1, #144	@ 0x90
 8000d8e:	0089      	lsls	r1, r1, #2
 8000d90:	420b      	tst	r3, r1
 8000d92:	d000      	beq.n	8000d96 <__aeabi_fmul+0x82>
 8000d94:	e100      	b.n	8000f98 <__aeabi_fmul+0x284>
 8000d96:	2188      	movs	r1, #136	@ 0x88
 8000d98:	4219      	tst	r1, r3
 8000d9a:	d000      	beq.n	8000d9e <__aeabi_fmul+0x8a>
 8000d9c:	e0f5      	b.n	8000f8a <__aeabi_fmul+0x276>
 8000d9e:	4641      	mov	r1, r8
 8000da0:	0409      	lsls	r1, r1, #16
 8000da2:	0c09      	lsrs	r1, r1, #16
 8000da4:	4643      	mov	r3, r8
 8000da6:	0008      	movs	r0, r1
 8000da8:	0c35      	lsrs	r5, r6, #16
 8000daa:	0436      	lsls	r6, r6, #16
 8000dac:	0c1b      	lsrs	r3, r3, #16
 8000dae:	0c36      	lsrs	r6, r6, #16
 8000db0:	4370      	muls	r0, r6
 8000db2:	4369      	muls	r1, r5
 8000db4:	435e      	muls	r6, r3
 8000db6:	435d      	muls	r5, r3
 8000db8:	1876      	adds	r6, r6, r1
 8000dba:	0c03      	lsrs	r3, r0, #16
 8000dbc:	199b      	adds	r3, r3, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d903      	bls.n	8000dca <__aeabi_fmul+0xb6>
 8000dc2:	2180      	movs	r1, #128	@ 0x80
 8000dc4:	0249      	lsls	r1, r1, #9
 8000dc6:	468c      	mov	ip, r1
 8000dc8:	4465      	add	r5, ip
 8000dca:	0400      	lsls	r0, r0, #16
 8000dcc:	0419      	lsls	r1, r3, #16
 8000dce:	0c00      	lsrs	r0, r0, #16
 8000dd0:	1809      	adds	r1, r1, r0
 8000dd2:	018e      	lsls	r6, r1, #6
 8000dd4:	1e70      	subs	r0, r6, #1
 8000dd6:	4186      	sbcs	r6, r0
 8000dd8:	0c1b      	lsrs	r3, r3, #16
 8000dda:	0e89      	lsrs	r1, r1, #26
 8000ddc:	195b      	adds	r3, r3, r5
 8000dde:	430e      	orrs	r6, r1
 8000de0:	019b      	lsls	r3, r3, #6
 8000de2:	431e      	orrs	r6, r3
 8000de4:	011b      	lsls	r3, r3, #4
 8000de6:	d46c      	bmi.n	8000ec2 <__aeabi_fmul+0x1ae>
 8000de8:	0023      	movs	r3, r4
 8000dea:	337f      	adds	r3, #127	@ 0x7f
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	dc00      	bgt.n	8000df2 <__aeabi_fmul+0xde>
 8000df0:	e0b1      	b.n	8000f56 <__aeabi_fmul+0x242>
 8000df2:	0015      	movs	r5, r2
 8000df4:	0771      	lsls	r1, r6, #29
 8000df6:	d00b      	beq.n	8000e10 <__aeabi_fmul+0xfc>
 8000df8:	200f      	movs	r0, #15
 8000dfa:	0021      	movs	r1, r4
 8000dfc:	4030      	ands	r0, r6
 8000dfe:	2804      	cmp	r0, #4
 8000e00:	d006      	beq.n	8000e10 <__aeabi_fmul+0xfc>
 8000e02:	3604      	adds	r6, #4
 8000e04:	0132      	lsls	r2, r6, #4
 8000e06:	d503      	bpl.n	8000e10 <__aeabi_fmul+0xfc>
 8000e08:	4b6e      	ldr	r3, [pc, #440]	@ (8000fc4 <__aeabi_fmul+0x2b0>)
 8000e0a:	401e      	ands	r6, r3
 8000e0c:	000b      	movs	r3, r1
 8000e0e:	3380      	adds	r3, #128	@ 0x80
 8000e10:	2bfe      	cmp	r3, #254	@ 0xfe
 8000e12:	dd00      	ble.n	8000e16 <__aeabi_fmul+0x102>
 8000e14:	e0bd      	b.n	8000f92 <__aeabi_fmul+0x27e>
 8000e16:	01b2      	lsls	r2, r6, #6
 8000e18:	0a52      	lsrs	r2, r2, #9
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	e048      	b.n	8000eb0 <__aeabi_fmul+0x19c>
 8000e1e:	2e00      	cmp	r6, #0
 8000e20:	d000      	beq.n	8000e24 <__aeabi_fmul+0x110>
 8000e22:	e092      	b.n	8000f4a <__aeabi_fmul+0x236>
 8000e24:	2308      	movs	r3, #8
 8000e26:	4699      	mov	r9, r3
 8000e28:	3b06      	subs	r3, #6
 8000e2a:	469a      	mov	sl, r3
 8000e2c:	027b      	lsls	r3, r7, #9
 8000e2e:	0a5b      	lsrs	r3, r3, #9
 8000e30:	4698      	mov	r8, r3
 8000e32:	007b      	lsls	r3, r7, #1
 8000e34:	24ff      	movs	r4, #255	@ 0xff
 8000e36:	0e1b      	lsrs	r3, r3, #24
 8000e38:	0fff      	lsrs	r7, r7, #31
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d18a      	bne.n	8000d54 <__aeabi_fmul+0x40>
 8000e3e:	4642      	mov	r2, r8
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d164      	bne.n	8000f0e <__aeabi_fmul+0x1fa>
 8000e44:	4649      	mov	r1, r9
 8000e46:	3201      	adds	r2, #1
 8000e48:	4311      	orrs	r1, r2
 8000e4a:	4689      	mov	r9, r1
 8000e4c:	290a      	cmp	r1, #10
 8000e4e:	dc08      	bgt.n	8000e62 <__aeabi_fmul+0x14e>
 8000e50:	407d      	eors	r5, r7
 8000e52:	2001      	movs	r0, #1
 8000e54:	b2ea      	uxtb	r2, r5
 8000e56:	2902      	cmp	r1, #2
 8000e58:	dc91      	bgt.n	8000d7e <__aeabi_fmul+0x6a>
 8000e5a:	0015      	movs	r5, r2
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	e027      	b.n	8000eb0 <__aeabi_fmul+0x19c>
 8000e60:	0015      	movs	r5, r2
 8000e62:	4653      	mov	r3, sl
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d100      	bne.n	8000e6a <__aeabi_fmul+0x156>
 8000e68:	e093      	b.n	8000f92 <__aeabi_fmul+0x27e>
 8000e6a:	2b03      	cmp	r3, #3
 8000e6c:	d01a      	beq.n	8000ea4 <__aeabi_fmul+0x190>
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d12c      	bne.n	8000ecc <__aeabi_fmul+0x1b8>
 8000e72:	2300      	movs	r3, #0
 8000e74:	2200      	movs	r2, #0
 8000e76:	e01b      	b.n	8000eb0 <__aeabi_fmul+0x19c>
 8000e78:	4643      	mov	r3, r8
 8000e7a:	34ff      	adds	r4, #255	@ 0xff
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d055      	beq.n	8000f2c <__aeabi_fmul+0x218>
 8000e80:	2103      	movs	r1, #3
 8000e82:	464b      	mov	r3, r9
 8000e84:	430b      	orrs	r3, r1
 8000e86:	0019      	movs	r1, r3
 8000e88:	2b0a      	cmp	r3, #10
 8000e8a:	dc00      	bgt.n	8000e8e <__aeabi_fmul+0x17a>
 8000e8c:	e092      	b.n	8000fb4 <__aeabi_fmul+0x2a0>
 8000e8e:	2b0f      	cmp	r3, #15
 8000e90:	d000      	beq.n	8000e94 <__aeabi_fmul+0x180>
 8000e92:	e08c      	b.n	8000fae <__aeabi_fmul+0x29a>
 8000e94:	2280      	movs	r2, #128	@ 0x80
 8000e96:	03d2      	lsls	r2, r2, #15
 8000e98:	4216      	tst	r6, r2
 8000e9a:	d003      	beq.n	8000ea4 <__aeabi_fmul+0x190>
 8000e9c:	4643      	mov	r3, r8
 8000e9e:	4213      	tst	r3, r2
 8000ea0:	d100      	bne.n	8000ea4 <__aeabi_fmul+0x190>
 8000ea2:	e07d      	b.n	8000fa0 <__aeabi_fmul+0x28c>
 8000ea4:	2280      	movs	r2, #128	@ 0x80
 8000ea6:	03d2      	lsls	r2, r2, #15
 8000ea8:	4332      	orrs	r2, r6
 8000eaa:	0252      	lsls	r2, r2, #9
 8000eac:	0a52      	lsrs	r2, r2, #9
 8000eae:	23ff      	movs	r3, #255	@ 0xff
 8000eb0:	05d8      	lsls	r0, r3, #23
 8000eb2:	07ed      	lsls	r5, r5, #31
 8000eb4:	4310      	orrs	r0, r2
 8000eb6:	4328      	orrs	r0, r5
 8000eb8:	bce0      	pop	{r5, r6, r7}
 8000eba:	46ba      	mov	sl, r7
 8000ebc:	46b1      	mov	r9, r6
 8000ebe:	46a8      	mov	r8, r5
 8000ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	0015      	movs	r5, r2
 8000ec6:	0871      	lsrs	r1, r6, #1
 8000ec8:	401e      	ands	r6, r3
 8000eca:	430e      	orrs	r6, r1
 8000ecc:	0023      	movs	r3, r4
 8000ece:	3380      	adds	r3, #128	@ 0x80
 8000ed0:	1c61      	adds	r1, r4, #1
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	dd41      	ble.n	8000f5a <__aeabi_fmul+0x246>
 8000ed6:	0772      	lsls	r2, r6, #29
 8000ed8:	d094      	beq.n	8000e04 <__aeabi_fmul+0xf0>
 8000eda:	220f      	movs	r2, #15
 8000edc:	4032      	ands	r2, r6
 8000ede:	2a04      	cmp	r2, #4
 8000ee0:	d000      	beq.n	8000ee4 <__aeabi_fmul+0x1d0>
 8000ee2:	e78e      	b.n	8000e02 <__aeabi_fmul+0xee>
 8000ee4:	e78e      	b.n	8000e04 <__aeabi_fmul+0xf0>
 8000ee6:	2e00      	cmp	r6, #0
 8000ee8:	d105      	bne.n	8000ef6 <__aeabi_fmul+0x1e2>
 8000eea:	2304      	movs	r3, #4
 8000eec:	4699      	mov	r9, r3
 8000eee:	3b03      	subs	r3, #3
 8000ef0:	2400      	movs	r4, #0
 8000ef2:	469a      	mov	sl, r3
 8000ef4:	e726      	b.n	8000d44 <__aeabi_fmul+0x30>
 8000ef6:	0030      	movs	r0, r6
 8000ef8:	f002 fbea 	bl	80036d0 <__clzsi2>
 8000efc:	2476      	movs	r4, #118	@ 0x76
 8000efe:	1f43      	subs	r3, r0, #5
 8000f00:	409e      	lsls	r6, r3
 8000f02:	2300      	movs	r3, #0
 8000f04:	4264      	negs	r4, r4
 8000f06:	4699      	mov	r9, r3
 8000f08:	469a      	mov	sl, r3
 8000f0a:	1a24      	subs	r4, r4, r0
 8000f0c:	e71a      	b.n	8000d44 <__aeabi_fmul+0x30>
 8000f0e:	4640      	mov	r0, r8
 8000f10:	f002 fbde 	bl	80036d0 <__clzsi2>
 8000f14:	464b      	mov	r3, r9
 8000f16:	1a24      	subs	r4, r4, r0
 8000f18:	3c76      	subs	r4, #118	@ 0x76
 8000f1a:	2b0a      	cmp	r3, #10
 8000f1c:	dca1      	bgt.n	8000e62 <__aeabi_fmul+0x14e>
 8000f1e:	4643      	mov	r3, r8
 8000f20:	3805      	subs	r0, #5
 8000f22:	4083      	lsls	r3, r0
 8000f24:	407d      	eors	r5, r7
 8000f26:	4698      	mov	r8, r3
 8000f28:	b2ea      	uxtb	r2, r5
 8000f2a:	e724      	b.n	8000d76 <__aeabi_fmul+0x62>
 8000f2c:	464a      	mov	r2, r9
 8000f2e:	3302      	adds	r3, #2
 8000f30:	4313      	orrs	r3, r2
 8000f32:	002a      	movs	r2, r5
 8000f34:	407a      	eors	r2, r7
 8000f36:	b2d2      	uxtb	r2, r2
 8000f38:	2b0a      	cmp	r3, #10
 8000f3a:	dc92      	bgt.n	8000e62 <__aeabi_fmul+0x14e>
 8000f3c:	4649      	mov	r1, r9
 8000f3e:	0015      	movs	r5, r2
 8000f40:	2900      	cmp	r1, #0
 8000f42:	d026      	beq.n	8000f92 <__aeabi_fmul+0x27e>
 8000f44:	4699      	mov	r9, r3
 8000f46:	2002      	movs	r0, #2
 8000f48:	e719      	b.n	8000d7e <__aeabi_fmul+0x6a>
 8000f4a:	230c      	movs	r3, #12
 8000f4c:	4699      	mov	r9, r3
 8000f4e:	3b09      	subs	r3, #9
 8000f50:	24ff      	movs	r4, #255	@ 0xff
 8000f52:	469a      	mov	sl, r3
 8000f54:	e6f6      	b.n	8000d44 <__aeabi_fmul+0x30>
 8000f56:	0015      	movs	r5, r2
 8000f58:	0021      	movs	r1, r4
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	2b1b      	cmp	r3, #27
 8000f60:	dd00      	ble.n	8000f64 <__aeabi_fmul+0x250>
 8000f62:	e786      	b.n	8000e72 <__aeabi_fmul+0x15e>
 8000f64:	319e      	adds	r1, #158	@ 0x9e
 8000f66:	0032      	movs	r2, r6
 8000f68:	408e      	lsls	r6, r1
 8000f6a:	40da      	lsrs	r2, r3
 8000f6c:	1e73      	subs	r3, r6, #1
 8000f6e:	419e      	sbcs	r6, r3
 8000f70:	4332      	orrs	r2, r6
 8000f72:	0753      	lsls	r3, r2, #29
 8000f74:	d004      	beq.n	8000f80 <__aeabi_fmul+0x26c>
 8000f76:	230f      	movs	r3, #15
 8000f78:	4013      	ands	r3, r2
 8000f7a:	2b04      	cmp	r3, #4
 8000f7c:	d000      	beq.n	8000f80 <__aeabi_fmul+0x26c>
 8000f7e:	3204      	adds	r2, #4
 8000f80:	0153      	lsls	r3, r2, #5
 8000f82:	d510      	bpl.n	8000fa6 <__aeabi_fmul+0x292>
 8000f84:	2301      	movs	r3, #1
 8000f86:	2200      	movs	r2, #0
 8000f88:	e792      	b.n	8000eb0 <__aeabi_fmul+0x19c>
 8000f8a:	003d      	movs	r5, r7
 8000f8c:	4646      	mov	r6, r8
 8000f8e:	4682      	mov	sl, r0
 8000f90:	e767      	b.n	8000e62 <__aeabi_fmul+0x14e>
 8000f92:	23ff      	movs	r3, #255	@ 0xff
 8000f94:	2200      	movs	r2, #0
 8000f96:	e78b      	b.n	8000eb0 <__aeabi_fmul+0x19c>
 8000f98:	2280      	movs	r2, #128	@ 0x80
 8000f9a:	2500      	movs	r5, #0
 8000f9c:	03d2      	lsls	r2, r2, #15
 8000f9e:	e786      	b.n	8000eae <__aeabi_fmul+0x19a>
 8000fa0:	003d      	movs	r5, r7
 8000fa2:	431a      	orrs	r2, r3
 8000fa4:	e783      	b.n	8000eae <__aeabi_fmul+0x19a>
 8000fa6:	0192      	lsls	r2, r2, #6
 8000fa8:	2300      	movs	r3, #0
 8000faa:	0a52      	lsrs	r2, r2, #9
 8000fac:	e780      	b.n	8000eb0 <__aeabi_fmul+0x19c>
 8000fae:	003d      	movs	r5, r7
 8000fb0:	4646      	mov	r6, r8
 8000fb2:	e777      	b.n	8000ea4 <__aeabi_fmul+0x190>
 8000fb4:	002a      	movs	r2, r5
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	407a      	eors	r2, r7
 8000fba:	408b      	lsls	r3, r1
 8000fbc:	2003      	movs	r0, #3
 8000fbe:	b2d2      	uxtb	r2, r2
 8000fc0:	e6e9      	b.n	8000d96 <__aeabi_fmul+0x82>
 8000fc2:	46c0      	nop			@ (mov r8, r8)
 8000fc4:	f7ffffff 	.word	0xf7ffffff

08000fc8 <__aeabi_fsub>:
 8000fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fca:	4647      	mov	r7, r8
 8000fcc:	46ce      	mov	lr, r9
 8000fce:	0243      	lsls	r3, r0, #9
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	0a5f      	lsrs	r7, r3, #9
 8000fd4:	099b      	lsrs	r3, r3, #6
 8000fd6:	0045      	lsls	r5, r0, #1
 8000fd8:	004a      	lsls	r2, r1, #1
 8000fda:	469c      	mov	ip, r3
 8000fdc:	024b      	lsls	r3, r1, #9
 8000fde:	0fc4      	lsrs	r4, r0, #31
 8000fe0:	0fce      	lsrs	r6, r1, #31
 8000fe2:	0e2d      	lsrs	r5, r5, #24
 8000fe4:	0a58      	lsrs	r0, r3, #9
 8000fe6:	0e12      	lsrs	r2, r2, #24
 8000fe8:	0999      	lsrs	r1, r3, #6
 8000fea:	2aff      	cmp	r2, #255	@ 0xff
 8000fec:	d06b      	beq.n	80010c6 <__aeabi_fsub+0xfe>
 8000fee:	2301      	movs	r3, #1
 8000ff0:	405e      	eors	r6, r3
 8000ff2:	1aab      	subs	r3, r5, r2
 8000ff4:	42b4      	cmp	r4, r6
 8000ff6:	d04b      	beq.n	8001090 <__aeabi_fsub+0xc8>
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	dc00      	bgt.n	8000ffe <__aeabi_fsub+0x36>
 8000ffc:	e0ff      	b.n	80011fe <__aeabi_fsub+0x236>
 8000ffe:	2a00      	cmp	r2, #0
 8001000:	d100      	bne.n	8001004 <__aeabi_fsub+0x3c>
 8001002:	e088      	b.n	8001116 <__aeabi_fsub+0x14e>
 8001004:	2dff      	cmp	r5, #255	@ 0xff
 8001006:	d100      	bne.n	800100a <__aeabi_fsub+0x42>
 8001008:	e0ef      	b.n	80011ea <__aeabi_fsub+0x222>
 800100a:	2280      	movs	r2, #128	@ 0x80
 800100c:	04d2      	lsls	r2, r2, #19
 800100e:	4311      	orrs	r1, r2
 8001010:	2001      	movs	r0, #1
 8001012:	2b1b      	cmp	r3, #27
 8001014:	dc08      	bgt.n	8001028 <__aeabi_fsub+0x60>
 8001016:	0008      	movs	r0, r1
 8001018:	2220      	movs	r2, #32
 800101a:	40d8      	lsrs	r0, r3
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	4099      	lsls	r1, r3
 8001020:	000b      	movs	r3, r1
 8001022:	1e5a      	subs	r2, r3, #1
 8001024:	4193      	sbcs	r3, r2
 8001026:	4318      	orrs	r0, r3
 8001028:	4663      	mov	r3, ip
 800102a:	1a1b      	subs	r3, r3, r0
 800102c:	469c      	mov	ip, r3
 800102e:	4663      	mov	r3, ip
 8001030:	015b      	lsls	r3, r3, #5
 8001032:	d400      	bmi.n	8001036 <__aeabi_fsub+0x6e>
 8001034:	e0cd      	b.n	80011d2 <__aeabi_fsub+0x20a>
 8001036:	4663      	mov	r3, ip
 8001038:	019f      	lsls	r7, r3, #6
 800103a:	09bf      	lsrs	r7, r7, #6
 800103c:	0038      	movs	r0, r7
 800103e:	f002 fb47 	bl	80036d0 <__clzsi2>
 8001042:	003b      	movs	r3, r7
 8001044:	3805      	subs	r0, #5
 8001046:	4083      	lsls	r3, r0
 8001048:	4285      	cmp	r5, r0
 800104a:	dc00      	bgt.n	800104e <__aeabi_fsub+0x86>
 800104c:	e0a2      	b.n	8001194 <__aeabi_fsub+0x1cc>
 800104e:	4ab7      	ldr	r2, [pc, #732]	@ (800132c <__aeabi_fsub+0x364>)
 8001050:	1a2d      	subs	r5, r5, r0
 8001052:	401a      	ands	r2, r3
 8001054:	4694      	mov	ip, r2
 8001056:	075a      	lsls	r2, r3, #29
 8001058:	d100      	bne.n	800105c <__aeabi_fsub+0x94>
 800105a:	e0c3      	b.n	80011e4 <__aeabi_fsub+0x21c>
 800105c:	220f      	movs	r2, #15
 800105e:	4013      	ands	r3, r2
 8001060:	2b04      	cmp	r3, #4
 8001062:	d100      	bne.n	8001066 <__aeabi_fsub+0x9e>
 8001064:	e0be      	b.n	80011e4 <__aeabi_fsub+0x21c>
 8001066:	2304      	movs	r3, #4
 8001068:	4698      	mov	r8, r3
 800106a:	44c4      	add	ip, r8
 800106c:	4663      	mov	r3, ip
 800106e:	015b      	lsls	r3, r3, #5
 8001070:	d400      	bmi.n	8001074 <__aeabi_fsub+0xac>
 8001072:	e0b7      	b.n	80011e4 <__aeabi_fsub+0x21c>
 8001074:	1c68      	adds	r0, r5, #1
 8001076:	2dfe      	cmp	r5, #254	@ 0xfe
 8001078:	d000      	beq.n	800107c <__aeabi_fsub+0xb4>
 800107a:	e0a5      	b.n	80011c8 <__aeabi_fsub+0x200>
 800107c:	20ff      	movs	r0, #255	@ 0xff
 800107e:	2200      	movs	r2, #0
 8001080:	05c0      	lsls	r0, r0, #23
 8001082:	4310      	orrs	r0, r2
 8001084:	07e4      	lsls	r4, r4, #31
 8001086:	4320      	orrs	r0, r4
 8001088:	bcc0      	pop	{r6, r7}
 800108a:	46b9      	mov	r9, r7
 800108c:	46b0      	mov	r8, r6
 800108e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001090:	2b00      	cmp	r3, #0
 8001092:	dc00      	bgt.n	8001096 <__aeabi_fsub+0xce>
 8001094:	e1eb      	b.n	800146e <__aeabi_fsub+0x4a6>
 8001096:	2a00      	cmp	r2, #0
 8001098:	d046      	beq.n	8001128 <__aeabi_fsub+0x160>
 800109a:	2dff      	cmp	r5, #255	@ 0xff
 800109c:	d100      	bne.n	80010a0 <__aeabi_fsub+0xd8>
 800109e:	e0a4      	b.n	80011ea <__aeabi_fsub+0x222>
 80010a0:	2280      	movs	r2, #128	@ 0x80
 80010a2:	04d2      	lsls	r2, r2, #19
 80010a4:	4311      	orrs	r1, r2
 80010a6:	2b1b      	cmp	r3, #27
 80010a8:	dc00      	bgt.n	80010ac <__aeabi_fsub+0xe4>
 80010aa:	e0fb      	b.n	80012a4 <__aeabi_fsub+0x2dc>
 80010ac:	2305      	movs	r3, #5
 80010ae:	4698      	mov	r8, r3
 80010b0:	002b      	movs	r3, r5
 80010b2:	44c4      	add	ip, r8
 80010b4:	4662      	mov	r2, ip
 80010b6:	08d7      	lsrs	r7, r2, #3
 80010b8:	2bff      	cmp	r3, #255	@ 0xff
 80010ba:	d100      	bne.n	80010be <__aeabi_fsub+0xf6>
 80010bc:	e095      	b.n	80011ea <__aeabi_fsub+0x222>
 80010be:	027a      	lsls	r2, r7, #9
 80010c0:	0a52      	lsrs	r2, r2, #9
 80010c2:	b2d8      	uxtb	r0, r3
 80010c4:	e7dc      	b.n	8001080 <__aeabi_fsub+0xb8>
 80010c6:	002b      	movs	r3, r5
 80010c8:	3bff      	subs	r3, #255	@ 0xff
 80010ca:	4699      	mov	r9, r3
 80010cc:	2900      	cmp	r1, #0
 80010ce:	d118      	bne.n	8001102 <__aeabi_fsub+0x13a>
 80010d0:	2301      	movs	r3, #1
 80010d2:	405e      	eors	r6, r3
 80010d4:	42b4      	cmp	r4, r6
 80010d6:	d100      	bne.n	80010da <__aeabi_fsub+0x112>
 80010d8:	e0ca      	b.n	8001270 <__aeabi_fsub+0x2a8>
 80010da:	464b      	mov	r3, r9
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d02d      	beq.n	800113c <__aeabi_fsub+0x174>
 80010e0:	2d00      	cmp	r5, #0
 80010e2:	d000      	beq.n	80010e6 <__aeabi_fsub+0x11e>
 80010e4:	e13c      	b.n	8001360 <__aeabi_fsub+0x398>
 80010e6:	23ff      	movs	r3, #255	@ 0xff
 80010e8:	4664      	mov	r4, ip
 80010ea:	2c00      	cmp	r4, #0
 80010ec:	d100      	bne.n	80010f0 <__aeabi_fsub+0x128>
 80010ee:	e15f      	b.n	80013b0 <__aeabi_fsub+0x3e8>
 80010f0:	1e5d      	subs	r5, r3, #1
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d100      	bne.n	80010f8 <__aeabi_fsub+0x130>
 80010f6:	e174      	b.n	80013e2 <__aeabi_fsub+0x41a>
 80010f8:	0034      	movs	r4, r6
 80010fa:	2bff      	cmp	r3, #255	@ 0xff
 80010fc:	d074      	beq.n	80011e8 <__aeabi_fsub+0x220>
 80010fe:	002b      	movs	r3, r5
 8001100:	e103      	b.n	800130a <__aeabi_fsub+0x342>
 8001102:	42b4      	cmp	r4, r6
 8001104:	d100      	bne.n	8001108 <__aeabi_fsub+0x140>
 8001106:	e09c      	b.n	8001242 <__aeabi_fsub+0x27a>
 8001108:	2b00      	cmp	r3, #0
 800110a:	d017      	beq.n	800113c <__aeabi_fsub+0x174>
 800110c:	2d00      	cmp	r5, #0
 800110e:	d0ea      	beq.n	80010e6 <__aeabi_fsub+0x11e>
 8001110:	0007      	movs	r7, r0
 8001112:	0034      	movs	r4, r6
 8001114:	e06c      	b.n	80011f0 <__aeabi_fsub+0x228>
 8001116:	2900      	cmp	r1, #0
 8001118:	d0cc      	beq.n	80010b4 <__aeabi_fsub+0xec>
 800111a:	1e5a      	subs	r2, r3, #1
 800111c:	2b01      	cmp	r3, #1
 800111e:	d02b      	beq.n	8001178 <__aeabi_fsub+0x1b0>
 8001120:	2bff      	cmp	r3, #255	@ 0xff
 8001122:	d062      	beq.n	80011ea <__aeabi_fsub+0x222>
 8001124:	0013      	movs	r3, r2
 8001126:	e773      	b.n	8001010 <__aeabi_fsub+0x48>
 8001128:	2900      	cmp	r1, #0
 800112a:	d0c3      	beq.n	80010b4 <__aeabi_fsub+0xec>
 800112c:	1e5a      	subs	r2, r3, #1
 800112e:	2b01      	cmp	r3, #1
 8001130:	d100      	bne.n	8001134 <__aeabi_fsub+0x16c>
 8001132:	e11e      	b.n	8001372 <__aeabi_fsub+0x3aa>
 8001134:	2bff      	cmp	r3, #255	@ 0xff
 8001136:	d058      	beq.n	80011ea <__aeabi_fsub+0x222>
 8001138:	0013      	movs	r3, r2
 800113a:	e7b4      	b.n	80010a6 <__aeabi_fsub+0xde>
 800113c:	22fe      	movs	r2, #254	@ 0xfe
 800113e:	1c6b      	adds	r3, r5, #1
 8001140:	421a      	tst	r2, r3
 8001142:	d10d      	bne.n	8001160 <__aeabi_fsub+0x198>
 8001144:	2d00      	cmp	r5, #0
 8001146:	d060      	beq.n	800120a <__aeabi_fsub+0x242>
 8001148:	4663      	mov	r3, ip
 800114a:	2b00      	cmp	r3, #0
 800114c:	d000      	beq.n	8001150 <__aeabi_fsub+0x188>
 800114e:	e120      	b.n	8001392 <__aeabi_fsub+0x3ca>
 8001150:	2900      	cmp	r1, #0
 8001152:	d000      	beq.n	8001156 <__aeabi_fsub+0x18e>
 8001154:	e128      	b.n	80013a8 <__aeabi_fsub+0x3e0>
 8001156:	2280      	movs	r2, #128	@ 0x80
 8001158:	2400      	movs	r4, #0
 800115a:	20ff      	movs	r0, #255	@ 0xff
 800115c:	03d2      	lsls	r2, r2, #15
 800115e:	e78f      	b.n	8001080 <__aeabi_fsub+0xb8>
 8001160:	4663      	mov	r3, ip
 8001162:	1a5f      	subs	r7, r3, r1
 8001164:	017b      	lsls	r3, r7, #5
 8001166:	d500      	bpl.n	800116a <__aeabi_fsub+0x1a2>
 8001168:	e0fe      	b.n	8001368 <__aeabi_fsub+0x3a0>
 800116a:	2f00      	cmp	r7, #0
 800116c:	d000      	beq.n	8001170 <__aeabi_fsub+0x1a8>
 800116e:	e765      	b.n	800103c <__aeabi_fsub+0x74>
 8001170:	2400      	movs	r4, #0
 8001172:	2000      	movs	r0, #0
 8001174:	2200      	movs	r2, #0
 8001176:	e783      	b.n	8001080 <__aeabi_fsub+0xb8>
 8001178:	4663      	mov	r3, ip
 800117a:	1a59      	subs	r1, r3, r1
 800117c:	014b      	lsls	r3, r1, #5
 800117e:	d400      	bmi.n	8001182 <__aeabi_fsub+0x1ba>
 8001180:	e119      	b.n	80013b6 <__aeabi_fsub+0x3ee>
 8001182:	018f      	lsls	r7, r1, #6
 8001184:	09bf      	lsrs	r7, r7, #6
 8001186:	0038      	movs	r0, r7
 8001188:	f002 faa2 	bl	80036d0 <__clzsi2>
 800118c:	003b      	movs	r3, r7
 800118e:	3805      	subs	r0, #5
 8001190:	4083      	lsls	r3, r0
 8001192:	2501      	movs	r5, #1
 8001194:	2220      	movs	r2, #32
 8001196:	1b40      	subs	r0, r0, r5
 8001198:	3001      	adds	r0, #1
 800119a:	1a12      	subs	r2, r2, r0
 800119c:	0019      	movs	r1, r3
 800119e:	4093      	lsls	r3, r2
 80011a0:	40c1      	lsrs	r1, r0
 80011a2:	1e5a      	subs	r2, r3, #1
 80011a4:	4193      	sbcs	r3, r2
 80011a6:	4319      	orrs	r1, r3
 80011a8:	468c      	mov	ip, r1
 80011aa:	1e0b      	subs	r3, r1, #0
 80011ac:	d0e1      	beq.n	8001172 <__aeabi_fsub+0x1aa>
 80011ae:	075b      	lsls	r3, r3, #29
 80011b0:	d100      	bne.n	80011b4 <__aeabi_fsub+0x1ec>
 80011b2:	e152      	b.n	800145a <__aeabi_fsub+0x492>
 80011b4:	230f      	movs	r3, #15
 80011b6:	2500      	movs	r5, #0
 80011b8:	400b      	ands	r3, r1
 80011ba:	2b04      	cmp	r3, #4
 80011bc:	d000      	beq.n	80011c0 <__aeabi_fsub+0x1f8>
 80011be:	e752      	b.n	8001066 <__aeabi_fsub+0x9e>
 80011c0:	2001      	movs	r0, #1
 80011c2:	014a      	lsls	r2, r1, #5
 80011c4:	d400      	bmi.n	80011c8 <__aeabi_fsub+0x200>
 80011c6:	e092      	b.n	80012ee <__aeabi_fsub+0x326>
 80011c8:	b2c0      	uxtb	r0, r0
 80011ca:	4663      	mov	r3, ip
 80011cc:	019a      	lsls	r2, r3, #6
 80011ce:	0a52      	lsrs	r2, r2, #9
 80011d0:	e756      	b.n	8001080 <__aeabi_fsub+0xb8>
 80011d2:	4663      	mov	r3, ip
 80011d4:	075b      	lsls	r3, r3, #29
 80011d6:	d005      	beq.n	80011e4 <__aeabi_fsub+0x21c>
 80011d8:	230f      	movs	r3, #15
 80011da:	4662      	mov	r2, ip
 80011dc:	4013      	ands	r3, r2
 80011de:	2b04      	cmp	r3, #4
 80011e0:	d000      	beq.n	80011e4 <__aeabi_fsub+0x21c>
 80011e2:	e740      	b.n	8001066 <__aeabi_fsub+0x9e>
 80011e4:	002b      	movs	r3, r5
 80011e6:	e765      	b.n	80010b4 <__aeabi_fsub+0xec>
 80011e8:	0007      	movs	r7, r0
 80011ea:	2f00      	cmp	r7, #0
 80011ec:	d100      	bne.n	80011f0 <__aeabi_fsub+0x228>
 80011ee:	e745      	b.n	800107c <__aeabi_fsub+0xb4>
 80011f0:	2280      	movs	r2, #128	@ 0x80
 80011f2:	03d2      	lsls	r2, r2, #15
 80011f4:	433a      	orrs	r2, r7
 80011f6:	0252      	lsls	r2, r2, #9
 80011f8:	20ff      	movs	r0, #255	@ 0xff
 80011fa:	0a52      	lsrs	r2, r2, #9
 80011fc:	e740      	b.n	8001080 <__aeabi_fsub+0xb8>
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d179      	bne.n	80012f6 <__aeabi_fsub+0x32e>
 8001202:	22fe      	movs	r2, #254	@ 0xfe
 8001204:	1c6b      	adds	r3, r5, #1
 8001206:	421a      	tst	r2, r3
 8001208:	d1aa      	bne.n	8001160 <__aeabi_fsub+0x198>
 800120a:	4663      	mov	r3, ip
 800120c:	2b00      	cmp	r3, #0
 800120e:	d100      	bne.n	8001212 <__aeabi_fsub+0x24a>
 8001210:	e0f5      	b.n	80013fe <__aeabi_fsub+0x436>
 8001212:	2900      	cmp	r1, #0
 8001214:	d100      	bne.n	8001218 <__aeabi_fsub+0x250>
 8001216:	e0d1      	b.n	80013bc <__aeabi_fsub+0x3f4>
 8001218:	1a5f      	subs	r7, r3, r1
 800121a:	2380      	movs	r3, #128	@ 0x80
 800121c:	04db      	lsls	r3, r3, #19
 800121e:	421f      	tst	r7, r3
 8001220:	d100      	bne.n	8001224 <__aeabi_fsub+0x25c>
 8001222:	e10e      	b.n	8001442 <__aeabi_fsub+0x47a>
 8001224:	4662      	mov	r2, ip
 8001226:	2401      	movs	r4, #1
 8001228:	1a8a      	subs	r2, r1, r2
 800122a:	4694      	mov	ip, r2
 800122c:	2000      	movs	r0, #0
 800122e:	4034      	ands	r4, r6
 8001230:	2a00      	cmp	r2, #0
 8001232:	d100      	bne.n	8001236 <__aeabi_fsub+0x26e>
 8001234:	e724      	b.n	8001080 <__aeabi_fsub+0xb8>
 8001236:	2001      	movs	r0, #1
 8001238:	421a      	tst	r2, r3
 800123a:	d1c6      	bne.n	80011ca <__aeabi_fsub+0x202>
 800123c:	2300      	movs	r3, #0
 800123e:	08d7      	lsrs	r7, r2, #3
 8001240:	e73d      	b.n	80010be <__aeabi_fsub+0xf6>
 8001242:	2b00      	cmp	r3, #0
 8001244:	d017      	beq.n	8001276 <__aeabi_fsub+0x2ae>
 8001246:	2d00      	cmp	r5, #0
 8001248:	d000      	beq.n	800124c <__aeabi_fsub+0x284>
 800124a:	e0af      	b.n	80013ac <__aeabi_fsub+0x3e4>
 800124c:	23ff      	movs	r3, #255	@ 0xff
 800124e:	4665      	mov	r5, ip
 8001250:	2d00      	cmp	r5, #0
 8001252:	d100      	bne.n	8001256 <__aeabi_fsub+0x28e>
 8001254:	e0ad      	b.n	80013b2 <__aeabi_fsub+0x3ea>
 8001256:	1e5e      	subs	r6, r3, #1
 8001258:	2b01      	cmp	r3, #1
 800125a:	d100      	bne.n	800125e <__aeabi_fsub+0x296>
 800125c:	e089      	b.n	8001372 <__aeabi_fsub+0x3aa>
 800125e:	2bff      	cmp	r3, #255	@ 0xff
 8001260:	d0c2      	beq.n	80011e8 <__aeabi_fsub+0x220>
 8001262:	2e1b      	cmp	r6, #27
 8001264:	dc00      	bgt.n	8001268 <__aeabi_fsub+0x2a0>
 8001266:	e0ab      	b.n	80013c0 <__aeabi_fsub+0x3f8>
 8001268:	1d4b      	adds	r3, r1, #5
 800126a:	469c      	mov	ip, r3
 800126c:	0013      	movs	r3, r2
 800126e:	e721      	b.n	80010b4 <__aeabi_fsub+0xec>
 8001270:	464b      	mov	r3, r9
 8001272:	2b00      	cmp	r3, #0
 8001274:	d170      	bne.n	8001358 <__aeabi_fsub+0x390>
 8001276:	22fe      	movs	r2, #254	@ 0xfe
 8001278:	1c6b      	adds	r3, r5, #1
 800127a:	421a      	tst	r2, r3
 800127c:	d15e      	bne.n	800133c <__aeabi_fsub+0x374>
 800127e:	2d00      	cmp	r5, #0
 8001280:	d000      	beq.n	8001284 <__aeabi_fsub+0x2bc>
 8001282:	e0c3      	b.n	800140c <__aeabi_fsub+0x444>
 8001284:	4663      	mov	r3, ip
 8001286:	2b00      	cmp	r3, #0
 8001288:	d100      	bne.n	800128c <__aeabi_fsub+0x2c4>
 800128a:	e0d0      	b.n	800142e <__aeabi_fsub+0x466>
 800128c:	2900      	cmp	r1, #0
 800128e:	d100      	bne.n	8001292 <__aeabi_fsub+0x2ca>
 8001290:	e094      	b.n	80013bc <__aeabi_fsub+0x3f4>
 8001292:	000a      	movs	r2, r1
 8001294:	4462      	add	r2, ip
 8001296:	0153      	lsls	r3, r2, #5
 8001298:	d400      	bmi.n	800129c <__aeabi_fsub+0x2d4>
 800129a:	e0d8      	b.n	800144e <__aeabi_fsub+0x486>
 800129c:	0192      	lsls	r2, r2, #6
 800129e:	2001      	movs	r0, #1
 80012a0:	0a52      	lsrs	r2, r2, #9
 80012a2:	e6ed      	b.n	8001080 <__aeabi_fsub+0xb8>
 80012a4:	0008      	movs	r0, r1
 80012a6:	2220      	movs	r2, #32
 80012a8:	40d8      	lsrs	r0, r3
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	4099      	lsls	r1, r3
 80012ae:	000b      	movs	r3, r1
 80012b0:	1e5a      	subs	r2, r3, #1
 80012b2:	4193      	sbcs	r3, r2
 80012b4:	4303      	orrs	r3, r0
 80012b6:	449c      	add	ip, r3
 80012b8:	4663      	mov	r3, ip
 80012ba:	015b      	lsls	r3, r3, #5
 80012bc:	d589      	bpl.n	80011d2 <__aeabi_fsub+0x20a>
 80012be:	3501      	adds	r5, #1
 80012c0:	2dff      	cmp	r5, #255	@ 0xff
 80012c2:	d100      	bne.n	80012c6 <__aeabi_fsub+0x2fe>
 80012c4:	e6da      	b.n	800107c <__aeabi_fsub+0xb4>
 80012c6:	4662      	mov	r2, ip
 80012c8:	2301      	movs	r3, #1
 80012ca:	4919      	ldr	r1, [pc, #100]	@ (8001330 <__aeabi_fsub+0x368>)
 80012cc:	4013      	ands	r3, r2
 80012ce:	0852      	lsrs	r2, r2, #1
 80012d0:	400a      	ands	r2, r1
 80012d2:	431a      	orrs	r2, r3
 80012d4:	0013      	movs	r3, r2
 80012d6:	4694      	mov	ip, r2
 80012d8:	075b      	lsls	r3, r3, #29
 80012da:	d004      	beq.n	80012e6 <__aeabi_fsub+0x31e>
 80012dc:	230f      	movs	r3, #15
 80012de:	4013      	ands	r3, r2
 80012e0:	2b04      	cmp	r3, #4
 80012e2:	d000      	beq.n	80012e6 <__aeabi_fsub+0x31e>
 80012e4:	e6bf      	b.n	8001066 <__aeabi_fsub+0x9e>
 80012e6:	4663      	mov	r3, ip
 80012e8:	015b      	lsls	r3, r3, #5
 80012ea:	d500      	bpl.n	80012ee <__aeabi_fsub+0x326>
 80012ec:	e6c2      	b.n	8001074 <__aeabi_fsub+0xac>
 80012ee:	4663      	mov	r3, ip
 80012f0:	08df      	lsrs	r7, r3, #3
 80012f2:	002b      	movs	r3, r5
 80012f4:	e6e3      	b.n	80010be <__aeabi_fsub+0xf6>
 80012f6:	1b53      	subs	r3, r2, r5
 80012f8:	2d00      	cmp	r5, #0
 80012fa:	d100      	bne.n	80012fe <__aeabi_fsub+0x336>
 80012fc:	e6f4      	b.n	80010e8 <__aeabi_fsub+0x120>
 80012fe:	2080      	movs	r0, #128	@ 0x80
 8001300:	4664      	mov	r4, ip
 8001302:	04c0      	lsls	r0, r0, #19
 8001304:	4304      	orrs	r4, r0
 8001306:	46a4      	mov	ip, r4
 8001308:	0034      	movs	r4, r6
 800130a:	2001      	movs	r0, #1
 800130c:	2b1b      	cmp	r3, #27
 800130e:	dc09      	bgt.n	8001324 <__aeabi_fsub+0x35c>
 8001310:	2520      	movs	r5, #32
 8001312:	4660      	mov	r0, ip
 8001314:	40d8      	lsrs	r0, r3
 8001316:	1aeb      	subs	r3, r5, r3
 8001318:	4665      	mov	r5, ip
 800131a:	409d      	lsls	r5, r3
 800131c:	002b      	movs	r3, r5
 800131e:	1e5d      	subs	r5, r3, #1
 8001320:	41ab      	sbcs	r3, r5
 8001322:	4318      	orrs	r0, r3
 8001324:	1a0b      	subs	r3, r1, r0
 8001326:	469c      	mov	ip, r3
 8001328:	0015      	movs	r5, r2
 800132a:	e680      	b.n	800102e <__aeabi_fsub+0x66>
 800132c:	fbffffff 	.word	0xfbffffff
 8001330:	7dffffff 	.word	0x7dffffff
 8001334:	22fe      	movs	r2, #254	@ 0xfe
 8001336:	1c6b      	adds	r3, r5, #1
 8001338:	4213      	tst	r3, r2
 800133a:	d0a3      	beq.n	8001284 <__aeabi_fsub+0x2bc>
 800133c:	2bff      	cmp	r3, #255	@ 0xff
 800133e:	d100      	bne.n	8001342 <__aeabi_fsub+0x37a>
 8001340:	e69c      	b.n	800107c <__aeabi_fsub+0xb4>
 8001342:	4461      	add	r1, ip
 8001344:	0849      	lsrs	r1, r1, #1
 8001346:	074a      	lsls	r2, r1, #29
 8001348:	d049      	beq.n	80013de <__aeabi_fsub+0x416>
 800134a:	220f      	movs	r2, #15
 800134c:	400a      	ands	r2, r1
 800134e:	2a04      	cmp	r2, #4
 8001350:	d045      	beq.n	80013de <__aeabi_fsub+0x416>
 8001352:	1d0a      	adds	r2, r1, #4
 8001354:	4694      	mov	ip, r2
 8001356:	e6ad      	b.n	80010b4 <__aeabi_fsub+0xec>
 8001358:	2d00      	cmp	r5, #0
 800135a:	d100      	bne.n	800135e <__aeabi_fsub+0x396>
 800135c:	e776      	b.n	800124c <__aeabi_fsub+0x284>
 800135e:	e68d      	b.n	800107c <__aeabi_fsub+0xb4>
 8001360:	0034      	movs	r4, r6
 8001362:	20ff      	movs	r0, #255	@ 0xff
 8001364:	2200      	movs	r2, #0
 8001366:	e68b      	b.n	8001080 <__aeabi_fsub+0xb8>
 8001368:	4663      	mov	r3, ip
 800136a:	2401      	movs	r4, #1
 800136c:	1acf      	subs	r7, r1, r3
 800136e:	4034      	ands	r4, r6
 8001370:	e664      	b.n	800103c <__aeabi_fsub+0x74>
 8001372:	4461      	add	r1, ip
 8001374:	014b      	lsls	r3, r1, #5
 8001376:	d56d      	bpl.n	8001454 <__aeabi_fsub+0x48c>
 8001378:	0848      	lsrs	r0, r1, #1
 800137a:	4944      	ldr	r1, [pc, #272]	@ (800148c <__aeabi_fsub+0x4c4>)
 800137c:	4001      	ands	r1, r0
 800137e:	0743      	lsls	r3, r0, #29
 8001380:	d02c      	beq.n	80013dc <__aeabi_fsub+0x414>
 8001382:	230f      	movs	r3, #15
 8001384:	4003      	ands	r3, r0
 8001386:	2b04      	cmp	r3, #4
 8001388:	d028      	beq.n	80013dc <__aeabi_fsub+0x414>
 800138a:	1d0b      	adds	r3, r1, #4
 800138c:	469c      	mov	ip, r3
 800138e:	2302      	movs	r3, #2
 8001390:	e690      	b.n	80010b4 <__aeabi_fsub+0xec>
 8001392:	2900      	cmp	r1, #0
 8001394:	d100      	bne.n	8001398 <__aeabi_fsub+0x3d0>
 8001396:	e72b      	b.n	80011f0 <__aeabi_fsub+0x228>
 8001398:	2380      	movs	r3, #128	@ 0x80
 800139a:	03db      	lsls	r3, r3, #15
 800139c:	429f      	cmp	r7, r3
 800139e:	d200      	bcs.n	80013a2 <__aeabi_fsub+0x3da>
 80013a0:	e726      	b.n	80011f0 <__aeabi_fsub+0x228>
 80013a2:	4298      	cmp	r0, r3
 80013a4:	d300      	bcc.n	80013a8 <__aeabi_fsub+0x3e0>
 80013a6:	e723      	b.n	80011f0 <__aeabi_fsub+0x228>
 80013a8:	2401      	movs	r4, #1
 80013aa:	4034      	ands	r4, r6
 80013ac:	0007      	movs	r7, r0
 80013ae:	e71f      	b.n	80011f0 <__aeabi_fsub+0x228>
 80013b0:	0034      	movs	r4, r6
 80013b2:	468c      	mov	ip, r1
 80013b4:	e67e      	b.n	80010b4 <__aeabi_fsub+0xec>
 80013b6:	2301      	movs	r3, #1
 80013b8:	08cf      	lsrs	r7, r1, #3
 80013ba:	e680      	b.n	80010be <__aeabi_fsub+0xf6>
 80013bc:	2300      	movs	r3, #0
 80013be:	e67e      	b.n	80010be <__aeabi_fsub+0xf6>
 80013c0:	2020      	movs	r0, #32
 80013c2:	4665      	mov	r5, ip
 80013c4:	1b80      	subs	r0, r0, r6
 80013c6:	4085      	lsls	r5, r0
 80013c8:	4663      	mov	r3, ip
 80013ca:	0028      	movs	r0, r5
 80013cc:	40f3      	lsrs	r3, r6
 80013ce:	1e45      	subs	r5, r0, #1
 80013d0:	41a8      	sbcs	r0, r5
 80013d2:	4303      	orrs	r3, r0
 80013d4:	469c      	mov	ip, r3
 80013d6:	0015      	movs	r5, r2
 80013d8:	448c      	add	ip, r1
 80013da:	e76d      	b.n	80012b8 <__aeabi_fsub+0x2f0>
 80013dc:	2302      	movs	r3, #2
 80013de:	08cf      	lsrs	r7, r1, #3
 80013e0:	e66d      	b.n	80010be <__aeabi_fsub+0xf6>
 80013e2:	1b0f      	subs	r7, r1, r4
 80013e4:	017b      	lsls	r3, r7, #5
 80013e6:	d528      	bpl.n	800143a <__aeabi_fsub+0x472>
 80013e8:	01bf      	lsls	r7, r7, #6
 80013ea:	09bf      	lsrs	r7, r7, #6
 80013ec:	0038      	movs	r0, r7
 80013ee:	f002 f96f 	bl	80036d0 <__clzsi2>
 80013f2:	003b      	movs	r3, r7
 80013f4:	3805      	subs	r0, #5
 80013f6:	4083      	lsls	r3, r0
 80013f8:	0034      	movs	r4, r6
 80013fa:	2501      	movs	r5, #1
 80013fc:	e6ca      	b.n	8001194 <__aeabi_fsub+0x1cc>
 80013fe:	2900      	cmp	r1, #0
 8001400:	d100      	bne.n	8001404 <__aeabi_fsub+0x43c>
 8001402:	e6b5      	b.n	8001170 <__aeabi_fsub+0x1a8>
 8001404:	2401      	movs	r4, #1
 8001406:	0007      	movs	r7, r0
 8001408:	4034      	ands	r4, r6
 800140a:	e658      	b.n	80010be <__aeabi_fsub+0xf6>
 800140c:	4663      	mov	r3, ip
 800140e:	2b00      	cmp	r3, #0
 8001410:	d100      	bne.n	8001414 <__aeabi_fsub+0x44c>
 8001412:	e6e9      	b.n	80011e8 <__aeabi_fsub+0x220>
 8001414:	2900      	cmp	r1, #0
 8001416:	d100      	bne.n	800141a <__aeabi_fsub+0x452>
 8001418:	e6ea      	b.n	80011f0 <__aeabi_fsub+0x228>
 800141a:	2380      	movs	r3, #128	@ 0x80
 800141c:	03db      	lsls	r3, r3, #15
 800141e:	429f      	cmp	r7, r3
 8001420:	d200      	bcs.n	8001424 <__aeabi_fsub+0x45c>
 8001422:	e6e5      	b.n	80011f0 <__aeabi_fsub+0x228>
 8001424:	4298      	cmp	r0, r3
 8001426:	d300      	bcc.n	800142a <__aeabi_fsub+0x462>
 8001428:	e6e2      	b.n	80011f0 <__aeabi_fsub+0x228>
 800142a:	0007      	movs	r7, r0
 800142c:	e6e0      	b.n	80011f0 <__aeabi_fsub+0x228>
 800142e:	2900      	cmp	r1, #0
 8001430:	d100      	bne.n	8001434 <__aeabi_fsub+0x46c>
 8001432:	e69e      	b.n	8001172 <__aeabi_fsub+0x1aa>
 8001434:	2300      	movs	r3, #0
 8001436:	08cf      	lsrs	r7, r1, #3
 8001438:	e641      	b.n	80010be <__aeabi_fsub+0xf6>
 800143a:	0034      	movs	r4, r6
 800143c:	2301      	movs	r3, #1
 800143e:	08ff      	lsrs	r7, r7, #3
 8001440:	e63d      	b.n	80010be <__aeabi_fsub+0xf6>
 8001442:	2f00      	cmp	r7, #0
 8001444:	d100      	bne.n	8001448 <__aeabi_fsub+0x480>
 8001446:	e693      	b.n	8001170 <__aeabi_fsub+0x1a8>
 8001448:	2300      	movs	r3, #0
 800144a:	08ff      	lsrs	r7, r7, #3
 800144c:	e637      	b.n	80010be <__aeabi_fsub+0xf6>
 800144e:	2300      	movs	r3, #0
 8001450:	08d7      	lsrs	r7, r2, #3
 8001452:	e634      	b.n	80010be <__aeabi_fsub+0xf6>
 8001454:	2301      	movs	r3, #1
 8001456:	08cf      	lsrs	r7, r1, #3
 8001458:	e631      	b.n	80010be <__aeabi_fsub+0xf6>
 800145a:	2280      	movs	r2, #128	@ 0x80
 800145c:	000b      	movs	r3, r1
 800145e:	04d2      	lsls	r2, r2, #19
 8001460:	2001      	movs	r0, #1
 8001462:	4013      	ands	r3, r2
 8001464:	4211      	tst	r1, r2
 8001466:	d000      	beq.n	800146a <__aeabi_fsub+0x4a2>
 8001468:	e6ae      	b.n	80011c8 <__aeabi_fsub+0x200>
 800146a:	08cf      	lsrs	r7, r1, #3
 800146c:	e627      	b.n	80010be <__aeabi_fsub+0xf6>
 800146e:	2b00      	cmp	r3, #0
 8001470:	d100      	bne.n	8001474 <__aeabi_fsub+0x4ac>
 8001472:	e75f      	b.n	8001334 <__aeabi_fsub+0x36c>
 8001474:	1b56      	subs	r6, r2, r5
 8001476:	2d00      	cmp	r5, #0
 8001478:	d101      	bne.n	800147e <__aeabi_fsub+0x4b6>
 800147a:	0033      	movs	r3, r6
 800147c:	e6e7      	b.n	800124e <__aeabi_fsub+0x286>
 800147e:	2380      	movs	r3, #128	@ 0x80
 8001480:	4660      	mov	r0, ip
 8001482:	04db      	lsls	r3, r3, #19
 8001484:	4318      	orrs	r0, r3
 8001486:	4684      	mov	ip, r0
 8001488:	e6eb      	b.n	8001262 <__aeabi_fsub+0x29a>
 800148a:	46c0      	nop			@ (mov r8, r8)
 800148c:	7dffffff 	.word	0x7dffffff

08001490 <__aeabi_f2iz>:
 8001490:	0241      	lsls	r1, r0, #9
 8001492:	0042      	lsls	r2, r0, #1
 8001494:	0fc3      	lsrs	r3, r0, #31
 8001496:	0a49      	lsrs	r1, r1, #9
 8001498:	2000      	movs	r0, #0
 800149a:	0e12      	lsrs	r2, r2, #24
 800149c:	2a7e      	cmp	r2, #126	@ 0x7e
 800149e:	dd03      	ble.n	80014a8 <__aeabi_f2iz+0x18>
 80014a0:	2a9d      	cmp	r2, #157	@ 0x9d
 80014a2:	dd02      	ble.n	80014aa <__aeabi_f2iz+0x1a>
 80014a4:	4a09      	ldr	r2, [pc, #36]	@ (80014cc <__aeabi_f2iz+0x3c>)
 80014a6:	1898      	adds	r0, r3, r2
 80014a8:	4770      	bx	lr
 80014aa:	2080      	movs	r0, #128	@ 0x80
 80014ac:	0400      	lsls	r0, r0, #16
 80014ae:	4301      	orrs	r1, r0
 80014b0:	2a95      	cmp	r2, #149	@ 0x95
 80014b2:	dc07      	bgt.n	80014c4 <__aeabi_f2iz+0x34>
 80014b4:	2096      	movs	r0, #150	@ 0x96
 80014b6:	1a82      	subs	r2, r0, r2
 80014b8:	40d1      	lsrs	r1, r2
 80014ba:	4248      	negs	r0, r1
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d1f3      	bne.n	80014a8 <__aeabi_f2iz+0x18>
 80014c0:	0008      	movs	r0, r1
 80014c2:	e7f1      	b.n	80014a8 <__aeabi_f2iz+0x18>
 80014c4:	3a96      	subs	r2, #150	@ 0x96
 80014c6:	4091      	lsls	r1, r2
 80014c8:	e7f7      	b.n	80014ba <__aeabi_f2iz+0x2a>
 80014ca:	46c0      	nop			@ (mov r8, r8)
 80014cc:	7fffffff 	.word	0x7fffffff

080014d0 <__aeabi_i2f>:
 80014d0:	b570      	push	{r4, r5, r6, lr}
 80014d2:	2800      	cmp	r0, #0
 80014d4:	d012      	beq.n	80014fc <__aeabi_i2f+0x2c>
 80014d6:	17c3      	asrs	r3, r0, #31
 80014d8:	18c5      	adds	r5, r0, r3
 80014da:	405d      	eors	r5, r3
 80014dc:	0fc4      	lsrs	r4, r0, #31
 80014de:	0028      	movs	r0, r5
 80014e0:	f002 f8f6 	bl	80036d0 <__clzsi2>
 80014e4:	239e      	movs	r3, #158	@ 0x9e
 80014e6:	1a1b      	subs	r3, r3, r0
 80014e8:	2b96      	cmp	r3, #150	@ 0x96
 80014ea:	dc0f      	bgt.n	800150c <__aeabi_i2f+0x3c>
 80014ec:	2808      	cmp	r0, #8
 80014ee:	d038      	beq.n	8001562 <__aeabi_i2f+0x92>
 80014f0:	3808      	subs	r0, #8
 80014f2:	4085      	lsls	r5, r0
 80014f4:	026d      	lsls	r5, r5, #9
 80014f6:	0a6d      	lsrs	r5, r5, #9
 80014f8:	b2d8      	uxtb	r0, r3
 80014fa:	e002      	b.n	8001502 <__aeabi_i2f+0x32>
 80014fc:	2400      	movs	r4, #0
 80014fe:	2000      	movs	r0, #0
 8001500:	2500      	movs	r5, #0
 8001502:	05c0      	lsls	r0, r0, #23
 8001504:	4328      	orrs	r0, r5
 8001506:	07e4      	lsls	r4, r4, #31
 8001508:	4320      	orrs	r0, r4
 800150a:	bd70      	pop	{r4, r5, r6, pc}
 800150c:	2b99      	cmp	r3, #153	@ 0x99
 800150e:	dc14      	bgt.n	800153a <__aeabi_i2f+0x6a>
 8001510:	1f42      	subs	r2, r0, #5
 8001512:	4095      	lsls	r5, r2
 8001514:	002a      	movs	r2, r5
 8001516:	4915      	ldr	r1, [pc, #84]	@ (800156c <__aeabi_i2f+0x9c>)
 8001518:	4011      	ands	r1, r2
 800151a:	0755      	lsls	r5, r2, #29
 800151c:	d01c      	beq.n	8001558 <__aeabi_i2f+0x88>
 800151e:	250f      	movs	r5, #15
 8001520:	402a      	ands	r2, r5
 8001522:	2a04      	cmp	r2, #4
 8001524:	d018      	beq.n	8001558 <__aeabi_i2f+0x88>
 8001526:	3104      	adds	r1, #4
 8001528:	08ca      	lsrs	r2, r1, #3
 800152a:	0149      	lsls	r1, r1, #5
 800152c:	d515      	bpl.n	800155a <__aeabi_i2f+0x8a>
 800152e:	239f      	movs	r3, #159	@ 0x9f
 8001530:	0252      	lsls	r2, r2, #9
 8001532:	1a18      	subs	r0, r3, r0
 8001534:	0a55      	lsrs	r5, r2, #9
 8001536:	b2c0      	uxtb	r0, r0
 8001538:	e7e3      	b.n	8001502 <__aeabi_i2f+0x32>
 800153a:	2205      	movs	r2, #5
 800153c:	0029      	movs	r1, r5
 800153e:	1a12      	subs	r2, r2, r0
 8001540:	40d1      	lsrs	r1, r2
 8001542:	0002      	movs	r2, r0
 8001544:	321b      	adds	r2, #27
 8001546:	4095      	lsls	r5, r2
 8001548:	002a      	movs	r2, r5
 800154a:	1e55      	subs	r5, r2, #1
 800154c:	41aa      	sbcs	r2, r5
 800154e:	430a      	orrs	r2, r1
 8001550:	4906      	ldr	r1, [pc, #24]	@ (800156c <__aeabi_i2f+0x9c>)
 8001552:	4011      	ands	r1, r2
 8001554:	0755      	lsls	r5, r2, #29
 8001556:	d1e2      	bne.n	800151e <__aeabi_i2f+0x4e>
 8001558:	08ca      	lsrs	r2, r1, #3
 800155a:	0252      	lsls	r2, r2, #9
 800155c:	0a55      	lsrs	r5, r2, #9
 800155e:	b2d8      	uxtb	r0, r3
 8001560:	e7cf      	b.n	8001502 <__aeabi_i2f+0x32>
 8001562:	026d      	lsls	r5, r5, #9
 8001564:	0a6d      	lsrs	r5, r5, #9
 8001566:	308e      	adds	r0, #142	@ 0x8e
 8001568:	e7cb      	b.n	8001502 <__aeabi_i2f+0x32>
 800156a:	46c0      	nop			@ (mov r8, r8)
 800156c:	fbffffff 	.word	0xfbffffff

08001570 <__aeabi_ui2f>:
 8001570:	b510      	push	{r4, lr}
 8001572:	1e04      	subs	r4, r0, #0
 8001574:	d00d      	beq.n	8001592 <__aeabi_ui2f+0x22>
 8001576:	f002 f8ab 	bl	80036d0 <__clzsi2>
 800157a:	239e      	movs	r3, #158	@ 0x9e
 800157c:	1a1b      	subs	r3, r3, r0
 800157e:	2b96      	cmp	r3, #150	@ 0x96
 8001580:	dc0c      	bgt.n	800159c <__aeabi_ui2f+0x2c>
 8001582:	2808      	cmp	r0, #8
 8001584:	d034      	beq.n	80015f0 <__aeabi_ui2f+0x80>
 8001586:	3808      	subs	r0, #8
 8001588:	4084      	lsls	r4, r0
 800158a:	0264      	lsls	r4, r4, #9
 800158c:	0a64      	lsrs	r4, r4, #9
 800158e:	b2d8      	uxtb	r0, r3
 8001590:	e001      	b.n	8001596 <__aeabi_ui2f+0x26>
 8001592:	2000      	movs	r0, #0
 8001594:	2400      	movs	r4, #0
 8001596:	05c0      	lsls	r0, r0, #23
 8001598:	4320      	orrs	r0, r4
 800159a:	bd10      	pop	{r4, pc}
 800159c:	2b99      	cmp	r3, #153	@ 0x99
 800159e:	dc13      	bgt.n	80015c8 <__aeabi_ui2f+0x58>
 80015a0:	1f42      	subs	r2, r0, #5
 80015a2:	4094      	lsls	r4, r2
 80015a4:	4a14      	ldr	r2, [pc, #80]	@ (80015f8 <__aeabi_ui2f+0x88>)
 80015a6:	4022      	ands	r2, r4
 80015a8:	0761      	lsls	r1, r4, #29
 80015aa:	d01c      	beq.n	80015e6 <__aeabi_ui2f+0x76>
 80015ac:	210f      	movs	r1, #15
 80015ae:	4021      	ands	r1, r4
 80015b0:	2904      	cmp	r1, #4
 80015b2:	d018      	beq.n	80015e6 <__aeabi_ui2f+0x76>
 80015b4:	3204      	adds	r2, #4
 80015b6:	08d4      	lsrs	r4, r2, #3
 80015b8:	0152      	lsls	r2, r2, #5
 80015ba:	d515      	bpl.n	80015e8 <__aeabi_ui2f+0x78>
 80015bc:	239f      	movs	r3, #159	@ 0x9f
 80015be:	0264      	lsls	r4, r4, #9
 80015c0:	1a18      	subs	r0, r3, r0
 80015c2:	0a64      	lsrs	r4, r4, #9
 80015c4:	b2c0      	uxtb	r0, r0
 80015c6:	e7e6      	b.n	8001596 <__aeabi_ui2f+0x26>
 80015c8:	0002      	movs	r2, r0
 80015ca:	0021      	movs	r1, r4
 80015cc:	321b      	adds	r2, #27
 80015ce:	4091      	lsls	r1, r2
 80015d0:	000a      	movs	r2, r1
 80015d2:	1e51      	subs	r1, r2, #1
 80015d4:	418a      	sbcs	r2, r1
 80015d6:	2105      	movs	r1, #5
 80015d8:	1a09      	subs	r1, r1, r0
 80015da:	40cc      	lsrs	r4, r1
 80015dc:	4314      	orrs	r4, r2
 80015de:	4a06      	ldr	r2, [pc, #24]	@ (80015f8 <__aeabi_ui2f+0x88>)
 80015e0:	4022      	ands	r2, r4
 80015e2:	0761      	lsls	r1, r4, #29
 80015e4:	d1e2      	bne.n	80015ac <__aeabi_ui2f+0x3c>
 80015e6:	08d4      	lsrs	r4, r2, #3
 80015e8:	0264      	lsls	r4, r4, #9
 80015ea:	0a64      	lsrs	r4, r4, #9
 80015ec:	b2d8      	uxtb	r0, r3
 80015ee:	e7d2      	b.n	8001596 <__aeabi_ui2f+0x26>
 80015f0:	0264      	lsls	r4, r4, #9
 80015f2:	0a64      	lsrs	r4, r4, #9
 80015f4:	308e      	adds	r0, #142	@ 0x8e
 80015f6:	e7ce      	b.n	8001596 <__aeabi_ui2f+0x26>
 80015f8:	fbffffff 	.word	0xfbffffff

080015fc <__aeabi_dadd>:
 80015fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015fe:	464f      	mov	r7, r9
 8001600:	4646      	mov	r6, r8
 8001602:	46d6      	mov	lr, sl
 8001604:	b5c0      	push	{r6, r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	9000      	str	r0, [sp, #0]
 800160a:	9101      	str	r1, [sp, #4]
 800160c:	030e      	lsls	r6, r1, #12
 800160e:	004c      	lsls	r4, r1, #1
 8001610:	0fcd      	lsrs	r5, r1, #31
 8001612:	0a71      	lsrs	r1, r6, #9
 8001614:	9e00      	ldr	r6, [sp, #0]
 8001616:	005f      	lsls	r7, r3, #1
 8001618:	0f76      	lsrs	r6, r6, #29
 800161a:	430e      	orrs	r6, r1
 800161c:	9900      	ldr	r1, [sp, #0]
 800161e:	9200      	str	r2, [sp, #0]
 8001620:	9301      	str	r3, [sp, #4]
 8001622:	00c9      	lsls	r1, r1, #3
 8001624:	4689      	mov	r9, r1
 8001626:	0319      	lsls	r1, r3, #12
 8001628:	0d7b      	lsrs	r3, r7, #21
 800162a:	4698      	mov	r8, r3
 800162c:	9b01      	ldr	r3, [sp, #4]
 800162e:	0a49      	lsrs	r1, r1, #9
 8001630:	0fdb      	lsrs	r3, r3, #31
 8001632:	469c      	mov	ip, r3
 8001634:	9b00      	ldr	r3, [sp, #0]
 8001636:	9a00      	ldr	r2, [sp, #0]
 8001638:	0f5b      	lsrs	r3, r3, #29
 800163a:	430b      	orrs	r3, r1
 800163c:	4641      	mov	r1, r8
 800163e:	0d64      	lsrs	r4, r4, #21
 8001640:	00d2      	lsls	r2, r2, #3
 8001642:	1a61      	subs	r1, r4, r1
 8001644:	4565      	cmp	r5, ip
 8001646:	d100      	bne.n	800164a <__aeabi_dadd+0x4e>
 8001648:	e0a6      	b.n	8001798 <__aeabi_dadd+0x19c>
 800164a:	2900      	cmp	r1, #0
 800164c:	dd72      	ble.n	8001734 <__aeabi_dadd+0x138>
 800164e:	4647      	mov	r7, r8
 8001650:	2f00      	cmp	r7, #0
 8001652:	d100      	bne.n	8001656 <__aeabi_dadd+0x5a>
 8001654:	e0dd      	b.n	8001812 <__aeabi_dadd+0x216>
 8001656:	4fcc      	ldr	r7, [pc, #816]	@ (8001988 <__aeabi_dadd+0x38c>)
 8001658:	42bc      	cmp	r4, r7
 800165a:	d100      	bne.n	800165e <__aeabi_dadd+0x62>
 800165c:	e19a      	b.n	8001994 <__aeabi_dadd+0x398>
 800165e:	2701      	movs	r7, #1
 8001660:	2938      	cmp	r1, #56	@ 0x38
 8001662:	dc17      	bgt.n	8001694 <__aeabi_dadd+0x98>
 8001664:	2780      	movs	r7, #128	@ 0x80
 8001666:	043f      	lsls	r7, r7, #16
 8001668:	433b      	orrs	r3, r7
 800166a:	291f      	cmp	r1, #31
 800166c:	dd00      	ble.n	8001670 <__aeabi_dadd+0x74>
 800166e:	e1dd      	b.n	8001a2c <__aeabi_dadd+0x430>
 8001670:	2720      	movs	r7, #32
 8001672:	1a78      	subs	r0, r7, r1
 8001674:	001f      	movs	r7, r3
 8001676:	4087      	lsls	r7, r0
 8001678:	46ba      	mov	sl, r7
 800167a:	0017      	movs	r7, r2
 800167c:	40cf      	lsrs	r7, r1
 800167e:	4684      	mov	ip, r0
 8001680:	0038      	movs	r0, r7
 8001682:	4657      	mov	r7, sl
 8001684:	4307      	orrs	r7, r0
 8001686:	4660      	mov	r0, ip
 8001688:	4082      	lsls	r2, r0
 800168a:	40cb      	lsrs	r3, r1
 800168c:	1e50      	subs	r0, r2, #1
 800168e:	4182      	sbcs	r2, r0
 8001690:	1af6      	subs	r6, r6, r3
 8001692:	4317      	orrs	r7, r2
 8001694:	464b      	mov	r3, r9
 8001696:	1bdf      	subs	r7, r3, r7
 8001698:	45b9      	cmp	r9, r7
 800169a:	4180      	sbcs	r0, r0
 800169c:	4240      	negs	r0, r0
 800169e:	1a36      	subs	r6, r6, r0
 80016a0:	0233      	lsls	r3, r6, #8
 80016a2:	d400      	bmi.n	80016a6 <__aeabi_dadd+0xaa>
 80016a4:	e0ff      	b.n	80018a6 <__aeabi_dadd+0x2aa>
 80016a6:	0276      	lsls	r6, r6, #9
 80016a8:	0a76      	lsrs	r6, r6, #9
 80016aa:	2e00      	cmp	r6, #0
 80016ac:	d100      	bne.n	80016b0 <__aeabi_dadd+0xb4>
 80016ae:	e13c      	b.n	800192a <__aeabi_dadd+0x32e>
 80016b0:	0030      	movs	r0, r6
 80016b2:	f002 f80d 	bl	80036d0 <__clzsi2>
 80016b6:	0003      	movs	r3, r0
 80016b8:	3b08      	subs	r3, #8
 80016ba:	2120      	movs	r1, #32
 80016bc:	0038      	movs	r0, r7
 80016be:	1aca      	subs	r2, r1, r3
 80016c0:	40d0      	lsrs	r0, r2
 80016c2:	409e      	lsls	r6, r3
 80016c4:	0002      	movs	r2, r0
 80016c6:	409f      	lsls	r7, r3
 80016c8:	4332      	orrs	r2, r6
 80016ca:	429c      	cmp	r4, r3
 80016cc:	dd00      	ble.n	80016d0 <__aeabi_dadd+0xd4>
 80016ce:	e1a6      	b.n	8001a1e <__aeabi_dadd+0x422>
 80016d0:	1b18      	subs	r0, r3, r4
 80016d2:	3001      	adds	r0, #1
 80016d4:	1a09      	subs	r1, r1, r0
 80016d6:	003e      	movs	r6, r7
 80016d8:	408f      	lsls	r7, r1
 80016da:	40c6      	lsrs	r6, r0
 80016dc:	1e7b      	subs	r3, r7, #1
 80016de:	419f      	sbcs	r7, r3
 80016e0:	0013      	movs	r3, r2
 80016e2:	408b      	lsls	r3, r1
 80016e4:	4337      	orrs	r7, r6
 80016e6:	431f      	orrs	r7, r3
 80016e8:	40c2      	lsrs	r2, r0
 80016ea:	003b      	movs	r3, r7
 80016ec:	0016      	movs	r6, r2
 80016ee:	2400      	movs	r4, #0
 80016f0:	4313      	orrs	r3, r2
 80016f2:	d100      	bne.n	80016f6 <__aeabi_dadd+0xfa>
 80016f4:	e1df      	b.n	8001ab6 <__aeabi_dadd+0x4ba>
 80016f6:	077b      	lsls	r3, r7, #29
 80016f8:	d100      	bne.n	80016fc <__aeabi_dadd+0x100>
 80016fa:	e332      	b.n	8001d62 <__aeabi_dadd+0x766>
 80016fc:	230f      	movs	r3, #15
 80016fe:	003a      	movs	r2, r7
 8001700:	403b      	ands	r3, r7
 8001702:	2b04      	cmp	r3, #4
 8001704:	d004      	beq.n	8001710 <__aeabi_dadd+0x114>
 8001706:	1d3a      	adds	r2, r7, #4
 8001708:	42ba      	cmp	r2, r7
 800170a:	41bf      	sbcs	r7, r7
 800170c:	427f      	negs	r7, r7
 800170e:	19f6      	adds	r6, r6, r7
 8001710:	0233      	lsls	r3, r6, #8
 8001712:	d400      	bmi.n	8001716 <__aeabi_dadd+0x11a>
 8001714:	e323      	b.n	8001d5e <__aeabi_dadd+0x762>
 8001716:	4b9c      	ldr	r3, [pc, #624]	@ (8001988 <__aeabi_dadd+0x38c>)
 8001718:	3401      	adds	r4, #1
 800171a:	429c      	cmp	r4, r3
 800171c:	d100      	bne.n	8001720 <__aeabi_dadd+0x124>
 800171e:	e0b4      	b.n	800188a <__aeabi_dadd+0x28e>
 8001720:	4b9a      	ldr	r3, [pc, #616]	@ (800198c <__aeabi_dadd+0x390>)
 8001722:	0564      	lsls	r4, r4, #21
 8001724:	401e      	ands	r6, r3
 8001726:	0d64      	lsrs	r4, r4, #21
 8001728:	0777      	lsls	r7, r6, #29
 800172a:	08d2      	lsrs	r2, r2, #3
 800172c:	0276      	lsls	r6, r6, #9
 800172e:	4317      	orrs	r7, r2
 8001730:	0b36      	lsrs	r6, r6, #12
 8001732:	e0ac      	b.n	800188e <__aeabi_dadd+0x292>
 8001734:	2900      	cmp	r1, #0
 8001736:	d100      	bne.n	800173a <__aeabi_dadd+0x13e>
 8001738:	e07e      	b.n	8001838 <__aeabi_dadd+0x23c>
 800173a:	4641      	mov	r1, r8
 800173c:	1b09      	subs	r1, r1, r4
 800173e:	2c00      	cmp	r4, #0
 8001740:	d000      	beq.n	8001744 <__aeabi_dadd+0x148>
 8001742:	e160      	b.n	8001a06 <__aeabi_dadd+0x40a>
 8001744:	0034      	movs	r4, r6
 8001746:	4648      	mov	r0, r9
 8001748:	4304      	orrs	r4, r0
 800174a:	d100      	bne.n	800174e <__aeabi_dadd+0x152>
 800174c:	e1c9      	b.n	8001ae2 <__aeabi_dadd+0x4e6>
 800174e:	1e4c      	subs	r4, r1, #1
 8001750:	2901      	cmp	r1, #1
 8001752:	d100      	bne.n	8001756 <__aeabi_dadd+0x15a>
 8001754:	e22e      	b.n	8001bb4 <__aeabi_dadd+0x5b8>
 8001756:	4d8c      	ldr	r5, [pc, #560]	@ (8001988 <__aeabi_dadd+0x38c>)
 8001758:	42a9      	cmp	r1, r5
 800175a:	d100      	bne.n	800175e <__aeabi_dadd+0x162>
 800175c:	e224      	b.n	8001ba8 <__aeabi_dadd+0x5ac>
 800175e:	2701      	movs	r7, #1
 8001760:	2c38      	cmp	r4, #56	@ 0x38
 8001762:	dc11      	bgt.n	8001788 <__aeabi_dadd+0x18c>
 8001764:	0021      	movs	r1, r4
 8001766:	291f      	cmp	r1, #31
 8001768:	dd00      	ble.n	800176c <__aeabi_dadd+0x170>
 800176a:	e20b      	b.n	8001b84 <__aeabi_dadd+0x588>
 800176c:	2420      	movs	r4, #32
 800176e:	0037      	movs	r7, r6
 8001770:	4648      	mov	r0, r9
 8001772:	1a64      	subs	r4, r4, r1
 8001774:	40a7      	lsls	r7, r4
 8001776:	40c8      	lsrs	r0, r1
 8001778:	4307      	orrs	r7, r0
 800177a:	4648      	mov	r0, r9
 800177c:	40a0      	lsls	r0, r4
 800177e:	40ce      	lsrs	r6, r1
 8001780:	1e44      	subs	r4, r0, #1
 8001782:	41a0      	sbcs	r0, r4
 8001784:	1b9b      	subs	r3, r3, r6
 8001786:	4307      	orrs	r7, r0
 8001788:	1bd7      	subs	r7, r2, r7
 800178a:	42ba      	cmp	r2, r7
 800178c:	4192      	sbcs	r2, r2
 800178e:	4252      	negs	r2, r2
 8001790:	4665      	mov	r5, ip
 8001792:	4644      	mov	r4, r8
 8001794:	1a9e      	subs	r6, r3, r2
 8001796:	e783      	b.n	80016a0 <__aeabi_dadd+0xa4>
 8001798:	2900      	cmp	r1, #0
 800179a:	dc00      	bgt.n	800179e <__aeabi_dadd+0x1a2>
 800179c:	e09c      	b.n	80018d8 <__aeabi_dadd+0x2dc>
 800179e:	4647      	mov	r7, r8
 80017a0:	2f00      	cmp	r7, #0
 80017a2:	d167      	bne.n	8001874 <__aeabi_dadd+0x278>
 80017a4:	001f      	movs	r7, r3
 80017a6:	4317      	orrs	r7, r2
 80017a8:	d100      	bne.n	80017ac <__aeabi_dadd+0x1b0>
 80017aa:	e0e4      	b.n	8001976 <__aeabi_dadd+0x37a>
 80017ac:	1e48      	subs	r0, r1, #1
 80017ae:	2901      	cmp	r1, #1
 80017b0:	d100      	bne.n	80017b4 <__aeabi_dadd+0x1b8>
 80017b2:	e19b      	b.n	8001aec <__aeabi_dadd+0x4f0>
 80017b4:	4f74      	ldr	r7, [pc, #464]	@ (8001988 <__aeabi_dadd+0x38c>)
 80017b6:	42b9      	cmp	r1, r7
 80017b8:	d100      	bne.n	80017bc <__aeabi_dadd+0x1c0>
 80017ba:	e0eb      	b.n	8001994 <__aeabi_dadd+0x398>
 80017bc:	2701      	movs	r7, #1
 80017be:	0001      	movs	r1, r0
 80017c0:	2838      	cmp	r0, #56	@ 0x38
 80017c2:	dc11      	bgt.n	80017e8 <__aeabi_dadd+0x1ec>
 80017c4:	291f      	cmp	r1, #31
 80017c6:	dd00      	ble.n	80017ca <__aeabi_dadd+0x1ce>
 80017c8:	e1c7      	b.n	8001b5a <__aeabi_dadd+0x55e>
 80017ca:	2720      	movs	r7, #32
 80017cc:	1a78      	subs	r0, r7, r1
 80017ce:	001f      	movs	r7, r3
 80017d0:	4684      	mov	ip, r0
 80017d2:	4087      	lsls	r7, r0
 80017d4:	0010      	movs	r0, r2
 80017d6:	40c8      	lsrs	r0, r1
 80017d8:	4307      	orrs	r7, r0
 80017da:	4660      	mov	r0, ip
 80017dc:	4082      	lsls	r2, r0
 80017de:	40cb      	lsrs	r3, r1
 80017e0:	1e50      	subs	r0, r2, #1
 80017e2:	4182      	sbcs	r2, r0
 80017e4:	18f6      	adds	r6, r6, r3
 80017e6:	4317      	orrs	r7, r2
 80017e8:	444f      	add	r7, r9
 80017ea:	454f      	cmp	r7, r9
 80017ec:	4180      	sbcs	r0, r0
 80017ee:	4240      	negs	r0, r0
 80017f0:	1836      	adds	r6, r6, r0
 80017f2:	0233      	lsls	r3, r6, #8
 80017f4:	d557      	bpl.n	80018a6 <__aeabi_dadd+0x2aa>
 80017f6:	4b64      	ldr	r3, [pc, #400]	@ (8001988 <__aeabi_dadd+0x38c>)
 80017f8:	3401      	adds	r4, #1
 80017fa:	429c      	cmp	r4, r3
 80017fc:	d045      	beq.n	800188a <__aeabi_dadd+0x28e>
 80017fe:	2101      	movs	r1, #1
 8001800:	4b62      	ldr	r3, [pc, #392]	@ (800198c <__aeabi_dadd+0x390>)
 8001802:	087a      	lsrs	r2, r7, #1
 8001804:	401e      	ands	r6, r3
 8001806:	4039      	ands	r1, r7
 8001808:	430a      	orrs	r2, r1
 800180a:	07f7      	lsls	r7, r6, #31
 800180c:	4317      	orrs	r7, r2
 800180e:	0876      	lsrs	r6, r6, #1
 8001810:	e771      	b.n	80016f6 <__aeabi_dadd+0xfa>
 8001812:	001f      	movs	r7, r3
 8001814:	4317      	orrs	r7, r2
 8001816:	d100      	bne.n	800181a <__aeabi_dadd+0x21e>
 8001818:	e0ad      	b.n	8001976 <__aeabi_dadd+0x37a>
 800181a:	1e4f      	subs	r7, r1, #1
 800181c:	46bc      	mov	ip, r7
 800181e:	2901      	cmp	r1, #1
 8001820:	d100      	bne.n	8001824 <__aeabi_dadd+0x228>
 8001822:	e182      	b.n	8001b2a <__aeabi_dadd+0x52e>
 8001824:	4f58      	ldr	r7, [pc, #352]	@ (8001988 <__aeabi_dadd+0x38c>)
 8001826:	42b9      	cmp	r1, r7
 8001828:	d100      	bne.n	800182c <__aeabi_dadd+0x230>
 800182a:	e190      	b.n	8001b4e <__aeabi_dadd+0x552>
 800182c:	4661      	mov	r1, ip
 800182e:	2701      	movs	r7, #1
 8001830:	2938      	cmp	r1, #56	@ 0x38
 8001832:	dd00      	ble.n	8001836 <__aeabi_dadd+0x23a>
 8001834:	e72e      	b.n	8001694 <__aeabi_dadd+0x98>
 8001836:	e718      	b.n	800166a <__aeabi_dadd+0x6e>
 8001838:	4f55      	ldr	r7, [pc, #340]	@ (8001990 <__aeabi_dadd+0x394>)
 800183a:	1c61      	adds	r1, r4, #1
 800183c:	4239      	tst	r1, r7
 800183e:	d000      	beq.n	8001842 <__aeabi_dadd+0x246>
 8001840:	e0d0      	b.n	80019e4 <__aeabi_dadd+0x3e8>
 8001842:	0031      	movs	r1, r6
 8001844:	4648      	mov	r0, r9
 8001846:	001f      	movs	r7, r3
 8001848:	4301      	orrs	r1, r0
 800184a:	4317      	orrs	r7, r2
 800184c:	2c00      	cmp	r4, #0
 800184e:	d000      	beq.n	8001852 <__aeabi_dadd+0x256>
 8001850:	e13d      	b.n	8001ace <__aeabi_dadd+0x4d2>
 8001852:	2900      	cmp	r1, #0
 8001854:	d100      	bne.n	8001858 <__aeabi_dadd+0x25c>
 8001856:	e1bc      	b.n	8001bd2 <__aeabi_dadd+0x5d6>
 8001858:	2f00      	cmp	r7, #0
 800185a:	d000      	beq.n	800185e <__aeabi_dadd+0x262>
 800185c:	e1bf      	b.n	8001bde <__aeabi_dadd+0x5e2>
 800185e:	464b      	mov	r3, r9
 8001860:	2100      	movs	r1, #0
 8001862:	08d8      	lsrs	r0, r3, #3
 8001864:	0777      	lsls	r7, r6, #29
 8001866:	4307      	orrs	r7, r0
 8001868:	08f0      	lsrs	r0, r6, #3
 800186a:	0306      	lsls	r6, r0, #12
 800186c:	054c      	lsls	r4, r1, #21
 800186e:	0b36      	lsrs	r6, r6, #12
 8001870:	0d64      	lsrs	r4, r4, #21
 8001872:	e00c      	b.n	800188e <__aeabi_dadd+0x292>
 8001874:	4f44      	ldr	r7, [pc, #272]	@ (8001988 <__aeabi_dadd+0x38c>)
 8001876:	42bc      	cmp	r4, r7
 8001878:	d100      	bne.n	800187c <__aeabi_dadd+0x280>
 800187a:	e08b      	b.n	8001994 <__aeabi_dadd+0x398>
 800187c:	2701      	movs	r7, #1
 800187e:	2938      	cmp	r1, #56	@ 0x38
 8001880:	dcb2      	bgt.n	80017e8 <__aeabi_dadd+0x1ec>
 8001882:	2780      	movs	r7, #128	@ 0x80
 8001884:	043f      	lsls	r7, r7, #16
 8001886:	433b      	orrs	r3, r7
 8001888:	e79c      	b.n	80017c4 <__aeabi_dadd+0x1c8>
 800188a:	2600      	movs	r6, #0
 800188c:	2700      	movs	r7, #0
 800188e:	0524      	lsls	r4, r4, #20
 8001890:	4334      	orrs	r4, r6
 8001892:	07ed      	lsls	r5, r5, #31
 8001894:	432c      	orrs	r4, r5
 8001896:	0038      	movs	r0, r7
 8001898:	0021      	movs	r1, r4
 800189a:	b002      	add	sp, #8
 800189c:	bce0      	pop	{r5, r6, r7}
 800189e:	46ba      	mov	sl, r7
 80018a0:	46b1      	mov	r9, r6
 80018a2:	46a8      	mov	r8, r5
 80018a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018a6:	077b      	lsls	r3, r7, #29
 80018a8:	d004      	beq.n	80018b4 <__aeabi_dadd+0x2b8>
 80018aa:	230f      	movs	r3, #15
 80018ac:	403b      	ands	r3, r7
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	d000      	beq.n	80018b4 <__aeabi_dadd+0x2b8>
 80018b2:	e728      	b.n	8001706 <__aeabi_dadd+0x10a>
 80018b4:	08f8      	lsrs	r0, r7, #3
 80018b6:	4b34      	ldr	r3, [pc, #208]	@ (8001988 <__aeabi_dadd+0x38c>)
 80018b8:	0777      	lsls	r7, r6, #29
 80018ba:	4307      	orrs	r7, r0
 80018bc:	08f0      	lsrs	r0, r6, #3
 80018be:	429c      	cmp	r4, r3
 80018c0:	d000      	beq.n	80018c4 <__aeabi_dadd+0x2c8>
 80018c2:	e24a      	b.n	8001d5a <__aeabi_dadd+0x75e>
 80018c4:	003b      	movs	r3, r7
 80018c6:	4303      	orrs	r3, r0
 80018c8:	d059      	beq.n	800197e <__aeabi_dadd+0x382>
 80018ca:	2680      	movs	r6, #128	@ 0x80
 80018cc:	0336      	lsls	r6, r6, #12
 80018ce:	4306      	orrs	r6, r0
 80018d0:	0336      	lsls	r6, r6, #12
 80018d2:	4c2d      	ldr	r4, [pc, #180]	@ (8001988 <__aeabi_dadd+0x38c>)
 80018d4:	0b36      	lsrs	r6, r6, #12
 80018d6:	e7da      	b.n	800188e <__aeabi_dadd+0x292>
 80018d8:	2900      	cmp	r1, #0
 80018da:	d061      	beq.n	80019a0 <__aeabi_dadd+0x3a4>
 80018dc:	4641      	mov	r1, r8
 80018de:	1b09      	subs	r1, r1, r4
 80018e0:	2c00      	cmp	r4, #0
 80018e2:	d100      	bne.n	80018e6 <__aeabi_dadd+0x2ea>
 80018e4:	e0b9      	b.n	8001a5a <__aeabi_dadd+0x45e>
 80018e6:	4c28      	ldr	r4, [pc, #160]	@ (8001988 <__aeabi_dadd+0x38c>)
 80018e8:	45a0      	cmp	r8, r4
 80018ea:	d100      	bne.n	80018ee <__aeabi_dadd+0x2f2>
 80018ec:	e1a5      	b.n	8001c3a <__aeabi_dadd+0x63e>
 80018ee:	2701      	movs	r7, #1
 80018f0:	2938      	cmp	r1, #56	@ 0x38
 80018f2:	dc13      	bgt.n	800191c <__aeabi_dadd+0x320>
 80018f4:	2480      	movs	r4, #128	@ 0x80
 80018f6:	0424      	lsls	r4, r4, #16
 80018f8:	4326      	orrs	r6, r4
 80018fa:	291f      	cmp	r1, #31
 80018fc:	dd00      	ble.n	8001900 <__aeabi_dadd+0x304>
 80018fe:	e1c8      	b.n	8001c92 <__aeabi_dadd+0x696>
 8001900:	2420      	movs	r4, #32
 8001902:	0037      	movs	r7, r6
 8001904:	4648      	mov	r0, r9
 8001906:	1a64      	subs	r4, r4, r1
 8001908:	40a7      	lsls	r7, r4
 800190a:	40c8      	lsrs	r0, r1
 800190c:	4307      	orrs	r7, r0
 800190e:	4648      	mov	r0, r9
 8001910:	40a0      	lsls	r0, r4
 8001912:	40ce      	lsrs	r6, r1
 8001914:	1e44      	subs	r4, r0, #1
 8001916:	41a0      	sbcs	r0, r4
 8001918:	199b      	adds	r3, r3, r6
 800191a:	4307      	orrs	r7, r0
 800191c:	18bf      	adds	r7, r7, r2
 800191e:	4297      	cmp	r7, r2
 8001920:	4192      	sbcs	r2, r2
 8001922:	4252      	negs	r2, r2
 8001924:	4644      	mov	r4, r8
 8001926:	18d6      	adds	r6, r2, r3
 8001928:	e763      	b.n	80017f2 <__aeabi_dadd+0x1f6>
 800192a:	0038      	movs	r0, r7
 800192c:	f001 fed0 	bl	80036d0 <__clzsi2>
 8001930:	0003      	movs	r3, r0
 8001932:	3318      	adds	r3, #24
 8001934:	2b1f      	cmp	r3, #31
 8001936:	dc00      	bgt.n	800193a <__aeabi_dadd+0x33e>
 8001938:	e6bf      	b.n	80016ba <__aeabi_dadd+0xbe>
 800193a:	003a      	movs	r2, r7
 800193c:	3808      	subs	r0, #8
 800193e:	4082      	lsls	r2, r0
 8001940:	429c      	cmp	r4, r3
 8001942:	dd00      	ble.n	8001946 <__aeabi_dadd+0x34a>
 8001944:	e083      	b.n	8001a4e <__aeabi_dadd+0x452>
 8001946:	1b1b      	subs	r3, r3, r4
 8001948:	1c58      	adds	r0, r3, #1
 800194a:	281f      	cmp	r0, #31
 800194c:	dc00      	bgt.n	8001950 <__aeabi_dadd+0x354>
 800194e:	e1b4      	b.n	8001cba <__aeabi_dadd+0x6be>
 8001950:	0017      	movs	r7, r2
 8001952:	3b1f      	subs	r3, #31
 8001954:	40df      	lsrs	r7, r3
 8001956:	2820      	cmp	r0, #32
 8001958:	d005      	beq.n	8001966 <__aeabi_dadd+0x36a>
 800195a:	2340      	movs	r3, #64	@ 0x40
 800195c:	1a1b      	subs	r3, r3, r0
 800195e:	409a      	lsls	r2, r3
 8001960:	1e53      	subs	r3, r2, #1
 8001962:	419a      	sbcs	r2, r3
 8001964:	4317      	orrs	r7, r2
 8001966:	2400      	movs	r4, #0
 8001968:	2f00      	cmp	r7, #0
 800196a:	d00a      	beq.n	8001982 <__aeabi_dadd+0x386>
 800196c:	077b      	lsls	r3, r7, #29
 800196e:	d000      	beq.n	8001972 <__aeabi_dadd+0x376>
 8001970:	e6c4      	b.n	80016fc <__aeabi_dadd+0x100>
 8001972:	0026      	movs	r6, r4
 8001974:	e79e      	b.n	80018b4 <__aeabi_dadd+0x2b8>
 8001976:	464b      	mov	r3, r9
 8001978:	000c      	movs	r4, r1
 800197a:	08d8      	lsrs	r0, r3, #3
 800197c:	e79b      	b.n	80018b6 <__aeabi_dadd+0x2ba>
 800197e:	2700      	movs	r7, #0
 8001980:	4c01      	ldr	r4, [pc, #4]	@ (8001988 <__aeabi_dadd+0x38c>)
 8001982:	2600      	movs	r6, #0
 8001984:	e783      	b.n	800188e <__aeabi_dadd+0x292>
 8001986:	46c0      	nop			@ (mov r8, r8)
 8001988:	000007ff 	.word	0x000007ff
 800198c:	ff7fffff 	.word	0xff7fffff
 8001990:	000007fe 	.word	0x000007fe
 8001994:	464b      	mov	r3, r9
 8001996:	0777      	lsls	r7, r6, #29
 8001998:	08d8      	lsrs	r0, r3, #3
 800199a:	4307      	orrs	r7, r0
 800199c:	08f0      	lsrs	r0, r6, #3
 800199e:	e791      	b.n	80018c4 <__aeabi_dadd+0x2c8>
 80019a0:	4fcd      	ldr	r7, [pc, #820]	@ (8001cd8 <__aeabi_dadd+0x6dc>)
 80019a2:	1c61      	adds	r1, r4, #1
 80019a4:	4239      	tst	r1, r7
 80019a6:	d16b      	bne.n	8001a80 <__aeabi_dadd+0x484>
 80019a8:	0031      	movs	r1, r6
 80019aa:	4648      	mov	r0, r9
 80019ac:	4301      	orrs	r1, r0
 80019ae:	2c00      	cmp	r4, #0
 80019b0:	d000      	beq.n	80019b4 <__aeabi_dadd+0x3b8>
 80019b2:	e14b      	b.n	8001c4c <__aeabi_dadd+0x650>
 80019b4:	001f      	movs	r7, r3
 80019b6:	4317      	orrs	r7, r2
 80019b8:	2900      	cmp	r1, #0
 80019ba:	d100      	bne.n	80019be <__aeabi_dadd+0x3c2>
 80019bc:	e181      	b.n	8001cc2 <__aeabi_dadd+0x6c6>
 80019be:	2f00      	cmp	r7, #0
 80019c0:	d100      	bne.n	80019c4 <__aeabi_dadd+0x3c8>
 80019c2:	e74c      	b.n	800185e <__aeabi_dadd+0x262>
 80019c4:	444a      	add	r2, r9
 80019c6:	454a      	cmp	r2, r9
 80019c8:	4180      	sbcs	r0, r0
 80019ca:	18f6      	adds	r6, r6, r3
 80019cc:	4240      	negs	r0, r0
 80019ce:	1836      	adds	r6, r6, r0
 80019d0:	0233      	lsls	r3, r6, #8
 80019d2:	d500      	bpl.n	80019d6 <__aeabi_dadd+0x3da>
 80019d4:	e1b0      	b.n	8001d38 <__aeabi_dadd+0x73c>
 80019d6:	0017      	movs	r7, r2
 80019d8:	4691      	mov	r9, r2
 80019da:	4337      	orrs	r7, r6
 80019dc:	d000      	beq.n	80019e0 <__aeabi_dadd+0x3e4>
 80019de:	e73e      	b.n	800185e <__aeabi_dadd+0x262>
 80019e0:	2600      	movs	r6, #0
 80019e2:	e754      	b.n	800188e <__aeabi_dadd+0x292>
 80019e4:	4649      	mov	r1, r9
 80019e6:	1a89      	subs	r1, r1, r2
 80019e8:	4688      	mov	r8, r1
 80019ea:	45c1      	cmp	r9, r8
 80019ec:	41bf      	sbcs	r7, r7
 80019ee:	1af1      	subs	r1, r6, r3
 80019f0:	427f      	negs	r7, r7
 80019f2:	1bc9      	subs	r1, r1, r7
 80019f4:	020f      	lsls	r7, r1, #8
 80019f6:	d461      	bmi.n	8001abc <__aeabi_dadd+0x4c0>
 80019f8:	4647      	mov	r7, r8
 80019fa:	430f      	orrs	r7, r1
 80019fc:	d100      	bne.n	8001a00 <__aeabi_dadd+0x404>
 80019fe:	e0bd      	b.n	8001b7c <__aeabi_dadd+0x580>
 8001a00:	000e      	movs	r6, r1
 8001a02:	4647      	mov	r7, r8
 8001a04:	e651      	b.n	80016aa <__aeabi_dadd+0xae>
 8001a06:	4cb5      	ldr	r4, [pc, #724]	@ (8001cdc <__aeabi_dadd+0x6e0>)
 8001a08:	45a0      	cmp	r8, r4
 8001a0a:	d100      	bne.n	8001a0e <__aeabi_dadd+0x412>
 8001a0c:	e100      	b.n	8001c10 <__aeabi_dadd+0x614>
 8001a0e:	2701      	movs	r7, #1
 8001a10:	2938      	cmp	r1, #56	@ 0x38
 8001a12:	dd00      	ble.n	8001a16 <__aeabi_dadd+0x41a>
 8001a14:	e6b8      	b.n	8001788 <__aeabi_dadd+0x18c>
 8001a16:	2480      	movs	r4, #128	@ 0x80
 8001a18:	0424      	lsls	r4, r4, #16
 8001a1a:	4326      	orrs	r6, r4
 8001a1c:	e6a3      	b.n	8001766 <__aeabi_dadd+0x16a>
 8001a1e:	4eb0      	ldr	r6, [pc, #704]	@ (8001ce0 <__aeabi_dadd+0x6e4>)
 8001a20:	1ae4      	subs	r4, r4, r3
 8001a22:	4016      	ands	r6, r2
 8001a24:	077b      	lsls	r3, r7, #29
 8001a26:	d000      	beq.n	8001a2a <__aeabi_dadd+0x42e>
 8001a28:	e73f      	b.n	80018aa <__aeabi_dadd+0x2ae>
 8001a2a:	e743      	b.n	80018b4 <__aeabi_dadd+0x2b8>
 8001a2c:	000f      	movs	r7, r1
 8001a2e:	0018      	movs	r0, r3
 8001a30:	3f20      	subs	r7, #32
 8001a32:	40f8      	lsrs	r0, r7
 8001a34:	4684      	mov	ip, r0
 8001a36:	2920      	cmp	r1, #32
 8001a38:	d003      	beq.n	8001a42 <__aeabi_dadd+0x446>
 8001a3a:	2740      	movs	r7, #64	@ 0x40
 8001a3c:	1a79      	subs	r1, r7, r1
 8001a3e:	408b      	lsls	r3, r1
 8001a40:	431a      	orrs	r2, r3
 8001a42:	1e53      	subs	r3, r2, #1
 8001a44:	419a      	sbcs	r2, r3
 8001a46:	4663      	mov	r3, ip
 8001a48:	0017      	movs	r7, r2
 8001a4a:	431f      	orrs	r7, r3
 8001a4c:	e622      	b.n	8001694 <__aeabi_dadd+0x98>
 8001a4e:	48a4      	ldr	r0, [pc, #656]	@ (8001ce0 <__aeabi_dadd+0x6e4>)
 8001a50:	1ae1      	subs	r1, r4, r3
 8001a52:	4010      	ands	r0, r2
 8001a54:	0747      	lsls	r7, r0, #29
 8001a56:	08c0      	lsrs	r0, r0, #3
 8001a58:	e707      	b.n	800186a <__aeabi_dadd+0x26e>
 8001a5a:	0034      	movs	r4, r6
 8001a5c:	4648      	mov	r0, r9
 8001a5e:	4304      	orrs	r4, r0
 8001a60:	d100      	bne.n	8001a64 <__aeabi_dadd+0x468>
 8001a62:	e0fa      	b.n	8001c5a <__aeabi_dadd+0x65e>
 8001a64:	1e4c      	subs	r4, r1, #1
 8001a66:	2901      	cmp	r1, #1
 8001a68:	d100      	bne.n	8001a6c <__aeabi_dadd+0x470>
 8001a6a:	e0d7      	b.n	8001c1c <__aeabi_dadd+0x620>
 8001a6c:	4f9b      	ldr	r7, [pc, #620]	@ (8001cdc <__aeabi_dadd+0x6e0>)
 8001a6e:	42b9      	cmp	r1, r7
 8001a70:	d100      	bne.n	8001a74 <__aeabi_dadd+0x478>
 8001a72:	e0e2      	b.n	8001c3a <__aeabi_dadd+0x63e>
 8001a74:	2701      	movs	r7, #1
 8001a76:	2c38      	cmp	r4, #56	@ 0x38
 8001a78:	dd00      	ble.n	8001a7c <__aeabi_dadd+0x480>
 8001a7a:	e74f      	b.n	800191c <__aeabi_dadd+0x320>
 8001a7c:	0021      	movs	r1, r4
 8001a7e:	e73c      	b.n	80018fa <__aeabi_dadd+0x2fe>
 8001a80:	4c96      	ldr	r4, [pc, #600]	@ (8001cdc <__aeabi_dadd+0x6e0>)
 8001a82:	42a1      	cmp	r1, r4
 8001a84:	d100      	bne.n	8001a88 <__aeabi_dadd+0x48c>
 8001a86:	e0dd      	b.n	8001c44 <__aeabi_dadd+0x648>
 8001a88:	444a      	add	r2, r9
 8001a8a:	454a      	cmp	r2, r9
 8001a8c:	4180      	sbcs	r0, r0
 8001a8e:	18f3      	adds	r3, r6, r3
 8001a90:	4240      	negs	r0, r0
 8001a92:	1818      	adds	r0, r3, r0
 8001a94:	07c7      	lsls	r7, r0, #31
 8001a96:	0852      	lsrs	r2, r2, #1
 8001a98:	4317      	orrs	r7, r2
 8001a9a:	0846      	lsrs	r6, r0, #1
 8001a9c:	0752      	lsls	r2, r2, #29
 8001a9e:	d005      	beq.n	8001aac <__aeabi_dadd+0x4b0>
 8001aa0:	220f      	movs	r2, #15
 8001aa2:	000c      	movs	r4, r1
 8001aa4:	403a      	ands	r2, r7
 8001aa6:	2a04      	cmp	r2, #4
 8001aa8:	d000      	beq.n	8001aac <__aeabi_dadd+0x4b0>
 8001aaa:	e62c      	b.n	8001706 <__aeabi_dadd+0x10a>
 8001aac:	0776      	lsls	r6, r6, #29
 8001aae:	08ff      	lsrs	r7, r7, #3
 8001ab0:	4337      	orrs	r7, r6
 8001ab2:	0900      	lsrs	r0, r0, #4
 8001ab4:	e6d9      	b.n	800186a <__aeabi_dadd+0x26e>
 8001ab6:	2700      	movs	r7, #0
 8001ab8:	2600      	movs	r6, #0
 8001aba:	e6e8      	b.n	800188e <__aeabi_dadd+0x292>
 8001abc:	4649      	mov	r1, r9
 8001abe:	1a57      	subs	r7, r2, r1
 8001ac0:	42ba      	cmp	r2, r7
 8001ac2:	4192      	sbcs	r2, r2
 8001ac4:	1b9e      	subs	r6, r3, r6
 8001ac6:	4252      	negs	r2, r2
 8001ac8:	4665      	mov	r5, ip
 8001aca:	1ab6      	subs	r6, r6, r2
 8001acc:	e5ed      	b.n	80016aa <__aeabi_dadd+0xae>
 8001ace:	2900      	cmp	r1, #0
 8001ad0:	d000      	beq.n	8001ad4 <__aeabi_dadd+0x4d8>
 8001ad2:	e0c6      	b.n	8001c62 <__aeabi_dadd+0x666>
 8001ad4:	2f00      	cmp	r7, #0
 8001ad6:	d167      	bne.n	8001ba8 <__aeabi_dadd+0x5ac>
 8001ad8:	2680      	movs	r6, #128	@ 0x80
 8001ada:	2500      	movs	r5, #0
 8001adc:	4c7f      	ldr	r4, [pc, #508]	@ (8001cdc <__aeabi_dadd+0x6e0>)
 8001ade:	0336      	lsls	r6, r6, #12
 8001ae0:	e6d5      	b.n	800188e <__aeabi_dadd+0x292>
 8001ae2:	4665      	mov	r5, ip
 8001ae4:	000c      	movs	r4, r1
 8001ae6:	001e      	movs	r6, r3
 8001ae8:	08d0      	lsrs	r0, r2, #3
 8001aea:	e6e4      	b.n	80018b6 <__aeabi_dadd+0x2ba>
 8001aec:	444a      	add	r2, r9
 8001aee:	454a      	cmp	r2, r9
 8001af0:	4180      	sbcs	r0, r0
 8001af2:	18f3      	adds	r3, r6, r3
 8001af4:	4240      	negs	r0, r0
 8001af6:	1818      	adds	r0, r3, r0
 8001af8:	0011      	movs	r1, r2
 8001afa:	0203      	lsls	r3, r0, #8
 8001afc:	d400      	bmi.n	8001b00 <__aeabi_dadd+0x504>
 8001afe:	e096      	b.n	8001c2e <__aeabi_dadd+0x632>
 8001b00:	4b77      	ldr	r3, [pc, #476]	@ (8001ce0 <__aeabi_dadd+0x6e4>)
 8001b02:	0849      	lsrs	r1, r1, #1
 8001b04:	4018      	ands	r0, r3
 8001b06:	07c3      	lsls	r3, r0, #31
 8001b08:	430b      	orrs	r3, r1
 8001b0a:	0844      	lsrs	r4, r0, #1
 8001b0c:	0749      	lsls	r1, r1, #29
 8001b0e:	d100      	bne.n	8001b12 <__aeabi_dadd+0x516>
 8001b10:	e129      	b.n	8001d66 <__aeabi_dadd+0x76a>
 8001b12:	220f      	movs	r2, #15
 8001b14:	401a      	ands	r2, r3
 8001b16:	2a04      	cmp	r2, #4
 8001b18:	d100      	bne.n	8001b1c <__aeabi_dadd+0x520>
 8001b1a:	e0ea      	b.n	8001cf2 <__aeabi_dadd+0x6f6>
 8001b1c:	1d1f      	adds	r7, r3, #4
 8001b1e:	429f      	cmp	r7, r3
 8001b20:	41b6      	sbcs	r6, r6
 8001b22:	4276      	negs	r6, r6
 8001b24:	1936      	adds	r6, r6, r4
 8001b26:	2402      	movs	r4, #2
 8001b28:	e6c4      	b.n	80018b4 <__aeabi_dadd+0x2b8>
 8001b2a:	4649      	mov	r1, r9
 8001b2c:	1a8f      	subs	r7, r1, r2
 8001b2e:	45b9      	cmp	r9, r7
 8001b30:	4180      	sbcs	r0, r0
 8001b32:	1af6      	subs	r6, r6, r3
 8001b34:	4240      	negs	r0, r0
 8001b36:	1a36      	subs	r6, r6, r0
 8001b38:	0233      	lsls	r3, r6, #8
 8001b3a:	d406      	bmi.n	8001b4a <__aeabi_dadd+0x54e>
 8001b3c:	0773      	lsls	r3, r6, #29
 8001b3e:	08ff      	lsrs	r7, r7, #3
 8001b40:	2101      	movs	r1, #1
 8001b42:	431f      	orrs	r7, r3
 8001b44:	08f0      	lsrs	r0, r6, #3
 8001b46:	e690      	b.n	800186a <__aeabi_dadd+0x26e>
 8001b48:	4665      	mov	r5, ip
 8001b4a:	2401      	movs	r4, #1
 8001b4c:	e5ab      	b.n	80016a6 <__aeabi_dadd+0xaa>
 8001b4e:	464b      	mov	r3, r9
 8001b50:	0777      	lsls	r7, r6, #29
 8001b52:	08d8      	lsrs	r0, r3, #3
 8001b54:	4307      	orrs	r7, r0
 8001b56:	08f0      	lsrs	r0, r6, #3
 8001b58:	e6b4      	b.n	80018c4 <__aeabi_dadd+0x2c8>
 8001b5a:	000f      	movs	r7, r1
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	3f20      	subs	r7, #32
 8001b60:	40f8      	lsrs	r0, r7
 8001b62:	4684      	mov	ip, r0
 8001b64:	2920      	cmp	r1, #32
 8001b66:	d003      	beq.n	8001b70 <__aeabi_dadd+0x574>
 8001b68:	2740      	movs	r7, #64	@ 0x40
 8001b6a:	1a79      	subs	r1, r7, r1
 8001b6c:	408b      	lsls	r3, r1
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	1e53      	subs	r3, r2, #1
 8001b72:	419a      	sbcs	r2, r3
 8001b74:	4663      	mov	r3, ip
 8001b76:	0017      	movs	r7, r2
 8001b78:	431f      	orrs	r7, r3
 8001b7a:	e635      	b.n	80017e8 <__aeabi_dadd+0x1ec>
 8001b7c:	2500      	movs	r5, #0
 8001b7e:	2400      	movs	r4, #0
 8001b80:	2600      	movs	r6, #0
 8001b82:	e684      	b.n	800188e <__aeabi_dadd+0x292>
 8001b84:	000c      	movs	r4, r1
 8001b86:	0035      	movs	r5, r6
 8001b88:	3c20      	subs	r4, #32
 8001b8a:	40e5      	lsrs	r5, r4
 8001b8c:	2920      	cmp	r1, #32
 8001b8e:	d005      	beq.n	8001b9c <__aeabi_dadd+0x5a0>
 8001b90:	2440      	movs	r4, #64	@ 0x40
 8001b92:	1a61      	subs	r1, r4, r1
 8001b94:	408e      	lsls	r6, r1
 8001b96:	4649      	mov	r1, r9
 8001b98:	4331      	orrs	r1, r6
 8001b9a:	4689      	mov	r9, r1
 8001b9c:	4648      	mov	r0, r9
 8001b9e:	1e41      	subs	r1, r0, #1
 8001ba0:	4188      	sbcs	r0, r1
 8001ba2:	0007      	movs	r7, r0
 8001ba4:	432f      	orrs	r7, r5
 8001ba6:	e5ef      	b.n	8001788 <__aeabi_dadd+0x18c>
 8001ba8:	08d2      	lsrs	r2, r2, #3
 8001baa:	075f      	lsls	r7, r3, #29
 8001bac:	4665      	mov	r5, ip
 8001bae:	4317      	orrs	r7, r2
 8001bb0:	08d8      	lsrs	r0, r3, #3
 8001bb2:	e687      	b.n	80018c4 <__aeabi_dadd+0x2c8>
 8001bb4:	1a17      	subs	r7, r2, r0
 8001bb6:	42ba      	cmp	r2, r7
 8001bb8:	4192      	sbcs	r2, r2
 8001bba:	1b9e      	subs	r6, r3, r6
 8001bbc:	4252      	negs	r2, r2
 8001bbe:	1ab6      	subs	r6, r6, r2
 8001bc0:	0233      	lsls	r3, r6, #8
 8001bc2:	d4c1      	bmi.n	8001b48 <__aeabi_dadd+0x54c>
 8001bc4:	0773      	lsls	r3, r6, #29
 8001bc6:	08ff      	lsrs	r7, r7, #3
 8001bc8:	4665      	mov	r5, ip
 8001bca:	2101      	movs	r1, #1
 8001bcc:	431f      	orrs	r7, r3
 8001bce:	08f0      	lsrs	r0, r6, #3
 8001bd0:	e64b      	b.n	800186a <__aeabi_dadd+0x26e>
 8001bd2:	2f00      	cmp	r7, #0
 8001bd4:	d07b      	beq.n	8001cce <__aeabi_dadd+0x6d2>
 8001bd6:	4665      	mov	r5, ip
 8001bd8:	001e      	movs	r6, r3
 8001bda:	4691      	mov	r9, r2
 8001bdc:	e63f      	b.n	800185e <__aeabi_dadd+0x262>
 8001bde:	1a81      	subs	r1, r0, r2
 8001be0:	4688      	mov	r8, r1
 8001be2:	45c1      	cmp	r9, r8
 8001be4:	41a4      	sbcs	r4, r4
 8001be6:	1af1      	subs	r1, r6, r3
 8001be8:	4264      	negs	r4, r4
 8001bea:	1b09      	subs	r1, r1, r4
 8001bec:	2480      	movs	r4, #128	@ 0x80
 8001bee:	0424      	lsls	r4, r4, #16
 8001bf0:	4221      	tst	r1, r4
 8001bf2:	d077      	beq.n	8001ce4 <__aeabi_dadd+0x6e8>
 8001bf4:	1a10      	subs	r0, r2, r0
 8001bf6:	4282      	cmp	r2, r0
 8001bf8:	4192      	sbcs	r2, r2
 8001bfa:	0007      	movs	r7, r0
 8001bfc:	1b9e      	subs	r6, r3, r6
 8001bfe:	4252      	negs	r2, r2
 8001c00:	1ab6      	subs	r6, r6, r2
 8001c02:	4337      	orrs	r7, r6
 8001c04:	d000      	beq.n	8001c08 <__aeabi_dadd+0x60c>
 8001c06:	e0a0      	b.n	8001d4a <__aeabi_dadd+0x74e>
 8001c08:	4665      	mov	r5, ip
 8001c0a:	2400      	movs	r4, #0
 8001c0c:	2600      	movs	r6, #0
 8001c0e:	e63e      	b.n	800188e <__aeabi_dadd+0x292>
 8001c10:	075f      	lsls	r7, r3, #29
 8001c12:	08d2      	lsrs	r2, r2, #3
 8001c14:	4665      	mov	r5, ip
 8001c16:	4317      	orrs	r7, r2
 8001c18:	08d8      	lsrs	r0, r3, #3
 8001c1a:	e653      	b.n	80018c4 <__aeabi_dadd+0x2c8>
 8001c1c:	1881      	adds	r1, r0, r2
 8001c1e:	4291      	cmp	r1, r2
 8001c20:	4192      	sbcs	r2, r2
 8001c22:	18f0      	adds	r0, r6, r3
 8001c24:	4252      	negs	r2, r2
 8001c26:	1880      	adds	r0, r0, r2
 8001c28:	0203      	lsls	r3, r0, #8
 8001c2a:	d500      	bpl.n	8001c2e <__aeabi_dadd+0x632>
 8001c2c:	e768      	b.n	8001b00 <__aeabi_dadd+0x504>
 8001c2e:	0747      	lsls	r7, r0, #29
 8001c30:	08c9      	lsrs	r1, r1, #3
 8001c32:	430f      	orrs	r7, r1
 8001c34:	08c0      	lsrs	r0, r0, #3
 8001c36:	2101      	movs	r1, #1
 8001c38:	e617      	b.n	800186a <__aeabi_dadd+0x26e>
 8001c3a:	08d2      	lsrs	r2, r2, #3
 8001c3c:	075f      	lsls	r7, r3, #29
 8001c3e:	4317      	orrs	r7, r2
 8001c40:	08d8      	lsrs	r0, r3, #3
 8001c42:	e63f      	b.n	80018c4 <__aeabi_dadd+0x2c8>
 8001c44:	000c      	movs	r4, r1
 8001c46:	2600      	movs	r6, #0
 8001c48:	2700      	movs	r7, #0
 8001c4a:	e620      	b.n	800188e <__aeabi_dadd+0x292>
 8001c4c:	2900      	cmp	r1, #0
 8001c4e:	d156      	bne.n	8001cfe <__aeabi_dadd+0x702>
 8001c50:	075f      	lsls	r7, r3, #29
 8001c52:	08d2      	lsrs	r2, r2, #3
 8001c54:	4317      	orrs	r7, r2
 8001c56:	08d8      	lsrs	r0, r3, #3
 8001c58:	e634      	b.n	80018c4 <__aeabi_dadd+0x2c8>
 8001c5a:	000c      	movs	r4, r1
 8001c5c:	001e      	movs	r6, r3
 8001c5e:	08d0      	lsrs	r0, r2, #3
 8001c60:	e629      	b.n	80018b6 <__aeabi_dadd+0x2ba>
 8001c62:	08c1      	lsrs	r1, r0, #3
 8001c64:	0770      	lsls	r0, r6, #29
 8001c66:	4301      	orrs	r1, r0
 8001c68:	08f0      	lsrs	r0, r6, #3
 8001c6a:	2f00      	cmp	r7, #0
 8001c6c:	d062      	beq.n	8001d34 <__aeabi_dadd+0x738>
 8001c6e:	2480      	movs	r4, #128	@ 0x80
 8001c70:	0324      	lsls	r4, r4, #12
 8001c72:	4220      	tst	r0, r4
 8001c74:	d007      	beq.n	8001c86 <__aeabi_dadd+0x68a>
 8001c76:	08de      	lsrs	r6, r3, #3
 8001c78:	4226      	tst	r6, r4
 8001c7a:	d104      	bne.n	8001c86 <__aeabi_dadd+0x68a>
 8001c7c:	4665      	mov	r5, ip
 8001c7e:	0030      	movs	r0, r6
 8001c80:	08d1      	lsrs	r1, r2, #3
 8001c82:	075b      	lsls	r3, r3, #29
 8001c84:	4319      	orrs	r1, r3
 8001c86:	0f4f      	lsrs	r7, r1, #29
 8001c88:	00c9      	lsls	r1, r1, #3
 8001c8a:	08c9      	lsrs	r1, r1, #3
 8001c8c:	077f      	lsls	r7, r7, #29
 8001c8e:	430f      	orrs	r7, r1
 8001c90:	e618      	b.n	80018c4 <__aeabi_dadd+0x2c8>
 8001c92:	000c      	movs	r4, r1
 8001c94:	0030      	movs	r0, r6
 8001c96:	3c20      	subs	r4, #32
 8001c98:	40e0      	lsrs	r0, r4
 8001c9a:	4684      	mov	ip, r0
 8001c9c:	2920      	cmp	r1, #32
 8001c9e:	d005      	beq.n	8001cac <__aeabi_dadd+0x6b0>
 8001ca0:	2440      	movs	r4, #64	@ 0x40
 8001ca2:	1a61      	subs	r1, r4, r1
 8001ca4:	408e      	lsls	r6, r1
 8001ca6:	4649      	mov	r1, r9
 8001ca8:	4331      	orrs	r1, r6
 8001caa:	4689      	mov	r9, r1
 8001cac:	4648      	mov	r0, r9
 8001cae:	1e41      	subs	r1, r0, #1
 8001cb0:	4188      	sbcs	r0, r1
 8001cb2:	4661      	mov	r1, ip
 8001cb4:	0007      	movs	r7, r0
 8001cb6:	430f      	orrs	r7, r1
 8001cb8:	e630      	b.n	800191c <__aeabi_dadd+0x320>
 8001cba:	2120      	movs	r1, #32
 8001cbc:	2700      	movs	r7, #0
 8001cbe:	1a09      	subs	r1, r1, r0
 8001cc0:	e50e      	b.n	80016e0 <__aeabi_dadd+0xe4>
 8001cc2:	001e      	movs	r6, r3
 8001cc4:	2f00      	cmp	r7, #0
 8001cc6:	d000      	beq.n	8001cca <__aeabi_dadd+0x6ce>
 8001cc8:	e522      	b.n	8001710 <__aeabi_dadd+0x114>
 8001cca:	2400      	movs	r4, #0
 8001ccc:	e758      	b.n	8001b80 <__aeabi_dadd+0x584>
 8001cce:	2500      	movs	r5, #0
 8001cd0:	2400      	movs	r4, #0
 8001cd2:	2600      	movs	r6, #0
 8001cd4:	e5db      	b.n	800188e <__aeabi_dadd+0x292>
 8001cd6:	46c0      	nop			@ (mov r8, r8)
 8001cd8:	000007fe 	.word	0x000007fe
 8001cdc:	000007ff 	.word	0x000007ff
 8001ce0:	ff7fffff 	.word	0xff7fffff
 8001ce4:	4647      	mov	r7, r8
 8001ce6:	430f      	orrs	r7, r1
 8001ce8:	d100      	bne.n	8001cec <__aeabi_dadd+0x6f0>
 8001cea:	e747      	b.n	8001b7c <__aeabi_dadd+0x580>
 8001cec:	000e      	movs	r6, r1
 8001cee:	46c1      	mov	r9, r8
 8001cf0:	e5b5      	b.n	800185e <__aeabi_dadd+0x262>
 8001cf2:	08df      	lsrs	r7, r3, #3
 8001cf4:	0764      	lsls	r4, r4, #29
 8001cf6:	2102      	movs	r1, #2
 8001cf8:	4327      	orrs	r7, r4
 8001cfa:	0900      	lsrs	r0, r0, #4
 8001cfc:	e5b5      	b.n	800186a <__aeabi_dadd+0x26e>
 8001cfe:	0019      	movs	r1, r3
 8001d00:	08c0      	lsrs	r0, r0, #3
 8001d02:	0777      	lsls	r7, r6, #29
 8001d04:	4307      	orrs	r7, r0
 8001d06:	4311      	orrs	r1, r2
 8001d08:	08f0      	lsrs	r0, r6, #3
 8001d0a:	2900      	cmp	r1, #0
 8001d0c:	d100      	bne.n	8001d10 <__aeabi_dadd+0x714>
 8001d0e:	e5d9      	b.n	80018c4 <__aeabi_dadd+0x2c8>
 8001d10:	2180      	movs	r1, #128	@ 0x80
 8001d12:	0309      	lsls	r1, r1, #12
 8001d14:	4208      	tst	r0, r1
 8001d16:	d007      	beq.n	8001d28 <__aeabi_dadd+0x72c>
 8001d18:	08dc      	lsrs	r4, r3, #3
 8001d1a:	420c      	tst	r4, r1
 8001d1c:	d104      	bne.n	8001d28 <__aeabi_dadd+0x72c>
 8001d1e:	08d2      	lsrs	r2, r2, #3
 8001d20:	075b      	lsls	r3, r3, #29
 8001d22:	431a      	orrs	r2, r3
 8001d24:	0017      	movs	r7, r2
 8001d26:	0020      	movs	r0, r4
 8001d28:	0f7b      	lsrs	r3, r7, #29
 8001d2a:	00ff      	lsls	r7, r7, #3
 8001d2c:	08ff      	lsrs	r7, r7, #3
 8001d2e:	075b      	lsls	r3, r3, #29
 8001d30:	431f      	orrs	r7, r3
 8001d32:	e5c7      	b.n	80018c4 <__aeabi_dadd+0x2c8>
 8001d34:	000f      	movs	r7, r1
 8001d36:	e5c5      	b.n	80018c4 <__aeabi_dadd+0x2c8>
 8001d38:	4b12      	ldr	r3, [pc, #72]	@ (8001d84 <__aeabi_dadd+0x788>)
 8001d3a:	08d2      	lsrs	r2, r2, #3
 8001d3c:	4033      	ands	r3, r6
 8001d3e:	075f      	lsls	r7, r3, #29
 8001d40:	025b      	lsls	r3, r3, #9
 8001d42:	2401      	movs	r4, #1
 8001d44:	4317      	orrs	r7, r2
 8001d46:	0b1e      	lsrs	r6, r3, #12
 8001d48:	e5a1      	b.n	800188e <__aeabi_dadd+0x292>
 8001d4a:	4226      	tst	r6, r4
 8001d4c:	d012      	beq.n	8001d74 <__aeabi_dadd+0x778>
 8001d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d84 <__aeabi_dadd+0x788>)
 8001d50:	4665      	mov	r5, ip
 8001d52:	0002      	movs	r2, r0
 8001d54:	2401      	movs	r4, #1
 8001d56:	401e      	ands	r6, r3
 8001d58:	e4e6      	b.n	8001728 <__aeabi_dadd+0x12c>
 8001d5a:	0021      	movs	r1, r4
 8001d5c:	e585      	b.n	800186a <__aeabi_dadd+0x26e>
 8001d5e:	0017      	movs	r7, r2
 8001d60:	e5a8      	b.n	80018b4 <__aeabi_dadd+0x2b8>
 8001d62:	003a      	movs	r2, r7
 8001d64:	e4d4      	b.n	8001710 <__aeabi_dadd+0x114>
 8001d66:	08db      	lsrs	r3, r3, #3
 8001d68:	0764      	lsls	r4, r4, #29
 8001d6a:	431c      	orrs	r4, r3
 8001d6c:	0027      	movs	r7, r4
 8001d6e:	2102      	movs	r1, #2
 8001d70:	0900      	lsrs	r0, r0, #4
 8001d72:	e57a      	b.n	800186a <__aeabi_dadd+0x26e>
 8001d74:	08c0      	lsrs	r0, r0, #3
 8001d76:	0777      	lsls	r7, r6, #29
 8001d78:	4307      	orrs	r7, r0
 8001d7a:	4665      	mov	r5, ip
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	08f0      	lsrs	r0, r6, #3
 8001d80:	e573      	b.n	800186a <__aeabi_dadd+0x26e>
 8001d82:	46c0      	nop			@ (mov r8, r8)
 8001d84:	ff7fffff 	.word	0xff7fffff

08001d88 <__aeabi_ddiv>:
 8001d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d8a:	46de      	mov	lr, fp
 8001d8c:	4645      	mov	r5, r8
 8001d8e:	4657      	mov	r7, sl
 8001d90:	464e      	mov	r6, r9
 8001d92:	b5e0      	push	{r5, r6, r7, lr}
 8001d94:	b087      	sub	sp, #28
 8001d96:	9200      	str	r2, [sp, #0]
 8001d98:	9301      	str	r3, [sp, #4]
 8001d9a:	030b      	lsls	r3, r1, #12
 8001d9c:	0b1b      	lsrs	r3, r3, #12
 8001d9e:	469b      	mov	fp, r3
 8001da0:	0fca      	lsrs	r2, r1, #31
 8001da2:	004b      	lsls	r3, r1, #1
 8001da4:	0004      	movs	r4, r0
 8001da6:	4680      	mov	r8, r0
 8001da8:	0d5b      	lsrs	r3, r3, #21
 8001daa:	9202      	str	r2, [sp, #8]
 8001dac:	d100      	bne.n	8001db0 <__aeabi_ddiv+0x28>
 8001dae:	e098      	b.n	8001ee2 <__aeabi_ddiv+0x15a>
 8001db0:	4a7c      	ldr	r2, [pc, #496]	@ (8001fa4 <__aeabi_ddiv+0x21c>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d037      	beq.n	8001e26 <__aeabi_ddiv+0x9e>
 8001db6:	4659      	mov	r1, fp
 8001db8:	0f42      	lsrs	r2, r0, #29
 8001dba:	00c9      	lsls	r1, r1, #3
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	2180      	movs	r1, #128	@ 0x80
 8001dc0:	0409      	lsls	r1, r1, #16
 8001dc2:	4311      	orrs	r1, r2
 8001dc4:	00c2      	lsls	r2, r0, #3
 8001dc6:	4690      	mov	r8, r2
 8001dc8:	4a77      	ldr	r2, [pc, #476]	@ (8001fa8 <__aeabi_ddiv+0x220>)
 8001dca:	4689      	mov	r9, r1
 8001dcc:	4692      	mov	sl, r2
 8001dce:	449a      	add	sl, r3
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	2400      	movs	r4, #0
 8001dd4:	9303      	str	r3, [sp, #12]
 8001dd6:	9e00      	ldr	r6, [sp, #0]
 8001dd8:	9f01      	ldr	r7, [sp, #4]
 8001dda:	033b      	lsls	r3, r7, #12
 8001ddc:	0b1b      	lsrs	r3, r3, #12
 8001dde:	469b      	mov	fp, r3
 8001de0:	007b      	lsls	r3, r7, #1
 8001de2:	0030      	movs	r0, r6
 8001de4:	0d5b      	lsrs	r3, r3, #21
 8001de6:	0ffd      	lsrs	r5, r7, #31
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d059      	beq.n	8001ea0 <__aeabi_ddiv+0x118>
 8001dec:	4a6d      	ldr	r2, [pc, #436]	@ (8001fa4 <__aeabi_ddiv+0x21c>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d048      	beq.n	8001e84 <__aeabi_ddiv+0xfc>
 8001df2:	4659      	mov	r1, fp
 8001df4:	0f72      	lsrs	r2, r6, #29
 8001df6:	00c9      	lsls	r1, r1, #3
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	2180      	movs	r1, #128	@ 0x80
 8001dfc:	0409      	lsls	r1, r1, #16
 8001dfe:	4311      	orrs	r1, r2
 8001e00:	468b      	mov	fp, r1
 8001e02:	4969      	ldr	r1, [pc, #420]	@ (8001fa8 <__aeabi_ddiv+0x220>)
 8001e04:	00f2      	lsls	r2, r6, #3
 8001e06:	468c      	mov	ip, r1
 8001e08:	4651      	mov	r1, sl
 8001e0a:	4463      	add	r3, ip
 8001e0c:	1acb      	subs	r3, r1, r3
 8001e0e:	469a      	mov	sl, r3
 8001e10:	2100      	movs	r1, #0
 8001e12:	9e02      	ldr	r6, [sp, #8]
 8001e14:	406e      	eors	r6, r5
 8001e16:	b2f6      	uxtb	r6, r6
 8001e18:	2c0f      	cmp	r4, #15
 8001e1a:	d900      	bls.n	8001e1e <__aeabi_ddiv+0x96>
 8001e1c:	e0ce      	b.n	8001fbc <__aeabi_ddiv+0x234>
 8001e1e:	4b63      	ldr	r3, [pc, #396]	@ (8001fac <__aeabi_ddiv+0x224>)
 8001e20:	00a4      	lsls	r4, r4, #2
 8001e22:	591b      	ldr	r3, [r3, r4]
 8001e24:	469f      	mov	pc, r3
 8001e26:	465a      	mov	r2, fp
 8001e28:	4302      	orrs	r2, r0
 8001e2a:	4691      	mov	r9, r2
 8001e2c:	d000      	beq.n	8001e30 <__aeabi_ddiv+0xa8>
 8001e2e:	e090      	b.n	8001f52 <__aeabi_ddiv+0x1ca>
 8001e30:	469a      	mov	sl, r3
 8001e32:	2302      	movs	r3, #2
 8001e34:	4690      	mov	r8, r2
 8001e36:	2408      	movs	r4, #8
 8001e38:	9303      	str	r3, [sp, #12]
 8001e3a:	e7cc      	b.n	8001dd6 <__aeabi_ddiv+0x4e>
 8001e3c:	46cb      	mov	fp, r9
 8001e3e:	4642      	mov	r2, r8
 8001e40:	9d02      	ldr	r5, [sp, #8]
 8001e42:	9903      	ldr	r1, [sp, #12]
 8001e44:	2902      	cmp	r1, #2
 8001e46:	d100      	bne.n	8001e4a <__aeabi_ddiv+0xc2>
 8001e48:	e1de      	b.n	8002208 <__aeabi_ddiv+0x480>
 8001e4a:	2903      	cmp	r1, #3
 8001e4c:	d100      	bne.n	8001e50 <__aeabi_ddiv+0xc8>
 8001e4e:	e08d      	b.n	8001f6c <__aeabi_ddiv+0x1e4>
 8001e50:	2901      	cmp	r1, #1
 8001e52:	d000      	beq.n	8001e56 <__aeabi_ddiv+0xce>
 8001e54:	e179      	b.n	800214a <__aeabi_ddiv+0x3c2>
 8001e56:	002e      	movs	r6, r5
 8001e58:	2200      	movs	r2, #0
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	2400      	movs	r4, #0
 8001e5e:	4690      	mov	r8, r2
 8001e60:	051b      	lsls	r3, r3, #20
 8001e62:	4323      	orrs	r3, r4
 8001e64:	07f6      	lsls	r6, r6, #31
 8001e66:	4333      	orrs	r3, r6
 8001e68:	4640      	mov	r0, r8
 8001e6a:	0019      	movs	r1, r3
 8001e6c:	b007      	add	sp, #28
 8001e6e:	bcf0      	pop	{r4, r5, r6, r7}
 8001e70:	46bb      	mov	fp, r7
 8001e72:	46b2      	mov	sl, r6
 8001e74:	46a9      	mov	r9, r5
 8001e76:	46a0      	mov	r8, r4
 8001e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	2400      	movs	r4, #0
 8001e7e:	4690      	mov	r8, r2
 8001e80:	4b48      	ldr	r3, [pc, #288]	@ (8001fa4 <__aeabi_ddiv+0x21c>)
 8001e82:	e7ed      	b.n	8001e60 <__aeabi_ddiv+0xd8>
 8001e84:	465a      	mov	r2, fp
 8001e86:	9b00      	ldr	r3, [sp, #0]
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	4b49      	ldr	r3, [pc, #292]	@ (8001fb0 <__aeabi_ddiv+0x228>)
 8001e8c:	469c      	mov	ip, r3
 8001e8e:	44e2      	add	sl, ip
 8001e90:	2a00      	cmp	r2, #0
 8001e92:	d159      	bne.n	8001f48 <__aeabi_ddiv+0x1c0>
 8001e94:	2302      	movs	r3, #2
 8001e96:	431c      	orrs	r4, r3
 8001e98:	2300      	movs	r3, #0
 8001e9a:	2102      	movs	r1, #2
 8001e9c:	469b      	mov	fp, r3
 8001e9e:	e7b8      	b.n	8001e12 <__aeabi_ddiv+0x8a>
 8001ea0:	465a      	mov	r2, fp
 8001ea2:	9b00      	ldr	r3, [sp, #0]
 8001ea4:	431a      	orrs	r2, r3
 8001ea6:	d049      	beq.n	8001f3c <__aeabi_ddiv+0x1b4>
 8001ea8:	465b      	mov	r3, fp
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d100      	bne.n	8001eb0 <__aeabi_ddiv+0x128>
 8001eae:	e19c      	b.n	80021ea <__aeabi_ddiv+0x462>
 8001eb0:	4658      	mov	r0, fp
 8001eb2:	f001 fc0d 	bl	80036d0 <__clzsi2>
 8001eb6:	0002      	movs	r2, r0
 8001eb8:	0003      	movs	r3, r0
 8001eba:	3a0b      	subs	r2, #11
 8001ebc:	271d      	movs	r7, #29
 8001ebe:	9e00      	ldr	r6, [sp, #0]
 8001ec0:	1aba      	subs	r2, r7, r2
 8001ec2:	0019      	movs	r1, r3
 8001ec4:	4658      	mov	r0, fp
 8001ec6:	40d6      	lsrs	r6, r2
 8001ec8:	3908      	subs	r1, #8
 8001eca:	4088      	lsls	r0, r1
 8001ecc:	0032      	movs	r2, r6
 8001ece:	4302      	orrs	r2, r0
 8001ed0:	4693      	mov	fp, r2
 8001ed2:	9a00      	ldr	r2, [sp, #0]
 8001ed4:	408a      	lsls	r2, r1
 8001ed6:	4937      	ldr	r1, [pc, #220]	@ (8001fb4 <__aeabi_ddiv+0x22c>)
 8001ed8:	4453      	add	r3, sl
 8001eda:	468a      	mov	sl, r1
 8001edc:	2100      	movs	r1, #0
 8001ede:	449a      	add	sl, r3
 8001ee0:	e797      	b.n	8001e12 <__aeabi_ddiv+0x8a>
 8001ee2:	465b      	mov	r3, fp
 8001ee4:	4303      	orrs	r3, r0
 8001ee6:	4699      	mov	r9, r3
 8001ee8:	d021      	beq.n	8001f2e <__aeabi_ddiv+0x1a6>
 8001eea:	465b      	mov	r3, fp
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d100      	bne.n	8001ef2 <__aeabi_ddiv+0x16a>
 8001ef0:	e169      	b.n	80021c6 <__aeabi_ddiv+0x43e>
 8001ef2:	4658      	mov	r0, fp
 8001ef4:	f001 fbec 	bl	80036d0 <__clzsi2>
 8001ef8:	230b      	movs	r3, #11
 8001efa:	425b      	negs	r3, r3
 8001efc:	469c      	mov	ip, r3
 8001efe:	0002      	movs	r2, r0
 8001f00:	4484      	add	ip, r0
 8001f02:	4666      	mov	r6, ip
 8001f04:	231d      	movs	r3, #29
 8001f06:	1b9b      	subs	r3, r3, r6
 8001f08:	0026      	movs	r6, r4
 8001f0a:	0011      	movs	r1, r2
 8001f0c:	4658      	mov	r0, fp
 8001f0e:	40de      	lsrs	r6, r3
 8001f10:	3908      	subs	r1, #8
 8001f12:	4088      	lsls	r0, r1
 8001f14:	0033      	movs	r3, r6
 8001f16:	4303      	orrs	r3, r0
 8001f18:	4699      	mov	r9, r3
 8001f1a:	0023      	movs	r3, r4
 8001f1c:	408b      	lsls	r3, r1
 8001f1e:	4698      	mov	r8, r3
 8001f20:	4b25      	ldr	r3, [pc, #148]	@ (8001fb8 <__aeabi_ddiv+0x230>)
 8001f22:	2400      	movs	r4, #0
 8001f24:	1a9b      	subs	r3, r3, r2
 8001f26:	469a      	mov	sl, r3
 8001f28:	2300      	movs	r3, #0
 8001f2a:	9303      	str	r3, [sp, #12]
 8001f2c:	e753      	b.n	8001dd6 <__aeabi_ddiv+0x4e>
 8001f2e:	2300      	movs	r3, #0
 8001f30:	4698      	mov	r8, r3
 8001f32:	469a      	mov	sl, r3
 8001f34:	3301      	adds	r3, #1
 8001f36:	2404      	movs	r4, #4
 8001f38:	9303      	str	r3, [sp, #12]
 8001f3a:	e74c      	b.n	8001dd6 <__aeabi_ddiv+0x4e>
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	431c      	orrs	r4, r3
 8001f40:	2300      	movs	r3, #0
 8001f42:	2101      	movs	r1, #1
 8001f44:	469b      	mov	fp, r3
 8001f46:	e764      	b.n	8001e12 <__aeabi_ddiv+0x8a>
 8001f48:	2303      	movs	r3, #3
 8001f4a:	0032      	movs	r2, r6
 8001f4c:	2103      	movs	r1, #3
 8001f4e:	431c      	orrs	r4, r3
 8001f50:	e75f      	b.n	8001e12 <__aeabi_ddiv+0x8a>
 8001f52:	469a      	mov	sl, r3
 8001f54:	2303      	movs	r3, #3
 8001f56:	46d9      	mov	r9, fp
 8001f58:	240c      	movs	r4, #12
 8001f5a:	9303      	str	r3, [sp, #12]
 8001f5c:	e73b      	b.n	8001dd6 <__aeabi_ddiv+0x4e>
 8001f5e:	2300      	movs	r3, #0
 8001f60:	2480      	movs	r4, #128	@ 0x80
 8001f62:	4698      	mov	r8, r3
 8001f64:	2600      	movs	r6, #0
 8001f66:	4b0f      	ldr	r3, [pc, #60]	@ (8001fa4 <__aeabi_ddiv+0x21c>)
 8001f68:	0324      	lsls	r4, r4, #12
 8001f6a:	e779      	b.n	8001e60 <__aeabi_ddiv+0xd8>
 8001f6c:	2480      	movs	r4, #128	@ 0x80
 8001f6e:	465b      	mov	r3, fp
 8001f70:	0324      	lsls	r4, r4, #12
 8001f72:	431c      	orrs	r4, r3
 8001f74:	0324      	lsls	r4, r4, #12
 8001f76:	002e      	movs	r6, r5
 8001f78:	4690      	mov	r8, r2
 8001f7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa4 <__aeabi_ddiv+0x21c>)
 8001f7c:	0b24      	lsrs	r4, r4, #12
 8001f7e:	e76f      	b.n	8001e60 <__aeabi_ddiv+0xd8>
 8001f80:	2480      	movs	r4, #128	@ 0x80
 8001f82:	464b      	mov	r3, r9
 8001f84:	0324      	lsls	r4, r4, #12
 8001f86:	4223      	tst	r3, r4
 8001f88:	d002      	beq.n	8001f90 <__aeabi_ddiv+0x208>
 8001f8a:	465b      	mov	r3, fp
 8001f8c:	4223      	tst	r3, r4
 8001f8e:	d0f0      	beq.n	8001f72 <__aeabi_ddiv+0x1ea>
 8001f90:	2480      	movs	r4, #128	@ 0x80
 8001f92:	464b      	mov	r3, r9
 8001f94:	0324      	lsls	r4, r4, #12
 8001f96:	431c      	orrs	r4, r3
 8001f98:	0324      	lsls	r4, r4, #12
 8001f9a:	9e02      	ldr	r6, [sp, #8]
 8001f9c:	4b01      	ldr	r3, [pc, #4]	@ (8001fa4 <__aeabi_ddiv+0x21c>)
 8001f9e:	0b24      	lsrs	r4, r4, #12
 8001fa0:	e75e      	b.n	8001e60 <__aeabi_ddiv+0xd8>
 8001fa2:	46c0      	nop			@ (mov r8, r8)
 8001fa4:	000007ff 	.word	0x000007ff
 8001fa8:	fffffc01 	.word	0xfffffc01
 8001fac:	0800badc 	.word	0x0800badc
 8001fb0:	fffff801 	.word	0xfffff801
 8001fb4:	000003f3 	.word	0x000003f3
 8001fb8:	fffffc0d 	.word	0xfffffc0d
 8001fbc:	45cb      	cmp	fp, r9
 8001fbe:	d200      	bcs.n	8001fc2 <__aeabi_ddiv+0x23a>
 8001fc0:	e0f8      	b.n	80021b4 <__aeabi_ddiv+0x42c>
 8001fc2:	d100      	bne.n	8001fc6 <__aeabi_ddiv+0x23e>
 8001fc4:	e0f3      	b.n	80021ae <__aeabi_ddiv+0x426>
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	425b      	negs	r3, r3
 8001fca:	469c      	mov	ip, r3
 8001fcc:	4644      	mov	r4, r8
 8001fce:	4648      	mov	r0, r9
 8001fd0:	2500      	movs	r5, #0
 8001fd2:	44e2      	add	sl, ip
 8001fd4:	465b      	mov	r3, fp
 8001fd6:	0e17      	lsrs	r7, r2, #24
 8001fd8:	021b      	lsls	r3, r3, #8
 8001fda:	431f      	orrs	r7, r3
 8001fdc:	0c19      	lsrs	r1, r3, #16
 8001fde:	043b      	lsls	r3, r7, #16
 8001fe0:	0212      	lsls	r2, r2, #8
 8001fe2:	9700      	str	r7, [sp, #0]
 8001fe4:	0c1f      	lsrs	r7, r3, #16
 8001fe6:	4691      	mov	r9, r2
 8001fe8:	9102      	str	r1, [sp, #8]
 8001fea:	9703      	str	r7, [sp, #12]
 8001fec:	f7fe f934 	bl	8000258 <__aeabi_uidivmod>
 8001ff0:	0002      	movs	r2, r0
 8001ff2:	437a      	muls	r2, r7
 8001ff4:	040b      	lsls	r3, r1, #16
 8001ff6:	0c21      	lsrs	r1, r4, #16
 8001ff8:	4680      	mov	r8, r0
 8001ffa:	4319      	orrs	r1, r3
 8001ffc:	428a      	cmp	r2, r1
 8001ffe:	d909      	bls.n	8002014 <__aeabi_ddiv+0x28c>
 8002000:	9f00      	ldr	r7, [sp, #0]
 8002002:	2301      	movs	r3, #1
 8002004:	46bc      	mov	ip, r7
 8002006:	425b      	negs	r3, r3
 8002008:	4461      	add	r1, ip
 800200a:	469c      	mov	ip, r3
 800200c:	44e0      	add	r8, ip
 800200e:	428f      	cmp	r7, r1
 8002010:	d800      	bhi.n	8002014 <__aeabi_ddiv+0x28c>
 8002012:	e15c      	b.n	80022ce <__aeabi_ddiv+0x546>
 8002014:	1a88      	subs	r0, r1, r2
 8002016:	9902      	ldr	r1, [sp, #8]
 8002018:	f7fe f91e 	bl	8000258 <__aeabi_uidivmod>
 800201c:	9a03      	ldr	r2, [sp, #12]
 800201e:	0424      	lsls	r4, r4, #16
 8002020:	4342      	muls	r2, r0
 8002022:	0409      	lsls	r1, r1, #16
 8002024:	0c24      	lsrs	r4, r4, #16
 8002026:	0003      	movs	r3, r0
 8002028:	430c      	orrs	r4, r1
 800202a:	42a2      	cmp	r2, r4
 800202c:	d906      	bls.n	800203c <__aeabi_ddiv+0x2b4>
 800202e:	9900      	ldr	r1, [sp, #0]
 8002030:	3b01      	subs	r3, #1
 8002032:	468c      	mov	ip, r1
 8002034:	4464      	add	r4, ip
 8002036:	42a1      	cmp	r1, r4
 8002038:	d800      	bhi.n	800203c <__aeabi_ddiv+0x2b4>
 800203a:	e142      	b.n	80022c2 <__aeabi_ddiv+0x53a>
 800203c:	1aa0      	subs	r0, r4, r2
 800203e:	4642      	mov	r2, r8
 8002040:	0412      	lsls	r2, r2, #16
 8002042:	431a      	orrs	r2, r3
 8002044:	4693      	mov	fp, r2
 8002046:	464b      	mov	r3, r9
 8002048:	4659      	mov	r1, fp
 800204a:	0c1b      	lsrs	r3, r3, #16
 800204c:	001f      	movs	r7, r3
 800204e:	9304      	str	r3, [sp, #16]
 8002050:	040b      	lsls	r3, r1, #16
 8002052:	4649      	mov	r1, r9
 8002054:	0409      	lsls	r1, r1, #16
 8002056:	0c09      	lsrs	r1, r1, #16
 8002058:	000c      	movs	r4, r1
 800205a:	0c1b      	lsrs	r3, r3, #16
 800205c:	435c      	muls	r4, r3
 800205e:	0c12      	lsrs	r2, r2, #16
 8002060:	437b      	muls	r3, r7
 8002062:	4688      	mov	r8, r1
 8002064:	4351      	muls	r1, r2
 8002066:	437a      	muls	r2, r7
 8002068:	0c27      	lsrs	r7, r4, #16
 800206a:	46bc      	mov	ip, r7
 800206c:	185b      	adds	r3, r3, r1
 800206e:	4463      	add	r3, ip
 8002070:	4299      	cmp	r1, r3
 8002072:	d903      	bls.n	800207c <__aeabi_ddiv+0x2f4>
 8002074:	2180      	movs	r1, #128	@ 0x80
 8002076:	0249      	lsls	r1, r1, #9
 8002078:	468c      	mov	ip, r1
 800207a:	4462      	add	r2, ip
 800207c:	0c19      	lsrs	r1, r3, #16
 800207e:	0424      	lsls	r4, r4, #16
 8002080:	041b      	lsls	r3, r3, #16
 8002082:	0c24      	lsrs	r4, r4, #16
 8002084:	188a      	adds	r2, r1, r2
 8002086:	191c      	adds	r4, r3, r4
 8002088:	4290      	cmp	r0, r2
 800208a:	d302      	bcc.n	8002092 <__aeabi_ddiv+0x30a>
 800208c:	d116      	bne.n	80020bc <__aeabi_ddiv+0x334>
 800208e:	42a5      	cmp	r5, r4
 8002090:	d214      	bcs.n	80020bc <__aeabi_ddiv+0x334>
 8002092:	465b      	mov	r3, fp
 8002094:	9f00      	ldr	r7, [sp, #0]
 8002096:	3b01      	subs	r3, #1
 8002098:	444d      	add	r5, r9
 800209a:	9305      	str	r3, [sp, #20]
 800209c:	454d      	cmp	r5, r9
 800209e:	419b      	sbcs	r3, r3
 80020a0:	46bc      	mov	ip, r7
 80020a2:	425b      	negs	r3, r3
 80020a4:	4463      	add	r3, ip
 80020a6:	18c0      	adds	r0, r0, r3
 80020a8:	4287      	cmp	r7, r0
 80020aa:	d300      	bcc.n	80020ae <__aeabi_ddiv+0x326>
 80020ac:	e102      	b.n	80022b4 <__aeabi_ddiv+0x52c>
 80020ae:	4282      	cmp	r2, r0
 80020b0:	d900      	bls.n	80020b4 <__aeabi_ddiv+0x32c>
 80020b2:	e129      	b.n	8002308 <__aeabi_ddiv+0x580>
 80020b4:	d100      	bne.n	80020b8 <__aeabi_ddiv+0x330>
 80020b6:	e124      	b.n	8002302 <__aeabi_ddiv+0x57a>
 80020b8:	9b05      	ldr	r3, [sp, #20]
 80020ba:	469b      	mov	fp, r3
 80020bc:	1b2c      	subs	r4, r5, r4
 80020be:	42a5      	cmp	r5, r4
 80020c0:	41ad      	sbcs	r5, r5
 80020c2:	9b00      	ldr	r3, [sp, #0]
 80020c4:	1a80      	subs	r0, r0, r2
 80020c6:	426d      	negs	r5, r5
 80020c8:	1b40      	subs	r0, r0, r5
 80020ca:	4283      	cmp	r3, r0
 80020cc:	d100      	bne.n	80020d0 <__aeabi_ddiv+0x348>
 80020ce:	e10f      	b.n	80022f0 <__aeabi_ddiv+0x568>
 80020d0:	9902      	ldr	r1, [sp, #8]
 80020d2:	f7fe f8c1 	bl	8000258 <__aeabi_uidivmod>
 80020d6:	9a03      	ldr	r2, [sp, #12]
 80020d8:	040b      	lsls	r3, r1, #16
 80020da:	4342      	muls	r2, r0
 80020dc:	0c21      	lsrs	r1, r4, #16
 80020de:	0005      	movs	r5, r0
 80020e0:	4319      	orrs	r1, r3
 80020e2:	428a      	cmp	r2, r1
 80020e4:	d900      	bls.n	80020e8 <__aeabi_ddiv+0x360>
 80020e6:	e0cb      	b.n	8002280 <__aeabi_ddiv+0x4f8>
 80020e8:	1a88      	subs	r0, r1, r2
 80020ea:	9902      	ldr	r1, [sp, #8]
 80020ec:	f7fe f8b4 	bl	8000258 <__aeabi_uidivmod>
 80020f0:	9a03      	ldr	r2, [sp, #12]
 80020f2:	0424      	lsls	r4, r4, #16
 80020f4:	4342      	muls	r2, r0
 80020f6:	0409      	lsls	r1, r1, #16
 80020f8:	0c24      	lsrs	r4, r4, #16
 80020fa:	0003      	movs	r3, r0
 80020fc:	430c      	orrs	r4, r1
 80020fe:	42a2      	cmp	r2, r4
 8002100:	d900      	bls.n	8002104 <__aeabi_ddiv+0x37c>
 8002102:	e0ca      	b.n	800229a <__aeabi_ddiv+0x512>
 8002104:	4641      	mov	r1, r8
 8002106:	1aa4      	subs	r4, r4, r2
 8002108:	042a      	lsls	r2, r5, #16
 800210a:	431a      	orrs	r2, r3
 800210c:	9f04      	ldr	r7, [sp, #16]
 800210e:	0413      	lsls	r3, r2, #16
 8002110:	0c1b      	lsrs	r3, r3, #16
 8002112:	4359      	muls	r1, r3
 8002114:	4640      	mov	r0, r8
 8002116:	437b      	muls	r3, r7
 8002118:	469c      	mov	ip, r3
 800211a:	0c15      	lsrs	r5, r2, #16
 800211c:	4368      	muls	r0, r5
 800211e:	0c0b      	lsrs	r3, r1, #16
 8002120:	4484      	add	ip, r0
 8002122:	4463      	add	r3, ip
 8002124:	437d      	muls	r5, r7
 8002126:	4298      	cmp	r0, r3
 8002128:	d903      	bls.n	8002132 <__aeabi_ddiv+0x3aa>
 800212a:	2080      	movs	r0, #128	@ 0x80
 800212c:	0240      	lsls	r0, r0, #9
 800212e:	4684      	mov	ip, r0
 8002130:	4465      	add	r5, ip
 8002132:	0c18      	lsrs	r0, r3, #16
 8002134:	0409      	lsls	r1, r1, #16
 8002136:	041b      	lsls	r3, r3, #16
 8002138:	0c09      	lsrs	r1, r1, #16
 800213a:	1940      	adds	r0, r0, r5
 800213c:	185b      	adds	r3, r3, r1
 800213e:	4284      	cmp	r4, r0
 8002140:	d327      	bcc.n	8002192 <__aeabi_ddiv+0x40a>
 8002142:	d023      	beq.n	800218c <__aeabi_ddiv+0x404>
 8002144:	2301      	movs	r3, #1
 8002146:	0035      	movs	r5, r6
 8002148:	431a      	orrs	r2, r3
 800214a:	4b94      	ldr	r3, [pc, #592]	@ (800239c <__aeabi_ddiv+0x614>)
 800214c:	4453      	add	r3, sl
 800214e:	2b00      	cmp	r3, #0
 8002150:	dd60      	ble.n	8002214 <__aeabi_ddiv+0x48c>
 8002152:	0751      	lsls	r1, r2, #29
 8002154:	d000      	beq.n	8002158 <__aeabi_ddiv+0x3d0>
 8002156:	e086      	b.n	8002266 <__aeabi_ddiv+0x4de>
 8002158:	002e      	movs	r6, r5
 800215a:	08d1      	lsrs	r1, r2, #3
 800215c:	465a      	mov	r2, fp
 800215e:	01d2      	lsls	r2, r2, #7
 8002160:	d506      	bpl.n	8002170 <__aeabi_ddiv+0x3e8>
 8002162:	465a      	mov	r2, fp
 8002164:	4b8e      	ldr	r3, [pc, #568]	@ (80023a0 <__aeabi_ddiv+0x618>)
 8002166:	401a      	ands	r2, r3
 8002168:	2380      	movs	r3, #128	@ 0x80
 800216a:	4693      	mov	fp, r2
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	4453      	add	r3, sl
 8002170:	4a8c      	ldr	r2, [pc, #560]	@ (80023a4 <__aeabi_ddiv+0x61c>)
 8002172:	4293      	cmp	r3, r2
 8002174:	dd00      	ble.n	8002178 <__aeabi_ddiv+0x3f0>
 8002176:	e680      	b.n	8001e7a <__aeabi_ddiv+0xf2>
 8002178:	465a      	mov	r2, fp
 800217a:	0752      	lsls	r2, r2, #29
 800217c:	430a      	orrs	r2, r1
 800217e:	4690      	mov	r8, r2
 8002180:	465a      	mov	r2, fp
 8002182:	055b      	lsls	r3, r3, #21
 8002184:	0254      	lsls	r4, r2, #9
 8002186:	0b24      	lsrs	r4, r4, #12
 8002188:	0d5b      	lsrs	r3, r3, #21
 800218a:	e669      	b.n	8001e60 <__aeabi_ddiv+0xd8>
 800218c:	0035      	movs	r5, r6
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0db      	beq.n	800214a <__aeabi_ddiv+0x3c2>
 8002192:	9d00      	ldr	r5, [sp, #0]
 8002194:	1e51      	subs	r1, r2, #1
 8002196:	46ac      	mov	ip, r5
 8002198:	4464      	add	r4, ip
 800219a:	42ac      	cmp	r4, r5
 800219c:	d200      	bcs.n	80021a0 <__aeabi_ddiv+0x418>
 800219e:	e09e      	b.n	80022de <__aeabi_ddiv+0x556>
 80021a0:	4284      	cmp	r4, r0
 80021a2:	d200      	bcs.n	80021a6 <__aeabi_ddiv+0x41e>
 80021a4:	e0e1      	b.n	800236a <__aeabi_ddiv+0x5e2>
 80021a6:	d100      	bne.n	80021aa <__aeabi_ddiv+0x422>
 80021a8:	e0ee      	b.n	8002388 <__aeabi_ddiv+0x600>
 80021aa:	000a      	movs	r2, r1
 80021ac:	e7ca      	b.n	8002144 <__aeabi_ddiv+0x3bc>
 80021ae:	4542      	cmp	r2, r8
 80021b0:	d900      	bls.n	80021b4 <__aeabi_ddiv+0x42c>
 80021b2:	e708      	b.n	8001fc6 <__aeabi_ddiv+0x23e>
 80021b4:	464b      	mov	r3, r9
 80021b6:	07dc      	lsls	r4, r3, #31
 80021b8:	0858      	lsrs	r0, r3, #1
 80021ba:	4643      	mov	r3, r8
 80021bc:	085b      	lsrs	r3, r3, #1
 80021be:	431c      	orrs	r4, r3
 80021c0:	4643      	mov	r3, r8
 80021c2:	07dd      	lsls	r5, r3, #31
 80021c4:	e706      	b.n	8001fd4 <__aeabi_ddiv+0x24c>
 80021c6:	f001 fa83 	bl	80036d0 <__clzsi2>
 80021ca:	2315      	movs	r3, #21
 80021cc:	469c      	mov	ip, r3
 80021ce:	4484      	add	ip, r0
 80021d0:	0002      	movs	r2, r0
 80021d2:	4663      	mov	r3, ip
 80021d4:	3220      	adds	r2, #32
 80021d6:	2b1c      	cmp	r3, #28
 80021d8:	dc00      	bgt.n	80021dc <__aeabi_ddiv+0x454>
 80021da:	e692      	b.n	8001f02 <__aeabi_ddiv+0x17a>
 80021dc:	0023      	movs	r3, r4
 80021de:	3808      	subs	r0, #8
 80021e0:	4083      	lsls	r3, r0
 80021e2:	4699      	mov	r9, r3
 80021e4:	2300      	movs	r3, #0
 80021e6:	4698      	mov	r8, r3
 80021e8:	e69a      	b.n	8001f20 <__aeabi_ddiv+0x198>
 80021ea:	f001 fa71 	bl	80036d0 <__clzsi2>
 80021ee:	0002      	movs	r2, r0
 80021f0:	0003      	movs	r3, r0
 80021f2:	3215      	adds	r2, #21
 80021f4:	3320      	adds	r3, #32
 80021f6:	2a1c      	cmp	r2, #28
 80021f8:	dc00      	bgt.n	80021fc <__aeabi_ddiv+0x474>
 80021fa:	e65f      	b.n	8001ebc <__aeabi_ddiv+0x134>
 80021fc:	9900      	ldr	r1, [sp, #0]
 80021fe:	3808      	subs	r0, #8
 8002200:	4081      	lsls	r1, r0
 8002202:	2200      	movs	r2, #0
 8002204:	468b      	mov	fp, r1
 8002206:	e666      	b.n	8001ed6 <__aeabi_ddiv+0x14e>
 8002208:	2200      	movs	r2, #0
 800220a:	002e      	movs	r6, r5
 800220c:	2400      	movs	r4, #0
 800220e:	4690      	mov	r8, r2
 8002210:	4b65      	ldr	r3, [pc, #404]	@ (80023a8 <__aeabi_ddiv+0x620>)
 8002212:	e625      	b.n	8001e60 <__aeabi_ddiv+0xd8>
 8002214:	002e      	movs	r6, r5
 8002216:	2101      	movs	r1, #1
 8002218:	1ac9      	subs	r1, r1, r3
 800221a:	2938      	cmp	r1, #56	@ 0x38
 800221c:	dd00      	ble.n	8002220 <__aeabi_ddiv+0x498>
 800221e:	e61b      	b.n	8001e58 <__aeabi_ddiv+0xd0>
 8002220:	291f      	cmp	r1, #31
 8002222:	dc7e      	bgt.n	8002322 <__aeabi_ddiv+0x59a>
 8002224:	4861      	ldr	r0, [pc, #388]	@ (80023ac <__aeabi_ddiv+0x624>)
 8002226:	0014      	movs	r4, r2
 8002228:	4450      	add	r0, sl
 800222a:	465b      	mov	r3, fp
 800222c:	4082      	lsls	r2, r0
 800222e:	4083      	lsls	r3, r0
 8002230:	40cc      	lsrs	r4, r1
 8002232:	1e50      	subs	r0, r2, #1
 8002234:	4182      	sbcs	r2, r0
 8002236:	4323      	orrs	r3, r4
 8002238:	431a      	orrs	r2, r3
 800223a:	465b      	mov	r3, fp
 800223c:	40cb      	lsrs	r3, r1
 800223e:	0751      	lsls	r1, r2, #29
 8002240:	d009      	beq.n	8002256 <__aeabi_ddiv+0x4ce>
 8002242:	210f      	movs	r1, #15
 8002244:	4011      	ands	r1, r2
 8002246:	2904      	cmp	r1, #4
 8002248:	d005      	beq.n	8002256 <__aeabi_ddiv+0x4ce>
 800224a:	1d11      	adds	r1, r2, #4
 800224c:	4291      	cmp	r1, r2
 800224e:	4192      	sbcs	r2, r2
 8002250:	4252      	negs	r2, r2
 8002252:	189b      	adds	r3, r3, r2
 8002254:	000a      	movs	r2, r1
 8002256:	0219      	lsls	r1, r3, #8
 8002258:	d400      	bmi.n	800225c <__aeabi_ddiv+0x4d4>
 800225a:	e09b      	b.n	8002394 <__aeabi_ddiv+0x60c>
 800225c:	2200      	movs	r2, #0
 800225e:	2301      	movs	r3, #1
 8002260:	2400      	movs	r4, #0
 8002262:	4690      	mov	r8, r2
 8002264:	e5fc      	b.n	8001e60 <__aeabi_ddiv+0xd8>
 8002266:	210f      	movs	r1, #15
 8002268:	4011      	ands	r1, r2
 800226a:	2904      	cmp	r1, #4
 800226c:	d100      	bne.n	8002270 <__aeabi_ddiv+0x4e8>
 800226e:	e773      	b.n	8002158 <__aeabi_ddiv+0x3d0>
 8002270:	1d11      	adds	r1, r2, #4
 8002272:	4291      	cmp	r1, r2
 8002274:	4192      	sbcs	r2, r2
 8002276:	4252      	negs	r2, r2
 8002278:	002e      	movs	r6, r5
 800227a:	08c9      	lsrs	r1, r1, #3
 800227c:	4493      	add	fp, r2
 800227e:	e76d      	b.n	800215c <__aeabi_ddiv+0x3d4>
 8002280:	9b00      	ldr	r3, [sp, #0]
 8002282:	3d01      	subs	r5, #1
 8002284:	469c      	mov	ip, r3
 8002286:	4461      	add	r1, ip
 8002288:	428b      	cmp	r3, r1
 800228a:	d900      	bls.n	800228e <__aeabi_ddiv+0x506>
 800228c:	e72c      	b.n	80020e8 <__aeabi_ddiv+0x360>
 800228e:	428a      	cmp	r2, r1
 8002290:	d800      	bhi.n	8002294 <__aeabi_ddiv+0x50c>
 8002292:	e729      	b.n	80020e8 <__aeabi_ddiv+0x360>
 8002294:	1e85      	subs	r5, r0, #2
 8002296:	4461      	add	r1, ip
 8002298:	e726      	b.n	80020e8 <__aeabi_ddiv+0x360>
 800229a:	9900      	ldr	r1, [sp, #0]
 800229c:	3b01      	subs	r3, #1
 800229e:	468c      	mov	ip, r1
 80022a0:	4464      	add	r4, ip
 80022a2:	42a1      	cmp	r1, r4
 80022a4:	d900      	bls.n	80022a8 <__aeabi_ddiv+0x520>
 80022a6:	e72d      	b.n	8002104 <__aeabi_ddiv+0x37c>
 80022a8:	42a2      	cmp	r2, r4
 80022aa:	d800      	bhi.n	80022ae <__aeabi_ddiv+0x526>
 80022ac:	e72a      	b.n	8002104 <__aeabi_ddiv+0x37c>
 80022ae:	1e83      	subs	r3, r0, #2
 80022b0:	4464      	add	r4, ip
 80022b2:	e727      	b.n	8002104 <__aeabi_ddiv+0x37c>
 80022b4:	4287      	cmp	r7, r0
 80022b6:	d000      	beq.n	80022ba <__aeabi_ddiv+0x532>
 80022b8:	e6fe      	b.n	80020b8 <__aeabi_ddiv+0x330>
 80022ba:	45a9      	cmp	r9, r5
 80022bc:	d900      	bls.n	80022c0 <__aeabi_ddiv+0x538>
 80022be:	e6fb      	b.n	80020b8 <__aeabi_ddiv+0x330>
 80022c0:	e6f5      	b.n	80020ae <__aeabi_ddiv+0x326>
 80022c2:	42a2      	cmp	r2, r4
 80022c4:	d800      	bhi.n	80022c8 <__aeabi_ddiv+0x540>
 80022c6:	e6b9      	b.n	800203c <__aeabi_ddiv+0x2b4>
 80022c8:	1e83      	subs	r3, r0, #2
 80022ca:	4464      	add	r4, ip
 80022cc:	e6b6      	b.n	800203c <__aeabi_ddiv+0x2b4>
 80022ce:	428a      	cmp	r2, r1
 80022d0:	d800      	bhi.n	80022d4 <__aeabi_ddiv+0x54c>
 80022d2:	e69f      	b.n	8002014 <__aeabi_ddiv+0x28c>
 80022d4:	46bc      	mov	ip, r7
 80022d6:	1e83      	subs	r3, r0, #2
 80022d8:	4698      	mov	r8, r3
 80022da:	4461      	add	r1, ip
 80022dc:	e69a      	b.n	8002014 <__aeabi_ddiv+0x28c>
 80022de:	000a      	movs	r2, r1
 80022e0:	4284      	cmp	r4, r0
 80022e2:	d000      	beq.n	80022e6 <__aeabi_ddiv+0x55e>
 80022e4:	e72e      	b.n	8002144 <__aeabi_ddiv+0x3bc>
 80022e6:	454b      	cmp	r3, r9
 80022e8:	d000      	beq.n	80022ec <__aeabi_ddiv+0x564>
 80022ea:	e72b      	b.n	8002144 <__aeabi_ddiv+0x3bc>
 80022ec:	0035      	movs	r5, r6
 80022ee:	e72c      	b.n	800214a <__aeabi_ddiv+0x3c2>
 80022f0:	4b2a      	ldr	r3, [pc, #168]	@ (800239c <__aeabi_ddiv+0x614>)
 80022f2:	4a2f      	ldr	r2, [pc, #188]	@ (80023b0 <__aeabi_ddiv+0x628>)
 80022f4:	4453      	add	r3, sl
 80022f6:	4592      	cmp	sl, r2
 80022f8:	db43      	blt.n	8002382 <__aeabi_ddiv+0x5fa>
 80022fa:	2201      	movs	r2, #1
 80022fc:	2100      	movs	r1, #0
 80022fe:	4493      	add	fp, r2
 8002300:	e72c      	b.n	800215c <__aeabi_ddiv+0x3d4>
 8002302:	42ac      	cmp	r4, r5
 8002304:	d800      	bhi.n	8002308 <__aeabi_ddiv+0x580>
 8002306:	e6d7      	b.n	80020b8 <__aeabi_ddiv+0x330>
 8002308:	2302      	movs	r3, #2
 800230a:	425b      	negs	r3, r3
 800230c:	469c      	mov	ip, r3
 800230e:	9900      	ldr	r1, [sp, #0]
 8002310:	444d      	add	r5, r9
 8002312:	454d      	cmp	r5, r9
 8002314:	419b      	sbcs	r3, r3
 8002316:	44e3      	add	fp, ip
 8002318:	468c      	mov	ip, r1
 800231a:	425b      	negs	r3, r3
 800231c:	4463      	add	r3, ip
 800231e:	18c0      	adds	r0, r0, r3
 8002320:	e6cc      	b.n	80020bc <__aeabi_ddiv+0x334>
 8002322:	201f      	movs	r0, #31
 8002324:	4240      	negs	r0, r0
 8002326:	1ac3      	subs	r3, r0, r3
 8002328:	4658      	mov	r0, fp
 800232a:	40d8      	lsrs	r0, r3
 800232c:	2920      	cmp	r1, #32
 800232e:	d004      	beq.n	800233a <__aeabi_ddiv+0x5b2>
 8002330:	4659      	mov	r1, fp
 8002332:	4b20      	ldr	r3, [pc, #128]	@ (80023b4 <__aeabi_ddiv+0x62c>)
 8002334:	4453      	add	r3, sl
 8002336:	4099      	lsls	r1, r3
 8002338:	430a      	orrs	r2, r1
 800233a:	1e53      	subs	r3, r2, #1
 800233c:	419a      	sbcs	r2, r3
 800233e:	2307      	movs	r3, #7
 8002340:	0019      	movs	r1, r3
 8002342:	4302      	orrs	r2, r0
 8002344:	2400      	movs	r4, #0
 8002346:	4011      	ands	r1, r2
 8002348:	4213      	tst	r3, r2
 800234a:	d009      	beq.n	8002360 <__aeabi_ddiv+0x5d8>
 800234c:	3308      	adds	r3, #8
 800234e:	4013      	ands	r3, r2
 8002350:	2b04      	cmp	r3, #4
 8002352:	d01d      	beq.n	8002390 <__aeabi_ddiv+0x608>
 8002354:	1d13      	adds	r3, r2, #4
 8002356:	4293      	cmp	r3, r2
 8002358:	4189      	sbcs	r1, r1
 800235a:	001a      	movs	r2, r3
 800235c:	4249      	negs	r1, r1
 800235e:	0749      	lsls	r1, r1, #29
 8002360:	08d2      	lsrs	r2, r2, #3
 8002362:	430a      	orrs	r2, r1
 8002364:	4690      	mov	r8, r2
 8002366:	2300      	movs	r3, #0
 8002368:	e57a      	b.n	8001e60 <__aeabi_ddiv+0xd8>
 800236a:	4649      	mov	r1, r9
 800236c:	9f00      	ldr	r7, [sp, #0]
 800236e:	004d      	lsls	r5, r1, #1
 8002370:	454d      	cmp	r5, r9
 8002372:	4189      	sbcs	r1, r1
 8002374:	46bc      	mov	ip, r7
 8002376:	4249      	negs	r1, r1
 8002378:	4461      	add	r1, ip
 800237a:	46a9      	mov	r9, r5
 800237c:	3a02      	subs	r2, #2
 800237e:	1864      	adds	r4, r4, r1
 8002380:	e7ae      	b.n	80022e0 <__aeabi_ddiv+0x558>
 8002382:	2201      	movs	r2, #1
 8002384:	4252      	negs	r2, r2
 8002386:	e746      	b.n	8002216 <__aeabi_ddiv+0x48e>
 8002388:	4599      	cmp	r9, r3
 800238a:	d3ee      	bcc.n	800236a <__aeabi_ddiv+0x5e2>
 800238c:	000a      	movs	r2, r1
 800238e:	e7aa      	b.n	80022e6 <__aeabi_ddiv+0x55e>
 8002390:	2100      	movs	r1, #0
 8002392:	e7e5      	b.n	8002360 <__aeabi_ddiv+0x5d8>
 8002394:	0759      	lsls	r1, r3, #29
 8002396:	025b      	lsls	r3, r3, #9
 8002398:	0b1c      	lsrs	r4, r3, #12
 800239a:	e7e1      	b.n	8002360 <__aeabi_ddiv+0x5d8>
 800239c:	000003ff 	.word	0x000003ff
 80023a0:	feffffff 	.word	0xfeffffff
 80023a4:	000007fe 	.word	0x000007fe
 80023a8:	000007ff 	.word	0x000007ff
 80023ac:	0000041e 	.word	0x0000041e
 80023b0:	fffffc02 	.word	0xfffffc02
 80023b4:	0000043e 	.word	0x0000043e

080023b8 <__eqdf2>:
 80023b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ba:	4657      	mov	r7, sl
 80023bc:	46de      	mov	lr, fp
 80023be:	464e      	mov	r6, r9
 80023c0:	4645      	mov	r5, r8
 80023c2:	b5e0      	push	{r5, r6, r7, lr}
 80023c4:	000d      	movs	r5, r1
 80023c6:	0004      	movs	r4, r0
 80023c8:	0fe8      	lsrs	r0, r5, #31
 80023ca:	4683      	mov	fp, r0
 80023cc:	0309      	lsls	r1, r1, #12
 80023ce:	0fd8      	lsrs	r0, r3, #31
 80023d0:	0b09      	lsrs	r1, r1, #12
 80023d2:	4682      	mov	sl, r0
 80023d4:	4819      	ldr	r0, [pc, #100]	@ (800243c <__eqdf2+0x84>)
 80023d6:	468c      	mov	ip, r1
 80023d8:	031f      	lsls	r7, r3, #12
 80023da:	0069      	lsls	r1, r5, #1
 80023dc:	005e      	lsls	r6, r3, #1
 80023de:	0d49      	lsrs	r1, r1, #21
 80023e0:	0b3f      	lsrs	r7, r7, #12
 80023e2:	0d76      	lsrs	r6, r6, #21
 80023e4:	4281      	cmp	r1, r0
 80023e6:	d018      	beq.n	800241a <__eqdf2+0x62>
 80023e8:	4286      	cmp	r6, r0
 80023ea:	d00f      	beq.n	800240c <__eqdf2+0x54>
 80023ec:	2001      	movs	r0, #1
 80023ee:	42b1      	cmp	r1, r6
 80023f0:	d10d      	bne.n	800240e <__eqdf2+0x56>
 80023f2:	45bc      	cmp	ip, r7
 80023f4:	d10b      	bne.n	800240e <__eqdf2+0x56>
 80023f6:	4294      	cmp	r4, r2
 80023f8:	d109      	bne.n	800240e <__eqdf2+0x56>
 80023fa:	45d3      	cmp	fp, sl
 80023fc:	d01c      	beq.n	8002438 <__eqdf2+0x80>
 80023fe:	2900      	cmp	r1, #0
 8002400:	d105      	bne.n	800240e <__eqdf2+0x56>
 8002402:	4660      	mov	r0, ip
 8002404:	4320      	orrs	r0, r4
 8002406:	1e43      	subs	r3, r0, #1
 8002408:	4198      	sbcs	r0, r3
 800240a:	e000      	b.n	800240e <__eqdf2+0x56>
 800240c:	2001      	movs	r0, #1
 800240e:	bcf0      	pop	{r4, r5, r6, r7}
 8002410:	46bb      	mov	fp, r7
 8002412:	46b2      	mov	sl, r6
 8002414:	46a9      	mov	r9, r5
 8002416:	46a0      	mov	r8, r4
 8002418:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800241a:	2001      	movs	r0, #1
 800241c:	428e      	cmp	r6, r1
 800241e:	d1f6      	bne.n	800240e <__eqdf2+0x56>
 8002420:	4661      	mov	r1, ip
 8002422:	4339      	orrs	r1, r7
 8002424:	000f      	movs	r7, r1
 8002426:	4317      	orrs	r7, r2
 8002428:	4327      	orrs	r7, r4
 800242a:	d1f0      	bne.n	800240e <__eqdf2+0x56>
 800242c:	465b      	mov	r3, fp
 800242e:	4652      	mov	r2, sl
 8002430:	1a98      	subs	r0, r3, r2
 8002432:	1e43      	subs	r3, r0, #1
 8002434:	4198      	sbcs	r0, r3
 8002436:	e7ea      	b.n	800240e <__eqdf2+0x56>
 8002438:	2000      	movs	r0, #0
 800243a:	e7e8      	b.n	800240e <__eqdf2+0x56>
 800243c:	000007ff 	.word	0x000007ff

08002440 <__gedf2>:
 8002440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002442:	4657      	mov	r7, sl
 8002444:	464e      	mov	r6, r9
 8002446:	4645      	mov	r5, r8
 8002448:	46de      	mov	lr, fp
 800244a:	b5e0      	push	{r5, r6, r7, lr}
 800244c:	000d      	movs	r5, r1
 800244e:	030e      	lsls	r6, r1, #12
 8002450:	0049      	lsls	r1, r1, #1
 8002452:	0d49      	lsrs	r1, r1, #21
 8002454:	468a      	mov	sl, r1
 8002456:	0fdf      	lsrs	r7, r3, #31
 8002458:	0fe9      	lsrs	r1, r5, #31
 800245a:	46bc      	mov	ip, r7
 800245c:	b083      	sub	sp, #12
 800245e:	4f2f      	ldr	r7, [pc, #188]	@ (800251c <__gedf2+0xdc>)
 8002460:	0004      	movs	r4, r0
 8002462:	4680      	mov	r8, r0
 8002464:	9101      	str	r1, [sp, #4]
 8002466:	0058      	lsls	r0, r3, #1
 8002468:	0319      	lsls	r1, r3, #12
 800246a:	4691      	mov	r9, r2
 800246c:	0b36      	lsrs	r6, r6, #12
 800246e:	0b09      	lsrs	r1, r1, #12
 8002470:	0d40      	lsrs	r0, r0, #21
 8002472:	45ba      	cmp	sl, r7
 8002474:	d01d      	beq.n	80024b2 <__gedf2+0x72>
 8002476:	42b8      	cmp	r0, r7
 8002478:	d00d      	beq.n	8002496 <__gedf2+0x56>
 800247a:	4657      	mov	r7, sl
 800247c:	2f00      	cmp	r7, #0
 800247e:	d12a      	bne.n	80024d6 <__gedf2+0x96>
 8002480:	4334      	orrs	r4, r6
 8002482:	2800      	cmp	r0, #0
 8002484:	d124      	bne.n	80024d0 <__gedf2+0x90>
 8002486:	430a      	orrs	r2, r1
 8002488:	d036      	beq.n	80024f8 <__gedf2+0xb8>
 800248a:	2c00      	cmp	r4, #0
 800248c:	d141      	bne.n	8002512 <__gedf2+0xd2>
 800248e:	4663      	mov	r3, ip
 8002490:	0058      	lsls	r0, r3, #1
 8002492:	3801      	subs	r0, #1
 8002494:	e015      	b.n	80024c2 <__gedf2+0x82>
 8002496:	4311      	orrs	r1, r2
 8002498:	d138      	bne.n	800250c <__gedf2+0xcc>
 800249a:	4653      	mov	r3, sl
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <__gedf2+0x64>
 80024a0:	4326      	orrs	r6, r4
 80024a2:	d0f4      	beq.n	800248e <__gedf2+0x4e>
 80024a4:	9b01      	ldr	r3, [sp, #4]
 80024a6:	4563      	cmp	r3, ip
 80024a8:	d107      	bne.n	80024ba <__gedf2+0x7a>
 80024aa:	9b01      	ldr	r3, [sp, #4]
 80024ac:	0058      	lsls	r0, r3, #1
 80024ae:	3801      	subs	r0, #1
 80024b0:	e007      	b.n	80024c2 <__gedf2+0x82>
 80024b2:	4326      	orrs	r6, r4
 80024b4:	d12a      	bne.n	800250c <__gedf2+0xcc>
 80024b6:	4550      	cmp	r0, sl
 80024b8:	d021      	beq.n	80024fe <__gedf2+0xbe>
 80024ba:	2001      	movs	r0, #1
 80024bc:	9b01      	ldr	r3, [sp, #4]
 80024be:	425f      	negs	r7, r3
 80024c0:	4338      	orrs	r0, r7
 80024c2:	b003      	add	sp, #12
 80024c4:	bcf0      	pop	{r4, r5, r6, r7}
 80024c6:	46bb      	mov	fp, r7
 80024c8:	46b2      	mov	sl, r6
 80024ca:	46a9      	mov	r9, r5
 80024cc:	46a0      	mov	r8, r4
 80024ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024d0:	2c00      	cmp	r4, #0
 80024d2:	d0dc      	beq.n	800248e <__gedf2+0x4e>
 80024d4:	e7e6      	b.n	80024a4 <__gedf2+0x64>
 80024d6:	2800      	cmp	r0, #0
 80024d8:	d0ef      	beq.n	80024ba <__gedf2+0x7a>
 80024da:	9b01      	ldr	r3, [sp, #4]
 80024dc:	4563      	cmp	r3, ip
 80024de:	d1ec      	bne.n	80024ba <__gedf2+0x7a>
 80024e0:	4582      	cmp	sl, r0
 80024e2:	dcea      	bgt.n	80024ba <__gedf2+0x7a>
 80024e4:	dbe1      	blt.n	80024aa <__gedf2+0x6a>
 80024e6:	428e      	cmp	r6, r1
 80024e8:	d8e7      	bhi.n	80024ba <__gedf2+0x7a>
 80024ea:	d1de      	bne.n	80024aa <__gedf2+0x6a>
 80024ec:	45c8      	cmp	r8, r9
 80024ee:	d8e4      	bhi.n	80024ba <__gedf2+0x7a>
 80024f0:	2000      	movs	r0, #0
 80024f2:	45c8      	cmp	r8, r9
 80024f4:	d2e5      	bcs.n	80024c2 <__gedf2+0x82>
 80024f6:	e7d8      	b.n	80024aa <__gedf2+0x6a>
 80024f8:	2c00      	cmp	r4, #0
 80024fa:	d0e2      	beq.n	80024c2 <__gedf2+0x82>
 80024fc:	e7dd      	b.n	80024ba <__gedf2+0x7a>
 80024fe:	4311      	orrs	r1, r2
 8002500:	d104      	bne.n	800250c <__gedf2+0xcc>
 8002502:	9b01      	ldr	r3, [sp, #4]
 8002504:	4563      	cmp	r3, ip
 8002506:	d1d8      	bne.n	80024ba <__gedf2+0x7a>
 8002508:	2000      	movs	r0, #0
 800250a:	e7da      	b.n	80024c2 <__gedf2+0x82>
 800250c:	2002      	movs	r0, #2
 800250e:	4240      	negs	r0, r0
 8002510:	e7d7      	b.n	80024c2 <__gedf2+0x82>
 8002512:	9b01      	ldr	r3, [sp, #4]
 8002514:	4563      	cmp	r3, ip
 8002516:	d0e6      	beq.n	80024e6 <__gedf2+0xa6>
 8002518:	e7cf      	b.n	80024ba <__gedf2+0x7a>
 800251a:	46c0      	nop			@ (mov r8, r8)
 800251c:	000007ff 	.word	0x000007ff

08002520 <__ledf2>:
 8002520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002522:	4657      	mov	r7, sl
 8002524:	464e      	mov	r6, r9
 8002526:	4645      	mov	r5, r8
 8002528:	46de      	mov	lr, fp
 800252a:	b5e0      	push	{r5, r6, r7, lr}
 800252c:	000d      	movs	r5, r1
 800252e:	030e      	lsls	r6, r1, #12
 8002530:	0049      	lsls	r1, r1, #1
 8002532:	0d49      	lsrs	r1, r1, #21
 8002534:	468a      	mov	sl, r1
 8002536:	0fdf      	lsrs	r7, r3, #31
 8002538:	0fe9      	lsrs	r1, r5, #31
 800253a:	46bc      	mov	ip, r7
 800253c:	b083      	sub	sp, #12
 800253e:	4f2e      	ldr	r7, [pc, #184]	@ (80025f8 <__ledf2+0xd8>)
 8002540:	0004      	movs	r4, r0
 8002542:	4680      	mov	r8, r0
 8002544:	9101      	str	r1, [sp, #4]
 8002546:	0058      	lsls	r0, r3, #1
 8002548:	0319      	lsls	r1, r3, #12
 800254a:	4691      	mov	r9, r2
 800254c:	0b36      	lsrs	r6, r6, #12
 800254e:	0b09      	lsrs	r1, r1, #12
 8002550:	0d40      	lsrs	r0, r0, #21
 8002552:	45ba      	cmp	sl, r7
 8002554:	d01e      	beq.n	8002594 <__ledf2+0x74>
 8002556:	42b8      	cmp	r0, r7
 8002558:	d00d      	beq.n	8002576 <__ledf2+0x56>
 800255a:	4657      	mov	r7, sl
 800255c:	2f00      	cmp	r7, #0
 800255e:	d127      	bne.n	80025b0 <__ledf2+0x90>
 8002560:	4334      	orrs	r4, r6
 8002562:	2800      	cmp	r0, #0
 8002564:	d133      	bne.n	80025ce <__ledf2+0xae>
 8002566:	430a      	orrs	r2, r1
 8002568:	d034      	beq.n	80025d4 <__ledf2+0xb4>
 800256a:	2c00      	cmp	r4, #0
 800256c:	d140      	bne.n	80025f0 <__ledf2+0xd0>
 800256e:	4663      	mov	r3, ip
 8002570:	0058      	lsls	r0, r3, #1
 8002572:	3801      	subs	r0, #1
 8002574:	e015      	b.n	80025a2 <__ledf2+0x82>
 8002576:	4311      	orrs	r1, r2
 8002578:	d112      	bne.n	80025a0 <__ledf2+0x80>
 800257a:	4653      	mov	r3, sl
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <__ledf2+0x64>
 8002580:	4326      	orrs	r6, r4
 8002582:	d0f4      	beq.n	800256e <__ledf2+0x4e>
 8002584:	9b01      	ldr	r3, [sp, #4]
 8002586:	4563      	cmp	r3, ip
 8002588:	d01d      	beq.n	80025c6 <__ledf2+0xa6>
 800258a:	2001      	movs	r0, #1
 800258c:	9b01      	ldr	r3, [sp, #4]
 800258e:	425f      	negs	r7, r3
 8002590:	4338      	orrs	r0, r7
 8002592:	e006      	b.n	80025a2 <__ledf2+0x82>
 8002594:	4326      	orrs	r6, r4
 8002596:	d103      	bne.n	80025a0 <__ledf2+0x80>
 8002598:	4550      	cmp	r0, sl
 800259a:	d1f6      	bne.n	800258a <__ledf2+0x6a>
 800259c:	4311      	orrs	r1, r2
 800259e:	d01c      	beq.n	80025da <__ledf2+0xba>
 80025a0:	2002      	movs	r0, #2
 80025a2:	b003      	add	sp, #12
 80025a4:	bcf0      	pop	{r4, r5, r6, r7}
 80025a6:	46bb      	mov	fp, r7
 80025a8:	46b2      	mov	sl, r6
 80025aa:	46a9      	mov	r9, r5
 80025ac:	46a0      	mov	r8, r4
 80025ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025b0:	2800      	cmp	r0, #0
 80025b2:	d0ea      	beq.n	800258a <__ledf2+0x6a>
 80025b4:	9b01      	ldr	r3, [sp, #4]
 80025b6:	4563      	cmp	r3, ip
 80025b8:	d1e7      	bne.n	800258a <__ledf2+0x6a>
 80025ba:	4582      	cmp	sl, r0
 80025bc:	dce5      	bgt.n	800258a <__ledf2+0x6a>
 80025be:	db02      	blt.n	80025c6 <__ledf2+0xa6>
 80025c0:	428e      	cmp	r6, r1
 80025c2:	d8e2      	bhi.n	800258a <__ledf2+0x6a>
 80025c4:	d00e      	beq.n	80025e4 <__ledf2+0xc4>
 80025c6:	9b01      	ldr	r3, [sp, #4]
 80025c8:	0058      	lsls	r0, r3, #1
 80025ca:	3801      	subs	r0, #1
 80025cc:	e7e9      	b.n	80025a2 <__ledf2+0x82>
 80025ce:	2c00      	cmp	r4, #0
 80025d0:	d0cd      	beq.n	800256e <__ledf2+0x4e>
 80025d2:	e7d7      	b.n	8002584 <__ledf2+0x64>
 80025d4:	2c00      	cmp	r4, #0
 80025d6:	d0e4      	beq.n	80025a2 <__ledf2+0x82>
 80025d8:	e7d7      	b.n	800258a <__ledf2+0x6a>
 80025da:	9b01      	ldr	r3, [sp, #4]
 80025dc:	2000      	movs	r0, #0
 80025de:	4563      	cmp	r3, ip
 80025e0:	d0df      	beq.n	80025a2 <__ledf2+0x82>
 80025e2:	e7d2      	b.n	800258a <__ledf2+0x6a>
 80025e4:	45c8      	cmp	r8, r9
 80025e6:	d8d0      	bhi.n	800258a <__ledf2+0x6a>
 80025e8:	2000      	movs	r0, #0
 80025ea:	45c8      	cmp	r8, r9
 80025ec:	d2d9      	bcs.n	80025a2 <__ledf2+0x82>
 80025ee:	e7ea      	b.n	80025c6 <__ledf2+0xa6>
 80025f0:	9b01      	ldr	r3, [sp, #4]
 80025f2:	4563      	cmp	r3, ip
 80025f4:	d0e4      	beq.n	80025c0 <__ledf2+0xa0>
 80025f6:	e7c8      	b.n	800258a <__ledf2+0x6a>
 80025f8:	000007ff 	.word	0x000007ff

080025fc <__aeabi_dmul>:
 80025fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025fe:	4657      	mov	r7, sl
 8002600:	464e      	mov	r6, r9
 8002602:	46de      	mov	lr, fp
 8002604:	4645      	mov	r5, r8
 8002606:	b5e0      	push	{r5, r6, r7, lr}
 8002608:	001f      	movs	r7, r3
 800260a:	030b      	lsls	r3, r1, #12
 800260c:	0b1b      	lsrs	r3, r3, #12
 800260e:	0016      	movs	r6, r2
 8002610:	469a      	mov	sl, r3
 8002612:	0fca      	lsrs	r2, r1, #31
 8002614:	004b      	lsls	r3, r1, #1
 8002616:	0004      	movs	r4, r0
 8002618:	4691      	mov	r9, r2
 800261a:	b085      	sub	sp, #20
 800261c:	0d5b      	lsrs	r3, r3, #21
 800261e:	d100      	bne.n	8002622 <__aeabi_dmul+0x26>
 8002620:	e1cf      	b.n	80029c2 <__aeabi_dmul+0x3c6>
 8002622:	4acd      	ldr	r2, [pc, #820]	@ (8002958 <__aeabi_dmul+0x35c>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d055      	beq.n	80026d4 <__aeabi_dmul+0xd8>
 8002628:	4651      	mov	r1, sl
 800262a:	0f42      	lsrs	r2, r0, #29
 800262c:	00c9      	lsls	r1, r1, #3
 800262e:	430a      	orrs	r2, r1
 8002630:	2180      	movs	r1, #128	@ 0x80
 8002632:	0409      	lsls	r1, r1, #16
 8002634:	4311      	orrs	r1, r2
 8002636:	00c2      	lsls	r2, r0, #3
 8002638:	4690      	mov	r8, r2
 800263a:	4ac8      	ldr	r2, [pc, #800]	@ (800295c <__aeabi_dmul+0x360>)
 800263c:	468a      	mov	sl, r1
 800263e:	4693      	mov	fp, r2
 8002640:	449b      	add	fp, r3
 8002642:	2300      	movs	r3, #0
 8002644:	2500      	movs	r5, #0
 8002646:	9302      	str	r3, [sp, #8]
 8002648:	033c      	lsls	r4, r7, #12
 800264a:	007b      	lsls	r3, r7, #1
 800264c:	0ffa      	lsrs	r2, r7, #31
 800264e:	9601      	str	r6, [sp, #4]
 8002650:	0b24      	lsrs	r4, r4, #12
 8002652:	0d5b      	lsrs	r3, r3, #21
 8002654:	9200      	str	r2, [sp, #0]
 8002656:	d100      	bne.n	800265a <__aeabi_dmul+0x5e>
 8002658:	e188      	b.n	800296c <__aeabi_dmul+0x370>
 800265a:	4abf      	ldr	r2, [pc, #764]	@ (8002958 <__aeabi_dmul+0x35c>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d100      	bne.n	8002662 <__aeabi_dmul+0x66>
 8002660:	e092      	b.n	8002788 <__aeabi_dmul+0x18c>
 8002662:	4abe      	ldr	r2, [pc, #760]	@ (800295c <__aeabi_dmul+0x360>)
 8002664:	4694      	mov	ip, r2
 8002666:	4463      	add	r3, ip
 8002668:	449b      	add	fp, r3
 800266a:	2d0a      	cmp	r5, #10
 800266c:	dc42      	bgt.n	80026f4 <__aeabi_dmul+0xf8>
 800266e:	00e4      	lsls	r4, r4, #3
 8002670:	0f73      	lsrs	r3, r6, #29
 8002672:	4323      	orrs	r3, r4
 8002674:	2480      	movs	r4, #128	@ 0x80
 8002676:	4649      	mov	r1, r9
 8002678:	0424      	lsls	r4, r4, #16
 800267a:	431c      	orrs	r4, r3
 800267c:	00f3      	lsls	r3, r6, #3
 800267e:	9301      	str	r3, [sp, #4]
 8002680:	9b00      	ldr	r3, [sp, #0]
 8002682:	2000      	movs	r0, #0
 8002684:	4059      	eors	r1, r3
 8002686:	b2cb      	uxtb	r3, r1
 8002688:	9303      	str	r3, [sp, #12]
 800268a:	2d02      	cmp	r5, #2
 800268c:	dc00      	bgt.n	8002690 <__aeabi_dmul+0x94>
 800268e:	e094      	b.n	80027ba <__aeabi_dmul+0x1be>
 8002690:	2301      	movs	r3, #1
 8002692:	40ab      	lsls	r3, r5
 8002694:	001d      	movs	r5, r3
 8002696:	23a6      	movs	r3, #166	@ 0xa6
 8002698:	002a      	movs	r2, r5
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	401a      	ands	r2, r3
 800269e:	421d      	tst	r5, r3
 80026a0:	d000      	beq.n	80026a4 <__aeabi_dmul+0xa8>
 80026a2:	e229      	b.n	8002af8 <__aeabi_dmul+0x4fc>
 80026a4:	2390      	movs	r3, #144	@ 0x90
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	421d      	tst	r5, r3
 80026aa:	d100      	bne.n	80026ae <__aeabi_dmul+0xb2>
 80026ac:	e24d      	b.n	8002b4a <__aeabi_dmul+0x54e>
 80026ae:	2300      	movs	r3, #0
 80026b0:	2480      	movs	r4, #128	@ 0x80
 80026b2:	4699      	mov	r9, r3
 80026b4:	0324      	lsls	r4, r4, #12
 80026b6:	4ba8      	ldr	r3, [pc, #672]	@ (8002958 <__aeabi_dmul+0x35c>)
 80026b8:	0010      	movs	r0, r2
 80026ba:	464a      	mov	r2, r9
 80026bc:	051b      	lsls	r3, r3, #20
 80026be:	4323      	orrs	r3, r4
 80026c0:	07d2      	lsls	r2, r2, #31
 80026c2:	4313      	orrs	r3, r2
 80026c4:	0019      	movs	r1, r3
 80026c6:	b005      	add	sp, #20
 80026c8:	bcf0      	pop	{r4, r5, r6, r7}
 80026ca:	46bb      	mov	fp, r7
 80026cc:	46b2      	mov	sl, r6
 80026ce:	46a9      	mov	r9, r5
 80026d0:	46a0      	mov	r8, r4
 80026d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026d4:	4652      	mov	r2, sl
 80026d6:	4302      	orrs	r2, r0
 80026d8:	4690      	mov	r8, r2
 80026da:	d000      	beq.n	80026de <__aeabi_dmul+0xe2>
 80026dc:	e1ac      	b.n	8002a38 <__aeabi_dmul+0x43c>
 80026de:	469b      	mov	fp, r3
 80026e0:	2302      	movs	r3, #2
 80026e2:	4692      	mov	sl, r2
 80026e4:	2508      	movs	r5, #8
 80026e6:	9302      	str	r3, [sp, #8]
 80026e8:	e7ae      	b.n	8002648 <__aeabi_dmul+0x4c>
 80026ea:	9b00      	ldr	r3, [sp, #0]
 80026ec:	46a2      	mov	sl, r4
 80026ee:	4699      	mov	r9, r3
 80026f0:	9b01      	ldr	r3, [sp, #4]
 80026f2:	4698      	mov	r8, r3
 80026f4:	9b02      	ldr	r3, [sp, #8]
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d100      	bne.n	80026fc <__aeabi_dmul+0x100>
 80026fa:	e1ca      	b.n	8002a92 <__aeabi_dmul+0x496>
 80026fc:	2b03      	cmp	r3, #3
 80026fe:	d100      	bne.n	8002702 <__aeabi_dmul+0x106>
 8002700:	e192      	b.n	8002a28 <__aeabi_dmul+0x42c>
 8002702:	2b01      	cmp	r3, #1
 8002704:	d110      	bne.n	8002728 <__aeabi_dmul+0x12c>
 8002706:	2300      	movs	r3, #0
 8002708:	2400      	movs	r4, #0
 800270a:	2200      	movs	r2, #0
 800270c:	e7d4      	b.n	80026b8 <__aeabi_dmul+0xbc>
 800270e:	2201      	movs	r2, #1
 8002710:	087b      	lsrs	r3, r7, #1
 8002712:	403a      	ands	r2, r7
 8002714:	4313      	orrs	r3, r2
 8002716:	4652      	mov	r2, sl
 8002718:	07d2      	lsls	r2, r2, #31
 800271a:	4313      	orrs	r3, r2
 800271c:	4698      	mov	r8, r3
 800271e:	4653      	mov	r3, sl
 8002720:	085b      	lsrs	r3, r3, #1
 8002722:	469a      	mov	sl, r3
 8002724:	9b03      	ldr	r3, [sp, #12]
 8002726:	4699      	mov	r9, r3
 8002728:	465b      	mov	r3, fp
 800272a:	1c58      	adds	r0, r3, #1
 800272c:	2380      	movs	r3, #128	@ 0x80
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	445b      	add	r3, fp
 8002732:	2b00      	cmp	r3, #0
 8002734:	dc00      	bgt.n	8002738 <__aeabi_dmul+0x13c>
 8002736:	e1b1      	b.n	8002a9c <__aeabi_dmul+0x4a0>
 8002738:	4642      	mov	r2, r8
 800273a:	0752      	lsls	r2, r2, #29
 800273c:	d00b      	beq.n	8002756 <__aeabi_dmul+0x15a>
 800273e:	220f      	movs	r2, #15
 8002740:	4641      	mov	r1, r8
 8002742:	400a      	ands	r2, r1
 8002744:	2a04      	cmp	r2, #4
 8002746:	d006      	beq.n	8002756 <__aeabi_dmul+0x15a>
 8002748:	4642      	mov	r2, r8
 800274a:	1d11      	adds	r1, r2, #4
 800274c:	4541      	cmp	r1, r8
 800274e:	4192      	sbcs	r2, r2
 8002750:	4688      	mov	r8, r1
 8002752:	4252      	negs	r2, r2
 8002754:	4492      	add	sl, r2
 8002756:	4652      	mov	r2, sl
 8002758:	01d2      	lsls	r2, r2, #7
 800275a:	d506      	bpl.n	800276a <__aeabi_dmul+0x16e>
 800275c:	4652      	mov	r2, sl
 800275e:	4b80      	ldr	r3, [pc, #512]	@ (8002960 <__aeabi_dmul+0x364>)
 8002760:	401a      	ands	r2, r3
 8002762:	2380      	movs	r3, #128	@ 0x80
 8002764:	4692      	mov	sl, r2
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	18c3      	adds	r3, r0, r3
 800276a:	4a7e      	ldr	r2, [pc, #504]	@ (8002964 <__aeabi_dmul+0x368>)
 800276c:	4293      	cmp	r3, r2
 800276e:	dd00      	ble.n	8002772 <__aeabi_dmul+0x176>
 8002770:	e18f      	b.n	8002a92 <__aeabi_dmul+0x496>
 8002772:	4642      	mov	r2, r8
 8002774:	08d1      	lsrs	r1, r2, #3
 8002776:	4652      	mov	r2, sl
 8002778:	0752      	lsls	r2, r2, #29
 800277a:	430a      	orrs	r2, r1
 800277c:	4651      	mov	r1, sl
 800277e:	055b      	lsls	r3, r3, #21
 8002780:	024c      	lsls	r4, r1, #9
 8002782:	0b24      	lsrs	r4, r4, #12
 8002784:	0d5b      	lsrs	r3, r3, #21
 8002786:	e797      	b.n	80026b8 <__aeabi_dmul+0xbc>
 8002788:	4b73      	ldr	r3, [pc, #460]	@ (8002958 <__aeabi_dmul+0x35c>)
 800278a:	4326      	orrs	r6, r4
 800278c:	469c      	mov	ip, r3
 800278e:	44e3      	add	fp, ip
 8002790:	2e00      	cmp	r6, #0
 8002792:	d100      	bne.n	8002796 <__aeabi_dmul+0x19a>
 8002794:	e16f      	b.n	8002a76 <__aeabi_dmul+0x47a>
 8002796:	2303      	movs	r3, #3
 8002798:	4649      	mov	r1, r9
 800279a:	431d      	orrs	r5, r3
 800279c:	9b00      	ldr	r3, [sp, #0]
 800279e:	4059      	eors	r1, r3
 80027a0:	b2cb      	uxtb	r3, r1
 80027a2:	9303      	str	r3, [sp, #12]
 80027a4:	2d0a      	cmp	r5, #10
 80027a6:	dd00      	ble.n	80027aa <__aeabi_dmul+0x1ae>
 80027a8:	e133      	b.n	8002a12 <__aeabi_dmul+0x416>
 80027aa:	2301      	movs	r3, #1
 80027ac:	40ab      	lsls	r3, r5
 80027ae:	001d      	movs	r5, r3
 80027b0:	2303      	movs	r3, #3
 80027b2:	9302      	str	r3, [sp, #8]
 80027b4:	2288      	movs	r2, #136	@ 0x88
 80027b6:	422a      	tst	r2, r5
 80027b8:	d197      	bne.n	80026ea <__aeabi_dmul+0xee>
 80027ba:	4642      	mov	r2, r8
 80027bc:	4643      	mov	r3, r8
 80027be:	0412      	lsls	r2, r2, #16
 80027c0:	0c12      	lsrs	r2, r2, #16
 80027c2:	0016      	movs	r6, r2
 80027c4:	9801      	ldr	r0, [sp, #4]
 80027c6:	0c1d      	lsrs	r5, r3, #16
 80027c8:	0c03      	lsrs	r3, r0, #16
 80027ca:	0400      	lsls	r0, r0, #16
 80027cc:	0c00      	lsrs	r0, r0, #16
 80027ce:	4346      	muls	r6, r0
 80027d0:	46b4      	mov	ip, r6
 80027d2:	001e      	movs	r6, r3
 80027d4:	436e      	muls	r6, r5
 80027d6:	9600      	str	r6, [sp, #0]
 80027d8:	0016      	movs	r6, r2
 80027da:	0007      	movs	r7, r0
 80027dc:	435e      	muls	r6, r3
 80027de:	4661      	mov	r1, ip
 80027e0:	46b0      	mov	r8, r6
 80027e2:	436f      	muls	r7, r5
 80027e4:	0c0e      	lsrs	r6, r1, #16
 80027e6:	44b8      	add	r8, r7
 80027e8:	4446      	add	r6, r8
 80027ea:	42b7      	cmp	r7, r6
 80027ec:	d905      	bls.n	80027fa <__aeabi_dmul+0x1fe>
 80027ee:	2180      	movs	r1, #128	@ 0x80
 80027f0:	0249      	lsls	r1, r1, #9
 80027f2:	4688      	mov	r8, r1
 80027f4:	9f00      	ldr	r7, [sp, #0]
 80027f6:	4447      	add	r7, r8
 80027f8:	9700      	str	r7, [sp, #0]
 80027fa:	4661      	mov	r1, ip
 80027fc:	0409      	lsls	r1, r1, #16
 80027fe:	0c09      	lsrs	r1, r1, #16
 8002800:	0c37      	lsrs	r7, r6, #16
 8002802:	0436      	lsls	r6, r6, #16
 8002804:	468c      	mov	ip, r1
 8002806:	0031      	movs	r1, r6
 8002808:	4461      	add	r1, ip
 800280a:	9101      	str	r1, [sp, #4]
 800280c:	0011      	movs	r1, r2
 800280e:	0c26      	lsrs	r6, r4, #16
 8002810:	0424      	lsls	r4, r4, #16
 8002812:	0c24      	lsrs	r4, r4, #16
 8002814:	4361      	muls	r1, r4
 8002816:	468c      	mov	ip, r1
 8002818:	0021      	movs	r1, r4
 800281a:	4369      	muls	r1, r5
 800281c:	4689      	mov	r9, r1
 800281e:	4661      	mov	r1, ip
 8002820:	0c09      	lsrs	r1, r1, #16
 8002822:	4688      	mov	r8, r1
 8002824:	4372      	muls	r2, r6
 8002826:	444a      	add	r2, r9
 8002828:	4442      	add	r2, r8
 800282a:	4375      	muls	r5, r6
 800282c:	4591      	cmp	r9, r2
 800282e:	d903      	bls.n	8002838 <__aeabi_dmul+0x23c>
 8002830:	2180      	movs	r1, #128	@ 0x80
 8002832:	0249      	lsls	r1, r1, #9
 8002834:	4688      	mov	r8, r1
 8002836:	4445      	add	r5, r8
 8002838:	0c11      	lsrs	r1, r2, #16
 800283a:	4688      	mov	r8, r1
 800283c:	4661      	mov	r1, ip
 800283e:	0409      	lsls	r1, r1, #16
 8002840:	0c09      	lsrs	r1, r1, #16
 8002842:	468c      	mov	ip, r1
 8002844:	0412      	lsls	r2, r2, #16
 8002846:	4462      	add	r2, ip
 8002848:	18b9      	adds	r1, r7, r2
 800284a:	9102      	str	r1, [sp, #8]
 800284c:	4651      	mov	r1, sl
 800284e:	0c09      	lsrs	r1, r1, #16
 8002850:	468c      	mov	ip, r1
 8002852:	4651      	mov	r1, sl
 8002854:	040f      	lsls	r7, r1, #16
 8002856:	0c3f      	lsrs	r7, r7, #16
 8002858:	0039      	movs	r1, r7
 800285a:	4341      	muls	r1, r0
 800285c:	4445      	add	r5, r8
 800285e:	4688      	mov	r8, r1
 8002860:	4661      	mov	r1, ip
 8002862:	4341      	muls	r1, r0
 8002864:	468a      	mov	sl, r1
 8002866:	4641      	mov	r1, r8
 8002868:	4660      	mov	r0, ip
 800286a:	0c09      	lsrs	r1, r1, #16
 800286c:	4689      	mov	r9, r1
 800286e:	4358      	muls	r0, r3
 8002870:	437b      	muls	r3, r7
 8002872:	4453      	add	r3, sl
 8002874:	444b      	add	r3, r9
 8002876:	459a      	cmp	sl, r3
 8002878:	d903      	bls.n	8002882 <__aeabi_dmul+0x286>
 800287a:	2180      	movs	r1, #128	@ 0x80
 800287c:	0249      	lsls	r1, r1, #9
 800287e:	4689      	mov	r9, r1
 8002880:	4448      	add	r0, r9
 8002882:	0c19      	lsrs	r1, r3, #16
 8002884:	4689      	mov	r9, r1
 8002886:	4641      	mov	r1, r8
 8002888:	0409      	lsls	r1, r1, #16
 800288a:	0c09      	lsrs	r1, r1, #16
 800288c:	4688      	mov	r8, r1
 800288e:	0039      	movs	r1, r7
 8002890:	4361      	muls	r1, r4
 8002892:	041b      	lsls	r3, r3, #16
 8002894:	4443      	add	r3, r8
 8002896:	4688      	mov	r8, r1
 8002898:	4661      	mov	r1, ip
 800289a:	434c      	muls	r4, r1
 800289c:	4371      	muls	r1, r6
 800289e:	468c      	mov	ip, r1
 80028a0:	4641      	mov	r1, r8
 80028a2:	4377      	muls	r7, r6
 80028a4:	0c0e      	lsrs	r6, r1, #16
 80028a6:	193f      	adds	r7, r7, r4
 80028a8:	19f6      	adds	r6, r6, r7
 80028aa:	4448      	add	r0, r9
 80028ac:	42b4      	cmp	r4, r6
 80028ae:	d903      	bls.n	80028b8 <__aeabi_dmul+0x2bc>
 80028b0:	2180      	movs	r1, #128	@ 0x80
 80028b2:	0249      	lsls	r1, r1, #9
 80028b4:	4689      	mov	r9, r1
 80028b6:	44cc      	add	ip, r9
 80028b8:	9902      	ldr	r1, [sp, #8]
 80028ba:	9f00      	ldr	r7, [sp, #0]
 80028bc:	4689      	mov	r9, r1
 80028be:	0431      	lsls	r1, r6, #16
 80028c0:	444f      	add	r7, r9
 80028c2:	4689      	mov	r9, r1
 80028c4:	4641      	mov	r1, r8
 80028c6:	4297      	cmp	r7, r2
 80028c8:	4192      	sbcs	r2, r2
 80028ca:	040c      	lsls	r4, r1, #16
 80028cc:	0c24      	lsrs	r4, r4, #16
 80028ce:	444c      	add	r4, r9
 80028d0:	18ff      	adds	r7, r7, r3
 80028d2:	4252      	negs	r2, r2
 80028d4:	1964      	adds	r4, r4, r5
 80028d6:	18a1      	adds	r1, r4, r2
 80028d8:	429f      	cmp	r7, r3
 80028da:	419b      	sbcs	r3, r3
 80028dc:	4688      	mov	r8, r1
 80028de:	4682      	mov	sl, r0
 80028e0:	425b      	negs	r3, r3
 80028e2:	4699      	mov	r9, r3
 80028e4:	4590      	cmp	r8, r2
 80028e6:	4192      	sbcs	r2, r2
 80028e8:	42ac      	cmp	r4, r5
 80028ea:	41a4      	sbcs	r4, r4
 80028ec:	44c2      	add	sl, r8
 80028ee:	44d1      	add	r9, sl
 80028f0:	4252      	negs	r2, r2
 80028f2:	4264      	negs	r4, r4
 80028f4:	4314      	orrs	r4, r2
 80028f6:	4599      	cmp	r9, r3
 80028f8:	419b      	sbcs	r3, r3
 80028fa:	4582      	cmp	sl, r0
 80028fc:	4192      	sbcs	r2, r2
 80028fe:	425b      	negs	r3, r3
 8002900:	4252      	negs	r2, r2
 8002902:	4313      	orrs	r3, r2
 8002904:	464a      	mov	r2, r9
 8002906:	0c36      	lsrs	r6, r6, #16
 8002908:	19a4      	adds	r4, r4, r6
 800290a:	18e3      	adds	r3, r4, r3
 800290c:	4463      	add	r3, ip
 800290e:	025b      	lsls	r3, r3, #9
 8002910:	0dd2      	lsrs	r2, r2, #23
 8002912:	431a      	orrs	r2, r3
 8002914:	9901      	ldr	r1, [sp, #4]
 8002916:	4692      	mov	sl, r2
 8002918:	027a      	lsls	r2, r7, #9
 800291a:	430a      	orrs	r2, r1
 800291c:	1e50      	subs	r0, r2, #1
 800291e:	4182      	sbcs	r2, r0
 8002920:	0dff      	lsrs	r7, r7, #23
 8002922:	4317      	orrs	r7, r2
 8002924:	464a      	mov	r2, r9
 8002926:	0252      	lsls	r2, r2, #9
 8002928:	4317      	orrs	r7, r2
 800292a:	46b8      	mov	r8, r7
 800292c:	01db      	lsls	r3, r3, #7
 800292e:	d500      	bpl.n	8002932 <__aeabi_dmul+0x336>
 8002930:	e6ed      	b.n	800270e <__aeabi_dmul+0x112>
 8002932:	4b0d      	ldr	r3, [pc, #52]	@ (8002968 <__aeabi_dmul+0x36c>)
 8002934:	9a03      	ldr	r2, [sp, #12]
 8002936:	445b      	add	r3, fp
 8002938:	4691      	mov	r9, r2
 800293a:	2b00      	cmp	r3, #0
 800293c:	dc00      	bgt.n	8002940 <__aeabi_dmul+0x344>
 800293e:	e0ac      	b.n	8002a9a <__aeabi_dmul+0x49e>
 8002940:	003a      	movs	r2, r7
 8002942:	0752      	lsls	r2, r2, #29
 8002944:	d100      	bne.n	8002948 <__aeabi_dmul+0x34c>
 8002946:	e710      	b.n	800276a <__aeabi_dmul+0x16e>
 8002948:	220f      	movs	r2, #15
 800294a:	4658      	mov	r0, fp
 800294c:	403a      	ands	r2, r7
 800294e:	2a04      	cmp	r2, #4
 8002950:	d000      	beq.n	8002954 <__aeabi_dmul+0x358>
 8002952:	e6f9      	b.n	8002748 <__aeabi_dmul+0x14c>
 8002954:	e709      	b.n	800276a <__aeabi_dmul+0x16e>
 8002956:	46c0      	nop			@ (mov r8, r8)
 8002958:	000007ff 	.word	0x000007ff
 800295c:	fffffc01 	.word	0xfffffc01
 8002960:	feffffff 	.word	0xfeffffff
 8002964:	000007fe 	.word	0x000007fe
 8002968:	000003ff 	.word	0x000003ff
 800296c:	0022      	movs	r2, r4
 800296e:	4332      	orrs	r2, r6
 8002970:	d06f      	beq.n	8002a52 <__aeabi_dmul+0x456>
 8002972:	2c00      	cmp	r4, #0
 8002974:	d100      	bne.n	8002978 <__aeabi_dmul+0x37c>
 8002976:	e0c2      	b.n	8002afe <__aeabi_dmul+0x502>
 8002978:	0020      	movs	r0, r4
 800297a:	f000 fea9 	bl	80036d0 <__clzsi2>
 800297e:	0002      	movs	r2, r0
 8002980:	0003      	movs	r3, r0
 8002982:	3a0b      	subs	r2, #11
 8002984:	201d      	movs	r0, #29
 8002986:	1a82      	subs	r2, r0, r2
 8002988:	0030      	movs	r0, r6
 800298a:	0019      	movs	r1, r3
 800298c:	40d0      	lsrs	r0, r2
 800298e:	3908      	subs	r1, #8
 8002990:	408c      	lsls	r4, r1
 8002992:	0002      	movs	r2, r0
 8002994:	4322      	orrs	r2, r4
 8002996:	0034      	movs	r4, r6
 8002998:	408c      	lsls	r4, r1
 800299a:	4659      	mov	r1, fp
 800299c:	1acb      	subs	r3, r1, r3
 800299e:	4986      	ldr	r1, [pc, #536]	@ (8002bb8 <__aeabi_dmul+0x5bc>)
 80029a0:	468b      	mov	fp, r1
 80029a2:	449b      	add	fp, r3
 80029a4:	2d0a      	cmp	r5, #10
 80029a6:	dd00      	ble.n	80029aa <__aeabi_dmul+0x3ae>
 80029a8:	e6a4      	b.n	80026f4 <__aeabi_dmul+0xf8>
 80029aa:	4649      	mov	r1, r9
 80029ac:	9b00      	ldr	r3, [sp, #0]
 80029ae:	9401      	str	r4, [sp, #4]
 80029b0:	4059      	eors	r1, r3
 80029b2:	b2cb      	uxtb	r3, r1
 80029b4:	0014      	movs	r4, r2
 80029b6:	2000      	movs	r0, #0
 80029b8:	9303      	str	r3, [sp, #12]
 80029ba:	2d02      	cmp	r5, #2
 80029bc:	dd00      	ble.n	80029c0 <__aeabi_dmul+0x3c4>
 80029be:	e667      	b.n	8002690 <__aeabi_dmul+0x94>
 80029c0:	e6fb      	b.n	80027ba <__aeabi_dmul+0x1be>
 80029c2:	4653      	mov	r3, sl
 80029c4:	4303      	orrs	r3, r0
 80029c6:	4698      	mov	r8, r3
 80029c8:	d03c      	beq.n	8002a44 <__aeabi_dmul+0x448>
 80029ca:	4653      	mov	r3, sl
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d100      	bne.n	80029d2 <__aeabi_dmul+0x3d6>
 80029d0:	e0a3      	b.n	8002b1a <__aeabi_dmul+0x51e>
 80029d2:	4650      	mov	r0, sl
 80029d4:	f000 fe7c 	bl	80036d0 <__clzsi2>
 80029d8:	230b      	movs	r3, #11
 80029da:	425b      	negs	r3, r3
 80029dc:	469c      	mov	ip, r3
 80029de:	0002      	movs	r2, r0
 80029e0:	4484      	add	ip, r0
 80029e2:	0011      	movs	r1, r2
 80029e4:	4650      	mov	r0, sl
 80029e6:	3908      	subs	r1, #8
 80029e8:	4088      	lsls	r0, r1
 80029ea:	231d      	movs	r3, #29
 80029ec:	4680      	mov	r8, r0
 80029ee:	4660      	mov	r0, ip
 80029f0:	1a1b      	subs	r3, r3, r0
 80029f2:	0020      	movs	r0, r4
 80029f4:	40d8      	lsrs	r0, r3
 80029f6:	0003      	movs	r3, r0
 80029f8:	4640      	mov	r0, r8
 80029fa:	4303      	orrs	r3, r0
 80029fc:	469a      	mov	sl, r3
 80029fe:	0023      	movs	r3, r4
 8002a00:	408b      	lsls	r3, r1
 8002a02:	4698      	mov	r8, r3
 8002a04:	4b6c      	ldr	r3, [pc, #432]	@ (8002bb8 <__aeabi_dmul+0x5bc>)
 8002a06:	2500      	movs	r5, #0
 8002a08:	1a9b      	subs	r3, r3, r2
 8002a0a:	469b      	mov	fp, r3
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	9302      	str	r3, [sp, #8]
 8002a10:	e61a      	b.n	8002648 <__aeabi_dmul+0x4c>
 8002a12:	2d0f      	cmp	r5, #15
 8002a14:	d000      	beq.n	8002a18 <__aeabi_dmul+0x41c>
 8002a16:	e0c9      	b.n	8002bac <__aeabi_dmul+0x5b0>
 8002a18:	2380      	movs	r3, #128	@ 0x80
 8002a1a:	4652      	mov	r2, sl
 8002a1c:	031b      	lsls	r3, r3, #12
 8002a1e:	421a      	tst	r2, r3
 8002a20:	d002      	beq.n	8002a28 <__aeabi_dmul+0x42c>
 8002a22:	421c      	tst	r4, r3
 8002a24:	d100      	bne.n	8002a28 <__aeabi_dmul+0x42c>
 8002a26:	e092      	b.n	8002b4e <__aeabi_dmul+0x552>
 8002a28:	2480      	movs	r4, #128	@ 0x80
 8002a2a:	4653      	mov	r3, sl
 8002a2c:	0324      	lsls	r4, r4, #12
 8002a2e:	431c      	orrs	r4, r3
 8002a30:	0324      	lsls	r4, r4, #12
 8002a32:	4642      	mov	r2, r8
 8002a34:	0b24      	lsrs	r4, r4, #12
 8002a36:	e63e      	b.n	80026b6 <__aeabi_dmul+0xba>
 8002a38:	469b      	mov	fp, r3
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	4680      	mov	r8, r0
 8002a3e:	250c      	movs	r5, #12
 8002a40:	9302      	str	r3, [sp, #8]
 8002a42:	e601      	b.n	8002648 <__aeabi_dmul+0x4c>
 8002a44:	2300      	movs	r3, #0
 8002a46:	469a      	mov	sl, r3
 8002a48:	469b      	mov	fp, r3
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	2504      	movs	r5, #4
 8002a4e:	9302      	str	r3, [sp, #8]
 8002a50:	e5fa      	b.n	8002648 <__aeabi_dmul+0x4c>
 8002a52:	2101      	movs	r1, #1
 8002a54:	430d      	orrs	r5, r1
 8002a56:	2d0a      	cmp	r5, #10
 8002a58:	dd00      	ble.n	8002a5c <__aeabi_dmul+0x460>
 8002a5a:	e64b      	b.n	80026f4 <__aeabi_dmul+0xf8>
 8002a5c:	4649      	mov	r1, r9
 8002a5e:	9800      	ldr	r0, [sp, #0]
 8002a60:	4041      	eors	r1, r0
 8002a62:	b2c9      	uxtb	r1, r1
 8002a64:	9103      	str	r1, [sp, #12]
 8002a66:	2d02      	cmp	r5, #2
 8002a68:	dc00      	bgt.n	8002a6c <__aeabi_dmul+0x470>
 8002a6a:	e096      	b.n	8002b9a <__aeabi_dmul+0x59e>
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	2400      	movs	r4, #0
 8002a70:	2001      	movs	r0, #1
 8002a72:	9301      	str	r3, [sp, #4]
 8002a74:	e60c      	b.n	8002690 <__aeabi_dmul+0x94>
 8002a76:	4649      	mov	r1, r9
 8002a78:	2302      	movs	r3, #2
 8002a7a:	9a00      	ldr	r2, [sp, #0]
 8002a7c:	432b      	orrs	r3, r5
 8002a7e:	4051      	eors	r1, r2
 8002a80:	b2ca      	uxtb	r2, r1
 8002a82:	9203      	str	r2, [sp, #12]
 8002a84:	2b0a      	cmp	r3, #10
 8002a86:	dd00      	ble.n	8002a8a <__aeabi_dmul+0x48e>
 8002a88:	e634      	b.n	80026f4 <__aeabi_dmul+0xf8>
 8002a8a:	2d00      	cmp	r5, #0
 8002a8c:	d157      	bne.n	8002b3e <__aeabi_dmul+0x542>
 8002a8e:	9b03      	ldr	r3, [sp, #12]
 8002a90:	4699      	mov	r9, r3
 8002a92:	2400      	movs	r4, #0
 8002a94:	2200      	movs	r2, #0
 8002a96:	4b49      	ldr	r3, [pc, #292]	@ (8002bbc <__aeabi_dmul+0x5c0>)
 8002a98:	e60e      	b.n	80026b8 <__aeabi_dmul+0xbc>
 8002a9a:	4658      	mov	r0, fp
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	1ac9      	subs	r1, r1, r3
 8002aa0:	2938      	cmp	r1, #56	@ 0x38
 8002aa2:	dd00      	ble.n	8002aa6 <__aeabi_dmul+0x4aa>
 8002aa4:	e62f      	b.n	8002706 <__aeabi_dmul+0x10a>
 8002aa6:	291f      	cmp	r1, #31
 8002aa8:	dd56      	ble.n	8002b58 <__aeabi_dmul+0x55c>
 8002aaa:	221f      	movs	r2, #31
 8002aac:	4654      	mov	r4, sl
 8002aae:	4252      	negs	r2, r2
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	40dc      	lsrs	r4, r3
 8002ab4:	2920      	cmp	r1, #32
 8002ab6:	d007      	beq.n	8002ac8 <__aeabi_dmul+0x4cc>
 8002ab8:	4b41      	ldr	r3, [pc, #260]	@ (8002bc0 <__aeabi_dmul+0x5c4>)
 8002aba:	4642      	mov	r2, r8
 8002abc:	469c      	mov	ip, r3
 8002abe:	4653      	mov	r3, sl
 8002ac0:	4460      	add	r0, ip
 8002ac2:	4083      	lsls	r3, r0
 8002ac4:	431a      	orrs	r2, r3
 8002ac6:	4690      	mov	r8, r2
 8002ac8:	4642      	mov	r2, r8
 8002aca:	2107      	movs	r1, #7
 8002acc:	1e53      	subs	r3, r2, #1
 8002ace:	419a      	sbcs	r2, r3
 8002ad0:	000b      	movs	r3, r1
 8002ad2:	4322      	orrs	r2, r4
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	2400      	movs	r4, #0
 8002ad8:	4211      	tst	r1, r2
 8002ada:	d009      	beq.n	8002af0 <__aeabi_dmul+0x4f4>
 8002adc:	230f      	movs	r3, #15
 8002ade:	4013      	ands	r3, r2
 8002ae0:	2b04      	cmp	r3, #4
 8002ae2:	d05d      	beq.n	8002ba0 <__aeabi_dmul+0x5a4>
 8002ae4:	1d11      	adds	r1, r2, #4
 8002ae6:	4291      	cmp	r1, r2
 8002ae8:	419b      	sbcs	r3, r3
 8002aea:	000a      	movs	r2, r1
 8002aec:	425b      	negs	r3, r3
 8002aee:	075b      	lsls	r3, r3, #29
 8002af0:	08d2      	lsrs	r2, r2, #3
 8002af2:	431a      	orrs	r2, r3
 8002af4:	2300      	movs	r3, #0
 8002af6:	e5df      	b.n	80026b8 <__aeabi_dmul+0xbc>
 8002af8:	9b03      	ldr	r3, [sp, #12]
 8002afa:	4699      	mov	r9, r3
 8002afc:	e5fa      	b.n	80026f4 <__aeabi_dmul+0xf8>
 8002afe:	9801      	ldr	r0, [sp, #4]
 8002b00:	f000 fde6 	bl	80036d0 <__clzsi2>
 8002b04:	0002      	movs	r2, r0
 8002b06:	0003      	movs	r3, r0
 8002b08:	3215      	adds	r2, #21
 8002b0a:	3320      	adds	r3, #32
 8002b0c:	2a1c      	cmp	r2, #28
 8002b0e:	dc00      	bgt.n	8002b12 <__aeabi_dmul+0x516>
 8002b10:	e738      	b.n	8002984 <__aeabi_dmul+0x388>
 8002b12:	9a01      	ldr	r2, [sp, #4]
 8002b14:	3808      	subs	r0, #8
 8002b16:	4082      	lsls	r2, r0
 8002b18:	e73f      	b.n	800299a <__aeabi_dmul+0x39e>
 8002b1a:	f000 fdd9 	bl	80036d0 <__clzsi2>
 8002b1e:	2315      	movs	r3, #21
 8002b20:	469c      	mov	ip, r3
 8002b22:	4484      	add	ip, r0
 8002b24:	0002      	movs	r2, r0
 8002b26:	4663      	mov	r3, ip
 8002b28:	3220      	adds	r2, #32
 8002b2a:	2b1c      	cmp	r3, #28
 8002b2c:	dc00      	bgt.n	8002b30 <__aeabi_dmul+0x534>
 8002b2e:	e758      	b.n	80029e2 <__aeabi_dmul+0x3e6>
 8002b30:	2300      	movs	r3, #0
 8002b32:	4698      	mov	r8, r3
 8002b34:	0023      	movs	r3, r4
 8002b36:	3808      	subs	r0, #8
 8002b38:	4083      	lsls	r3, r0
 8002b3a:	469a      	mov	sl, r3
 8002b3c:	e762      	b.n	8002a04 <__aeabi_dmul+0x408>
 8002b3e:	001d      	movs	r5, r3
 8002b40:	2300      	movs	r3, #0
 8002b42:	2400      	movs	r4, #0
 8002b44:	2002      	movs	r0, #2
 8002b46:	9301      	str	r3, [sp, #4]
 8002b48:	e5a2      	b.n	8002690 <__aeabi_dmul+0x94>
 8002b4a:	9002      	str	r0, [sp, #8]
 8002b4c:	e632      	b.n	80027b4 <__aeabi_dmul+0x1b8>
 8002b4e:	431c      	orrs	r4, r3
 8002b50:	9b00      	ldr	r3, [sp, #0]
 8002b52:	9a01      	ldr	r2, [sp, #4]
 8002b54:	4699      	mov	r9, r3
 8002b56:	e5ae      	b.n	80026b6 <__aeabi_dmul+0xba>
 8002b58:	4b1a      	ldr	r3, [pc, #104]	@ (8002bc4 <__aeabi_dmul+0x5c8>)
 8002b5a:	4652      	mov	r2, sl
 8002b5c:	18c3      	adds	r3, r0, r3
 8002b5e:	4640      	mov	r0, r8
 8002b60:	409a      	lsls	r2, r3
 8002b62:	40c8      	lsrs	r0, r1
 8002b64:	4302      	orrs	r2, r0
 8002b66:	4640      	mov	r0, r8
 8002b68:	4098      	lsls	r0, r3
 8002b6a:	0003      	movs	r3, r0
 8002b6c:	1e58      	subs	r0, r3, #1
 8002b6e:	4183      	sbcs	r3, r0
 8002b70:	4654      	mov	r4, sl
 8002b72:	431a      	orrs	r2, r3
 8002b74:	40cc      	lsrs	r4, r1
 8002b76:	0753      	lsls	r3, r2, #29
 8002b78:	d009      	beq.n	8002b8e <__aeabi_dmul+0x592>
 8002b7a:	230f      	movs	r3, #15
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d005      	beq.n	8002b8e <__aeabi_dmul+0x592>
 8002b82:	1d13      	adds	r3, r2, #4
 8002b84:	4293      	cmp	r3, r2
 8002b86:	4192      	sbcs	r2, r2
 8002b88:	4252      	negs	r2, r2
 8002b8a:	18a4      	adds	r4, r4, r2
 8002b8c:	001a      	movs	r2, r3
 8002b8e:	0223      	lsls	r3, r4, #8
 8002b90:	d508      	bpl.n	8002ba4 <__aeabi_dmul+0x5a8>
 8002b92:	2301      	movs	r3, #1
 8002b94:	2400      	movs	r4, #0
 8002b96:	2200      	movs	r2, #0
 8002b98:	e58e      	b.n	80026b8 <__aeabi_dmul+0xbc>
 8002b9a:	4689      	mov	r9, r1
 8002b9c:	2400      	movs	r4, #0
 8002b9e:	e58b      	b.n	80026b8 <__aeabi_dmul+0xbc>
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	e7a5      	b.n	8002af0 <__aeabi_dmul+0x4f4>
 8002ba4:	0763      	lsls	r3, r4, #29
 8002ba6:	0264      	lsls	r4, r4, #9
 8002ba8:	0b24      	lsrs	r4, r4, #12
 8002baa:	e7a1      	b.n	8002af0 <__aeabi_dmul+0x4f4>
 8002bac:	9b00      	ldr	r3, [sp, #0]
 8002bae:	46a2      	mov	sl, r4
 8002bb0:	4699      	mov	r9, r3
 8002bb2:	9b01      	ldr	r3, [sp, #4]
 8002bb4:	4698      	mov	r8, r3
 8002bb6:	e737      	b.n	8002a28 <__aeabi_dmul+0x42c>
 8002bb8:	fffffc0d 	.word	0xfffffc0d
 8002bbc:	000007ff 	.word	0x000007ff
 8002bc0:	0000043e 	.word	0x0000043e
 8002bc4:	0000041e 	.word	0x0000041e

08002bc8 <__aeabi_dsub>:
 8002bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bca:	4657      	mov	r7, sl
 8002bcc:	464e      	mov	r6, r9
 8002bce:	4645      	mov	r5, r8
 8002bd0:	46de      	mov	lr, fp
 8002bd2:	b5e0      	push	{r5, r6, r7, lr}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	9000      	str	r0, [sp, #0]
 8002bd8:	9101      	str	r1, [sp, #4]
 8002bda:	030c      	lsls	r4, r1, #12
 8002bdc:	004d      	lsls	r5, r1, #1
 8002bde:	0fce      	lsrs	r6, r1, #31
 8002be0:	0a61      	lsrs	r1, r4, #9
 8002be2:	9c00      	ldr	r4, [sp, #0]
 8002be4:	005f      	lsls	r7, r3, #1
 8002be6:	0f64      	lsrs	r4, r4, #29
 8002be8:	430c      	orrs	r4, r1
 8002bea:	9900      	ldr	r1, [sp, #0]
 8002bec:	9200      	str	r2, [sp, #0]
 8002bee:	9301      	str	r3, [sp, #4]
 8002bf0:	00c8      	lsls	r0, r1, #3
 8002bf2:	0319      	lsls	r1, r3, #12
 8002bf4:	0d7b      	lsrs	r3, r7, #21
 8002bf6:	4699      	mov	r9, r3
 8002bf8:	9b01      	ldr	r3, [sp, #4]
 8002bfa:	4fcc      	ldr	r7, [pc, #816]	@ (8002f2c <__aeabi_dsub+0x364>)
 8002bfc:	0fdb      	lsrs	r3, r3, #31
 8002bfe:	469c      	mov	ip, r3
 8002c00:	0a4b      	lsrs	r3, r1, #9
 8002c02:	9900      	ldr	r1, [sp, #0]
 8002c04:	4680      	mov	r8, r0
 8002c06:	0f49      	lsrs	r1, r1, #29
 8002c08:	4319      	orrs	r1, r3
 8002c0a:	9b00      	ldr	r3, [sp, #0]
 8002c0c:	468b      	mov	fp, r1
 8002c0e:	00da      	lsls	r2, r3, #3
 8002c10:	4692      	mov	sl, r2
 8002c12:	0d6d      	lsrs	r5, r5, #21
 8002c14:	45b9      	cmp	r9, r7
 8002c16:	d100      	bne.n	8002c1a <__aeabi_dsub+0x52>
 8002c18:	e0bf      	b.n	8002d9a <__aeabi_dsub+0x1d2>
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	4661      	mov	r1, ip
 8002c1e:	4059      	eors	r1, r3
 8002c20:	464b      	mov	r3, r9
 8002c22:	468c      	mov	ip, r1
 8002c24:	1aeb      	subs	r3, r5, r3
 8002c26:	428e      	cmp	r6, r1
 8002c28:	d075      	beq.n	8002d16 <__aeabi_dsub+0x14e>
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	dc00      	bgt.n	8002c30 <__aeabi_dsub+0x68>
 8002c2e:	e2a3      	b.n	8003178 <__aeabi_dsub+0x5b0>
 8002c30:	4649      	mov	r1, r9
 8002c32:	2900      	cmp	r1, #0
 8002c34:	d100      	bne.n	8002c38 <__aeabi_dsub+0x70>
 8002c36:	e0ce      	b.n	8002dd6 <__aeabi_dsub+0x20e>
 8002c38:	42bd      	cmp	r5, r7
 8002c3a:	d100      	bne.n	8002c3e <__aeabi_dsub+0x76>
 8002c3c:	e200      	b.n	8003040 <__aeabi_dsub+0x478>
 8002c3e:	2701      	movs	r7, #1
 8002c40:	2b38      	cmp	r3, #56	@ 0x38
 8002c42:	dc19      	bgt.n	8002c78 <__aeabi_dsub+0xb0>
 8002c44:	2780      	movs	r7, #128	@ 0x80
 8002c46:	4659      	mov	r1, fp
 8002c48:	043f      	lsls	r7, r7, #16
 8002c4a:	4339      	orrs	r1, r7
 8002c4c:	468b      	mov	fp, r1
 8002c4e:	2b1f      	cmp	r3, #31
 8002c50:	dd00      	ble.n	8002c54 <__aeabi_dsub+0x8c>
 8002c52:	e1fa      	b.n	800304a <__aeabi_dsub+0x482>
 8002c54:	2720      	movs	r7, #32
 8002c56:	1af9      	subs	r1, r7, r3
 8002c58:	468c      	mov	ip, r1
 8002c5a:	4659      	mov	r1, fp
 8002c5c:	4667      	mov	r7, ip
 8002c5e:	40b9      	lsls	r1, r7
 8002c60:	000f      	movs	r7, r1
 8002c62:	0011      	movs	r1, r2
 8002c64:	40d9      	lsrs	r1, r3
 8002c66:	430f      	orrs	r7, r1
 8002c68:	4661      	mov	r1, ip
 8002c6a:	408a      	lsls	r2, r1
 8002c6c:	1e51      	subs	r1, r2, #1
 8002c6e:	418a      	sbcs	r2, r1
 8002c70:	4659      	mov	r1, fp
 8002c72:	40d9      	lsrs	r1, r3
 8002c74:	4317      	orrs	r7, r2
 8002c76:	1a64      	subs	r4, r4, r1
 8002c78:	1bc7      	subs	r7, r0, r7
 8002c7a:	42b8      	cmp	r0, r7
 8002c7c:	4180      	sbcs	r0, r0
 8002c7e:	4240      	negs	r0, r0
 8002c80:	1a24      	subs	r4, r4, r0
 8002c82:	0223      	lsls	r3, r4, #8
 8002c84:	d400      	bmi.n	8002c88 <__aeabi_dsub+0xc0>
 8002c86:	e140      	b.n	8002f0a <__aeabi_dsub+0x342>
 8002c88:	0264      	lsls	r4, r4, #9
 8002c8a:	0a64      	lsrs	r4, r4, #9
 8002c8c:	2c00      	cmp	r4, #0
 8002c8e:	d100      	bne.n	8002c92 <__aeabi_dsub+0xca>
 8002c90:	e154      	b.n	8002f3c <__aeabi_dsub+0x374>
 8002c92:	0020      	movs	r0, r4
 8002c94:	f000 fd1c 	bl	80036d0 <__clzsi2>
 8002c98:	0003      	movs	r3, r0
 8002c9a:	3b08      	subs	r3, #8
 8002c9c:	2120      	movs	r1, #32
 8002c9e:	0038      	movs	r0, r7
 8002ca0:	1aca      	subs	r2, r1, r3
 8002ca2:	40d0      	lsrs	r0, r2
 8002ca4:	409c      	lsls	r4, r3
 8002ca6:	0002      	movs	r2, r0
 8002ca8:	409f      	lsls	r7, r3
 8002caa:	4322      	orrs	r2, r4
 8002cac:	429d      	cmp	r5, r3
 8002cae:	dd00      	ble.n	8002cb2 <__aeabi_dsub+0xea>
 8002cb0:	e1a6      	b.n	8003000 <__aeabi_dsub+0x438>
 8002cb2:	1b58      	subs	r0, r3, r5
 8002cb4:	3001      	adds	r0, #1
 8002cb6:	1a09      	subs	r1, r1, r0
 8002cb8:	003c      	movs	r4, r7
 8002cba:	408f      	lsls	r7, r1
 8002cbc:	40c4      	lsrs	r4, r0
 8002cbe:	1e7b      	subs	r3, r7, #1
 8002cc0:	419f      	sbcs	r7, r3
 8002cc2:	0013      	movs	r3, r2
 8002cc4:	408b      	lsls	r3, r1
 8002cc6:	4327      	orrs	r7, r4
 8002cc8:	431f      	orrs	r7, r3
 8002cca:	40c2      	lsrs	r2, r0
 8002ccc:	003b      	movs	r3, r7
 8002cce:	0014      	movs	r4, r2
 8002cd0:	2500      	movs	r5, #0
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	d100      	bne.n	8002cd8 <__aeabi_dsub+0x110>
 8002cd6:	e1f7      	b.n	80030c8 <__aeabi_dsub+0x500>
 8002cd8:	077b      	lsls	r3, r7, #29
 8002cda:	d100      	bne.n	8002cde <__aeabi_dsub+0x116>
 8002cdc:	e377      	b.n	80033ce <__aeabi_dsub+0x806>
 8002cde:	230f      	movs	r3, #15
 8002ce0:	0038      	movs	r0, r7
 8002ce2:	403b      	ands	r3, r7
 8002ce4:	2b04      	cmp	r3, #4
 8002ce6:	d004      	beq.n	8002cf2 <__aeabi_dsub+0x12a>
 8002ce8:	1d38      	adds	r0, r7, #4
 8002cea:	42b8      	cmp	r0, r7
 8002cec:	41bf      	sbcs	r7, r7
 8002cee:	427f      	negs	r7, r7
 8002cf0:	19e4      	adds	r4, r4, r7
 8002cf2:	0223      	lsls	r3, r4, #8
 8002cf4:	d400      	bmi.n	8002cf8 <__aeabi_dsub+0x130>
 8002cf6:	e368      	b.n	80033ca <__aeabi_dsub+0x802>
 8002cf8:	4b8c      	ldr	r3, [pc, #560]	@ (8002f2c <__aeabi_dsub+0x364>)
 8002cfa:	3501      	adds	r5, #1
 8002cfc:	429d      	cmp	r5, r3
 8002cfe:	d100      	bne.n	8002d02 <__aeabi_dsub+0x13a>
 8002d00:	e0f4      	b.n	8002eec <__aeabi_dsub+0x324>
 8002d02:	4b8b      	ldr	r3, [pc, #556]	@ (8002f30 <__aeabi_dsub+0x368>)
 8002d04:	056d      	lsls	r5, r5, #21
 8002d06:	401c      	ands	r4, r3
 8002d08:	0d6d      	lsrs	r5, r5, #21
 8002d0a:	0767      	lsls	r7, r4, #29
 8002d0c:	08c0      	lsrs	r0, r0, #3
 8002d0e:	0264      	lsls	r4, r4, #9
 8002d10:	4307      	orrs	r7, r0
 8002d12:	0b24      	lsrs	r4, r4, #12
 8002d14:	e0ec      	b.n	8002ef0 <__aeabi_dsub+0x328>
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	dc00      	bgt.n	8002d1c <__aeabi_dsub+0x154>
 8002d1a:	e329      	b.n	8003370 <__aeabi_dsub+0x7a8>
 8002d1c:	4649      	mov	r1, r9
 8002d1e:	2900      	cmp	r1, #0
 8002d20:	d000      	beq.n	8002d24 <__aeabi_dsub+0x15c>
 8002d22:	e0d6      	b.n	8002ed2 <__aeabi_dsub+0x30a>
 8002d24:	4659      	mov	r1, fp
 8002d26:	4311      	orrs	r1, r2
 8002d28:	d100      	bne.n	8002d2c <__aeabi_dsub+0x164>
 8002d2a:	e12e      	b.n	8002f8a <__aeabi_dsub+0x3c2>
 8002d2c:	1e59      	subs	r1, r3, #1
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d100      	bne.n	8002d34 <__aeabi_dsub+0x16c>
 8002d32:	e1e6      	b.n	8003102 <__aeabi_dsub+0x53a>
 8002d34:	42bb      	cmp	r3, r7
 8002d36:	d100      	bne.n	8002d3a <__aeabi_dsub+0x172>
 8002d38:	e182      	b.n	8003040 <__aeabi_dsub+0x478>
 8002d3a:	2701      	movs	r7, #1
 8002d3c:	000b      	movs	r3, r1
 8002d3e:	2938      	cmp	r1, #56	@ 0x38
 8002d40:	dc14      	bgt.n	8002d6c <__aeabi_dsub+0x1a4>
 8002d42:	2b1f      	cmp	r3, #31
 8002d44:	dd00      	ble.n	8002d48 <__aeabi_dsub+0x180>
 8002d46:	e23c      	b.n	80031c2 <__aeabi_dsub+0x5fa>
 8002d48:	2720      	movs	r7, #32
 8002d4a:	1af9      	subs	r1, r7, r3
 8002d4c:	468c      	mov	ip, r1
 8002d4e:	4659      	mov	r1, fp
 8002d50:	4667      	mov	r7, ip
 8002d52:	40b9      	lsls	r1, r7
 8002d54:	000f      	movs	r7, r1
 8002d56:	0011      	movs	r1, r2
 8002d58:	40d9      	lsrs	r1, r3
 8002d5a:	430f      	orrs	r7, r1
 8002d5c:	4661      	mov	r1, ip
 8002d5e:	408a      	lsls	r2, r1
 8002d60:	1e51      	subs	r1, r2, #1
 8002d62:	418a      	sbcs	r2, r1
 8002d64:	4659      	mov	r1, fp
 8002d66:	40d9      	lsrs	r1, r3
 8002d68:	4317      	orrs	r7, r2
 8002d6a:	1864      	adds	r4, r4, r1
 8002d6c:	183f      	adds	r7, r7, r0
 8002d6e:	4287      	cmp	r7, r0
 8002d70:	4180      	sbcs	r0, r0
 8002d72:	4240      	negs	r0, r0
 8002d74:	1824      	adds	r4, r4, r0
 8002d76:	0223      	lsls	r3, r4, #8
 8002d78:	d400      	bmi.n	8002d7c <__aeabi_dsub+0x1b4>
 8002d7a:	e0c6      	b.n	8002f0a <__aeabi_dsub+0x342>
 8002d7c:	4b6b      	ldr	r3, [pc, #428]	@ (8002f2c <__aeabi_dsub+0x364>)
 8002d7e:	3501      	adds	r5, #1
 8002d80:	429d      	cmp	r5, r3
 8002d82:	d100      	bne.n	8002d86 <__aeabi_dsub+0x1be>
 8002d84:	e0b2      	b.n	8002eec <__aeabi_dsub+0x324>
 8002d86:	2101      	movs	r1, #1
 8002d88:	4b69      	ldr	r3, [pc, #420]	@ (8002f30 <__aeabi_dsub+0x368>)
 8002d8a:	087a      	lsrs	r2, r7, #1
 8002d8c:	401c      	ands	r4, r3
 8002d8e:	4039      	ands	r1, r7
 8002d90:	430a      	orrs	r2, r1
 8002d92:	07e7      	lsls	r7, r4, #31
 8002d94:	4317      	orrs	r7, r2
 8002d96:	0864      	lsrs	r4, r4, #1
 8002d98:	e79e      	b.n	8002cd8 <__aeabi_dsub+0x110>
 8002d9a:	4b66      	ldr	r3, [pc, #408]	@ (8002f34 <__aeabi_dsub+0x36c>)
 8002d9c:	4311      	orrs	r1, r2
 8002d9e:	468a      	mov	sl, r1
 8002da0:	18eb      	adds	r3, r5, r3
 8002da2:	2900      	cmp	r1, #0
 8002da4:	d028      	beq.n	8002df8 <__aeabi_dsub+0x230>
 8002da6:	4566      	cmp	r6, ip
 8002da8:	d02c      	beq.n	8002e04 <__aeabi_dsub+0x23c>
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d05b      	beq.n	8002e66 <__aeabi_dsub+0x29e>
 8002dae:	2d00      	cmp	r5, #0
 8002db0:	d100      	bne.n	8002db4 <__aeabi_dsub+0x1ec>
 8002db2:	e12c      	b.n	800300e <__aeabi_dsub+0x446>
 8002db4:	465b      	mov	r3, fp
 8002db6:	4666      	mov	r6, ip
 8002db8:	075f      	lsls	r7, r3, #29
 8002dba:	08d2      	lsrs	r2, r2, #3
 8002dbc:	4317      	orrs	r7, r2
 8002dbe:	08dd      	lsrs	r5, r3, #3
 8002dc0:	003b      	movs	r3, r7
 8002dc2:	432b      	orrs	r3, r5
 8002dc4:	d100      	bne.n	8002dc8 <__aeabi_dsub+0x200>
 8002dc6:	e0e2      	b.n	8002f8e <__aeabi_dsub+0x3c6>
 8002dc8:	2480      	movs	r4, #128	@ 0x80
 8002dca:	0324      	lsls	r4, r4, #12
 8002dcc:	432c      	orrs	r4, r5
 8002dce:	0324      	lsls	r4, r4, #12
 8002dd0:	4d56      	ldr	r5, [pc, #344]	@ (8002f2c <__aeabi_dsub+0x364>)
 8002dd2:	0b24      	lsrs	r4, r4, #12
 8002dd4:	e08c      	b.n	8002ef0 <__aeabi_dsub+0x328>
 8002dd6:	4659      	mov	r1, fp
 8002dd8:	4311      	orrs	r1, r2
 8002dda:	d100      	bne.n	8002dde <__aeabi_dsub+0x216>
 8002ddc:	e0d5      	b.n	8002f8a <__aeabi_dsub+0x3c2>
 8002dde:	1e59      	subs	r1, r3, #1
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d100      	bne.n	8002de6 <__aeabi_dsub+0x21e>
 8002de4:	e1b9      	b.n	800315a <__aeabi_dsub+0x592>
 8002de6:	42bb      	cmp	r3, r7
 8002de8:	d100      	bne.n	8002dec <__aeabi_dsub+0x224>
 8002dea:	e1b1      	b.n	8003150 <__aeabi_dsub+0x588>
 8002dec:	2701      	movs	r7, #1
 8002dee:	000b      	movs	r3, r1
 8002df0:	2938      	cmp	r1, #56	@ 0x38
 8002df2:	dd00      	ble.n	8002df6 <__aeabi_dsub+0x22e>
 8002df4:	e740      	b.n	8002c78 <__aeabi_dsub+0xb0>
 8002df6:	e72a      	b.n	8002c4e <__aeabi_dsub+0x86>
 8002df8:	4661      	mov	r1, ip
 8002dfa:	2701      	movs	r7, #1
 8002dfc:	4079      	eors	r1, r7
 8002dfe:	468c      	mov	ip, r1
 8002e00:	4566      	cmp	r6, ip
 8002e02:	d1d2      	bne.n	8002daa <__aeabi_dsub+0x1e2>
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d100      	bne.n	8002e0a <__aeabi_dsub+0x242>
 8002e08:	e0c5      	b.n	8002f96 <__aeabi_dsub+0x3ce>
 8002e0a:	2d00      	cmp	r5, #0
 8002e0c:	d000      	beq.n	8002e10 <__aeabi_dsub+0x248>
 8002e0e:	e155      	b.n	80030bc <__aeabi_dsub+0x4f4>
 8002e10:	464b      	mov	r3, r9
 8002e12:	0025      	movs	r5, r4
 8002e14:	4305      	orrs	r5, r0
 8002e16:	d100      	bne.n	8002e1a <__aeabi_dsub+0x252>
 8002e18:	e212      	b.n	8003240 <__aeabi_dsub+0x678>
 8002e1a:	1e59      	subs	r1, r3, #1
 8002e1c:	468c      	mov	ip, r1
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d100      	bne.n	8002e24 <__aeabi_dsub+0x25c>
 8002e22:	e249      	b.n	80032b8 <__aeabi_dsub+0x6f0>
 8002e24:	4d41      	ldr	r5, [pc, #260]	@ (8002f2c <__aeabi_dsub+0x364>)
 8002e26:	42ab      	cmp	r3, r5
 8002e28:	d100      	bne.n	8002e2c <__aeabi_dsub+0x264>
 8002e2a:	e28f      	b.n	800334c <__aeabi_dsub+0x784>
 8002e2c:	2701      	movs	r7, #1
 8002e2e:	2938      	cmp	r1, #56	@ 0x38
 8002e30:	dc11      	bgt.n	8002e56 <__aeabi_dsub+0x28e>
 8002e32:	4663      	mov	r3, ip
 8002e34:	2b1f      	cmp	r3, #31
 8002e36:	dd00      	ble.n	8002e3a <__aeabi_dsub+0x272>
 8002e38:	e25b      	b.n	80032f2 <__aeabi_dsub+0x72a>
 8002e3a:	4661      	mov	r1, ip
 8002e3c:	2320      	movs	r3, #32
 8002e3e:	0027      	movs	r7, r4
 8002e40:	1a5b      	subs	r3, r3, r1
 8002e42:	0005      	movs	r5, r0
 8002e44:	4098      	lsls	r0, r3
 8002e46:	409f      	lsls	r7, r3
 8002e48:	40cd      	lsrs	r5, r1
 8002e4a:	1e43      	subs	r3, r0, #1
 8002e4c:	4198      	sbcs	r0, r3
 8002e4e:	40cc      	lsrs	r4, r1
 8002e50:	432f      	orrs	r7, r5
 8002e52:	4307      	orrs	r7, r0
 8002e54:	44a3      	add	fp, r4
 8002e56:	18bf      	adds	r7, r7, r2
 8002e58:	4297      	cmp	r7, r2
 8002e5a:	4192      	sbcs	r2, r2
 8002e5c:	4252      	negs	r2, r2
 8002e5e:	445a      	add	r2, fp
 8002e60:	0014      	movs	r4, r2
 8002e62:	464d      	mov	r5, r9
 8002e64:	e787      	b.n	8002d76 <__aeabi_dsub+0x1ae>
 8002e66:	4f34      	ldr	r7, [pc, #208]	@ (8002f38 <__aeabi_dsub+0x370>)
 8002e68:	1c6b      	adds	r3, r5, #1
 8002e6a:	423b      	tst	r3, r7
 8002e6c:	d000      	beq.n	8002e70 <__aeabi_dsub+0x2a8>
 8002e6e:	e0b6      	b.n	8002fde <__aeabi_dsub+0x416>
 8002e70:	4659      	mov	r1, fp
 8002e72:	0023      	movs	r3, r4
 8002e74:	4311      	orrs	r1, r2
 8002e76:	000f      	movs	r7, r1
 8002e78:	4303      	orrs	r3, r0
 8002e7a:	2d00      	cmp	r5, #0
 8002e7c:	d000      	beq.n	8002e80 <__aeabi_dsub+0x2b8>
 8002e7e:	e126      	b.n	80030ce <__aeabi_dsub+0x506>
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d100      	bne.n	8002e86 <__aeabi_dsub+0x2be>
 8002e84:	e1c0      	b.n	8003208 <__aeabi_dsub+0x640>
 8002e86:	2900      	cmp	r1, #0
 8002e88:	d100      	bne.n	8002e8c <__aeabi_dsub+0x2c4>
 8002e8a:	e0a1      	b.n	8002fd0 <__aeabi_dsub+0x408>
 8002e8c:	1a83      	subs	r3, r0, r2
 8002e8e:	4698      	mov	r8, r3
 8002e90:	465b      	mov	r3, fp
 8002e92:	4540      	cmp	r0, r8
 8002e94:	41ad      	sbcs	r5, r5
 8002e96:	1ae3      	subs	r3, r4, r3
 8002e98:	426d      	negs	r5, r5
 8002e9a:	1b5b      	subs	r3, r3, r5
 8002e9c:	2580      	movs	r5, #128	@ 0x80
 8002e9e:	042d      	lsls	r5, r5, #16
 8002ea0:	422b      	tst	r3, r5
 8002ea2:	d100      	bne.n	8002ea6 <__aeabi_dsub+0x2de>
 8002ea4:	e14b      	b.n	800313e <__aeabi_dsub+0x576>
 8002ea6:	465b      	mov	r3, fp
 8002ea8:	1a10      	subs	r0, r2, r0
 8002eaa:	4282      	cmp	r2, r0
 8002eac:	4192      	sbcs	r2, r2
 8002eae:	1b1c      	subs	r4, r3, r4
 8002eb0:	0007      	movs	r7, r0
 8002eb2:	2601      	movs	r6, #1
 8002eb4:	4663      	mov	r3, ip
 8002eb6:	4252      	negs	r2, r2
 8002eb8:	1aa4      	subs	r4, r4, r2
 8002eba:	4327      	orrs	r7, r4
 8002ebc:	401e      	ands	r6, r3
 8002ebe:	2f00      	cmp	r7, #0
 8002ec0:	d100      	bne.n	8002ec4 <__aeabi_dsub+0x2fc>
 8002ec2:	e142      	b.n	800314a <__aeabi_dsub+0x582>
 8002ec4:	422c      	tst	r4, r5
 8002ec6:	d100      	bne.n	8002eca <__aeabi_dsub+0x302>
 8002ec8:	e26d      	b.n	80033a6 <__aeabi_dsub+0x7de>
 8002eca:	4b19      	ldr	r3, [pc, #100]	@ (8002f30 <__aeabi_dsub+0x368>)
 8002ecc:	2501      	movs	r5, #1
 8002ece:	401c      	ands	r4, r3
 8002ed0:	e71b      	b.n	8002d0a <__aeabi_dsub+0x142>
 8002ed2:	42bd      	cmp	r5, r7
 8002ed4:	d100      	bne.n	8002ed8 <__aeabi_dsub+0x310>
 8002ed6:	e13b      	b.n	8003150 <__aeabi_dsub+0x588>
 8002ed8:	2701      	movs	r7, #1
 8002eda:	2b38      	cmp	r3, #56	@ 0x38
 8002edc:	dd00      	ble.n	8002ee0 <__aeabi_dsub+0x318>
 8002ede:	e745      	b.n	8002d6c <__aeabi_dsub+0x1a4>
 8002ee0:	2780      	movs	r7, #128	@ 0x80
 8002ee2:	4659      	mov	r1, fp
 8002ee4:	043f      	lsls	r7, r7, #16
 8002ee6:	4339      	orrs	r1, r7
 8002ee8:	468b      	mov	fp, r1
 8002eea:	e72a      	b.n	8002d42 <__aeabi_dsub+0x17a>
 8002eec:	2400      	movs	r4, #0
 8002eee:	2700      	movs	r7, #0
 8002ef0:	052d      	lsls	r5, r5, #20
 8002ef2:	4325      	orrs	r5, r4
 8002ef4:	07f6      	lsls	r6, r6, #31
 8002ef6:	4335      	orrs	r5, r6
 8002ef8:	0038      	movs	r0, r7
 8002efa:	0029      	movs	r1, r5
 8002efc:	b003      	add	sp, #12
 8002efe:	bcf0      	pop	{r4, r5, r6, r7}
 8002f00:	46bb      	mov	fp, r7
 8002f02:	46b2      	mov	sl, r6
 8002f04:	46a9      	mov	r9, r5
 8002f06:	46a0      	mov	r8, r4
 8002f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f0a:	077b      	lsls	r3, r7, #29
 8002f0c:	d004      	beq.n	8002f18 <__aeabi_dsub+0x350>
 8002f0e:	230f      	movs	r3, #15
 8002f10:	403b      	ands	r3, r7
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	d000      	beq.n	8002f18 <__aeabi_dsub+0x350>
 8002f16:	e6e7      	b.n	8002ce8 <__aeabi_dsub+0x120>
 8002f18:	002b      	movs	r3, r5
 8002f1a:	08f8      	lsrs	r0, r7, #3
 8002f1c:	4a03      	ldr	r2, [pc, #12]	@ (8002f2c <__aeabi_dsub+0x364>)
 8002f1e:	0767      	lsls	r7, r4, #29
 8002f20:	4307      	orrs	r7, r0
 8002f22:	08e5      	lsrs	r5, r4, #3
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d100      	bne.n	8002f2a <__aeabi_dsub+0x362>
 8002f28:	e74a      	b.n	8002dc0 <__aeabi_dsub+0x1f8>
 8002f2a:	e0a5      	b.n	8003078 <__aeabi_dsub+0x4b0>
 8002f2c:	000007ff 	.word	0x000007ff
 8002f30:	ff7fffff 	.word	0xff7fffff
 8002f34:	fffff801 	.word	0xfffff801
 8002f38:	000007fe 	.word	0x000007fe
 8002f3c:	0038      	movs	r0, r7
 8002f3e:	f000 fbc7 	bl	80036d0 <__clzsi2>
 8002f42:	0003      	movs	r3, r0
 8002f44:	3318      	adds	r3, #24
 8002f46:	2b1f      	cmp	r3, #31
 8002f48:	dc00      	bgt.n	8002f4c <__aeabi_dsub+0x384>
 8002f4a:	e6a7      	b.n	8002c9c <__aeabi_dsub+0xd4>
 8002f4c:	003a      	movs	r2, r7
 8002f4e:	3808      	subs	r0, #8
 8002f50:	4082      	lsls	r2, r0
 8002f52:	429d      	cmp	r5, r3
 8002f54:	dd00      	ble.n	8002f58 <__aeabi_dsub+0x390>
 8002f56:	e08a      	b.n	800306e <__aeabi_dsub+0x4a6>
 8002f58:	1b5b      	subs	r3, r3, r5
 8002f5a:	1c58      	adds	r0, r3, #1
 8002f5c:	281f      	cmp	r0, #31
 8002f5e:	dc00      	bgt.n	8002f62 <__aeabi_dsub+0x39a>
 8002f60:	e1d8      	b.n	8003314 <__aeabi_dsub+0x74c>
 8002f62:	0017      	movs	r7, r2
 8002f64:	3b1f      	subs	r3, #31
 8002f66:	40df      	lsrs	r7, r3
 8002f68:	2820      	cmp	r0, #32
 8002f6a:	d005      	beq.n	8002f78 <__aeabi_dsub+0x3b0>
 8002f6c:	2340      	movs	r3, #64	@ 0x40
 8002f6e:	1a1b      	subs	r3, r3, r0
 8002f70:	409a      	lsls	r2, r3
 8002f72:	1e53      	subs	r3, r2, #1
 8002f74:	419a      	sbcs	r2, r3
 8002f76:	4317      	orrs	r7, r2
 8002f78:	2500      	movs	r5, #0
 8002f7a:	2f00      	cmp	r7, #0
 8002f7c:	d100      	bne.n	8002f80 <__aeabi_dsub+0x3b8>
 8002f7e:	e0e5      	b.n	800314c <__aeabi_dsub+0x584>
 8002f80:	077b      	lsls	r3, r7, #29
 8002f82:	d000      	beq.n	8002f86 <__aeabi_dsub+0x3be>
 8002f84:	e6ab      	b.n	8002cde <__aeabi_dsub+0x116>
 8002f86:	002c      	movs	r4, r5
 8002f88:	e7c6      	b.n	8002f18 <__aeabi_dsub+0x350>
 8002f8a:	08c0      	lsrs	r0, r0, #3
 8002f8c:	e7c6      	b.n	8002f1c <__aeabi_dsub+0x354>
 8002f8e:	2700      	movs	r7, #0
 8002f90:	2400      	movs	r4, #0
 8002f92:	4dd1      	ldr	r5, [pc, #836]	@ (80032d8 <__aeabi_dsub+0x710>)
 8002f94:	e7ac      	b.n	8002ef0 <__aeabi_dsub+0x328>
 8002f96:	4fd1      	ldr	r7, [pc, #836]	@ (80032dc <__aeabi_dsub+0x714>)
 8002f98:	1c6b      	adds	r3, r5, #1
 8002f9a:	423b      	tst	r3, r7
 8002f9c:	d171      	bne.n	8003082 <__aeabi_dsub+0x4ba>
 8002f9e:	0023      	movs	r3, r4
 8002fa0:	4303      	orrs	r3, r0
 8002fa2:	2d00      	cmp	r5, #0
 8002fa4:	d000      	beq.n	8002fa8 <__aeabi_dsub+0x3e0>
 8002fa6:	e14e      	b.n	8003246 <__aeabi_dsub+0x67e>
 8002fa8:	4657      	mov	r7, sl
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d100      	bne.n	8002fb0 <__aeabi_dsub+0x3e8>
 8002fae:	e1b5      	b.n	800331c <__aeabi_dsub+0x754>
 8002fb0:	2f00      	cmp	r7, #0
 8002fb2:	d00d      	beq.n	8002fd0 <__aeabi_dsub+0x408>
 8002fb4:	1883      	adds	r3, r0, r2
 8002fb6:	4283      	cmp	r3, r0
 8002fb8:	4180      	sbcs	r0, r0
 8002fba:	445c      	add	r4, fp
 8002fbc:	4240      	negs	r0, r0
 8002fbe:	1824      	adds	r4, r4, r0
 8002fc0:	0222      	lsls	r2, r4, #8
 8002fc2:	d500      	bpl.n	8002fc6 <__aeabi_dsub+0x3fe>
 8002fc4:	e1c8      	b.n	8003358 <__aeabi_dsub+0x790>
 8002fc6:	001f      	movs	r7, r3
 8002fc8:	4698      	mov	r8, r3
 8002fca:	4327      	orrs	r7, r4
 8002fcc:	d100      	bne.n	8002fd0 <__aeabi_dsub+0x408>
 8002fce:	e0bc      	b.n	800314a <__aeabi_dsub+0x582>
 8002fd0:	4643      	mov	r3, r8
 8002fd2:	0767      	lsls	r7, r4, #29
 8002fd4:	08db      	lsrs	r3, r3, #3
 8002fd6:	431f      	orrs	r7, r3
 8002fd8:	08e5      	lsrs	r5, r4, #3
 8002fda:	2300      	movs	r3, #0
 8002fdc:	e04c      	b.n	8003078 <__aeabi_dsub+0x4b0>
 8002fde:	1a83      	subs	r3, r0, r2
 8002fe0:	4698      	mov	r8, r3
 8002fe2:	465b      	mov	r3, fp
 8002fe4:	4540      	cmp	r0, r8
 8002fe6:	41bf      	sbcs	r7, r7
 8002fe8:	1ae3      	subs	r3, r4, r3
 8002fea:	427f      	negs	r7, r7
 8002fec:	1bdb      	subs	r3, r3, r7
 8002fee:	021f      	lsls	r7, r3, #8
 8002ff0:	d47c      	bmi.n	80030ec <__aeabi_dsub+0x524>
 8002ff2:	4647      	mov	r7, r8
 8002ff4:	431f      	orrs	r7, r3
 8002ff6:	d100      	bne.n	8002ffa <__aeabi_dsub+0x432>
 8002ff8:	e0a6      	b.n	8003148 <__aeabi_dsub+0x580>
 8002ffa:	001c      	movs	r4, r3
 8002ffc:	4647      	mov	r7, r8
 8002ffe:	e645      	b.n	8002c8c <__aeabi_dsub+0xc4>
 8003000:	4cb7      	ldr	r4, [pc, #732]	@ (80032e0 <__aeabi_dsub+0x718>)
 8003002:	1aed      	subs	r5, r5, r3
 8003004:	4014      	ands	r4, r2
 8003006:	077b      	lsls	r3, r7, #29
 8003008:	d000      	beq.n	800300c <__aeabi_dsub+0x444>
 800300a:	e780      	b.n	8002f0e <__aeabi_dsub+0x346>
 800300c:	e784      	b.n	8002f18 <__aeabi_dsub+0x350>
 800300e:	464b      	mov	r3, r9
 8003010:	0025      	movs	r5, r4
 8003012:	4305      	orrs	r5, r0
 8003014:	d066      	beq.n	80030e4 <__aeabi_dsub+0x51c>
 8003016:	1e5f      	subs	r7, r3, #1
 8003018:	2b01      	cmp	r3, #1
 800301a:	d100      	bne.n	800301e <__aeabi_dsub+0x456>
 800301c:	e0fc      	b.n	8003218 <__aeabi_dsub+0x650>
 800301e:	4dae      	ldr	r5, [pc, #696]	@ (80032d8 <__aeabi_dsub+0x710>)
 8003020:	42ab      	cmp	r3, r5
 8003022:	d100      	bne.n	8003026 <__aeabi_dsub+0x45e>
 8003024:	e15e      	b.n	80032e4 <__aeabi_dsub+0x71c>
 8003026:	4666      	mov	r6, ip
 8003028:	2f38      	cmp	r7, #56	@ 0x38
 800302a:	dc00      	bgt.n	800302e <__aeabi_dsub+0x466>
 800302c:	e0b4      	b.n	8003198 <__aeabi_dsub+0x5d0>
 800302e:	2001      	movs	r0, #1
 8003030:	1a17      	subs	r7, r2, r0
 8003032:	42ba      	cmp	r2, r7
 8003034:	4192      	sbcs	r2, r2
 8003036:	465b      	mov	r3, fp
 8003038:	4252      	negs	r2, r2
 800303a:	464d      	mov	r5, r9
 800303c:	1a9c      	subs	r4, r3, r2
 800303e:	e620      	b.n	8002c82 <__aeabi_dsub+0xba>
 8003040:	0767      	lsls	r7, r4, #29
 8003042:	08c0      	lsrs	r0, r0, #3
 8003044:	4307      	orrs	r7, r0
 8003046:	08e5      	lsrs	r5, r4, #3
 8003048:	e6ba      	b.n	8002dc0 <__aeabi_dsub+0x1f8>
 800304a:	001f      	movs	r7, r3
 800304c:	4659      	mov	r1, fp
 800304e:	3f20      	subs	r7, #32
 8003050:	40f9      	lsrs	r1, r7
 8003052:	000f      	movs	r7, r1
 8003054:	2b20      	cmp	r3, #32
 8003056:	d005      	beq.n	8003064 <__aeabi_dsub+0x49c>
 8003058:	2140      	movs	r1, #64	@ 0x40
 800305a:	1acb      	subs	r3, r1, r3
 800305c:	4659      	mov	r1, fp
 800305e:	4099      	lsls	r1, r3
 8003060:	430a      	orrs	r2, r1
 8003062:	4692      	mov	sl, r2
 8003064:	4653      	mov	r3, sl
 8003066:	1e5a      	subs	r2, r3, #1
 8003068:	4193      	sbcs	r3, r2
 800306a:	431f      	orrs	r7, r3
 800306c:	e604      	b.n	8002c78 <__aeabi_dsub+0xb0>
 800306e:	1aeb      	subs	r3, r5, r3
 8003070:	4d9b      	ldr	r5, [pc, #620]	@ (80032e0 <__aeabi_dsub+0x718>)
 8003072:	4015      	ands	r5, r2
 8003074:	076f      	lsls	r7, r5, #29
 8003076:	08ed      	lsrs	r5, r5, #3
 8003078:	032c      	lsls	r4, r5, #12
 800307a:	055d      	lsls	r5, r3, #21
 800307c:	0b24      	lsrs	r4, r4, #12
 800307e:	0d6d      	lsrs	r5, r5, #21
 8003080:	e736      	b.n	8002ef0 <__aeabi_dsub+0x328>
 8003082:	4d95      	ldr	r5, [pc, #596]	@ (80032d8 <__aeabi_dsub+0x710>)
 8003084:	42ab      	cmp	r3, r5
 8003086:	d100      	bne.n	800308a <__aeabi_dsub+0x4c2>
 8003088:	e0d6      	b.n	8003238 <__aeabi_dsub+0x670>
 800308a:	1882      	adds	r2, r0, r2
 800308c:	0021      	movs	r1, r4
 800308e:	4282      	cmp	r2, r0
 8003090:	4180      	sbcs	r0, r0
 8003092:	4459      	add	r1, fp
 8003094:	4240      	negs	r0, r0
 8003096:	1808      	adds	r0, r1, r0
 8003098:	07c7      	lsls	r7, r0, #31
 800309a:	0852      	lsrs	r2, r2, #1
 800309c:	4317      	orrs	r7, r2
 800309e:	0844      	lsrs	r4, r0, #1
 80030a0:	0752      	lsls	r2, r2, #29
 80030a2:	d400      	bmi.n	80030a6 <__aeabi_dsub+0x4de>
 80030a4:	e185      	b.n	80033b2 <__aeabi_dsub+0x7ea>
 80030a6:	220f      	movs	r2, #15
 80030a8:	001d      	movs	r5, r3
 80030aa:	403a      	ands	r2, r7
 80030ac:	2a04      	cmp	r2, #4
 80030ae:	d000      	beq.n	80030b2 <__aeabi_dsub+0x4ea>
 80030b0:	e61a      	b.n	8002ce8 <__aeabi_dsub+0x120>
 80030b2:	08ff      	lsrs	r7, r7, #3
 80030b4:	0764      	lsls	r4, r4, #29
 80030b6:	4327      	orrs	r7, r4
 80030b8:	0905      	lsrs	r5, r0, #4
 80030ba:	e7dd      	b.n	8003078 <__aeabi_dsub+0x4b0>
 80030bc:	465b      	mov	r3, fp
 80030be:	08d2      	lsrs	r2, r2, #3
 80030c0:	075f      	lsls	r7, r3, #29
 80030c2:	4317      	orrs	r7, r2
 80030c4:	08dd      	lsrs	r5, r3, #3
 80030c6:	e67b      	b.n	8002dc0 <__aeabi_dsub+0x1f8>
 80030c8:	2700      	movs	r7, #0
 80030ca:	2400      	movs	r4, #0
 80030cc:	e710      	b.n	8002ef0 <__aeabi_dsub+0x328>
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d000      	beq.n	80030d4 <__aeabi_dsub+0x50c>
 80030d2:	e0d6      	b.n	8003282 <__aeabi_dsub+0x6ba>
 80030d4:	2900      	cmp	r1, #0
 80030d6:	d000      	beq.n	80030da <__aeabi_dsub+0x512>
 80030d8:	e12f      	b.n	800333a <__aeabi_dsub+0x772>
 80030da:	2480      	movs	r4, #128	@ 0x80
 80030dc:	2600      	movs	r6, #0
 80030de:	4d7e      	ldr	r5, [pc, #504]	@ (80032d8 <__aeabi_dsub+0x710>)
 80030e0:	0324      	lsls	r4, r4, #12
 80030e2:	e705      	b.n	8002ef0 <__aeabi_dsub+0x328>
 80030e4:	4666      	mov	r6, ip
 80030e6:	465c      	mov	r4, fp
 80030e8:	08d0      	lsrs	r0, r2, #3
 80030ea:	e717      	b.n	8002f1c <__aeabi_dsub+0x354>
 80030ec:	465b      	mov	r3, fp
 80030ee:	1a17      	subs	r7, r2, r0
 80030f0:	42ba      	cmp	r2, r7
 80030f2:	4192      	sbcs	r2, r2
 80030f4:	1b1c      	subs	r4, r3, r4
 80030f6:	2601      	movs	r6, #1
 80030f8:	4663      	mov	r3, ip
 80030fa:	4252      	negs	r2, r2
 80030fc:	1aa4      	subs	r4, r4, r2
 80030fe:	401e      	ands	r6, r3
 8003100:	e5c4      	b.n	8002c8c <__aeabi_dsub+0xc4>
 8003102:	1883      	adds	r3, r0, r2
 8003104:	4283      	cmp	r3, r0
 8003106:	4180      	sbcs	r0, r0
 8003108:	445c      	add	r4, fp
 800310a:	4240      	negs	r0, r0
 800310c:	1825      	adds	r5, r4, r0
 800310e:	022a      	lsls	r2, r5, #8
 8003110:	d400      	bmi.n	8003114 <__aeabi_dsub+0x54c>
 8003112:	e0da      	b.n	80032ca <__aeabi_dsub+0x702>
 8003114:	4a72      	ldr	r2, [pc, #456]	@ (80032e0 <__aeabi_dsub+0x718>)
 8003116:	085b      	lsrs	r3, r3, #1
 8003118:	4015      	ands	r5, r2
 800311a:	07ea      	lsls	r2, r5, #31
 800311c:	431a      	orrs	r2, r3
 800311e:	0869      	lsrs	r1, r5, #1
 8003120:	075b      	lsls	r3, r3, #29
 8003122:	d400      	bmi.n	8003126 <__aeabi_dsub+0x55e>
 8003124:	e14a      	b.n	80033bc <__aeabi_dsub+0x7f4>
 8003126:	230f      	movs	r3, #15
 8003128:	4013      	ands	r3, r2
 800312a:	2b04      	cmp	r3, #4
 800312c:	d100      	bne.n	8003130 <__aeabi_dsub+0x568>
 800312e:	e0fc      	b.n	800332a <__aeabi_dsub+0x762>
 8003130:	1d17      	adds	r7, r2, #4
 8003132:	4297      	cmp	r7, r2
 8003134:	41a4      	sbcs	r4, r4
 8003136:	4264      	negs	r4, r4
 8003138:	2502      	movs	r5, #2
 800313a:	1864      	adds	r4, r4, r1
 800313c:	e6ec      	b.n	8002f18 <__aeabi_dsub+0x350>
 800313e:	4647      	mov	r7, r8
 8003140:	001c      	movs	r4, r3
 8003142:	431f      	orrs	r7, r3
 8003144:	d000      	beq.n	8003148 <__aeabi_dsub+0x580>
 8003146:	e743      	b.n	8002fd0 <__aeabi_dsub+0x408>
 8003148:	2600      	movs	r6, #0
 800314a:	2500      	movs	r5, #0
 800314c:	2400      	movs	r4, #0
 800314e:	e6cf      	b.n	8002ef0 <__aeabi_dsub+0x328>
 8003150:	08c0      	lsrs	r0, r0, #3
 8003152:	0767      	lsls	r7, r4, #29
 8003154:	4307      	orrs	r7, r0
 8003156:	08e5      	lsrs	r5, r4, #3
 8003158:	e632      	b.n	8002dc0 <__aeabi_dsub+0x1f8>
 800315a:	1a87      	subs	r7, r0, r2
 800315c:	465b      	mov	r3, fp
 800315e:	42b8      	cmp	r0, r7
 8003160:	4180      	sbcs	r0, r0
 8003162:	1ae4      	subs	r4, r4, r3
 8003164:	4240      	negs	r0, r0
 8003166:	1a24      	subs	r4, r4, r0
 8003168:	0223      	lsls	r3, r4, #8
 800316a:	d428      	bmi.n	80031be <__aeabi_dsub+0x5f6>
 800316c:	0763      	lsls	r3, r4, #29
 800316e:	08ff      	lsrs	r7, r7, #3
 8003170:	431f      	orrs	r7, r3
 8003172:	08e5      	lsrs	r5, r4, #3
 8003174:	2301      	movs	r3, #1
 8003176:	e77f      	b.n	8003078 <__aeabi_dsub+0x4b0>
 8003178:	2b00      	cmp	r3, #0
 800317a:	d100      	bne.n	800317e <__aeabi_dsub+0x5b6>
 800317c:	e673      	b.n	8002e66 <__aeabi_dsub+0x29e>
 800317e:	464b      	mov	r3, r9
 8003180:	1b5f      	subs	r7, r3, r5
 8003182:	003b      	movs	r3, r7
 8003184:	2d00      	cmp	r5, #0
 8003186:	d100      	bne.n	800318a <__aeabi_dsub+0x5c2>
 8003188:	e742      	b.n	8003010 <__aeabi_dsub+0x448>
 800318a:	2f38      	cmp	r7, #56	@ 0x38
 800318c:	dd00      	ble.n	8003190 <__aeabi_dsub+0x5c8>
 800318e:	e0ec      	b.n	800336a <__aeabi_dsub+0x7a2>
 8003190:	2380      	movs	r3, #128	@ 0x80
 8003192:	000e      	movs	r6, r1
 8003194:	041b      	lsls	r3, r3, #16
 8003196:	431c      	orrs	r4, r3
 8003198:	2f1f      	cmp	r7, #31
 800319a:	dc25      	bgt.n	80031e8 <__aeabi_dsub+0x620>
 800319c:	2520      	movs	r5, #32
 800319e:	0023      	movs	r3, r4
 80031a0:	1bed      	subs	r5, r5, r7
 80031a2:	0001      	movs	r1, r0
 80031a4:	40a8      	lsls	r0, r5
 80031a6:	40ab      	lsls	r3, r5
 80031a8:	40f9      	lsrs	r1, r7
 80031aa:	1e45      	subs	r5, r0, #1
 80031ac:	41a8      	sbcs	r0, r5
 80031ae:	430b      	orrs	r3, r1
 80031b0:	40fc      	lsrs	r4, r7
 80031b2:	4318      	orrs	r0, r3
 80031b4:	465b      	mov	r3, fp
 80031b6:	1b1b      	subs	r3, r3, r4
 80031b8:	469b      	mov	fp, r3
 80031ba:	e739      	b.n	8003030 <__aeabi_dsub+0x468>
 80031bc:	4666      	mov	r6, ip
 80031be:	2501      	movs	r5, #1
 80031c0:	e562      	b.n	8002c88 <__aeabi_dsub+0xc0>
 80031c2:	001f      	movs	r7, r3
 80031c4:	4659      	mov	r1, fp
 80031c6:	3f20      	subs	r7, #32
 80031c8:	40f9      	lsrs	r1, r7
 80031ca:	468c      	mov	ip, r1
 80031cc:	2b20      	cmp	r3, #32
 80031ce:	d005      	beq.n	80031dc <__aeabi_dsub+0x614>
 80031d0:	2740      	movs	r7, #64	@ 0x40
 80031d2:	4659      	mov	r1, fp
 80031d4:	1afb      	subs	r3, r7, r3
 80031d6:	4099      	lsls	r1, r3
 80031d8:	430a      	orrs	r2, r1
 80031da:	4692      	mov	sl, r2
 80031dc:	4657      	mov	r7, sl
 80031de:	1e7b      	subs	r3, r7, #1
 80031e0:	419f      	sbcs	r7, r3
 80031e2:	4663      	mov	r3, ip
 80031e4:	431f      	orrs	r7, r3
 80031e6:	e5c1      	b.n	8002d6c <__aeabi_dsub+0x1a4>
 80031e8:	003b      	movs	r3, r7
 80031ea:	0025      	movs	r5, r4
 80031ec:	3b20      	subs	r3, #32
 80031ee:	40dd      	lsrs	r5, r3
 80031f0:	2f20      	cmp	r7, #32
 80031f2:	d004      	beq.n	80031fe <__aeabi_dsub+0x636>
 80031f4:	2340      	movs	r3, #64	@ 0x40
 80031f6:	1bdb      	subs	r3, r3, r7
 80031f8:	409c      	lsls	r4, r3
 80031fa:	4320      	orrs	r0, r4
 80031fc:	4680      	mov	r8, r0
 80031fe:	4640      	mov	r0, r8
 8003200:	1e43      	subs	r3, r0, #1
 8003202:	4198      	sbcs	r0, r3
 8003204:	4328      	orrs	r0, r5
 8003206:	e713      	b.n	8003030 <__aeabi_dsub+0x468>
 8003208:	2900      	cmp	r1, #0
 800320a:	d09d      	beq.n	8003148 <__aeabi_dsub+0x580>
 800320c:	2601      	movs	r6, #1
 800320e:	4663      	mov	r3, ip
 8003210:	465c      	mov	r4, fp
 8003212:	4690      	mov	r8, r2
 8003214:	401e      	ands	r6, r3
 8003216:	e6db      	b.n	8002fd0 <__aeabi_dsub+0x408>
 8003218:	1a17      	subs	r7, r2, r0
 800321a:	465b      	mov	r3, fp
 800321c:	42ba      	cmp	r2, r7
 800321e:	4192      	sbcs	r2, r2
 8003220:	1b1c      	subs	r4, r3, r4
 8003222:	4252      	negs	r2, r2
 8003224:	1aa4      	subs	r4, r4, r2
 8003226:	0223      	lsls	r3, r4, #8
 8003228:	d4c8      	bmi.n	80031bc <__aeabi_dsub+0x5f4>
 800322a:	0763      	lsls	r3, r4, #29
 800322c:	08ff      	lsrs	r7, r7, #3
 800322e:	431f      	orrs	r7, r3
 8003230:	4666      	mov	r6, ip
 8003232:	2301      	movs	r3, #1
 8003234:	08e5      	lsrs	r5, r4, #3
 8003236:	e71f      	b.n	8003078 <__aeabi_dsub+0x4b0>
 8003238:	001d      	movs	r5, r3
 800323a:	2400      	movs	r4, #0
 800323c:	2700      	movs	r7, #0
 800323e:	e657      	b.n	8002ef0 <__aeabi_dsub+0x328>
 8003240:	465c      	mov	r4, fp
 8003242:	08d0      	lsrs	r0, r2, #3
 8003244:	e66a      	b.n	8002f1c <__aeabi_dsub+0x354>
 8003246:	2b00      	cmp	r3, #0
 8003248:	d100      	bne.n	800324c <__aeabi_dsub+0x684>
 800324a:	e737      	b.n	80030bc <__aeabi_dsub+0x4f4>
 800324c:	4653      	mov	r3, sl
 800324e:	08c0      	lsrs	r0, r0, #3
 8003250:	0767      	lsls	r7, r4, #29
 8003252:	4307      	orrs	r7, r0
 8003254:	08e5      	lsrs	r5, r4, #3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d100      	bne.n	800325c <__aeabi_dsub+0x694>
 800325a:	e5b1      	b.n	8002dc0 <__aeabi_dsub+0x1f8>
 800325c:	2380      	movs	r3, #128	@ 0x80
 800325e:	031b      	lsls	r3, r3, #12
 8003260:	421d      	tst	r5, r3
 8003262:	d008      	beq.n	8003276 <__aeabi_dsub+0x6ae>
 8003264:	4659      	mov	r1, fp
 8003266:	08c8      	lsrs	r0, r1, #3
 8003268:	4218      	tst	r0, r3
 800326a:	d104      	bne.n	8003276 <__aeabi_dsub+0x6ae>
 800326c:	08d2      	lsrs	r2, r2, #3
 800326e:	0749      	lsls	r1, r1, #29
 8003270:	430a      	orrs	r2, r1
 8003272:	0017      	movs	r7, r2
 8003274:	0005      	movs	r5, r0
 8003276:	0f7b      	lsrs	r3, r7, #29
 8003278:	00ff      	lsls	r7, r7, #3
 800327a:	08ff      	lsrs	r7, r7, #3
 800327c:	075b      	lsls	r3, r3, #29
 800327e:	431f      	orrs	r7, r3
 8003280:	e59e      	b.n	8002dc0 <__aeabi_dsub+0x1f8>
 8003282:	08c0      	lsrs	r0, r0, #3
 8003284:	0763      	lsls	r3, r4, #29
 8003286:	4318      	orrs	r0, r3
 8003288:	08e5      	lsrs	r5, r4, #3
 800328a:	2900      	cmp	r1, #0
 800328c:	d053      	beq.n	8003336 <__aeabi_dsub+0x76e>
 800328e:	2380      	movs	r3, #128	@ 0x80
 8003290:	031b      	lsls	r3, r3, #12
 8003292:	421d      	tst	r5, r3
 8003294:	d00a      	beq.n	80032ac <__aeabi_dsub+0x6e4>
 8003296:	4659      	mov	r1, fp
 8003298:	08cc      	lsrs	r4, r1, #3
 800329a:	421c      	tst	r4, r3
 800329c:	d106      	bne.n	80032ac <__aeabi_dsub+0x6e4>
 800329e:	2601      	movs	r6, #1
 80032a0:	4663      	mov	r3, ip
 80032a2:	0025      	movs	r5, r4
 80032a4:	08d0      	lsrs	r0, r2, #3
 80032a6:	0749      	lsls	r1, r1, #29
 80032a8:	4308      	orrs	r0, r1
 80032aa:	401e      	ands	r6, r3
 80032ac:	0f47      	lsrs	r7, r0, #29
 80032ae:	00c0      	lsls	r0, r0, #3
 80032b0:	08c0      	lsrs	r0, r0, #3
 80032b2:	077f      	lsls	r7, r7, #29
 80032b4:	4307      	orrs	r7, r0
 80032b6:	e583      	b.n	8002dc0 <__aeabi_dsub+0x1f8>
 80032b8:	1883      	adds	r3, r0, r2
 80032ba:	4293      	cmp	r3, r2
 80032bc:	4192      	sbcs	r2, r2
 80032be:	445c      	add	r4, fp
 80032c0:	4252      	negs	r2, r2
 80032c2:	18a5      	adds	r5, r4, r2
 80032c4:	022a      	lsls	r2, r5, #8
 80032c6:	d500      	bpl.n	80032ca <__aeabi_dsub+0x702>
 80032c8:	e724      	b.n	8003114 <__aeabi_dsub+0x54c>
 80032ca:	076f      	lsls	r7, r5, #29
 80032cc:	08db      	lsrs	r3, r3, #3
 80032ce:	431f      	orrs	r7, r3
 80032d0:	08ed      	lsrs	r5, r5, #3
 80032d2:	2301      	movs	r3, #1
 80032d4:	e6d0      	b.n	8003078 <__aeabi_dsub+0x4b0>
 80032d6:	46c0      	nop			@ (mov r8, r8)
 80032d8:	000007ff 	.word	0x000007ff
 80032dc:	000007fe 	.word	0x000007fe
 80032e0:	ff7fffff 	.word	0xff7fffff
 80032e4:	465b      	mov	r3, fp
 80032e6:	08d2      	lsrs	r2, r2, #3
 80032e8:	075f      	lsls	r7, r3, #29
 80032ea:	4666      	mov	r6, ip
 80032ec:	4317      	orrs	r7, r2
 80032ee:	08dd      	lsrs	r5, r3, #3
 80032f0:	e566      	b.n	8002dc0 <__aeabi_dsub+0x1f8>
 80032f2:	0025      	movs	r5, r4
 80032f4:	3b20      	subs	r3, #32
 80032f6:	40dd      	lsrs	r5, r3
 80032f8:	4663      	mov	r3, ip
 80032fa:	2b20      	cmp	r3, #32
 80032fc:	d005      	beq.n	800330a <__aeabi_dsub+0x742>
 80032fe:	2340      	movs	r3, #64	@ 0x40
 8003300:	4661      	mov	r1, ip
 8003302:	1a5b      	subs	r3, r3, r1
 8003304:	409c      	lsls	r4, r3
 8003306:	4320      	orrs	r0, r4
 8003308:	4680      	mov	r8, r0
 800330a:	4647      	mov	r7, r8
 800330c:	1e7b      	subs	r3, r7, #1
 800330e:	419f      	sbcs	r7, r3
 8003310:	432f      	orrs	r7, r5
 8003312:	e5a0      	b.n	8002e56 <__aeabi_dsub+0x28e>
 8003314:	2120      	movs	r1, #32
 8003316:	2700      	movs	r7, #0
 8003318:	1a09      	subs	r1, r1, r0
 800331a:	e4d2      	b.n	8002cc2 <__aeabi_dsub+0xfa>
 800331c:	2f00      	cmp	r7, #0
 800331e:	d100      	bne.n	8003322 <__aeabi_dsub+0x75a>
 8003320:	e713      	b.n	800314a <__aeabi_dsub+0x582>
 8003322:	465c      	mov	r4, fp
 8003324:	0017      	movs	r7, r2
 8003326:	2500      	movs	r5, #0
 8003328:	e5f6      	b.n	8002f18 <__aeabi_dsub+0x350>
 800332a:	08d7      	lsrs	r7, r2, #3
 800332c:	0749      	lsls	r1, r1, #29
 800332e:	2302      	movs	r3, #2
 8003330:	430f      	orrs	r7, r1
 8003332:	092d      	lsrs	r5, r5, #4
 8003334:	e6a0      	b.n	8003078 <__aeabi_dsub+0x4b0>
 8003336:	0007      	movs	r7, r0
 8003338:	e542      	b.n	8002dc0 <__aeabi_dsub+0x1f8>
 800333a:	465b      	mov	r3, fp
 800333c:	2601      	movs	r6, #1
 800333e:	075f      	lsls	r7, r3, #29
 8003340:	08dd      	lsrs	r5, r3, #3
 8003342:	4663      	mov	r3, ip
 8003344:	08d2      	lsrs	r2, r2, #3
 8003346:	4317      	orrs	r7, r2
 8003348:	401e      	ands	r6, r3
 800334a:	e539      	b.n	8002dc0 <__aeabi_dsub+0x1f8>
 800334c:	465b      	mov	r3, fp
 800334e:	08d2      	lsrs	r2, r2, #3
 8003350:	075f      	lsls	r7, r3, #29
 8003352:	4317      	orrs	r7, r2
 8003354:	08dd      	lsrs	r5, r3, #3
 8003356:	e533      	b.n	8002dc0 <__aeabi_dsub+0x1f8>
 8003358:	4a1e      	ldr	r2, [pc, #120]	@ (80033d4 <__aeabi_dsub+0x80c>)
 800335a:	08db      	lsrs	r3, r3, #3
 800335c:	4022      	ands	r2, r4
 800335e:	0757      	lsls	r7, r2, #29
 8003360:	0252      	lsls	r2, r2, #9
 8003362:	2501      	movs	r5, #1
 8003364:	431f      	orrs	r7, r3
 8003366:	0b14      	lsrs	r4, r2, #12
 8003368:	e5c2      	b.n	8002ef0 <__aeabi_dsub+0x328>
 800336a:	000e      	movs	r6, r1
 800336c:	2001      	movs	r0, #1
 800336e:	e65f      	b.n	8003030 <__aeabi_dsub+0x468>
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00d      	beq.n	8003390 <__aeabi_dsub+0x7c8>
 8003374:	464b      	mov	r3, r9
 8003376:	1b5b      	subs	r3, r3, r5
 8003378:	469c      	mov	ip, r3
 800337a:	2d00      	cmp	r5, #0
 800337c:	d100      	bne.n	8003380 <__aeabi_dsub+0x7b8>
 800337e:	e548      	b.n	8002e12 <__aeabi_dsub+0x24a>
 8003380:	2701      	movs	r7, #1
 8003382:	2b38      	cmp	r3, #56	@ 0x38
 8003384:	dd00      	ble.n	8003388 <__aeabi_dsub+0x7c0>
 8003386:	e566      	b.n	8002e56 <__aeabi_dsub+0x28e>
 8003388:	2380      	movs	r3, #128	@ 0x80
 800338a:	041b      	lsls	r3, r3, #16
 800338c:	431c      	orrs	r4, r3
 800338e:	e550      	b.n	8002e32 <__aeabi_dsub+0x26a>
 8003390:	1c6b      	adds	r3, r5, #1
 8003392:	4d11      	ldr	r5, [pc, #68]	@ (80033d8 <__aeabi_dsub+0x810>)
 8003394:	422b      	tst	r3, r5
 8003396:	d000      	beq.n	800339a <__aeabi_dsub+0x7d2>
 8003398:	e673      	b.n	8003082 <__aeabi_dsub+0x4ba>
 800339a:	4659      	mov	r1, fp
 800339c:	0023      	movs	r3, r4
 800339e:	4311      	orrs	r1, r2
 80033a0:	468a      	mov	sl, r1
 80033a2:	4303      	orrs	r3, r0
 80033a4:	e600      	b.n	8002fa8 <__aeabi_dsub+0x3e0>
 80033a6:	0767      	lsls	r7, r4, #29
 80033a8:	08c0      	lsrs	r0, r0, #3
 80033aa:	2300      	movs	r3, #0
 80033ac:	4307      	orrs	r7, r0
 80033ae:	08e5      	lsrs	r5, r4, #3
 80033b0:	e662      	b.n	8003078 <__aeabi_dsub+0x4b0>
 80033b2:	0764      	lsls	r4, r4, #29
 80033b4:	08ff      	lsrs	r7, r7, #3
 80033b6:	4327      	orrs	r7, r4
 80033b8:	0905      	lsrs	r5, r0, #4
 80033ba:	e65d      	b.n	8003078 <__aeabi_dsub+0x4b0>
 80033bc:	08d2      	lsrs	r2, r2, #3
 80033be:	0749      	lsls	r1, r1, #29
 80033c0:	4311      	orrs	r1, r2
 80033c2:	000f      	movs	r7, r1
 80033c4:	2302      	movs	r3, #2
 80033c6:	092d      	lsrs	r5, r5, #4
 80033c8:	e656      	b.n	8003078 <__aeabi_dsub+0x4b0>
 80033ca:	0007      	movs	r7, r0
 80033cc:	e5a4      	b.n	8002f18 <__aeabi_dsub+0x350>
 80033ce:	0038      	movs	r0, r7
 80033d0:	e48f      	b.n	8002cf2 <__aeabi_dsub+0x12a>
 80033d2:	46c0      	nop			@ (mov r8, r8)
 80033d4:	ff7fffff 	.word	0xff7fffff
 80033d8:	000007fe 	.word	0x000007fe

080033dc <__aeabi_dcmpun>:
 80033dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033de:	46c6      	mov	lr, r8
 80033e0:	031e      	lsls	r6, r3, #12
 80033e2:	0b36      	lsrs	r6, r6, #12
 80033e4:	46b0      	mov	r8, r6
 80033e6:	4e0d      	ldr	r6, [pc, #52]	@ (800341c <__aeabi_dcmpun+0x40>)
 80033e8:	030c      	lsls	r4, r1, #12
 80033ea:	004d      	lsls	r5, r1, #1
 80033ec:	005f      	lsls	r7, r3, #1
 80033ee:	b500      	push	{lr}
 80033f0:	0b24      	lsrs	r4, r4, #12
 80033f2:	0d6d      	lsrs	r5, r5, #21
 80033f4:	0d7f      	lsrs	r7, r7, #21
 80033f6:	42b5      	cmp	r5, r6
 80033f8:	d00b      	beq.n	8003412 <__aeabi_dcmpun+0x36>
 80033fa:	4908      	ldr	r1, [pc, #32]	@ (800341c <__aeabi_dcmpun+0x40>)
 80033fc:	2000      	movs	r0, #0
 80033fe:	428f      	cmp	r7, r1
 8003400:	d104      	bne.n	800340c <__aeabi_dcmpun+0x30>
 8003402:	4646      	mov	r6, r8
 8003404:	4316      	orrs	r6, r2
 8003406:	0030      	movs	r0, r6
 8003408:	1e43      	subs	r3, r0, #1
 800340a:	4198      	sbcs	r0, r3
 800340c:	bc80      	pop	{r7}
 800340e:	46b8      	mov	r8, r7
 8003410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003412:	4304      	orrs	r4, r0
 8003414:	2001      	movs	r0, #1
 8003416:	2c00      	cmp	r4, #0
 8003418:	d1f8      	bne.n	800340c <__aeabi_dcmpun+0x30>
 800341a:	e7ee      	b.n	80033fa <__aeabi_dcmpun+0x1e>
 800341c:	000007ff 	.word	0x000007ff

08003420 <__aeabi_d2iz>:
 8003420:	000b      	movs	r3, r1
 8003422:	0002      	movs	r2, r0
 8003424:	b570      	push	{r4, r5, r6, lr}
 8003426:	4d16      	ldr	r5, [pc, #88]	@ (8003480 <__aeabi_d2iz+0x60>)
 8003428:	030c      	lsls	r4, r1, #12
 800342a:	b082      	sub	sp, #8
 800342c:	0049      	lsls	r1, r1, #1
 800342e:	2000      	movs	r0, #0
 8003430:	9200      	str	r2, [sp, #0]
 8003432:	9301      	str	r3, [sp, #4]
 8003434:	0b24      	lsrs	r4, r4, #12
 8003436:	0d49      	lsrs	r1, r1, #21
 8003438:	0fde      	lsrs	r6, r3, #31
 800343a:	42a9      	cmp	r1, r5
 800343c:	dd04      	ble.n	8003448 <__aeabi_d2iz+0x28>
 800343e:	4811      	ldr	r0, [pc, #68]	@ (8003484 <__aeabi_d2iz+0x64>)
 8003440:	4281      	cmp	r1, r0
 8003442:	dd03      	ble.n	800344c <__aeabi_d2iz+0x2c>
 8003444:	4b10      	ldr	r3, [pc, #64]	@ (8003488 <__aeabi_d2iz+0x68>)
 8003446:	18f0      	adds	r0, r6, r3
 8003448:	b002      	add	sp, #8
 800344a:	bd70      	pop	{r4, r5, r6, pc}
 800344c:	2080      	movs	r0, #128	@ 0x80
 800344e:	0340      	lsls	r0, r0, #13
 8003450:	4320      	orrs	r0, r4
 8003452:	4c0e      	ldr	r4, [pc, #56]	@ (800348c <__aeabi_d2iz+0x6c>)
 8003454:	1a64      	subs	r4, r4, r1
 8003456:	2c1f      	cmp	r4, #31
 8003458:	dd08      	ble.n	800346c <__aeabi_d2iz+0x4c>
 800345a:	4b0d      	ldr	r3, [pc, #52]	@ (8003490 <__aeabi_d2iz+0x70>)
 800345c:	1a5b      	subs	r3, r3, r1
 800345e:	40d8      	lsrs	r0, r3
 8003460:	0003      	movs	r3, r0
 8003462:	4258      	negs	r0, r3
 8003464:	2e00      	cmp	r6, #0
 8003466:	d1ef      	bne.n	8003448 <__aeabi_d2iz+0x28>
 8003468:	0018      	movs	r0, r3
 800346a:	e7ed      	b.n	8003448 <__aeabi_d2iz+0x28>
 800346c:	4b09      	ldr	r3, [pc, #36]	@ (8003494 <__aeabi_d2iz+0x74>)
 800346e:	9a00      	ldr	r2, [sp, #0]
 8003470:	469c      	mov	ip, r3
 8003472:	0003      	movs	r3, r0
 8003474:	4461      	add	r1, ip
 8003476:	408b      	lsls	r3, r1
 8003478:	40e2      	lsrs	r2, r4
 800347a:	4313      	orrs	r3, r2
 800347c:	e7f1      	b.n	8003462 <__aeabi_d2iz+0x42>
 800347e:	46c0      	nop			@ (mov r8, r8)
 8003480:	000003fe 	.word	0x000003fe
 8003484:	0000041d 	.word	0x0000041d
 8003488:	7fffffff 	.word	0x7fffffff
 800348c:	00000433 	.word	0x00000433
 8003490:	00000413 	.word	0x00000413
 8003494:	fffffbed 	.word	0xfffffbed

08003498 <__aeabi_i2d>:
 8003498:	b570      	push	{r4, r5, r6, lr}
 800349a:	2800      	cmp	r0, #0
 800349c:	d016      	beq.n	80034cc <__aeabi_i2d+0x34>
 800349e:	17c3      	asrs	r3, r0, #31
 80034a0:	18c5      	adds	r5, r0, r3
 80034a2:	405d      	eors	r5, r3
 80034a4:	0fc4      	lsrs	r4, r0, #31
 80034a6:	0028      	movs	r0, r5
 80034a8:	f000 f912 	bl	80036d0 <__clzsi2>
 80034ac:	4b10      	ldr	r3, [pc, #64]	@ (80034f0 <__aeabi_i2d+0x58>)
 80034ae:	1a1b      	subs	r3, r3, r0
 80034b0:	055b      	lsls	r3, r3, #21
 80034b2:	0d5b      	lsrs	r3, r3, #21
 80034b4:	280a      	cmp	r0, #10
 80034b6:	dc14      	bgt.n	80034e2 <__aeabi_i2d+0x4a>
 80034b8:	0002      	movs	r2, r0
 80034ba:	002e      	movs	r6, r5
 80034bc:	3215      	adds	r2, #21
 80034be:	4096      	lsls	r6, r2
 80034c0:	220b      	movs	r2, #11
 80034c2:	1a12      	subs	r2, r2, r0
 80034c4:	40d5      	lsrs	r5, r2
 80034c6:	032d      	lsls	r5, r5, #12
 80034c8:	0b2d      	lsrs	r5, r5, #12
 80034ca:	e003      	b.n	80034d4 <__aeabi_i2d+0x3c>
 80034cc:	2400      	movs	r4, #0
 80034ce:	2300      	movs	r3, #0
 80034d0:	2500      	movs	r5, #0
 80034d2:	2600      	movs	r6, #0
 80034d4:	051b      	lsls	r3, r3, #20
 80034d6:	432b      	orrs	r3, r5
 80034d8:	07e4      	lsls	r4, r4, #31
 80034da:	4323      	orrs	r3, r4
 80034dc:	0030      	movs	r0, r6
 80034de:	0019      	movs	r1, r3
 80034e0:	bd70      	pop	{r4, r5, r6, pc}
 80034e2:	380b      	subs	r0, #11
 80034e4:	4085      	lsls	r5, r0
 80034e6:	032d      	lsls	r5, r5, #12
 80034e8:	2600      	movs	r6, #0
 80034ea:	0b2d      	lsrs	r5, r5, #12
 80034ec:	e7f2      	b.n	80034d4 <__aeabi_i2d+0x3c>
 80034ee:	46c0      	nop			@ (mov r8, r8)
 80034f0:	0000041e 	.word	0x0000041e

080034f4 <__aeabi_ui2d>:
 80034f4:	b510      	push	{r4, lr}
 80034f6:	1e04      	subs	r4, r0, #0
 80034f8:	d010      	beq.n	800351c <__aeabi_ui2d+0x28>
 80034fa:	f000 f8e9 	bl	80036d0 <__clzsi2>
 80034fe:	4b0e      	ldr	r3, [pc, #56]	@ (8003538 <__aeabi_ui2d+0x44>)
 8003500:	1a1b      	subs	r3, r3, r0
 8003502:	055b      	lsls	r3, r3, #21
 8003504:	0d5b      	lsrs	r3, r3, #21
 8003506:	280a      	cmp	r0, #10
 8003508:	dc0f      	bgt.n	800352a <__aeabi_ui2d+0x36>
 800350a:	220b      	movs	r2, #11
 800350c:	0021      	movs	r1, r4
 800350e:	1a12      	subs	r2, r2, r0
 8003510:	40d1      	lsrs	r1, r2
 8003512:	3015      	adds	r0, #21
 8003514:	030a      	lsls	r2, r1, #12
 8003516:	4084      	lsls	r4, r0
 8003518:	0b12      	lsrs	r2, r2, #12
 800351a:	e001      	b.n	8003520 <__aeabi_ui2d+0x2c>
 800351c:	2300      	movs	r3, #0
 800351e:	2200      	movs	r2, #0
 8003520:	051b      	lsls	r3, r3, #20
 8003522:	4313      	orrs	r3, r2
 8003524:	0020      	movs	r0, r4
 8003526:	0019      	movs	r1, r3
 8003528:	bd10      	pop	{r4, pc}
 800352a:	0022      	movs	r2, r4
 800352c:	380b      	subs	r0, #11
 800352e:	4082      	lsls	r2, r0
 8003530:	0312      	lsls	r2, r2, #12
 8003532:	2400      	movs	r4, #0
 8003534:	0b12      	lsrs	r2, r2, #12
 8003536:	e7f3      	b.n	8003520 <__aeabi_ui2d+0x2c>
 8003538:	0000041e 	.word	0x0000041e

0800353c <__aeabi_f2d>:
 800353c:	b570      	push	{r4, r5, r6, lr}
 800353e:	0242      	lsls	r2, r0, #9
 8003540:	0043      	lsls	r3, r0, #1
 8003542:	0fc4      	lsrs	r4, r0, #31
 8003544:	20fe      	movs	r0, #254	@ 0xfe
 8003546:	0e1b      	lsrs	r3, r3, #24
 8003548:	1c59      	adds	r1, r3, #1
 800354a:	0a55      	lsrs	r5, r2, #9
 800354c:	4208      	tst	r0, r1
 800354e:	d00c      	beq.n	800356a <__aeabi_f2d+0x2e>
 8003550:	21e0      	movs	r1, #224	@ 0xe0
 8003552:	0089      	lsls	r1, r1, #2
 8003554:	468c      	mov	ip, r1
 8003556:	076d      	lsls	r5, r5, #29
 8003558:	0b12      	lsrs	r2, r2, #12
 800355a:	4463      	add	r3, ip
 800355c:	051b      	lsls	r3, r3, #20
 800355e:	4313      	orrs	r3, r2
 8003560:	07e4      	lsls	r4, r4, #31
 8003562:	4323      	orrs	r3, r4
 8003564:	0028      	movs	r0, r5
 8003566:	0019      	movs	r1, r3
 8003568:	bd70      	pop	{r4, r5, r6, pc}
 800356a:	2b00      	cmp	r3, #0
 800356c:	d114      	bne.n	8003598 <__aeabi_f2d+0x5c>
 800356e:	2d00      	cmp	r5, #0
 8003570:	d01b      	beq.n	80035aa <__aeabi_f2d+0x6e>
 8003572:	0028      	movs	r0, r5
 8003574:	f000 f8ac 	bl	80036d0 <__clzsi2>
 8003578:	280a      	cmp	r0, #10
 800357a:	dc1c      	bgt.n	80035b6 <__aeabi_f2d+0x7a>
 800357c:	230b      	movs	r3, #11
 800357e:	002a      	movs	r2, r5
 8003580:	1a1b      	subs	r3, r3, r0
 8003582:	40da      	lsrs	r2, r3
 8003584:	0003      	movs	r3, r0
 8003586:	3315      	adds	r3, #21
 8003588:	409d      	lsls	r5, r3
 800358a:	4b0e      	ldr	r3, [pc, #56]	@ (80035c4 <__aeabi_f2d+0x88>)
 800358c:	0312      	lsls	r2, r2, #12
 800358e:	1a1b      	subs	r3, r3, r0
 8003590:	055b      	lsls	r3, r3, #21
 8003592:	0b12      	lsrs	r2, r2, #12
 8003594:	0d5b      	lsrs	r3, r3, #21
 8003596:	e7e1      	b.n	800355c <__aeabi_f2d+0x20>
 8003598:	2d00      	cmp	r5, #0
 800359a:	d009      	beq.n	80035b0 <__aeabi_f2d+0x74>
 800359c:	0b13      	lsrs	r3, r2, #12
 800359e:	2280      	movs	r2, #128	@ 0x80
 80035a0:	0312      	lsls	r2, r2, #12
 80035a2:	431a      	orrs	r2, r3
 80035a4:	076d      	lsls	r5, r5, #29
 80035a6:	4b08      	ldr	r3, [pc, #32]	@ (80035c8 <__aeabi_f2d+0x8c>)
 80035a8:	e7d8      	b.n	800355c <__aeabi_f2d+0x20>
 80035aa:	2300      	movs	r3, #0
 80035ac:	2200      	movs	r2, #0
 80035ae:	e7d5      	b.n	800355c <__aeabi_f2d+0x20>
 80035b0:	2200      	movs	r2, #0
 80035b2:	4b05      	ldr	r3, [pc, #20]	@ (80035c8 <__aeabi_f2d+0x8c>)
 80035b4:	e7d2      	b.n	800355c <__aeabi_f2d+0x20>
 80035b6:	0003      	movs	r3, r0
 80035b8:	002a      	movs	r2, r5
 80035ba:	3b0b      	subs	r3, #11
 80035bc:	409a      	lsls	r2, r3
 80035be:	2500      	movs	r5, #0
 80035c0:	e7e3      	b.n	800358a <__aeabi_f2d+0x4e>
 80035c2:	46c0      	nop			@ (mov r8, r8)
 80035c4:	00000389 	.word	0x00000389
 80035c8:	000007ff 	.word	0x000007ff

080035cc <__aeabi_d2f>:
 80035cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035ce:	004b      	lsls	r3, r1, #1
 80035d0:	030f      	lsls	r7, r1, #12
 80035d2:	0d5b      	lsrs	r3, r3, #21
 80035d4:	4c3a      	ldr	r4, [pc, #232]	@ (80036c0 <__aeabi_d2f+0xf4>)
 80035d6:	0f45      	lsrs	r5, r0, #29
 80035d8:	b083      	sub	sp, #12
 80035da:	0a7f      	lsrs	r7, r7, #9
 80035dc:	1c5e      	adds	r6, r3, #1
 80035de:	432f      	orrs	r7, r5
 80035e0:	9000      	str	r0, [sp, #0]
 80035e2:	9101      	str	r1, [sp, #4]
 80035e4:	0fca      	lsrs	r2, r1, #31
 80035e6:	00c5      	lsls	r5, r0, #3
 80035e8:	4226      	tst	r6, r4
 80035ea:	d00b      	beq.n	8003604 <__aeabi_d2f+0x38>
 80035ec:	4935      	ldr	r1, [pc, #212]	@ (80036c4 <__aeabi_d2f+0xf8>)
 80035ee:	185c      	adds	r4, r3, r1
 80035f0:	2cfe      	cmp	r4, #254	@ 0xfe
 80035f2:	dd13      	ble.n	800361c <__aeabi_d2f+0x50>
 80035f4:	20ff      	movs	r0, #255	@ 0xff
 80035f6:	2300      	movs	r3, #0
 80035f8:	05c0      	lsls	r0, r0, #23
 80035fa:	4318      	orrs	r0, r3
 80035fc:	07d2      	lsls	r2, r2, #31
 80035fe:	4310      	orrs	r0, r2
 8003600:	b003      	add	sp, #12
 8003602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003604:	433d      	orrs	r5, r7
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <__aeabi_d2f+0x42>
 800360a:	2000      	movs	r0, #0
 800360c:	e7f4      	b.n	80035f8 <__aeabi_d2f+0x2c>
 800360e:	2d00      	cmp	r5, #0
 8003610:	d0f0      	beq.n	80035f4 <__aeabi_d2f+0x28>
 8003612:	2380      	movs	r3, #128	@ 0x80
 8003614:	03db      	lsls	r3, r3, #15
 8003616:	20ff      	movs	r0, #255	@ 0xff
 8003618:	433b      	orrs	r3, r7
 800361a:	e7ed      	b.n	80035f8 <__aeabi_d2f+0x2c>
 800361c:	2c00      	cmp	r4, #0
 800361e:	dd0c      	ble.n	800363a <__aeabi_d2f+0x6e>
 8003620:	9b00      	ldr	r3, [sp, #0]
 8003622:	00ff      	lsls	r7, r7, #3
 8003624:	019b      	lsls	r3, r3, #6
 8003626:	1e58      	subs	r0, r3, #1
 8003628:	4183      	sbcs	r3, r0
 800362a:	0f69      	lsrs	r1, r5, #29
 800362c:	433b      	orrs	r3, r7
 800362e:	430b      	orrs	r3, r1
 8003630:	0759      	lsls	r1, r3, #29
 8003632:	d127      	bne.n	8003684 <__aeabi_d2f+0xb8>
 8003634:	08db      	lsrs	r3, r3, #3
 8003636:	b2e0      	uxtb	r0, r4
 8003638:	e7de      	b.n	80035f8 <__aeabi_d2f+0x2c>
 800363a:	0021      	movs	r1, r4
 800363c:	3117      	adds	r1, #23
 800363e:	db31      	blt.n	80036a4 <__aeabi_d2f+0xd8>
 8003640:	2180      	movs	r1, #128	@ 0x80
 8003642:	201e      	movs	r0, #30
 8003644:	0409      	lsls	r1, r1, #16
 8003646:	4339      	orrs	r1, r7
 8003648:	1b00      	subs	r0, r0, r4
 800364a:	281f      	cmp	r0, #31
 800364c:	dd2d      	ble.n	80036aa <__aeabi_d2f+0xde>
 800364e:	2602      	movs	r6, #2
 8003650:	4276      	negs	r6, r6
 8003652:	1b34      	subs	r4, r6, r4
 8003654:	000e      	movs	r6, r1
 8003656:	40e6      	lsrs	r6, r4
 8003658:	0034      	movs	r4, r6
 800365a:	2820      	cmp	r0, #32
 800365c:	d004      	beq.n	8003668 <__aeabi_d2f+0x9c>
 800365e:	481a      	ldr	r0, [pc, #104]	@ (80036c8 <__aeabi_d2f+0xfc>)
 8003660:	4684      	mov	ip, r0
 8003662:	4463      	add	r3, ip
 8003664:	4099      	lsls	r1, r3
 8003666:	430d      	orrs	r5, r1
 8003668:	002b      	movs	r3, r5
 800366a:	1e59      	subs	r1, r3, #1
 800366c:	418b      	sbcs	r3, r1
 800366e:	4323      	orrs	r3, r4
 8003670:	0759      	lsls	r1, r3, #29
 8003672:	d003      	beq.n	800367c <__aeabi_d2f+0xb0>
 8003674:	210f      	movs	r1, #15
 8003676:	4019      	ands	r1, r3
 8003678:	2904      	cmp	r1, #4
 800367a:	d10b      	bne.n	8003694 <__aeabi_d2f+0xc8>
 800367c:	019b      	lsls	r3, r3, #6
 800367e:	2000      	movs	r0, #0
 8003680:	0a5b      	lsrs	r3, r3, #9
 8003682:	e7b9      	b.n	80035f8 <__aeabi_d2f+0x2c>
 8003684:	210f      	movs	r1, #15
 8003686:	4019      	ands	r1, r3
 8003688:	2904      	cmp	r1, #4
 800368a:	d104      	bne.n	8003696 <__aeabi_d2f+0xca>
 800368c:	019b      	lsls	r3, r3, #6
 800368e:	0a5b      	lsrs	r3, r3, #9
 8003690:	b2e0      	uxtb	r0, r4
 8003692:	e7b1      	b.n	80035f8 <__aeabi_d2f+0x2c>
 8003694:	2400      	movs	r4, #0
 8003696:	3304      	adds	r3, #4
 8003698:	0159      	lsls	r1, r3, #5
 800369a:	d5f7      	bpl.n	800368c <__aeabi_d2f+0xc0>
 800369c:	3401      	adds	r4, #1
 800369e:	2300      	movs	r3, #0
 80036a0:	b2e0      	uxtb	r0, r4
 80036a2:	e7a9      	b.n	80035f8 <__aeabi_d2f+0x2c>
 80036a4:	2000      	movs	r0, #0
 80036a6:	2300      	movs	r3, #0
 80036a8:	e7a6      	b.n	80035f8 <__aeabi_d2f+0x2c>
 80036aa:	4c08      	ldr	r4, [pc, #32]	@ (80036cc <__aeabi_d2f+0x100>)
 80036ac:	191c      	adds	r4, r3, r4
 80036ae:	002b      	movs	r3, r5
 80036b0:	40a5      	lsls	r5, r4
 80036b2:	40c3      	lsrs	r3, r0
 80036b4:	40a1      	lsls	r1, r4
 80036b6:	1e68      	subs	r0, r5, #1
 80036b8:	4185      	sbcs	r5, r0
 80036ba:	4329      	orrs	r1, r5
 80036bc:	430b      	orrs	r3, r1
 80036be:	e7d7      	b.n	8003670 <__aeabi_d2f+0xa4>
 80036c0:	000007fe 	.word	0x000007fe
 80036c4:	fffffc80 	.word	0xfffffc80
 80036c8:	fffffca2 	.word	0xfffffca2
 80036cc:	fffffc82 	.word	0xfffffc82

080036d0 <__clzsi2>:
 80036d0:	211c      	movs	r1, #28
 80036d2:	2301      	movs	r3, #1
 80036d4:	041b      	lsls	r3, r3, #16
 80036d6:	4298      	cmp	r0, r3
 80036d8:	d301      	bcc.n	80036de <__clzsi2+0xe>
 80036da:	0c00      	lsrs	r0, r0, #16
 80036dc:	3910      	subs	r1, #16
 80036de:	0a1b      	lsrs	r3, r3, #8
 80036e0:	4298      	cmp	r0, r3
 80036e2:	d301      	bcc.n	80036e8 <__clzsi2+0x18>
 80036e4:	0a00      	lsrs	r0, r0, #8
 80036e6:	3908      	subs	r1, #8
 80036e8:	091b      	lsrs	r3, r3, #4
 80036ea:	4298      	cmp	r0, r3
 80036ec:	d301      	bcc.n	80036f2 <__clzsi2+0x22>
 80036ee:	0900      	lsrs	r0, r0, #4
 80036f0:	3904      	subs	r1, #4
 80036f2:	a202      	add	r2, pc, #8	@ (adr r2, 80036fc <__clzsi2+0x2c>)
 80036f4:	5c10      	ldrb	r0, [r2, r0]
 80036f6:	1840      	adds	r0, r0, r1
 80036f8:	4770      	bx	lr
 80036fa:	46c0      	nop			@ (mov r8, r8)
 80036fc:	02020304 	.word	0x02020304
 8003700:	01010101 	.word	0x01010101
	...

0800370c <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
    /* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800370c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800370e:	2217      	movs	r2, #23
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8003710:	2301      	movs	r3, #1
void ssd1306_WriteCommand(uint8_t byte) {
 8003712:	446a      	add	r2, sp
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8003714:	425b      	negs	r3, r3
void ssd1306_WriteCommand(uint8_t byte) {
 8003716:	7010      	strb	r0, [r2, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8003718:	9302      	str	r3, [sp, #8]
 800371a:	3302      	adds	r3, #2
 800371c:	9200      	str	r2, [sp, #0]
 800371e:	2178      	movs	r1, #120	@ 0x78
 8003720:	2200      	movs	r2, #0
 8003722:	9301      	str	r3, [sp, #4]
 8003724:	4802      	ldr	r0, [pc, #8]	@ (8003730 <ssd1306_WriteCommand+0x24>)
 8003726:	f003 fa71 	bl	8006c0c <HAL_I2C_Mem_Write>
}
 800372a:	b007      	add	sp, #28
 800372c:	bd00      	pop	{pc}
 800372e:	46c0      	nop			@ (mov r8, r8)
 8003730:	2000052c 	.word	0x2000052c

08003734 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8003734:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8003736:	2301      	movs	r3, #1
 8003738:	4c06      	ldr	r4, [pc, #24]	@ (8003754 <ssd1306_WriteData+0x20>)
 800373a:	425b      	negs	r3, r3
 800373c:	b289      	uxth	r1, r1
 800373e:	9302      	str	r3, [sp, #8]
 8003740:	9101      	str	r1, [sp, #4]
 8003742:	9000      	str	r0, [sp, #0]
 8003744:	2240      	movs	r2, #64	@ 0x40
 8003746:	2178      	movs	r1, #120	@ 0x78
 8003748:	0020      	movs	r0, r4
 800374a:	3302      	adds	r3, #2
 800374c:	f003 fa5e 	bl	8006c0c <HAL_I2C_Mem_Write>
}
 8003750:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 8003752:	46c0      	nop			@ (mov r8, r8)
 8003754:	2000052c 	.word	0x2000052c

08003758 <ssd1306_Fill>:
void ssd1306_Fill(SSD1306_COLOR color) {
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8003758:	1e42      	subs	r2, r0, #1
 800375a:	4190      	sbcs	r0, r2
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800375c:	2280      	movs	r2, #128	@ 0x80
 800375e:	2300      	movs	r3, #0
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8003760:	4903      	ldr	r1, [pc, #12]	@ (8003770 <ssd1306_Fill+0x18>)
 8003762:	4240      	negs	r0, r0
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8003764:	0092      	lsls	r2, r2, #2
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8003766:	54c8      	strb	r0, [r1, r3]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8003768:	3301      	adds	r3, #1
 800376a:	4293      	cmp	r3, r2
 800376c:	d1fb      	bne.n	8003766 <ssd1306_Fill+0xe>
    }
}
 800376e:	4770      	bx	lr
 8003770:	2000021e 	.word	0x2000021e

08003774 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8003774:	b570      	push	{r4, r5, r6, lr}
 8003776:	24b0      	movs	r4, #176	@ 0xb0
 8003778:	4d09      	ldr	r5, [pc, #36]	@ (80037a0 <ssd1306_UpdateScreen+0x2c>)
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800377a:	0020      	movs	r0, r4
 800377c:	f7ff ffc6 	bl	800370c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8003780:	2000      	movs	r0, #0
 8003782:	f7ff ffc3 	bl	800370c <ssd1306_WriteCommand>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003786:	3401      	adds	r4, #1
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8003788:	2010      	movs	r0, #16
 800378a:	f7ff ffbf 	bl	800370c <ssd1306_WriteCommand>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800378e:	b2e4      	uxtb	r4, r4
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8003790:	0028      	movs	r0, r5
 8003792:	2180      	movs	r1, #128	@ 0x80
 8003794:	f7ff ffce 	bl	8003734 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003798:	3580      	adds	r5, #128	@ 0x80
 800379a:	2cb4      	cmp	r4, #180	@ 0xb4
 800379c:	d1ed      	bne.n	800377a <ssd1306_UpdateScreen+0x6>
    }
}
 800379e:	bd70      	pop	{r4, r5, r6, pc}
 80037a0:	2000021e 	.word	0x2000021e

080037a4 <ssd1306_DrawPixel>:
//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80037a4:	b243      	sxtb	r3, r0
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80037a6:	b530      	push	{r4, r5, lr}
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	db0e      	blt.n	80037ca <ssd1306_DrawPixel+0x26>
 80037ac:	291f      	cmp	r1, #31
 80037ae:	d80c      	bhi.n	80037ca <ssd1306_DrawPixel+0x26>
        return;
    }
   
    // Draw in the right color
    if(color == White) {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80037b0:	2407      	movs	r4, #7
 80037b2:	08cb      	lsrs	r3, r1, #3
 80037b4:	01db      	lsls	r3, r3, #7
 80037b6:	4d06      	ldr	r5, [pc, #24]	@ (80037d0 <ssd1306_DrawPixel+0x2c>)
 80037b8:	4021      	ands	r1, r4
 80037ba:	1818      	adds	r0, r3, r0
 80037bc:	3c06      	subs	r4, #6
 80037be:	408c      	lsls	r4, r1
 80037c0:	5c2b      	ldrb	r3, [r5, r0]
    if(color == White) {
 80037c2:	2a01      	cmp	r2, #1
 80037c4:	d102      	bne.n	80037cc <ssd1306_DrawPixel+0x28>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80037c6:	4323      	orrs	r3, r4
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80037c8:	542b      	strb	r3, [r5, r0]
    }
}
 80037ca:	bd30      	pop	{r4, r5, pc}
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80037cc:	43a3      	bics	r3, r4
 80037ce:	e7fb      	b.n	80037c8 <ssd1306_DrawPixel+0x24>
 80037d0:	2000021e 	.word	0x2000021e

080037d4 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80037d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80037d6:	0004      	movs	r4, r0
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80037d8:	b089      	sub	sp, #36	@ 0x24
    if (ch < 32 || ch > 126)
 80037da:	3c20      	subs	r4, #32
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80037dc:	9304      	str	r3, [sp, #16]
    if (ch < 32 || ch > 126)
 80037de:	b2e3      	uxtb	r3, r4
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80037e0:	0005      	movs	r5, r0
 80037e2:	9106      	str	r1, [sp, #24]
 80037e4:	9207      	str	r2, [sp, #28]
    if (ch < 32 || ch > 126)
 80037e6:	2b5e      	cmp	r3, #94	@ 0x5e
 80037e8:	d840      	bhi.n	800386c <ssd1306_WriteChar+0x98>
 80037ea:	ab06      	add	r3, sp, #24
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	9301      	str	r3, [sp, #4]
        return 0;
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80037f0:	4b1f      	ldr	r3, [pc, #124]	@ (8003870 <ssd1306_WriteChar+0x9c>)
 80037f2:	9901      	ldr	r1, [sp, #4]
 80037f4:	881a      	ldrh	r2, [r3, #0]
 80037f6:	9200      	str	r2, [sp, #0]
 80037f8:	1852      	adds	r2, r2, r1
 80037fa:	2a80      	cmp	r2, #128	@ 0x80
 80037fc:	dc36      	bgt.n	800386c <ssd1306_WriteChar+0x98>
 80037fe:	aa06      	add	r2, sp, #24
 8003800:	7852      	ldrb	r2, [r2, #1]
 8003802:	9202      	str	r2, [sp, #8]
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8003804:	885b      	ldrh	r3, [r3, #2]
 8003806:	9303      	str	r3, [sp, #12]
 8003808:	189b      	adds	r3, r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800380a:	2b20      	cmp	r3, #32
 800380c:	dc2e      	bgt.n	800386c <ssd1306_WriteChar+0x98>
        // Not enough space on current line
        return 0;
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 800380e:	2700      	movs	r7, #0
 8003810:	4354      	muls	r4, r2
 8003812:	0064      	lsls	r4, r4, #1
 8003814:	9b02      	ldr	r3, [sp, #8]
 8003816:	42bb      	cmp	r3, r7
 8003818:	d808      	bhi.n	800382c <ssd1306_WriteChar+0x58>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800381a:	9900      	ldr	r1, [sp, #0]
 800381c:	9b01      	ldr	r3, [sp, #4]
 800381e:	468c      	mov	ip, r1
 8003820:	4a13      	ldr	r2, [pc, #76]	@ (8003870 <ssd1306_WriteChar+0x9c>)
 8003822:	4463      	add	r3, ip
 8003824:	8013      	strh	r3, [r2, #0]
    
    // Return written char for validation
    return ch;
}
 8003826:	0028      	movs	r0, r5
 8003828:	b009      	add	sp, #36	@ 0x24
 800382a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        for(j = 0; j < Font.FontWidth; j++) {
 800382c:	2600      	movs	r6, #0
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800382e:	9b07      	ldr	r3, [sp, #28]
 8003830:	5b1b      	ldrh	r3, [r3, r4]
 8003832:	9305      	str	r3, [sp, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8003834:	9b01      	ldr	r3, [sp, #4]
 8003836:	42b3      	cmp	r3, r6
 8003838:	d802      	bhi.n	8003840 <ssd1306_WriteChar+0x6c>
    for(i = 0; i < Font.FontHeight; i++) {
 800383a:	3701      	adds	r7, #1
 800383c:	3402      	adds	r4, #2
 800383e:	e7e9      	b.n	8003814 <ssd1306_WriteChar+0x40>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8003840:	9b00      	ldr	r3, [sp, #0]
            if((b << j) & 0x8000)  {
 8003842:	2280      	movs	r2, #128	@ 0x80
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8003844:	1998      	adds	r0, r3, r6
 8003846:	9b03      	ldr	r3, [sp, #12]
            if((b << j) & 0x8000)  {
 8003848:	0212      	lsls	r2, r2, #8
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800384a:	18f9      	adds	r1, r7, r3
            if((b << j) & 0x8000)  {
 800384c:	9b05      	ldr	r3, [sp, #20]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800384e:	b2c0      	uxtb	r0, r0
            if((b << j) & 0x8000)  {
 8003850:	40b3      	lsls	r3, r6
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8003852:	b2c9      	uxtb	r1, r1
            if((b << j) & 0x8000)  {
 8003854:	4213      	tst	r3, r2
 8003856:	d004      	beq.n	8003862 <ssd1306_WriteChar+0x8e>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8003858:	9a04      	ldr	r2, [sp, #16]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800385a:	f7ff ffa3 	bl	80037a4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800385e:	3601      	adds	r6, #1
 8003860:	e7e8      	b.n	8003834 <ssd1306_WriteChar+0x60>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003862:	9b04      	ldr	r3, [sp, #16]
 8003864:	425a      	negs	r2, r3
 8003866:	415a      	adcs	r2, r3
 8003868:	b2d2      	uxtb	r2, r2
 800386a:	e7f6      	b.n	800385a <ssd1306_WriteChar+0x86>
        return 0;
 800386c:	2500      	movs	r5, #0
 800386e:	e7da      	b.n	8003826 <ssd1306_WriteChar+0x52>
 8003870:	20000218 	.word	0x20000218

08003874 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8003874:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003876:	0004      	movs	r4, r0
 8003878:	001d      	movs	r5, r3
 800387a:	9100      	str	r1, [sp, #0]
 800387c:	9201      	str	r2, [sp, #4]
    // Write until null-byte
    while (*str) {
 800387e:	7820      	ldrb	r0, [r4, #0]
 8003880:	2800      	cmp	r0, #0
 8003882:	d100      	bne.n	8003886 <ssd1306_WriteString+0x12>
        str++;
    }
    
    // Everything ok
    return *str;
}
 8003884:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8003886:	002b      	movs	r3, r5
 8003888:	9900      	ldr	r1, [sp, #0]
 800388a:	9a01      	ldr	r2, [sp, #4]
 800388c:	f7ff ffa2 	bl	80037d4 <ssd1306_WriteChar>
 8003890:	0003      	movs	r3, r0
 8003892:	7820      	ldrb	r0, [r4, #0]
 8003894:	4283      	cmp	r3, r0
 8003896:	d1f5      	bne.n	8003884 <ssd1306_WriteString+0x10>
        str++;
 8003898:	3401      	adds	r4, #1
 800389a:	e7f0      	b.n	800387e <ssd1306_WriteString+0xa>

0800389c <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
    SSD1306.CurrentX = x;
 800389c:	4b01      	ldr	r3, [pc, #4]	@ (80038a4 <ssd1306_SetCursor+0x8>)
 800389e:	8018      	strh	r0, [r3, #0]
    SSD1306.CurrentY = y;
 80038a0:	8059      	strh	r1, [r3, #2]
}
 80038a2:	4770      	bx	lr
 80038a4:	20000218 	.word	0x20000218

080038a8 <ssd1306_Line>:

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80038a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038aa:	b087      	sub	sp, #28
 80038ac:	9300      	str	r3, [sp, #0]
 80038ae:	ab0c      	add	r3, sp, #48	@ 0x30
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	0016      	movs	r6, r2
 80038b4:	9305      	str	r3, [sp, #20]
  int32_t deltaX = abs(x2 - x1);
 80038b6:	1a13      	subs	r3, r2, r0
 80038b8:	17da      	asrs	r2, r3, #31
 80038ba:	189b      	adds	r3, r3, r2
 80038bc:	4053      	eors	r3, r2
 80038be:	9301      	str	r3, [sp, #4]
  int32_t deltaY = abs(y2 - y1);
 80038c0:	9b00      	ldr	r3, [sp, #0]
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80038c2:	0005      	movs	r5, r0
  int32_t deltaY = abs(y2 - y1);
 80038c4:	1a5b      	subs	r3, r3, r1
 80038c6:	17da      	asrs	r2, r3, #31
 80038c8:	189b      	adds	r3, r3, r2
 80038ca:	4053      	eors	r3, r2
 80038cc:	9302      	str	r3, [sp, #8]
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80038ce:	000c      	movs	r4, r1
  int32_t signX = ((x1 < x2) ? 1 : -1);
 80038d0:	2301      	movs	r3, #1
 80038d2:	4286      	cmp	r6, r0
 80038d4:	d914      	bls.n	8003900 <ssd1306_Line+0x58>
 80038d6:	9303      	str	r3, [sp, #12]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 80038d8:	9b00      	ldr	r3, [sp, #0]
 80038da:	42a3      	cmp	r3, r4
 80038dc:	d912      	bls.n	8003904 <ssd1306_Line+0x5c>
 80038de:	2301      	movs	r3, #1
  int32_t error = deltaX - deltaY;
 80038e0:	9a02      	ldr	r2, [sp, #8]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 80038e2:	9304      	str	r3, [sp, #16]
  int32_t error = deltaX - deltaY;
 80038e4:	9b01      	ldr	r3, [sp, #4]
  int32_t error2;
    
  ssd1306_DrawPixel(x2, y2, color);
 80038e6:	0030      	movs	r0, r6
  int32_t error = deltaX - deltaY;
 80038e8:	1a9f      	subs	r7, r3, r2
  ssd1306_DrawPixel(x2, y2, color);
 80038ea:	9900      	ldr	r1, [sp, #0]
 80038ec:	9a05      	ldr	r2, [sp, #20]
 80038ee:	f7ff ff59 	bl	80037a4 <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 80038f2:	42b5      	cmp	r5, r6
 80038f4:	d109      	bne.n	800390a <ssd1306_Line+0x62>
 80038f6:	9b00      	ldr	r3, [sp, #0]
 80038f8:	429c      	cmp	r4, r3
 80038fa:	d106      	bne.n	800390a <ssd1306_Line+0x62>
    {
    /*nothing to do*/
    }
  }
  return;
}
 80038fc:	b007      	add	sp, #28
 80038fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  int32_t signX = ((x1 < x2) ? 1 : -1);
 8003900:	425b      	negs	r3, r3
 8003902:	e7e8      	b.n	80038d6 <ssd1306_Line+0x2e>
  int32_t signY = ((y1 < y2) ? 1 : -1);
 8003904:	2301      	movs	r3, #1
 8003906:	425b      	negs	r3, r3
 8003908:	e7ea      	b.n	80038e0 <ssd1306_Line+0x38>
    ssd1306_DrawPixel(x1, y1, color);
 800390a:	9a05      	ldr	r2, [sp, #20]
 800390c:	0021      	movs	r1, r4
 800390e:	0028      	movs	r0, r5
 8003910:	f7ff ff48 	bl	80037a4 <ssd1306_DrawPixel>
    if(error2 > -deltaY)
 8003914:	9a02      	ldr	r2, [sp, #8]
    error2 = error * 2;
 8003916:	007b      	lsls	r3, r7, #1
    if(error2 > -deltaY)
 8003918:	4252      	negs	r2, r2
 800391a:	429a      	cmp	r2, r3
 800391c:	da04      	bge.n	8003928 <ssd1306_Line+0x80>
      error -= deltaY;
 800391e:	9a02      	ldr	r2, [sp, #8]
 8003920:	1abf      	subs	r7, r7, r2
      x1 += signX;
 8003922:	9a03      	ldr	r2, [sp, #12]
 8003924:	18ad      	adds	r5, r5, r2
 8003926:	b2ed      	uxtb	r5, r5
    if(error2 < deltaX)
 8003928:	9a01      	ldr	r2, [sp, #4]
 800392a:	429a      	cmp	r2, r3
 800392c:	dde1      	ble.n	80038f2 <ssd1306_Line+0x4a>
      y1 += signY;
 800392e:	9b04      	ldr	r3, [sp, #16]
      error += deltaX;
 8003930:	18bf      	adds	r7, r7, r2
      y1 += signY;
 8003932:	18e4      	adds	r4, r4, r3
 8003934:	b2e4      	uxtb	r4, r4
 8003936:	e7dc      	b.n	80038f2 <ssd1306_Line+0x4a>

08003938 <ssd1306_Polyline>:
//Draw polyline
void ssd1306_Polyline(const SSD1306_VERTEX *par_vertex, uint16_t par_size, SSD1306_COLOR color) {
 8003938:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800393a:	0004      	movs	r4, r0
 800393c:	000e      	movs	r6, r1
 800393e:	0017      	movs	r7, r2
  uint16_t i;
  if(par_vertex != 0){
    for(i = 1; i < par_size; i++){
 8003940:	2501      	movs	r5, #1
  if(par_vertex != 0){
 8003942:	2800      	cmp	r0, #0
 8003944:	d10a      	bne.n	800395c <ssd1306_Polyline+0x24>
  else
  {
    /*nothing to do*/
  }
  return;
}
 8003946:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
      ssd1306_Line(par_vertex[i - 1].x, par_vertex[i - 1].y, par_vertex[i].x, par_vertex[i].y, color);
 8003948:	78e3      	ldrb	r3, [r4, #3]
 800394a:	78a2      	ldrb	r2, [r4, #2]
 800394c:	7861      	ldrb	r1, [r4, #1]
 800394e:	7820      	ldrb	r0, [r4, #0]
 8003950:	9700      	str	r7, [sp, #0]
 8003952:	f7ff ffa9 	bl	80038a8 <ssd1306_Line>
    for(i = 1; i < par_size; i++){
 8003956:	3501      	adds	r5, #1
 8003958:	b2ad      	uxth	r5, r5
 800395a:	3402      	adds	r4, #2
 800395c:	42b5      	cmp	r5, r6
 800395e:	d3f3      	bcc.n	8003948 <ssd1306_Polyline+0x10>
 8003960:	e7f1      	b.n	8003946 <ssd1306_Polyline+0xe>

08003962 <ssd1306_DrawCircle>:
    }
    
    return;
}
//Draw circle by Bresenhem's algorithm
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8003962:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003964:	b087      	sub	sp, #28
 8003966:	9300      	str	r3, [sp, #0]
  int32_t x = -par_r;
  int32_t y = 0;
  int32_t err = 2 - 2 * par_r;
  int32_t e2;

  if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 8003968:	466b      	mov	r3, sp
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 800396a:	9001      	str	r0, [sp, #4]
  if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 800396c:	791b      	ldrb	r3, [r3, #4]
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 800396e:	9102      	str	r1, [sp, #8]
  if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 8003970:	b25b      	sxtb	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	db44      	blt.n	8003a00 <ssd1306_DrawCircle+0x9e>
 8003976:	291f      	cmp	r1, #31
 8003978:	d842      	bhi.n	8003a00 <ssd1306_DrawCircle+0x9e>
  int32_t err = 2 - 2 * par_r;
 800397a:	2401      	movs	r4, #1
  int32_t y = 0;
 800397c:	2700      	movs	r7, #0
  int32_t err = 2 - 2 * par_r;
 800397e:	1aa4      	subs	r4, r4, r2
  int32_t x = -par_r;
 8003980:	4255      	negs	r5, r2
  int32_t err = 2 - 2 * par_r;
 8003982:	0064      	lsls	r4, r4, #1
    return;
  }

    do {
      ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 8003984:	9b01      	ldr	r3, [sp, #4]
 8003986:	b2ee      	uxtb	r6, r5
 8003988:	1b9b      	subs	r3, r3, r6
 800398a:	9a02      	ldr	r2, [sp, #8]
 800398c:	b2db      	uxtb	r3, r3
 800398e:	9303      	str	r3, [sp, #12]
 8003990:	b2fb      	uxtb	r3, r7
 8003992:	189b      	adds	r3, r3, r2
 8003994:	b2db      	uxtb	r3, r3
 8003996:	0019      	movs	r1, r3
 8003998:	9a00      	ldr	r2, [sp, #0]
 800399a:	9803      	ldr	r0, [sp, #12]
 800399c:	9304      	str	r3, [sp, #16]
 800399e:	f7ff ff01 	bl	80037a4 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 80039a2:	9b01      	ldr	r3, [sp, #4]
 80039a4:	9a00      	ldr	r2, [sp, #0]
 80039a6:	18f6      	adds	r6, r6, r3
 80039a8:	b2f3      	uxtb	r3, r6
 80039aa:	0018      	movs	r0, r3
 80039ac:	9904      	ldr	r1, [sp, #16]
 80039ae:	9305      	str	r3, [sp, #20]
 80039b0:	f7ff fef8 	bl	80037a4 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 80039b4:	9b02      	ldr	r3, [sp, #8]
 80039b6:	b2fa      	uxtb	r2, r7
 80039b8:	1a9e      	subs	r6, r3, r2
 80039ba:	b2f6      	uxtb	r6, r6
 80039bc:	0031      	movs	r1, r6
 80039be:	9a00      	ldr	r2, [sp, #0]
 80039c0:	9805      	ldr	r0, [sp, #20]
 80039c2:	f7ff feef 	bl	80037a4 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 80039c6:	0031      	movs	r1, r6
 80039c8:	9a00      	ldr	r2, [sp, #0]
 80039ca:	9803      	ldr	r0, [sp, #12]
 80039cc:	f7ff feea 	bl	80037a4 <ssd1306_DrawPixel>
        e2 = err;
        if (e2 <= y) {
 80039d0:	42a7      	cmp	r7, r4
 80039d2:	db13      	blt.n	80039fc <ssd1306_DrawCircle+0x9a>
            y++;
 80039d4:	3701      	adds	r7, #1
            err = err + (y * 2 + 1);
 80039d6:	007b      	lsls	r3, r7, #1
 80039d8:	3301      	adds	r3, #1
            if(-x == y && e2 <= x) {
 80039da:	426a      	negs	r2, r5
            err = err + (y * 2 + 1);
 80039dc:	191b      	adds	r3, r3, r4
            if(-x == y && e2 <= x) {
 80039de:	42ba      	cmp	r2, r7
 80039e0:	d102      	bne.n	80039e8 <ssd1306_DrawCircle+0x86>
 80039e2:	42a5      	cmp	r5, r4
 80039e4:	db02      	blt.n	80039ec <ssd1306_DrawCircle+0x8a>
              e2 = 0;
 80039e6:	2400      	movs	r4, #0
        }
        else
        {
          /*nothing to do*/
        }
        if(e2 > x) {
 80039e8:	42a5      	cmp	r5, r4
 80039ea:	da05      	bge.n	80039f8 <ssd1306_DrawCircle+0x96>
          x++;
 80039ec:	3501      	adds	r5, #1
        }
        else
        {
          /*nothing to do*/
        }
    } while(x <= 0);
 80039ee:	2d01      	cmp	r5, #1
 80039f0:	d006      	beq.n	8003a00 <ssd1306_DrawCircle+0x9e>
          err = err + (x * 2 + 1);
 80039f2:	006a      	lsls	r2, r5, #1
 80039f4:	3201      	adds	r2, #1
 80039f6:	189b      	adds	r3, r3, r2
  int32_t y = 0;
 80039f8:	001c      	movs	r4, r3
 80039fa:	e7c3      	b.n	8003984 <ssd1306_DrawCircle+0x22>
 80039fc:	0023      	movs	r3, r4
 80039fe:	e7f3      	b.n	80039e8 <ssd1306_DrawCircle+0x86>

    return;
}
 8003a00:	b007      	add	sp, #28
 8003a02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a04 <ssd1306_DrawRectangle>:

//Draw rectangle
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8003a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a06:	001c      	movs	r4, r3
 8003a08:	0016      	movs	r6, r2
 8003a0a:	000d      	movs	r5, r1
 8003a0c:	b085      	sub	sp, #20
 8003a0e:	ab0a      	add	r3, sp, #40	@ 0x28
 8003a10:	781f      	ldrb	r7, [r3, #0]
  ssd1306_Line(x1,y1,x2,y1,color);
 8003a12:	000b      	movs	r3, r1
 8003a14:	9700      	str	r7, [sp, #0]
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8003a16:	9003      	str	r0, [sp, #12]
  ssd1306_Line(x1,y1,x2,y1,color);
 8003a18:	f7ff ff46 	bl	80038a8 <ssd1306_Line>
  ssd1306_Line(x2,y1,x2,y2,color);
 8003a1c:	0023      	movs	r3, r4
 8003a1e:	0032      	movs	r2, r6
 8003a20:	0029      	movs	r1, r5
 8003a22:	0030      	movs	r0, r6
 8003a24:	9700      	str	r7, [sp, #0]
 8003a26:	f7ff ff3f 	bl	80038a8 <ssd1306_Line>
  ssd1306_Line(x2,y2,x1,y2,color);
 8003a2a:	0023      	movs	r3, r4
 8003a2c:	0021      	movs	r1, r4
 8003a2e:	0030      	movs	r0, r6
 8003a30:	9a03      	ldr	r2, [sp, #12]
 8003a32:	9700      	str	r7, [sp, #0]
 8003a34:	f7ff ff38 	bl	80038a8 <ssd1306_Line>
  ssd1306_Line(x1,y2,x1,y1,color);
 8003a38:	9a03      	ldr	r2, [sp, #12]
 8003a3a:	002b      	movs	r3, r5
 8003a3c:	0021      	movs	r1, r4
 8003a3e:	0010      	movs	r0, r2
 8003a40:	9700      	str	r7, [sp, #0]
 8003a42:	f7ff ff31 	bl	80038a8 <ssd1306_Line>

  return;
}
 8003a46:	b005      	add	sp, #20
 8003a48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a4a <ssd1306_SetContrast>:
    for(int i = 0; i<SSD1306_BUFFER_SIZE; i++){ // reverse all the bit
        SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
    }
}

void ssd1306_SetContrast(const uint8_t value) {
 8003a4a:	b510      	push	{r4, lr}
 8003a4c:	0004      	movs	r4, r0
    const uint8_t kSetContrastControlRegister = 0x81;
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8003a4e:	2081      	movs	r0, #129	@ 0x81
 8003a50:	f7ff fe5c 	bl	800370c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8003a54:	0020      	movs	r0, r4
 8003a56:	f7ff fe59 	bl	800370c <ssd1306_WriteCommand>
}
 8003a5a:	bd10      	pop	{r4, pc}

08003a5c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8003a5c:	0003      	movs	r3, r0
 8003a5e:	b510      	push	{r4, lr}
    uint8_t value;
    if (on) {
        value = 0xAF;   // Display on
        SSD1306.DisplayOn = 1;
    } else {
        value = 0xAE;   // Display off
 8003a60:	20ae      	movs	r0, #174	@ 0xae
    if (on) {
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <ssd1306_SetDisplayOn+0xe>
        SSD1306.DisplayOn = 1;
 8003a66:	2301      	movs	r3, #1
        value = 0xAF;   // Display on
 8003a68:	18c0      	adds	r0, r0, r3
 8003a6a:	4a02      	ldr	r2, [pc, #8]	@ (8003a74 <ssd1306_SetDisplayOn+0x18>)
        SSD1306.DisplayOn = 0;
    }
    ssd1306_WriteCommand(value);
}
 8003a6c:	7153      	strb	r3, [r2, #5]
    ssd1306_WriteCommand(value);
 8003a6e:	f7ff fe4d 	bl	800370c <ssd1306_WriteCommand>
}
 8003a72:	bd10      	pop	{r4, pc}
 8003a74:	20000218 	.word	0x20000218

08003a78 <ssd1306_Init>:
void ssd1306_Init(void) {
 8003a78:	b510      	push	{r4, lr}
    HAL_Delay(100);
 8003a7a:	2064      	movs	r0, #100	@ 0x64
 8003a7c:	f002 f99a 	bl	8005db4 <HAL_Delay>
    ssd1306_SetDisplayOn(0); //display off
 8003a80:	2000      	movs	r0, #0
 8003a82:	f7ff ffeb 	bl	8003a5c <ssd1306_SetDisplayOn>
    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003a86:	2020      	movs	r0, #32
 8003a88:	f7ff fe40 	bl	800370c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8003a8c:	2000      	movs	r0, #0
 8003a8e:	f7ff fe3d 	bl	800370c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003a92:	20b0      	movs	r0, #176	@ 0xb0
 8003a94:	f7ff fe3a 	bl	800370c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8003a98:	20c8      	movs	r0, #200	@ 0xc8
 8003a9a:	f7ff fe37 	bl	800370c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //---set low column address
 8003a9e:	2000      	movs	r0, #0
 8003aa0:	f7ff fe34 	bl	800370c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003aa4:	2010      	movs	r0, #16
 8003aa6:	f7ff fe31 	bl	800370c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003aaa:	2040      	movs	r0, #64	@ 0x40
 8003aac:	f7ff fe2e 	bl	800370c <ssd1306_WriteCommand>
    ssd1306_SetContrast(0xFF);
 8003ab0:	20ff      	movs	r0, #255	@ 0xff
 8003ab2:	f7ff ffca 	bl	8003a4a <ssd1306_SetContrast>
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003ab6:	20a1      	movs	r0, #161	@ 0xa1
 8003ab8:	f7ff fe28 	bl	800370c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA6); //--set normal color
 8003abc:	20a6      	movs	r0, #166	@ 0xa6
 8003abe:	f7ff fe25 	bl	800370c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003ac2:	20a8      	movs	r0, #168	@ 0xa8
 8003ac4:	f7ff fe22 	bl	800370c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x1F); //
 8003ac8:	201f      	movs	r0, #31
 8003aca:	f7ff fe1f 	bl	800370c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003ace:	20a4      	movs	r0, #164	@ 0xa4
 8003ad0:	f7ff fe1c 	bl	800370c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003ad4:	20d3      	movs	r0, #211	@ 0xd3
 8003ad6:	f7ff fe19 	bl	800370c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003ada:	2000      	movs	r0, #0
 8003adc:	f7ff fe16 	bl	800370c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8003ae0:	20d5      	movs	r0, #213	@ 0xd5
 8003ae2:	f7ff fe13 	bl	800370c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003ae6:	20f0      	movs	r0, #240	@ 0xf0
 8003ae8:	f7ff fe10 	bl	800370c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8003aec:	20d9      	movs	r0, #217	@ 0xd9
 8003aee:	f7ff fe0d 	bl	800370c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003af2:	2022      	movs	r0, #34	@ 0x22
 8003af4:	f7ff fe0a 	bl	800370c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8003af8:	20da      	movs	r0, #218	@ 0xda
 8003afa:	f7ff fe07 	bl	800370c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x02);
 8003afe:	2002      	movs	r0, #2
 8003b00:	f7ff fe04 	bl	800370c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDB); //--set vcomh
 8003b04:	20db      	movs	r0, #219	@ 0xdb
 8003b06:	f7ff fe01 	bl	800370c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003b0a:	2020      	movs	r0, #32
 8003b0c:	f7ff fdfe 	bl	800370c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003b10:	208d      	movs	r0, #141	@ 0x8d
 8003b12:	f7ff fdfb 	bl	800370c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003b16:	2014      	movs	r0, #20
 8003b18:	f7ff fdf8 	bl	800370c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8003b1c:	2001      	movs	r0, #1
 8003b1e:	f7ff ff9d 	bl	8003a5c <ssd1306_SetDisplayOn>
    ssd1306_Fill(Black);
 8003b22:	2000      	movs	r0, #0
 8003b24:	f7ff fe18 	bl	8003758 <ssd1306_Fill>
    ssd1306_UpdateScreen();
 8003b28:	f7ff fe24 	bl	8003774 <ssd1306_UpdateScreen>
    SSD1306.CurrentX = 0;
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	4b03      	ldr	r3, [pc, #12]	@ (8003b3c <ssd1306_Init+0xc4>)
 8003b30:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003b32:	805a      	strh	r2, [r3, #2]
    SSD1306.Initialized = 1;
 8003b34:	3201      	adds	r2, #1
 8003b36:	711a      	strb	r2, [r3, #4]
}
 8003b38:	bd10      	pop	{r4, pc}
 8003b3a:	46c0      	nop			@ (mov r8, r8)
 8003b3c:	20000218 	.word	0x20000218

08003b40 <getADCValue>:
	t = 1.0 / t;
	t -= 273.15;
	return t;
}

uint16_t getADCValue(void){
 8003b40:	b570      	push	{r4, r5, r6, lr}
 8003b42:	2664      	movs	r6, #100	@ 0x64
	uint32_t adc = 0;
 8003b44:	2500      	movs	r5, #0
	const uint8_t conversionNumber = 100;
	for(int i = 0; i<conversionNumber; i++){
		HAL_ADC_Start(&hadc1);
 8003b46:	4c0c      	ldr	r4, [pc, #48]	@ (8003b78 <getADCValue+0x38>)
	for(int i = 0; i<conversionNumber; i++){
 8003b48:	3e01      	subs	r6, #1
		HAL_ADC_Start(&hadc1);
 8003b4a:	0020      	movs	r0, r4
 8003b4c:	f002 fc70 	bl	8006430 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 100);
 8003b50:	2164      	movs	r1, #100	@ 0x64
 8003b52:	0020      	movs	r0, r4
 8003b54:	f002 fa54 	bl	8006000 <HAL_ADC_PollForConversion>
		HAL_ADC_Stop(&hadc1);
 8003b58:	0020      	movs	r0, r4
 8003b5a:	f002 fcd3 	bl	8006504 <HAL_ADC_Stop>
		adc += HAL_ADC_GetValue(&hadc1);
 8003b5e:	0020      	movs	r0, r4
 8003b60:	f002 fab2 	bl	80060c8 <HAL_ADC_GetValue>
 8003b64:	182d      	adds	r5, r5, r0
	for(int i = 0; i<conversionNumber; i++){
 8003b66:	2e00      	cmp	r6, #0
 8003b68:	d1ed      	bne.n	8003b46 <getADCValue+0x6>
	}

	return adc/conversionNumber;
 8003b6a:	0028      	movs	r0, r5
 8003b6c:	2164      	movs	r1, #100	@ 0x64
 8003b6e:	f7fc faed 	bl	800014c <__udivsi3>
 8003b72:	b280      	uxth	r0, r0
}
 8003b74:	bd70      	pop	{r4, r5, r6, pc}
 8003b76:	46c0      	nop			@ (mov r8, r8)
 8003b78:	200004c8 	.word	0x200004c8

08003b7c <getTemperature>:
float getTemperature() {
 8003b7c:	b510      	push	{r4, lr}
	float r = RESOLUTION / getADCValue() - 1;
 8003b7e:	f7ff ffdf 	bl	8003b40 <getADCValue>
 8003b82:	f7ff fc89 	bl	8003498 <__aeabi_i2d>
 8003b86:	0002      	movs	r2, r0
 8003b88:	000b      	movs	r3, r1
 8003b8a:	2000      	movs	r0, #0
 8003b8c:	4917      	ldr	r1, [pc, #92]	@ (8003bec <getTemperature+0x70>)
 8003b8e:	f7fe f8fb 	bl	8001d88 <__aeabi_ddiv>
 8003b92:	2200      	movs	r2, #0
 8003b94:	4b16      	ldr	r3, [pc, #88]	@ (8003bf0 <getTemperature+0x74>)
 8003b96:	f7ff f817 	bl	8002bc8 <__aeabi_dsub>
 8003b9a:	f7ff fd17 	bl	80035cc <__aeabi_d2f>
 8003b9e:	1c01      	adds	r1, r0, #0
	r = RBALANCE / r;
 8003ba0:	4814      	ldr	r0, [pc, #80]	@ (8003bf4 <getTemperature+0x78>)
 8003ba2:	f7fc fee9 	bl	8000978 <__aeabi_fdiv>
	float t = r / NTC_NOMINAL;
 8003ba6:	4913      	ldr	r1, [pc, #76]	@ (8003bf4 <getTemperature+0x78>)
 8003ba8:	f7fc fee6 	bl	8000978 <__aeabi_fdiv>
	t = log(t);
 8003bac:	f7ff fcc6 	bl	800353c <__aeabi_f2d>
 8003bb0:	f007 fd54 	bl	800b65c <log>
 8003bb4:	f7ff fd0a 	bl	80035cc <__aeabi_d2f>
	t /= BETA;
 8003bb8:	490f      	ldr	r1, [pc, #60]	@ (8003bf8 <getTemperature+0x7c>)
 8003bba:	f7fc fedd 	bl	8000978 <__aeabi_fdiv>
	t += 1.0 / (25 + 273.15);
 8003bbe:	f7ff fcbd 	bl	800353c <__aeabi_f2d>
 8003bc2:	4a0e      	ldr	r2, [pc, #56]	@ (8003bfc <getTemperature+0x80>)
 8003bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8003c00 <getTemperature+0x84>)
 8003bc6:	f7fd fd19 	bl	80015fc <__aeabi_dadd>
 8003bca:	f7ff fcff 	bl	80035cc <__aeabi_d2f>
 8003bce:	1c01      	adds	r1, r0, #0
	t = 1.0 / t;
 8003bd0:	20fe      	movs	r0, #254	@ 0xfe
 8003bd2:	0580      	lsls	r0, r0, #22
 8003bd4:	f7fc fed0 	bl	8000978 <__aeabi_fdiv>
	t -= 273.15;
 8003bd8:	f7ff fcb0 	bl	800353c <__aeabi_f2d>
 8003bdc:	4a09      	ldr	r2, [pc, #36]	@ (8003c04 <getTemperature+0x88>)
 8003bde:	4b0a      	ldr	r3, [pc, #40]	@ (8003c08 <getTemperature+0x8c>)
 8003be0:	f7fe fff2 	bl	8002bc8 <__aeabi_dsub>
 8003be4:	f7ff fcf2 	bl	80035cc <__aeabi_d2f>
}
 8003be8:	bd10      	pop	{r4, pc}
 8003bea:	46c0      	nop			@ (mov r8, r8)
 8003bec:	40b00000 	.word	0x40b00000
 8003bf0:	3ff00000 	.word	0x3ff00000
 8003bf4:	47c35000 	.word	0x47c35000
 8003bf8:	4576e000 	.word	0x4576e000
 8003bfc:	dcb5db83 	.word	0xdcb5db83
 8003c00:	3f6b79e1 	.word	0x3f6b79e1
 8003c04:	66666666 	.word	0x66666666
 8003c08:	40711266 	.word	0x40711266

08003c0c <initButtons>:
extern volatile float kp;
extern volatile float ki;
extern volatile float kd;

void initButtons() {
	btn[0].id = BUTTON1_Pin;
 8003c0c:	4b08      	ldr	r3, [pc, #32]	@ (8003c30 <initButtons+0x24>)
 8003c0e:	4a09      	ldr	r2, [pc, #36]	@ (8003c34 <initButtons+0x28>)
 8003c10:	801a      	strh	r2, [r3, #0]
	btn[1].id = BUTTON2_Pin;
 8003c12:	2280      	movs	r2, #128	@ 0x80
 8003c14:	01d2      	lsls	r2, r2, #7
 8003c16:	819a      	strh	r2, [r3, #12]
	btn[2].id = BUTTON3_Pin;
 8003c18:	2280      	movs	r2, #128	@ 0x80
 8003c1a:	0192      	lsls	r2, r2, #6
 8003c1c:	831a      	strh	r2, [r3, #24]

	for (int i = 0; i < 3; i++) {
		btn[i].t1 = 0;
 8003c1e:	2200      	movs	r2, #0
 8003c20:	605a      	str	r2, [r3, #4]
		btn[i].pressType = NONE;
 8003c22:	725a      	strb	r2, [r3, #9]
		btn[i].t1 = 0;
 8003c24:	611a      	str	r2, [r3, #16]
		btn[i].pressType = NONE;
 8003c26:	755a      	strb	r2, [r3, #21]
		btn[i].t1 = 0;
 8003c28:	61da      	str	r2, [r3, #28]
		btn[i].pressType = NONE;
 8003c2a:	3302      	adds	r3, #2
 8003c2c:	77da      	strb	r2, [r3, #31]
	}
}
 8003c2e:	4770      	bx	lr
 8003c30:	20000424 	.word	0x20000424
 8003c34:	ffff8000 	.word	0xffff8000

08003c38 <getButtonState>:

uint8_t getButtonState(uint16_t id) {
	uint8_t state = NONE;
	for (int i = 0; i < 3; i++) {
		if (btn[i].id == id) { // check if is the button we want to read the state
 8003c38:	4b0b      	ldr	r3, [pc, #44]	@ (8003c68 <getButtonState+0x30>)
uint8_t getButtonState(uint16_t id) {
 8003c3a:	0002      	movs	r2, r0
		if (btn[i].id == id) { // check if is the button we want to read the state
 8003c3c:	8819      	ldrh	r1, [r3, #0]
 8003c3e:	4288      	cmp	r0, r1
 8003c40:	d00d      	beq.n	8003c5e <getButtonState+0x26>
 8003c42:	8999      	ldrh	r1, [r3, #12]
 8003c44:	4288      	cmp	r0, r1
 8003c46:	d00c      	beq.n	8003c62 <getButtonState+0x2a>
 8003c48:	8b19      	ldrh	r1, [r3, #24]
	uint8_t state = NONE;
 8003c4a:	2000      	movs	r0, #0
		if (btn[i].id == id) { // check if is the button we want to read the state
 8003c4c:	428a      	cmp	r2, r1
 8003c4e:	d105      	bne.n	8003c5c <getButtonState+0x24>
	for (int i = 0; i < 3; i++) {
 8003c50:	2102      	movs	r1, #2
			state = btn[i].pressType;
 8003c52:	220c      	movs	r2, #12
 8003c54:	434a      	muls	r2, r1
 8003c56:	189b      	adds	r3, r3, r2
 8003c58:	7a58      	ldrb	r0, [r3, #9]
 8003c5a:	b2c0      	uxtb	r0, r0
			break;
		}
	}
	return state;
}
 8003c5c:	4770      	bx	lr
	for (int i = 0; i < 3; i++) {
 8003c5e:	2100      	movs	r1, #0
 8003c60:	e7f7      	b.n	8003c52 <getButtonState+0x1a>
 8003c62:	2101      	movs	r1, #1
 8003c64:	e7f5      	b.n	8003c52 <getButtonState+0x1a>
 8003c66:	46c0      	nop			@ (mov r8, r8)
 8003c68:	20000424 	.word	0x20000424

08003c6c <BUTTONS_resetButtonState>:
	return longPresRelase;
}

void BUTTONS_resetButtonState(uint16_t id) {
	for (int i = 0; i < 3; i++) {
		if (btn[i].id == id) {
 8003c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8003c98 <BUTTONS_resetButtonState+0x2c>)
 8003c6e:	881a      	ldrh	r2, [r3, #0]
 8003c70:	4290      	cmp	r0, r2
 8003c72:	d007      	beq.n	8003c84 <BUTTONS_resetButtonState+0x18>
 8003c74:	899a      	ldrh	r2, [r3, #12]
 8003c76:	4290      	cmp	r0, r2
 8003c78:	d00b      	beq.n	8003c92 <BUTTONS_resetButtonState+0x26>
 8003c7a:	8b1a      	ldrh	r2, [r3, #24]
	for (int i = 0; i < 3; i++) {
 8003c7c:	2102      	movs	r1, #2
		if (btn[i].id == id) {
 8003c7e:	4290      	cmp	r0, r2
 8003c80:	d001      	beq.n	8003c86 <BUTTONS_resetButtonState+0x1a>
			btn[i].pressType = NONE;
			break;
		}
	}
}
 8003c82:	4770      	bx	lr
	for (int i = 0; i < 3; i++) {
 8003c84:	2100      	movs	r1, #0
			btn[i].pressType = NONE;
 8003c86:	220c      	movs	r2, #12
 8003c88:	434a      	muls	r2, r1
 8003c8a:	189b      	adds	r3, r3, r2
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	725a      	strb	r2, [r3, #9]
}
 8003c90:	e7f7      	b.n	8003c82 <BUTTONS_resetButtonState+0x16>
	for (int i = 0; i < 3; i++) {
 8003c92:	2101      	movs	r1, #1
 8003c94:	e7f7      	b.n	8003c86 <BUTTONS_resetButtonState+0x1a>
 8003c96:	46c0      	nop			@ (mov r8, r8)
 8003c98:	20000424 	.word	0x20000424

08003c9c <BUTTONS_shortPressAction>:

/* BUTTONS ACTION */
void BUTTONS_shortPressAction(uint16_t id) {
 8003c9c:	b570      	push	{r4, r5, r6, lr}
 8003c9e:	0004      	movs	r4, r0
	/* RESET BUTTON STATE (because event served)*/
	BUTTONS_resetButtonState(id);
 8003ca0:	f7ff ffe4 	bl	8003c6c <BUTTONS_resetButtonState>

	switch (currentMenu) {
 8003ca4:	4b88      	ldr	r3, [pc, #544]	@ (8003ec8 <BUTTONS_shortPressAction+0x22c>)
 8003ca6:	781a      	ldrb	r2, [r3, #0]
 8003ca8:	b2d0      	uxtb	r0, r2
 8003caa:	2a0b      	cmp	r2, #11
 8003cac:	d840      	bhi.n	8003d30 <BUTTONS_shortPressAction+0x94>
 8003cae:	f7fc fa43 	bl	8000138 <__gnu_thumb1_case_uhi>
 8003cb2:	000c      	.short	0x000c
 8003cb4:	00330013 	.word	0x00330013
 8003cb8:	0073004f 	.word	0x0073004f
 8003cbc:	009b0095 	.word	0x009b0095
 8003cc0:	009b003f 	.word	0x009b003f
 8003cc4:	00c500a1 	.word	0x00c500a1
 8003cc8:	00ed      	.short	0x00ed
	case MENU_HOME:
		switch (id) {
 8003cca:	2280      	movs	r2, #128	@ 0x80
 8003ccc:	01d2      	lsls	r2, r2, #7
 8003cce:	4294      	cmp	r4, r2
 8003cd0:	d12e      	bne.n	8003d30 <BUTTONS_shortPressAction+0x94>
		case BUTTON1_Pin:

			break;
		case BUTTON2_Pin:
			currentMenu = MENU_PRESETS;
 8003cd2:	2202      	movs	r2, #2
			else
				ki -= 0.05f;
			BUZZER_shortPressBeep();
			break;
		case BUTTON2_Pin:
			currentMenu = MENU_SET_KD;
 8003cd4:	701a      	strb	r2, [r3, #0]
			BUZZER_shortPressBeep();
 8003cd6:	e011      	b.n	8003cfc <BUTTONS_shortPressAction+0x60>
		switch (id) {
 8003cd8:	2380      	movs	r3, #128	@ 0x80
 8003cda:	019b      	lsls	r3, r3, #6
 8003cdc:	429c      	cmp	r4, r3
 8003cde:	d010      	beq.n	8003d02 <BUTTONS_shortPressAction+0x66>
 8003ce0:	2380      	movs	r3, #128	@ 0x80
 8003ce2:	021b      	lsls	r3, r3, #8
 8003ce4:	429c      	cmp	r4, r3
 8003ce6:	d123      	bne.n	8003d30 <BUTTONS_shortPressAction+0x94>
			if (minutesLeft - MINUTES_STEP >= MINUTES_STEP)
 8003ce8:	4a78      	ldr	r2, [pc, #480]	@ (8003ecc <BUTTONS_shortPressAction+0x230>)
 8003cea:	8813      	ldrh	r3, [r2, #0]
 8003cec:	2b13      	cmp	r3, #19
 8003cee:	d903      	bls.n	8003cf8 <BUTTONS_shortPressAction+0x5c>
				minutesLeft -= MINUTES_STEP;
 8003cf0:	8813      	ldrh	r3, [r2, #0]
 8003cf2:	3b0a      	subs	r3, #10
				minutesLeft += MINUTES_STEP;
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	e000      	b.n	8003cfa <BUTTONS_shortPressAction+0x5e>
				minutesLeft = MINUTES_STEP;
 8003cf8:	230a      	movs	r3, #10
 8003cfa:	8013      	strh	r3, [r2, #0]
			storeSettingsToEeprom(kp, ki, kd);
			BUZZER_longPressBeep();
			break;
		case BUTTON3_Pin:
			kd += 0.5f;
			BUZZER_shortPressBeep();
 8003cfc:	f000 fa22 	bl	8004144 <BUZZER_shortPressBeep>
	}

//	char str[50];
//	sprintf(str, "short press detected\n");
//	printString(str);
}
 8003d00:	e016      	b.n	8003d30 <BUTTONS_shortPressAction+0x94>
			if (minutesLeft + MINUTES_STEP <= MAXIMUM_HOURS * 60)
 8003d02:	4a72      	ldr	r2, [pc, #456]	@ (8003ecc <BUTTONS_shortPressAction+0x230>)
 8003d04:	4b72      	ldr	r3, [pc, #456]	@ (8003ed0 <BUTTONS_shortPressAction+0x234>)
 8003d06:	8811      	ldrh	r1, [r2, #0]
 8003d08:	4299      	cmp	r1, r3
 8003d0a:	d802      	bhi.n	8003d12 <BUTTONS_shortPressAction+0x76>
				minutesLeft += MINUTES_STEP;
 8003d0c:	8813      	ldrh	r3, [r2, #0]
 8003d0e:	330a      	adds	r3, #10
 8003d10:	e7f0      	b.n	8003cf4 <BUTTONS_shortPressAction+0x58>
				minutesLeft = MAXIMUM_HOURS * 60;
 8003d12:	23e1      	movs	r3, #225	@ 0xe1
 8003d14:	015b      	lsls	r3, r3, #5
 8003d16:	e7f0      	b.n	8003cfa <BUTTONS_shortPressAction+0x5e>
		switch (id) {
 8003d18:	2280      	movs	r2, #128	@ 0x80
 8003d1a:	01d2      	lsls	r2, r2, #7
 8003d1c:	4294      	cmp	r4, r2
 8003d1e:	d00f      	beq.n	8003d40 <BUTTONS_shortPressAction+0xa4>
 8003d20:	2380      	movs	r3, #128	@ 0x80
 8003d22:	021b      	lsls	r3, r3, #8
 8003d24:	429c      	cmp	r4, r3
 8003d26:	d004      	beq.n	8003d32 <BUTTONS_shortPressAction+0x96>
 8003d28:	2380      	movs	r3, #128	@ 0x80
 8003d2a:	019b      	lsls	r3, r3, #6
 8003d2c:	429c      	cmp	r4, r3
 8003d2e:	d009      	beq.n	8003d44 <BUTTONS_shortPressAction+0xa8>
}
 8003d30:	bd70      	pop	{r4, r5, r6, pc}
			currentMaterialID = MATERIAL_getPrevMaterial(currentMaterialID);
 8003d32:	4c68      	ldr	r4, [pc, #416]	@ (8003ed4 <BUTTONS_shortPressAction+0x238>)
 8003d34:	7820      	ldrb	r0, [r4, #0]
 8003d36:	b2c0      	uxtb	r0, r0
 8003d38:	f000 fd42 	bl	80047c0 <MATERIAL_getPrevMaterial>
			currentMaterialID = MATERIAL_getNextMaterial(currentMaterialID);
 8003d3c:	7020      	strb	r0, [r4, #0]
			BUZZER_shortPressBeep();
 8003d3e:	e7dd      	b.n	8003cfc <BUTTONS_shortPressAction+0x60>
			currentMenu = MENU_EDIT_PRESET1;
 8003d40:	2203      	movs	r2, #3
 8003d42:	e7c7      	b.n	8003cd4 <BUTTONS_shortPressAction+0x38>
			currentMaterialID = MATERIAL_getNextMaterial(currentMaterialID);
 8003d44:	4c63      	ldr	r4, [pc, #396]	@ (8003ed4 <BUTTONS_shortPressAction+0x238>)
 8003d46:	7820      	ldrb	r0, [r4, #0]
 8003d48:	b2c0      	uxtb	r0, r0
 8003d4a:	f000 fd29 	bl	80047a0 <MATERIAL_getNextMaterial>
 8003d4e:	e7f5      	b.n	8003d3c <BUTTONS_shortPressAction+0xa0>
		switch (id) {
 8003d50:	2280      	movs	r2, #128	@ 0x80
 8003d52:	01d2      	lsls	r2, r2, #7
 8003d54:	4294      	cmp	r4, r2
 8003d56:	d01d      	beq.n	8003d94 <BUTTONS_shortPressAction+0xf8>
 8003d58:	2380      	movs	r3, #128	@ 0x80
 8003d5a:	021b      	lsls	r3, r3, #8
 8003d5c:	429c      	cmp	r4, r3
 8003d5e:	d00c      	beq.n	8003d7a <BUTTONS_shortPressAction+0xde>
 8003d60:	2380      	movs	r3, #128	@ 0x80
 8003d62:	019b      	lsls	r3, r3, #6
 8003d64:	429c      	cmp	r4, r3
 8003d66:	d1e3      	bne.n	8003d30 <BUTTONS_shortPressAction+0x94>
			temp = MATERIAL_getMaterialTargetTemp(MATERIAL_ID_CUS_1);
 8003d68:	2008      	movs	r0, #8
 8003d6a:	f000 fd3b 	bl	80047e4 <MATERIAL_getMaterialTargetTemp>
			if (temp + TEMPERATURE_STEP <= MAXIMUM_TEMPERATURE)
 8003d6e:	1c01      	adds	r1, r0, #0
 8003d70:	285a      	cmp	r0, #90	@ 0x5a
 8003d72:	d900      	bls.n	8003d76 <BUTTONS_shortPressAction+0xda>
 8003d74:	215a      	movs	r1, #90	@ 0x5a
 8003d76:	3105      	adds	r1, #5
 8003d78:	e007      	b.n	8003d8a <BUTTONS_shortPressAction+0xee>
			uint8_t temp = MATERIAL_getMaterialTargetTemp(MATERIAL_ID_CUS_1);
 8003d7a:	2008      	movs	r0, #8
 8003d7c:	f000 fd32 	bl	80047e4 <MATERIAL_getMaterialTargetTemp>
			if (temp - TEMPERATURE_STEP >= MINIMUM_TEMPERATURE)
 8003d80:	1c01      	adds	r1, r0, #0
 8003d82:	2819      	cmp	r0, #25
 8003d84:	d200      	bcs.n	8003d88 <BUTTONS_shortPressAction+0xec>
 8003d86:	2119      	movs	r1, #25
 8003d88:	3905      	subs	r1, #5
			MATERIAL_setTargetTemp(MATERIAL_ID_CUS_1, temp);
 8003d8a:	2008      	movs	r0, #8
 8003d8c:	b2c9      	uxtb	r1, r1
			MATERIAL_setTargetTemp(MATERIAL_ID_CUS_2, temp);
 8003d8e:	f000 fd0f 	bl	80047b0 <MATERIAL_setTargetTemp>
			BUZZER_shortPressBeep();
 8003d92:	e7b3      	b.n	8003cfc <BUTTONS_shortPressAction+0x60>
			currentMenu = MENU_EDIT_PRESET2;
 8003d94:	2204      	movs	r2, #4
 8003d96:	e79d      	b.n	8003cd4 <BUTTONS_shortPressAction+0x38>
		switch (id) {
 8003d98:	2280      	movs	r2, #128	@ 0x80
 8003d9a:	01d2      	lsls	r2, r2, #7
 8003d9c:	4294      	cmp	r4, r2
 8003d9e:	d01b      	beq.n	8003dd8 <BUTTONS_shortPressAction+0x13c>
 8003da0:	2380      	movs	r3, #128	@ 0x80
 8003da2:	021b      	lsls	r3, r3, #8
 8003da4:	429c      	cmp	r4, r3
 8003da6:	d00c      	beq.n	8003dc2 <BUTTONS_shortPressAction+0x126>
 8003da8:	2380      	movs	r3, #128	@ 0x80
 8003daa:	019b      	lsls	r3, r3, #6
 8003dac:	429c      	cmp	r4, r3
 8003dae:	d1bf      	bne.n	8003d30 <BUTTONS_shortPressAction+0x94>
			temp = MATERIAL_getMaterialTargetTemp(MATERIAL_ID_CUS_2);
 8003db0:	2009      	movs	r0, #9
 8003db2:	f000 fd17 	bl	80047e4 <MATERIAL_getMaterialTargetTemp>
			if (temp + TEMPERATURE_STEP <= MAXIMUM_TEMPERATURE)
 8003db6:	1c01      	adds	r1, r0, #0
 8003db8:	285a      	cmp	r0, #90	@ 0x5a
 8003dba:	d900      	bls.n	8003dbe <BUTTONS_shortPressAction+0x122>
 8003dbc:	215a      	movs	r1, #90	@ 0x5a
 8003dbe:	3105      	adds	r1, #5
 8003dc0:	e007      	b.n	8003dd2 <BUTTONS_shortPressAction+0x136>
			uint8_t temp = MATERIAL_getMaterialTargetTemp(MATERIAL_ID_CUS_2);
 8003dc2:	2009      	movs	r0, #9
 8003dc4:	f000 fd0e 	bl	80047e4 <MATERIAL_getMaterialTargetTemp>
			if (temp - TEMPERATURE_STEP >= MINIMUM_TEMPERATURE)
 8003dc8:	1c01      	adds	r1, r0, #0
 8003dca:	2819      	cmp	r0, #25
 8003dcc:	d200      	bcs.n	8003dd0 <BUTTONS_shortPressAction+0x134>
 8003dce:	2119      	movs	r1, #25
 8003dd0:	3905      	subs	r1, #5
			MATERIAL_setTargetTemp(MATERIAL_ID_CUS_2, temp);
 8003dd2:	2009      	movs	r0, #9
 8003dd4:	b2c9      	uxtb	r1, r1
 8003dd6:	e7da      	b.n	8003d8e <BUTTONS_shortPressAction+0xf2>
			currentMenu = MENU_AUTOCAL_0;
 8003dd8:	2205      	movs	r2, #5
 8003dda:	e77b      	b.n	8003cd4 <BUTTONS_shortPressAction+0x38>
		switch (id) {
 8003ddc:	2280      	movs	r2, #128	@ 0x80
 8003dde:	01d2      	lsls	r2, r2, #7
 8003de0:	4294      	cmp	r4, r2
 8003de2:	d1a5      	bne.n	8003d30 <BUTTONS_shortPressAction+0x94>
			currentMenu = MENU_PIDS;
 8003de4:	2208      	movs	r2, #8
 8003de6:	e775      	b.n	8003cd4 <BUTTONS_shortPressAction+0x38>
		switch (id) {
 8003de8:	2280      	movs	r2, #128	@ 0x80
 8003dea:	01d2      	lsls	r2, r2, #7
 8003dec:	4294      	cmp	r4, r2
 8003dee:	d19f      	bne.n	8003d30 <BUTTONS_shortPressAction+0x94>
			currentMenu = MENU_HOME;
 8003df0:	2200      	movs	r2, #0
 8003df2:	e76f      	b.n	8003cd4 <BUTTONS_shortPressAction+0x38>
		switch (id) {
 8003df4:	2280      	movs	r2, #128	@ 0x80
 8003df6:	01d2      	lsls	r2, r2, #7
 8003df8:	4294      	cmp	r4, r2
 8003dfa:	d01d      	beq.n	8003e38 <BUTTONS_shortPressAction+0x19c>
 8003dfc:	2380      	movs	r3, #128	@ 0x80
 8003dfe:	021b      	lsls	r3, r3, #8
 8003e00:	429c      	cmp	r4, r3
 8003e02:	d009      	beq.n	8003e18 <BUTTONS_shortPressAction+0x17c>
 8003e04:	2380      	movs	r3, #128	@ 0x80
 8003e06:	019b      	lsls	r3, r3, #6
 8003e08:	429c      	cmp	r4, r3
 8003e0a:	d000      	beq.n	8003e0e <BUTTONS_shortPressAction+0x172>
 8003e0c:	e790      	b.n	8003d30 <BUTTONS_shortPressAction+0x94>
			kp += 0.5f;
 8003e0e:	4c32      	ldr	r4, [pc, #200]	@ (8003ed8 <BUTTONS_shortPressAction+0x23c>)
			kd += 0.5f;
 8003e10:	21fc      	movs	r1, #252	@ 0xfc
 8003e12:	6820      	ldr	r0, [r4, #0]
 8003e14:	0589      	lsls	r1, r1, #22
 8003e16:	e021      	b.n	8003e5c <BUTTONS_shortPressAction+0x1c0>
			if (kp - 0.5f <= 0)
 8003e18:	4c2f      	ldr	r4, [pc, #188]	@ (8003ed8 <BUTTONS_shortPressAction+0x23c>)
			if (kd - 0.5f <= 0)
 8003e1a:	21fc      	movs	r1, #252	@ 0xfc
 8003e1c:	2500      	movs	r5, #0
 8003e1e:	6820      	ldr	r0, [r4, #0]
 8003e20:	0589      	lsls	r1, r1, #22
 8003e22:	f7fd f8d1 	bl	8000fc8 <__aeabi_fsub>
 8003e26:	1c29      	adds	r1, r5, #0
 8003e28:	f7fc fb60 	bl	80004ec <__aeabi_fcmple>
 8003e2c:	2800      	cmp	r0, #0
 8003e2e:	d123      	bne.n	8003e78 <BUTTONS_shortPressAction+0x1dc>
				kd -= 0.5f;
 8003e30:	21fc      	movs	r1, #252	@ 0xfc
 8003e32:	6820      	ldr	r0, [r4, #0]
 8003e34:	0589      	lsls	r1, r1, #22
 8003e36:	e023      	b.n	8003e80 <BUTTONS_shortPressAction+0x1e4>
			currentMenu = MENU_SET_KI;
 8003e38:	220a      	movs	r2, #10
 8003e3a:	e74b      	b.n	8003cd4 <BUTTONS_shortPressAction+0x38>
		switch (id) {
 8003e3c:	2280      	movs	r2, #128	@ 0x80
 8003e3e:	01d2      	lsls	r2, r2, #7
 8003e40:	4294      	cmp	r4, r2
 8003e42:	d021      	beq.n	8003e88 <BUTTONS_shortPressAction+0x1ec>
 8003e44:	2380      	movs	r3, #128	@ 0x80
 8003e46:	021b      	lsls	r3, r3, #8
 8003e48:	429c      	cmp	r4, r3
 8003e4a:	d00a      	beq.n	8003e62 <BUTTONS_shortPressAction+0x1c6>
 8003e4c:	2380      	movs	r3, #128	@ 0x80
 8003e4e:	019b      	lsls	r3, r3, #6
 8003e50:	429c      	cmp	r4, r3
 8003e52:	d000      	beq.n	8003e56 <BUTTONS_shortPressAction+0x1ba>
 8003e54:	e76c      	b.n	8003d30 <BUTTONS_shortPressAction+0x94>
			ki += 0.05f;
 8003e56:	4c21      	ldr	r4, [pc, #132]	@ (8003edc <BUTTONS_shortPressAction+0x240>)
 8003e58:	4921      	ldr	r1, [pc, #132]	@ (8003ee0 <BUTTONS_shortPressAction+0x244>)
 8003e5a:	6820      	ldr	r0, [r4, #0]
			kd += 0.5f;
 8003e5c:	f7fc fb9a 	bl	8000594 <__aeabi_fadd>
 8003e60:	e010      	b.n	8003e84 <BUTTONS_shortPressAction+0x1e8>
			if (ki - 0.05f <= 0)
 8003e62:	2500      	movs	r5, #0
 8003e64:	4c1d      	ldr	r4, [pc, #116]	@ (8003edc <BUTTONS_shortPressAction+0x240>)
 8003e66:	491e      	ldr	r1, [pc, #120]	@ (8003ee0 <BUTTONS_shortPressAction+0x244>)
 8003e68:	6820      	ldr	r0, [r4, #0]
 8003e6a:	f7fd f8ad 	bl	8000fc8 <__aeabi_fsub>
 8003e6e:	1c29      	adds	r1, r5, #0
 8003e70:	f7fc fb3c 	bl	80004ec <__aeabi_fcmple>
 8003e74:	2800      	cmp	r0, #0
 8003e76:	d001      	beq.n	8003e7c <BUTTONS_shortPressAction+0x1e0>
				kd = 0;
 8003e78:	6025      	str	r5, [r4, #0]
 8003e7a:	e73f      	b.n	8003cfc <BUTTONS_shortPressAction+0x60>
				ki -= 0.05f;
 8003e7c:	6820      	ldr	r0, [r4, #0]
 8003e7e:	4918      	ldr	r1, [pc, #96]	@ (8003ee0 <BUTTONS_shortPressAction+0x244>)
				kd -= 0.5f;
 8003e80:	f7fd f8a2 	bl	8000fc8 <__aeabi_fsub>
			kd += 0.5f;
 8003e84:	6020      	str	r0, [r4, #0]
 8003e86:	e739      	b.n	8003cfc <BUTTONS_shortPressAction+0x60>
			currentMenu = MENU_SET_KD;
 8003e88:	220b      	movs	r2, #11
 8003e8a:	e723      	b.n	8003cd4 <BUTTONS_shortPressAction+0x38>
		switch (id) {
 8003e8c:	2280      	movs	r2, #128	@ 0x80
 8003e8e:	01d2      	lsls	r2, r2, #7
 8003e90:	4294      	cmp	r4, r2
 8003e92:	d00c      	beq.n	8003eae <BUTTONS_shortPressAction+0x212>
 8003e94:	2380      	movs	r3, #128	@ 0x80
 8003e96:	021b      	lsls	r3, r3, #8
 8003e98:	429c      	cmp	r4, r3
 8003e9a:	d006      	beq.n	8003eaa <BUTTONS_shortPressAction+0x20e>
 8003e9c:	2380      	movs	r3, #128	@ 0x80
 8003e9e:	019b      	lsls	r3, r3, #6
 8003ea0:	429c      	cmp	r4, r3
 8003ea2:	d000      	beq.n	8003ea6 <BUTTONS_shortPressAction+0x20a>
 8003ea4:	e744      	b.n	8003d30 <BUTTONS_shortPressAction+0x94>
			kd += 0.5f;
 8003ea6:	4c0f      	ldr	r4, [pc, #60]	@ (8003ee4 <BUTTONS_shortPressAction+0x248>)
 8003ea8:	e7b2      	b.n	8003e10 <BUTTONS_shortPressAction+0x174>
			if (kd - 0.5f <= 0)
 8003eaa:	4c0e      	ldr	r4, [pc, #56]	@ (8003ee4 <BUTTONS_shortPressAction+0x248>)
 8003eac:	e7b5      	b.n	8003e1a <BUTTONS_shortPressAction+0x17e>
			currentMenu = MENU_PIDS;
 8003eae:	2208      	movs	r2, #8
 8003eb0:	701a      	strb	r2, [r3, #0]
			storeSettingsToEeprom(kp, ki, kd);
 8003eb2:	4b09      	ldr	r3, [pc, #36]	@ (8003ed8 <BUTTONS_shortPressAction+0x23c>)
 8003eb4:	6818      	ldr	r0, [r3, #0]
 8003eb6:	4b09      	ldr	r3, [pc, #36]	@ (8003edc <BUTTONS_shortPressAction+0x240>)
 8003eb8:	6819      	ldr	r1, [r3, #0]
 8003eba:	4b0a      	ldr	r3, [pc, #40]	@ (8003ee4 <BUTTONS_shortPressAction+0x248>)
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	f001 f8f3 	bl	80050a8 <storeSettingsToEeprom>
			BUZZER_longPressBeep();
 8003ec2:	f000 f953 	bl	800416c <BUZZER_longPressBeep>
			break;
 8003ec6:	e733      	b.n	8003d30 <BUTTONS_shortPressAction+0x94>
 8003ec8:	20000587 	.word	0x20000587
 8003ecc:	20000584 	.word	0x20000584
 8003ed0:	00001c16 	.word	0x00001c16
 8003ed4:	20000586 	.word	0x20000586
 8003ed8:	20000020 	.word	0x20000020
 8003edc:	2000001c 	.word	0x2000001c
 8003ee0:	3d4ccccd 	.word	0x3d4ccccd
 8003ee4:	20000018 	.word	0x20000018

08003ee8 <BUTTONS_longPressAction>:

void BUTTONS_longPressAction(uint16_t id) {
 8003ee8:	b510      	push	{r4, lr}
 8003eea:	0004      	movs	r4, r0
	/* RESET BUTTON STATE (because event served)*/
	BUTTONS_resetButtonState(id);
 8003eec:	f7ff febe 	bl	8003c6c <BUTTONS_resetButtonState>

	switch (currentMenu) {
 8003ef0:	4b2d      	ldr	r3, [pc, #180]	@ (8003fa8 <BUTTONS_longPressAction+0xc0>)
 8003ef2:	781a      	ldrb	r2, [r3, #0]
 8003ef4:	b2d0      	uxtb	r0, r2
 8003ef6:	2a0b      	cmp	r2, #11
 8003ef8:	d81e      	bhi.n	8003f38 <BUTTONS_longPressAction+0x50>
 8003efa:	f7fc f909 	bl	8000110 <__gnu_thumb1_case_uqi>
 8003efe:	0d06      	.short	0x0d06
 8003f00:	201d1d1d 	.word	0x201d1d1d
 8003f04:	4640261d 	.word	0x4640261d
 8003f08:	4646      	.short	0x4646
	case MENU_HOME:
		switch (id) {
 8003f0a:	2280      	movs	r2, #128	@ 0x80
 8003f0c:	01d2      	lsls	r2, r2, #7
 8003f0e:	4294      	cmp	r4, r2
 8003f10:	d112      	bne.n	8003f38 <BUTTONS_longPressAction+0x50>
		case BUTTON1_Pin:

			break;
		case BUTTON2_Pin:
			currentMenu = MENU_TIMER;
 8003f12:	2201      	movs	r2, #1
		switch (id) {
		case BUTTON1_Pin:

			break;
		case BUTTON2_Pin:
			currentMenu = MENU_SET_KP;
 8003f14:	701a      	strb	r2, [r3, #0]
			BUZZER_longPressBeep();
 8003f16:	e00d      	b.n	8003f34 <BUTTONS_longPressAction+0x4c>
		switch (id) {
 8003f18:	2280      	movs	r2, #128	@ 0x80
 8003f1a:	01d2      	lsls	r2, r2, #7
 8003f1c:	4294      	cmp	r4, r2
 8003f1e:	d00c      	beq.n	8003f3a <BUTTONS_longPressAction+0x52>
 8003f20:	2380      	movs	r3, #128	@ 0x80
 8003f22:	021b      	lsls	r3, r3, #8
 8003f24:	429c      	cmp	r4, r3
 8003f26:	d107      	bne.n	8003f38 <BUTTONS_longPressAction+0x50>
			if (minutesLeft > 0) {
 8003f28:	4b20      	ldr	r3, [pc, #128]	@ (8003fac <BUTTONS_longPressAction+0xc4>)
 8003f2a:	881a      	ldrh	r2, [r3, #0]
 8003f2c:	2a00      	cmp	r2, #0
 8003f2e:	d003      	beq.n	8003f38 <BUTTONS_longPressAction+0x50>
				minutesLeft = 0;
 8003f30:	2200      	movs	r2, #0
 8003f32:	801a      	strh	r2, [r3, #0]

			break;
		case BUTTON2_Pin:
			currentMenu = MENU_PIDS;
			storeSettingsToEeprom(kp, ki, kd);
			BUZZER_longPressBeep();
 8003f34:	f000 f91a 	bl	800416c <BUZZER_longPressBeep>
	}

//	char str[50];
//	sprintf(str, "long press detected\n");
//	printString(str);
}
 8003f38:	bd10      	pop	{r4, pc}
			currentMenu = MENU_HOME;
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	e7ea      	b.n	8003f14 <BUTTONS_longPressAction+0x2c>
		switch (id) {
 8003f3e:	2280      	movs	r2, #128	@ 0x80
 8003f40:	01d2      	lsls	r2, r2, #7
 8003f42:	4294      	cmp	r4, r2
 8003f44:	d1f8      	bne.n	8003f38 <BUTTONS_longPressAction+0x50>
			currentMenu = MENU_AUTOCAL_1;
 8003f46:	2206      	movs	r2, #6
 8003f48:	e7e4      	b.n	8003f14 <BUTTONS_longPressAction+0x2c>
		switch (id) {
 8003f4a:	2280      	movs	r2, #128	@ 0x80
 8003f4c:	0192      	lsls	r2, r2, #6
 8003f4e:	4294      	cmp	r4, r2
 8003f50:	d011      	beq.n	8003f76 <BUTTONS_longPressAction+0x8e>
 8003f52:	2280      	movs	r2, #128	@ 0x80
 8003f54:	0212      	lsls	r2, r2, #8
 8003f56:	4294      	cmp	r4, r2
 8003f58:	d1ee      	bne.n	8003f38 <BUTTONS_longPressAction+0x50>
			currentMenu = MENU_HOME;
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	701a      	strb	r2, [r3, #0]
			storeSettingsToEeprom(kp, ki, kd);
 8003f5e:	4b14      	ldr	r3, [pc, #80]	@ (8003fb0 <BUTTONS_longPressAction+0xc8>)
 8003f60:	6818      	ldr	r0, [r3, #0]
 8003f62:	4b14      	ldr	r3, [pc, #80]	@ (8003fb4 <BUTTONS_longPressAction+0xcc>)
 8003f64:	6819      	ldr	r1, [r3, #0]
 8003f66:	4b14      	ldr	r3, [pc, #80]	@ (8003fb8 <BUTTONS_longPressAction+0xd0>)
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	f001 f89d 	bl	80050a8 <storeSettingsToEeprom>
			printString("PID value stored");
 8003f6e:	4813      	ldr	r0, [pc, #76]	@ (8003fbc <BUTTONS_longPressAction+0xd4>)
			printString("PID value discarded");
 8003f70:	f001 fa84 	bl	800547c <printString>
			BUZZER_longPressBeep();
 8003f74:	e7de      	b.n	8003f34 <BUTTONS_longPressAction+0x4c>
			currentMenu = MENU_HOME;
 8003f76:	2200      	movs	r2, #0
			printString("PID value discarded");
 8003f78:	4811      	ldr	r0, [pc, #68]	@ (8003fc0 <BUTTONS_longPressAction+0xd8>)
			currentMenu = MENU_HOME;
 8003f7a:	701a      	strb	r2, [r3, #0]
			printString("PID value discarded");
 8003f7c:	e7f8      	b.n	8003f70 <BUTTONS_longPressAction+0x88>
		switch (id) {
 8003f7e:	2280      	movs	r2, #128	@ 0x80
 8003f80:	01d2      	lsls	r2, r2, #7
 8003f82:	4294      	cmp	r4, r2
 8003f84:	d1d8      	bne.n	8003f38 <BUTTONS_longPressAction+0x50>
			currentMenu = MENU_SET_KP;
 8003f86:	2209      	movs	r2, #9
 8003f88:	e7c4      	b.n	8003f14 <BUTTONS_longPressAction+0x2c>
		switch (id) {
 8003f8a:	2280      	movs	r2, #128	@ 0x80
 8003f8c:	01d2      	lsls	r2, r2, #7
 8003f8e:	4294      	cmp	r4, r2
 8003f90:	d1d2      	bne.n	8003f38 <BUTTONS_longPressAction+0x50>
			currentMenu = MENU_PIDS;
 8003f92:	2208      	movs	r2, #8
 8003f94:	701a      	strb	r2, [r3, #0]
			storeSettingsToEeprom(kp, ki, kd);
 8003f96:	4b06      	ldr	r3, [pc, #24]	@ (8003fb0 <BUTTONS_longPressAction+0xc8>)
 8003f98:	6818      	ldr	r0, [r3, #0]
 8003f9a:	4b06      	ldr	r3, [pc, #24]	@ (8003fb4 <BUTTONS_longPressAction+0xcc>)
 8003f9c:	6819      	ldr	r1, [r3, #0]
 8003f9e:	4b06      	ldr	r3, [pc, #24]	@ (8003fb8 <BUTTONS_longPressAction+0xd0>)
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	f001 f881 	bl	80050a8 <storeSettingsToEeprom>
 8003fa6:	e7c5      	b.n	8003f34 <BUTTONS_longPressAction+0x4c>
 8003fa8:	20000587 	.word	0x20000587
 8003fac:	20000584 	.word	0x20000584
 8003fb0:	20000020 	.word	0x20000020
 8003fb4:	2000001c 	.word	0x2000001c
 8003fb8:	20000018 	.word	0x20000018
 8003fbc:	0800d5d4 	.word	0x0800d5d4
 8003fc0:	0800d5e5 	.word	0x0800d5e5

08003fc4 <BUTTONS_tick>:
uint8_t BUTTONS_tick() {
 8003fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (int i = 0; i < 3; i++) {
 8003fc6:	2500      	movs	r5, #0
		if (btn[i].pressed) {
 8003fc8:	270c      	movs	r7, #12
	uint8_t longPresRelase = 0;
 8003fca:	002e      	movs	r6, r5
		if (btn[i].pressed) {
 8003fcc:	003b      	movs	r3, r7
 8003fce:	436b      	muls	r3, r5
 8003fd0:	4c27      	ldr	r4, [pc, #156]	@ (8004070 <BUTTONS_tick+0xac>)
 8003fd2:	18e4      	adds	r4, r4, r3
 8003fd4:	7a23      	ldrb	r3, [r4, #8]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d008      	beq.n	8003fec <BUTTONS_tick+0x28>
			if (HAL_GetTick() - btn[i].t1 > LONG_PRESS_TIME) {
 8003fda:	f001 fee5 	bl	8005da8 <HAL_GetTick>
 8003fde:	6863      	ldr	r3, [r4, #4]
 8003fe0:	1ac0      	subs	r0, r0, r3
 8003fe2:	23fa      	movs	r3, #250	@ 0xfa
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	4298      	cmp	r0, r3
 8003fe8:	d900      	bls.n	8003fec <BUTTONS_tick+0x28>
				longPresRelase = LONG_PRESS;
 8003fea:	2602      	movs	r6, #2
	for (int i = 0; i < 3; i++) {
 8003fec:	3501      	adds	r5, #1
 8003fee:	2d03      	cmp	r5, #3
 8003ff0:	d1ec      	bne.n	8003fcc <BUTTONS_tick+0x8>
	if (getButtonState(BUTTON1_Pin) == LONG_PRESS)
 8003ff2:	2080      	movs	r0, #128	@ 0x80
 8003ff4:	0200      	lsls	r0, r0, #8
 8003ff6:	f7ff fe1f 	bl	8003c38 <getButtonState>
 8003ffa:	2802      	cmp	r0, #2
 8003ffc:	d103      	bne.n	8004006 <BUTTONS_tick+0x42>
		BUTTONS_longPressAction(BUTTON1_Pin);
 8003ffe:	2080      	movs	r0, #128	@ 0x80
 8004000:	0200      	lsls	r0, r0, #8
 8004002:	f7ff ff71 	bl	8003ee8 <BUTTONS_longPressAction>
	if (getButtonState(BUTTON2_Pin) == LONG_PRESS)
 8004006:	2080      	movs	r0, #128	@ 0x80
 8004008:	01c0      	lsls	r0, r0, #7
 800400a:	f7ff fe15 	bl	8003c38 <getButtonState>
 800400e:	2802      	cmp	r0, #2
 8004010:	d103      	bne.n	800401a <BUTTONS_tick+0x56>
		BUTTONS_longPressAction(BUTTON2_Pin);
 8004012:	2080      	movs	r0, #128	@ 0x80
 8004014:	01c0      	lsls	r0, r0, #7
 8004016:	f7ff ff67 	bl	8003ee8 <BUTTONS_longPressAction>
	if (getButtonState(BUTTON3_Pin) == LONG_PRESS)
 800401a:	2080      	movs	r0, #128	@ 0x80
 800401c:	0180      	lsls	r0, r0, #6
 800401e:	f7ff fe0b 	bl	8003c38 <getButtonState>
 8004022:	2802      	cmp	r0, #2
 8004024:	d103      	bne.n	800402e <BUTTONS_tick+0x6a>
		BUTTONS_longPressAction(BUTTON3_Pin);
 8004026:	2080      	movs	r0, #128	@ 0x80
 8004028:	0180      	lsls	r0, r0, #6
 800402a:	f7ff ff5d 	bl	8003ee8 <BUTTONS_longPressAction>
	if (getButtonState(BUTTON1_Pin) == SHORT_PRESS)
 800402e:	2080      	movs	r0, #128	@ 0x80
 8004030:	0200      	lsls	r0, r0, #8
 8004032:	f7ff fe01 	bl	8003c38 <getButtonState>
 8004036:	2801      	cmp	r0, #1
 8004038:	d103      	bne.n	8004042 <BUTTONS_tick+0x7e>
		BUTTONS_shortPressAction(BUTTON1_Pin);
 800403a:	2080      	movs	r0, #128	@ 0x80
 800403c:	0200      	lsls	r0, r0, #8
 800403e:	f7ff fe2d 	bl	8003c9c <BUTTONS_shortPressAction>
	if (getButtonState(BUTTON2_Pin) == SHORT_PRESS)
 8004042:	2080      	movs	r0, #128	@ 0x80
 8004044:	01c0      	lsls	r0, r0, #7
 8004046:	f7ff fdf7 	bl	8003c38 <getButtonState>
 800404a:	2801      	cmp	r0, #1
 800404c:	d103      	bne.n	8004056 <BUTTONS_tick+0x92>
		BUTTONS_shortPressAction(BUTTON2_Pin);
 800404e:	2080      	movs	r0, #128	@ 0x80
 8004050:	01c0      	lsls	r0, r0, #7
 8004052:	f7ff fe23 	bl	8003c9c <BUTTONS_shortPressAction>
	if (getButtonState(BUTTON3_Pin) == SHORT_PRESS)
 8004056:	2080      	movs	r0, #128	@ 0x80
 8004058:	0180      	lsls	r0, r0, #6
 800405a:	f7ff fded 	bl	8003c38 <getButtonState>
 800405e:	2801      	cmp	r0, #1
 8004060:	d103      	bne.n	800406a <BUTTONS_tick+0xa6>
		BUTTONS_shortPressAction(BUTTON3_Pin);
 8004062:	2080      	movs	r0, #128	@ 0x80
 8004064:	0180      	lsls	r0, r0, #6
 8004066:	f7ff fe19 	bl	8003c9c <BUTTONS_shortPressAction>
}
 800406a:	0030      	movs	r0, r6
 800406c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800406e:	46c0      	nop			@ (mov r8, r8)
 8004070:	20000424 	.word	0x20000424

08004074 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {	// button released
 8004074:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004076:	9001      	str	r0, [sp, #4]
	if (HAL_GetTick() - lastFall <= SHORT_PRESS_TIME)
 8004078:	f001 fe96 	bl	8005da8 <HAL_GetTick>
 800407c:	4b1a      	ldr	r3, [pc, #104]	@ (80040e8 <HAL_GPIO_EXTI_Rising_Callback+0x74>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	1ac0      	subs	r0, r0, r3
 8004082:	2832      	cmp	r0, #50	@ 0x32
 8004084:	d92e      	bls.n	80040e4 <HAL_GPIO_EXTI_Rising_Callback+0x70>
		return;	// debounce

	for (int i = 0; i < 3; i++) {
 8004086:	2600      	movs	r6, #0
		if (GPIO_Pin == btn[i].id) {
 8004088:	270c      	movs	r7, #12
 800408a:	003c      	movs	r4, r7
 800408c:	4374      	muls	r4, r6
 800408e:	4d17      	ldr	r5, [pc, #92]	@ (80040ec <HAL_GPIO_EXTI_Rising_Callback+0x78>)
 8004090:	9a01      	ldr	r2, [sp, #4]
 8004092:	5b63      	ldrh	r3, [r4, r5]
 8004094:	4293      	cmp	r3, r2
 8004096:	d122      	bne.n	80040de <HAL_GPIO_EXTI_Rising_Callback+0x6a>
			btn[i].pressed = 0;
 8004098:	2300      	movs	r3, #0
 800409a:	192c      	adds	r4, r5, r4
 800409c:	7223      	strb	r3, [r4, #8]
			if (btn[i].pressType == NONE) {
 800409e:	7a63      	ldrb	r3, [r4, #9]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d11c      	bne.n	80040de <HAL_GPIO_EXTI_Rising_Callback+0x6a>
				if (HAL_GetTick() - btn[i].t1 < LONG_PRESS_TIME
 80040a4:	f001 fe80 	bl	8005da8 <HAL_GetTick>
 80040a8:	6863      	ldr	r3, [r4, #4]
 80040aa:	1ac0      	subs	r0, r0, r3
 80040ac:	23fa      	movs	r3, #250	@ 0xfa
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	4298      	cmp	r0, r3
 80040b2:	d207      	bcs.n	80040c4 <HAL_GPIO_EXTI_Rising_Callback+0x50>
						&& HAL_GetTick() - btn[i].t1 > SHORT_PRESS_TIME) {
 80040b4:	f001 fe78 	bl	8005da8 <HAL_GetTick>
 80040b8:	6863      	ldr	r3, [r4, #4]
 80040ba:	1ac0      	subs	r0, r0, r3
 80040bc:	2832      	cmp	r0, #50	@ 0x32
 80040be:	d901      	bls.n	80040c4 <HAL_GPIO_EXTI_Rising_Callback+0x50>
					btn[i].pressType = SHORT_PRESS;
 80040c0:	2301      	movs	r3, #1
 80040c2:	7263      	strb	r3, [r4, #9]
				}
				if (HAL_GetTick() - btn[i].t1 > LONG_PRESS_TIME) {
 80040c4:	f001 fe70 	bl	8005da8 <HAL_GetTick>
 80040c8:	230c      	movs	r3, #12
 80040ca:	4373      	muls	r3, r6
 80040cc:	18ed      	adds	r5, r5, r3
 80040ce:	686b      	ldr	r3, [r5, #4]
 80040d0:	1ac0      	subs	r0, r0, r3
 80040d2:	23fa      	movs	r3, #250	@ 0xfa
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4298      	cmp	r0, r3
 80040d8:	d901      	bls.n	80040de <HAL_GPIO_EXTI_Rising_Callback+0x6a>
					btn[i].pressType = LONG_PRESS;
 80040da:	2302      	movs	r3, #2
 80040dc:	726b      	strb	r3, [r5, #9]
	for (int i = 0; i < 3; i++) {
 80040de:	3601      	adds	r6, #1
 80040e0:	2e03      	cmp	r6, #3
 80040e2:	d1d2      	bne.n	800408a <HAL_GPIO_EXTI_Rising_Callback+0x16>
			}

		}
	}

}
 80040e4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80040e6:	46c0      	nop			@ (mov r8, r8)
 80040e8:	20000420 	.word	0x20000420
 80040ec:	20000424 	.word	0x20000424

080040f0 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {	// button pressed
 80040f0:	b570      	push	{r4, r5, r6, lr}
 80040f2:	0005      	movs	r5, r0
	if (HAL_GetTick() - lastFall <= SHORT_PRESS_TIME)
 80040f4:	f001 fe58 	bl	8005da8 <HAL_GetTick>
 80040f8:	4e10      	ldr	r6, [pc, #64]	@ (800413c <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 80040fa:	6833      	ldr	r3, [r6, #0]
 80040fc:	1ac0      	subs	r0, r0, r3
 80040fe:	2832      	cmp	r0, #50	@ 0x32
 8004100:	d90a      	bls.n	8004118 <HAL_GPIO_EXTI_Falling_Callback+0x28>
		return;	// debounce

	for (int i = 0; i < 3; i++) {
		if (GPIO_Pin == btn[i].id) {
 8004102:	4c0f      	ldr	r4, [pc, #60]	@ (8004140 <HAL_GPIO_EXTI_Falling_Callback+0x50>)
 8004104:	8823      	ldrh	r3, [r4, #0]
 8004106:	429d      	cmp	r5, r3
 8004108:	d007      	beq.n	800411a <HAL_GPIO_EXTI_Falling_Callback+0x2a>
 800410a:	89a3      	ldrh	r3, [r4, #12]
 800410c:	429d      	cmp	r5, r3
 800410e:	d012      	beq.n	8004136 <HAL_GPIO_EXTI_Falling_Callback+0x46>
 8004110:	8b23      	ldrh	r3, [r4, #24]
	for (int i = 0; i < 3; i++) {
 8004112:	2202      	movs	r2, #2
		if (GPIO_Pin == btn[i].id) {
 8004114:	429d      	cmp	r5, r3
 8004116:	d001      	beq.n	800411c <HAL_GPIO_EXTI_Falling_Callback+0x2c>
			lastFall = btn[i].t1;// we can not use btn.t1 because we need a global debounce not only for the pressed button
			btn[i].pressed = 1;
			break;
		}
	}
}
 8004118:	bd70      	pop	{r4, r5, r6, pc}
	for (int i = 0; i < 3; i++) {
 800411a:	2200      	movs	r2, #0
			btn[i].pressType = NONE;// there something that keep the previews value so i reset it to 0 when a new press appears
 800411c:	230c      	movs	r3, #12
 800411e:	4353      	muls	r3, r2
 8004120:	18e4      	adds	r4, r4, r3
 8004122:	2300      	movs	r3, #0
 8004124:	7263      	strb	r3, [r4, #9]
			btn[i].t1 = HAL_GetTick();
 8004126:	f001 fe3f 	bl	8005da8 <HAL_GetTick>
 800412a:	6060      	str	r0, [r4, #4]
			lastFall = btn[i].t1;// we can not use btn.t1 because we need a global debounce not only for the pressed button
 800412c:	6863      	ldr	r3, [r4, #4]
 800412e:	6033      	str	r3, [r6, #0]
			btn[i].pressed = 1;
 8004130:	2301      	movs	r3, #1
 8004132:	7223      	strb	r3, [r4, #8]
			break;
 8004134:	e7f0      	b.n	8004118 <HAL_GPIO_EXTI_Falling_Callback+0x28>
	for (int i = 0; i < 3; i++) {
 8004136:	2201      	movs	r2, #1
 8004138:	e7f0      	b.n	800411c <HAL_GPIO_EXTI_Falling_Callback+0x2c>
 800413a:	46c0      	nop			@ (mov r8, r8)
 800413c:	20000420 	.word	0x20000420
 8004140:	20000424 	.word	0x20000424

08004144 <BUZZER_shortPressBeep>:
#include "MyCode/buzzer.h"
#include "tim.h"
#include "MyCode/config.h"

void BUZZER_shortPressBeep() {
	TIM16->PSC = 16 - 1;
 8004144:	230f      	movs	r3, #15
void BUZZER_shortPressBeep() {
 8004146:	b510      	push	{r4, lr}
	TIM16->PSC = 16 - 1;
 8004148:	4c07      	ldr	r4, [pc, #28]	@ (8004168 <BUZZER_shortPressBeep+0x24>)
	TIM16->CCR1 = TIM16->ARR/100*LOUDNESS_PERCENTAGE;
 800414a:	2164      	movs	r1, #100	@ 0x64
	TIM16->PSC = 16 - 1;
 800414c:	62a3      	str	r3, [r4, #40]	@ 0x28
	TIM16->CCR1 = TIM16->ARR/100*LOUDNESS_PERCENTAGE;
 800414e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8004150:	f7fb fffc 	bl	800014c <__udivsi3>
 8004154:	0003      	movs	r3, r0
 8004156:	2032      	movs	r0, #50	@ 0x32
 8004158:	4343      	muls	r3, r0
 800415a:	6363      	str	r3, [r4, #52]	@ 0x34
	HAL_Delay(50);
 800415c:	f001 fe2a 	bl	8005db4 <HAL_Delay>
	TIM16->CCR1 = 0;
 8004160:	2300      	movs	r3, #0
 8004162:	6363      	str	r3, [r4, #52]	@ 0x34
}
 8004164:	bd10      	pop	{r4, pc}
 8004166:	46c0      	nop			@ (mov r8, r8)
 8004168:	40014400 	.word	0x40014400

0800416c <BUZZER_longPressBeep>:

void BUZZER_longPressBeep() {
 800416c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	TIM16->PSC = 16 - 1;
 800416e:	270f      	movs	r7, #15
 8004170:	4c12      	ldr	r4, [pc, #72]	@ (80041bc <BUZZER_longPressBeep+0x50>)
	TIM16->CCR1 = TIM16->ARR/100*LOUDNESS_PERCENTAGE;
 8004172:	2164      	movs	r1, #100	@ 0x64
	TIM16->PSC = 16 - 1;
 8004174:	62a7      	str	r7, [r4, #40]	@ 0x28
	TIM16->CCR1 = TIM16->ARR/100*LOUDNESS_PERCENTAGE;
 8004176:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8004178:	2532      	movs	r5, #50	@ 0x32
 800417a:	f7fb ffe7 	bl	800014c <__udivsi3>
 800417e:	4368      	muls	r0, r5
 8004180:	6360      	str	r0, [r4, #52]	@ 0x34
	HAL_Delay(50);
 8004182:	0028      	movs	r0, r5
 8004184:	f001 fe16 	bl	8005db4 <HAL_Delay>
	TIM16->CCR1 = 0;
 8004188:	2600      	movs	r6, #0

	TIM16->PSC = 32 - 1;
 800418a:	231f      	movs	r3, #31
	TIM16->CCR1 = 0;
 800418c:	6366      	str	r6, [r4, #52]	@ 0x34
	TIM16->PSC = 32 - 1;
 800418e:	62a3      	str	r3, [r4, #40]	@ 0x28
	TIM16->CCR1 = TIM16->ARR/100*LOUDNESS_PERCENTAGE;
 8004190:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8004192:	2164      	movs	r1, #100	@ 0x64
 8004194:	f7fb ffda 	bl	800014c <__udivsi3>
 8004198:	4368      	muls	r0, r5
 800419a:	6360      	str	r0, [r4, #52]	@ 0x34
	HAL_Delay(50);
 800419c:	0028      	movs	r0, r5
 800419e:	f001 fe09 	bl	8005db4 <HAL_Delay>
	TIM16->CCR1 = 0;
 80041a2:	6366      	str	r6, [r4, #52]	@ 0x34

	TIM16->PSC = 16 - 1;
 80041a4:	62a7      	str	r7, [r4, #40]	@ 0x28
	TIM16->CCR1 = TIM16->ARR/100*LOUDNESS_PERCENTAGE;
 80041a6:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80041a8:	2164      	movs	r1, #100	@ 0x64
 80041aa:	f7fb ffcf 	bl	800014c <__udivsi3>
 80041ae:	4368      	muls	r0, r5
 80041b0:	6360      	str	r0, [r4, #52]	@ 0x34
	HAL_Delay(50);
 80041b2:	0028      	movs	r0, r5
 80041b4:	f001 fdfe 	bl	8005db4 <HAL_Delay>
	TIM16->CCR1 = 0;
 80041b8:	6366      	str	r6, [r4, #52]	@ 0x34
}
 80041ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041bc:	40014400 	.word	0x40014400

080041c0 <DISPLAY_intermittentState>:

uint8_t calculateHours(uint16_t t) {
	return t / 60;
}

uint8_t DISPLAY_intermittentState() {
 80041c0:	b510      	push	{r4, lr}
	uint8_t state = 0;
	uint32_t realTime = HAL_GetTick();
 80041c2:	f001 fdf1 	bl	8005da8 <HAL_GetTick>
	uint32_t refTime = realTime;
	refTime /= 10000;
 80041c6:	4909      	ldr	r1, [pc, #36]	@ (80041ec <DISPLAY_intermittentState+0x2c>)
	uint32_t realTime = HAL_GetTick();
 80041c8:	0004      	movs	r4, r0
	refTime /= 10000;
 80041ca:	f7fb ffbf 	bl	800014c <__udivsi3>
	refTime *= 10000;	// now we have the ref point ex: 127522 -> 127000
 80041ce:	4a07      	ldr	r2, [pc, #28]	@ (80041ec <DISPLAY_intermittentState+0x2c>)
	if (realTime >= refTime - (STATUS_CHANGE_TIME) && realTime <= refTime + (STATUS_CHANGE_TIME)) {
 80041d0:	4b07      	ldr	r3, [pc, #28]	@ (80041f0 <DISPLAY_intermittentState+0x30>)
	refTime *= 10000;	// now we have the ref point ex: 127522 -> 127000
 80041d2:	4342      	muls	r2, r0
	if (realTime >= refTime - (STATUS_CHANGE_TIME) && realTime <= refTime + (STATUS_CHANGE_TIME)) {
 80041d4:	18d1      	adds	r1, r2, r3
 80041d6:	2300      	movs	r3, #0
 80041d8:	42a1      	cmp	r1, r4
 80041da:	d804      	bhi.n	80041e6 <DISPLAY_intermittentState+0x26>
 80041dc:	4905      	ldr	r1, [pc, #20]	@ (80041f4 <DISPLAY_intermittentState+0x34>)
 80041de:	1852      	adds	r2, r2, r1
 80041e0:	42a2      	cmp	r2, r4
 80041e2:	415b      	adcs	r3, r3
 80041e4:	b2db      	uxtb	r3, r3
		state = 1;
	}
	return !state;
 80041e6:	2001      	movs	r0, #1
 80041e8:	4058      	eors	r0, r3
}
 80041ea:	bd10      	pop	{r4, pc}
 80041ec:	00002710 	.word	0x00002710
 80041f0:	ffffec78 	.word	0xffffec78
 80041f4:	00001388 	.word	0x00001388

080041f8 <DISPLAY_PrintStrSmall>:
 *	Example: 	uint8_t string[50];
 *				sprintf(string, "T:%0.1fC ", temperature);
 PrintStrMedium(string, 2, 3);
 */

void DISPLAY_PrintStrSmall(uint8_t *str, uint8_t x, uint8_t y) {
 80041f8:	b510      	push	{r4, lr}
 80041fa:	0004      	movs	r4, r0
 80041fc:	0008      	movs	r0, r1
 80041fe:	0011      	movs	r1, r2
	ssd1306_SetCursor(x, y);
 8004200:	f7ff fb4c 	bl	800389c <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_6x8, 1);
 8004204:	4a03      	ldr	r2, [pc, #12]	@ (8004214 <DISPLAY_PrintStrSmall+0x1c>)
 8004206:	2301      	movs	r3, #1
 8004208:	ca06      	ldmia	r2, {r1, r2}
 800420a:	0020      	movs	r0, r4
 800420c:	f7ff fb32 	bl	8003874 <ssd1306_WriteString>
}
 8004210:	bd10      	pop	{r4, pc}
 8004212:	46c0      	nop			@ (mov r8, r8)
 8004214:	20000010 	.word	0x20000010

08004218 <DISPLAY_PrintStrMedium>:

void DISPLAY_PrintStrMedium(uint8_t *str, uint8_t x, uint8_t y) {
 8004218:	b510      	push	{r4, lr}
 800421a:	0004      	movs	r4, r0
 800421c:	0008      	movs	r0, r1
 800421e:	0011      	movs	r1, r2
	ssd1306_SetCursor(x, y);
 8004220:	f7ff fb3c 	bl	800389c <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_7x10, 1);
 8004224:	4a03      	ldr	r2, [pc, #12]	@ (8004234 <DISPLAY_PrintStrMedium+0x1c>)
 8004226:	2301      	movs	r3, #1
 8004228:	ca06      	ldmia	r2, {r1, r2}
 800422a:	0020      	movs	r0, r4
 800422c:	f7ff fb22 	bl	8003874 <ssd1306_WriteString>
}
 8004230:	bd10      	pop	{r4, pc}
 8004232:	46c0      	nop			@ (mov r8, r8)
 8004234:	20000008 	.word	0x20000008

08004238 <DISPLAY_PrintStrLarge>:

void DISPLAY_PrintStrLarge(uint8_t *str, uint8_t x, uint8_t y) {
 8004238:	b510      	push	{r4, lr}
 800423a:	0004      	movs	r4, r0
 800423c:	0008      	movs	r0, r1
 800423e:	0011      	movs	r1, r2
	ssd1306_SetCursor(x, y);
 8004240:	f7ff fb2c 	bl	800389c <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_11x18, 1);
 8004244:	4a03      	ldr	r2, [pc, #12]	@ (8004254 <DISPLAY_PrintStrLarge+0x1c>)
 8004246:	2301      	movs	r3, #1
 8004248:	ca06      	ldmia	r2, {r1, r2}
 800424a:	0020      	movs	r0, r4
 800424c:	f7ff fb12 	bl	8003874 <ssd1306_WriteString>
}
 8004250:	bd10      	pop	{r4, pc}
 8004252:	46c0      	nop			@ (mov r8, r8)
 8004254:	20000000 	.word	0x20000000

08004258 <DISPLAY_drawMenu>:
void DISPLAY_drawMenu(uint8_t currentMenu, uint8_t curretMaterialID, float temperature, uint16_t minuteLeft, uint8_t duty) {
 8004258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800425a:	b097      	sub	sp, #92	@ 0x5c
 800425c:	001d      	movs	r5, r3
 800425e:	ab1c      	add	r3, sp, #112	@ 0x70
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	0006      	movs	r6, r0
	ssd1306_Fill(Black);
 8004264:	2000      	movs	r0, #0
void DISPLAY_drawMenu(uint8_t currentMenu, uint8_t curretMaterialID, float temperature, uint16_t minuteLeft, uint8_t duty) {
 8004266:	000c      	movs	r4, r1
 8004268:	1c17      	adds	r7, r2, #0
 800426a:	9303      	str	r3, [sp, #12]
	ssd1306_Fill(Black);
 800426c:	f7ff fa74 	bl	8003758 <ssd1306_Fill>
	switch (currentMenu) {
 8004270:	2e0b      	cmp	r6, #11
 8004272:	d85a      	bhi.n	800432a <DISPLAY_drawMenu+0xd2>
 8004274:	0030      	movs	r0, r6
 8004276:	f7fb ff5f 	bl	8000138 <__gnu_thumb1_case_uhi>
 800427a:	000c      	.short	0x000c
 800427c:	009a0074 	.word	0x009a0074
 8004280:	00f300d6 	.word	0x00f300d6
 8004284:	010200f9 	.word	0x010200f9
 8004288:	016d012e 	.word	0x016d012e
 800428c:	01b20192 	.word	0x01b20192
 8004290:	01b9      	.short	0x01b9
			sprintf(str, "%0.1f C", temperature);
 8004292:	1c38      	adds	r0, r7, #0
 8004294:	f7ff f952 	bl	800353c <__aeabi_f2d>
 8004298:	0002      	movs	r2, r0
 800429a:	000b      	movs	r3, r1
 800429c:	a809      	add	r0, sp, #36	@ 0x24
 800429e:	49d7      	ldr	r1, [pc, #860]	@ (80045fc <DISPLAY_drawMenu+0x3a4>)
 80042a0:	f005 f80a 	bl	80092b8 <siprintf>
			DISPLAY_PrintStrLarge(str, 5, 8);
 80042a4:	2208      	movs	r2, #8
 80042a6:	2105      	movs	r1, #5
 80042a8:	a809      	add	r0, sp, #36	@ 0x24
 80042aa:	f7ff ffc5 	bl	8004238 <DISPLAY_PrintStrLarge>
			if (DISPLAY_intermittentState()) {
 80042ae:	f7ff ff87 	bl	80041c0 <DISPLAY_intermittentState>
 80042b2:	2800      	cmp	r0, #0
 80042b4:	d03b      	beq.n	800432e <DISPLAY_drawMenu+0xd6>
				MATERIAL_getMaterialName(str, curretMaterialID);
 80042b6:	0021      	movs	r1, r4
 80042b8:	a809      	add	r0, sp, #36	@ 0x24
 80042ba:	f000 fa89 	bl	80047d0 <MATERIAL_getMaterialName>
				DISPLAY_PrintStrMedium(str, 90, 5);
 80042be:	2205      	movs	r2, #5
 80042c0:	215a      	movs	r1, #90	@ 0x5a
 80042c2:	a809      	add	r0, sp, #36	@ 0x24
 80042c4:	f7ff ffa8 	bl	8004218 <DISPLAY_PrintStrMedium>
				sprintf(str, "%d C", MATERIAL_getMaterialTargetTemp(curretMaterialID));
 80042c8:	0020      	movs	r0, r4
 80042ca:	f000 fa8b 	bl	80047e4 <MATERIAL_getMaterialTargetTemp>
 80042ce:	49cc      	ldr	r1, [pc, #816]	@ (8004600 <DISPLAY_drawMenu+0x3a8>)
 80042d0:	0002      	movs	r2, r0
 80042d2:	a809      	add	r0, sp, #36	@ 0x24
 80042d4:	f004 fff0 	bl	80092b8 <siprintf>
				DISPLAY_PrintStrMedium(str, 90, 20);
 80042d8:	2214      	movs	r2, #20
 80042da:	215a      	movs	r1, #90	@ 0x5a
 80042dc:	a809      	add	r0, sp, #36	@ 0x24
 80042de:	f7ff ff9b 	bl	8004218 <DISPLAY_PrintStrMedium>
				ssd1306_DrawCircle(108, 20, 1, White);
 80042e2:	2301      	movs	r3, #1
 80042e4:	2114      	movs	r1, #20
 80042e6:	001a      	movs	r2, r3
 80042e8:	206c      	movs	r0, #108	@ 0x6c
 80042ea:	f7ff fb3a 	bl	8003962 <ssd1306_DrawCircle>
			ssd1306_DrawCircle(56, 9, 2, White);
 80042ee:	2301      	movs	r3, #1
 80042f0:	2202      	movs	r2, #2
 80042f2:	2109      	movs	r1, #9
 80042f4:	2038      	movs	r0, #56	@ 0x38
 80042f6:	f7ff fb34 	bl	8003962 <ssd1306_DrawCircle>
			ssd1306_Line(79, 0, 79, 32, White);
 80042fa:	2401      	movs	r4, #1
 80042fc:	224f      	movs	r2, #79	@ 0x4f
 80042fe:	2320      	movs	r3, #32
 8004300:	0010      	movs	r0, r2
 8004302:	2100      	movs	r1, #0
 8004304:	9400      	str	r4, [sp, #0]
 8004306:	f7ff facf 	bl	80038a8 <ssd1306_Line>
			ssd1306_DrawRectangle(0, 29, duty / 3.5, 31, White);
 800430a:	9803      	ldr	r0, [sp, #12]
 800430c:	f7ff f8c4 	bl	8003498 <__aeabi_i2d>
 8004310:	2200      	movs	r2, #0
 8004312:	4bbc      	ldr	r3, [pc, #752]	@ (8004604 <DISPLAY_drawMenu+0x3ac>)
 8004314:	f7fd fd38 	bl	8001d88 <__aeabi_ddiv>
 8004318:	f7fc f91e 	bl	8000558 <__aeabi_d2uiz>
 800431c:	231f      	movs	r3, #31
 800431e:	b2c2      	uxtb	r2, r0
 8004320:	211d      	movs	r1, #29
 8004322:	2000      	movs	r0, #0
 8004324:	9400      	str	r4, [sp, #0]
 8004326:	f7ff fb6d 	bl	8003a04 <ssd1306_DrawRectangle>
}
 800432a:	b017      	add	sp, #92	@ 0x5c
 800432c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				DISPLAY_PrintStrMedium("ETA:", 83, 5);
 800432e:	2205      	movs	r2, #5
 8004330:	2153      	movs	r1, #83	@ 0x53
 8004332:	48b5      	ldr	r0, [pc, #724]	@ (8004608 <DISPLAY_drawMenu+0x3b0>)
 8004334:	f7ff ff70 	bl	8004218 <DISPLAY_PrintStrMedium>
	return t % 60;
 8004338:	0028      	movs	r0, r5
 800433a:	213c      	movs	r1, #60	@ 0x3c
 800433c:	f7fb ff8c 	bl	8000258 <__aeabi_uidivmod>
	return t / 60;
 8004340:	0028      	movs	r0, r5
				sprintf(str, "%dh%dm", calculateHours(minuteLeft), calculateMinute(minuteLeft));
 8004342:	b28c      	uxth	r4, r1
	return t / 60;
 8004344:	213c      	movs	r1, #60	@ 0x3c
 8004346:	f7fb ff01 	bl	800014c <__udivsi3>
				sprintf(str, "%dh%dm", calculateHours(minuteLeft), calculateMinute(minuteLeft));
 800434a:	0023      	movs	r3, r4
 800434c:	b2c2      	uxtb	r2, r0
 800434e:	49af      	ldr	r1, [pc, #700]	@ (800460c <DISPLAY_drawMenu+0x3b4>)
 8004350:	a809      	add	r0, sp, #36	@ 0x24
 8004352:	f004 ffb1 	bl	80092b8 <siprintf>
				DISPLAY_PrintStrMedium(str, 83, 20);
 8004356:	2214      	movs	r2, #20
 8004358:	2153      	movs	r1, #83	@ 0x53
 800435a:	a809      	add	r0, sp, #36	@ 0x24
 800435c:	f7ff ff5c 	bl	8004218 <DISPLAY_PrintStrMedium>
 8004360:	e7c5      	b.n	80042ee <DISPLAY_drawMenu+0x96>
			DISPLAY_PrintStrLarge("TIMER SET:", 0, 0);
 8004362:	2200      	movs	r2, #0
 8004364:	48aa      	ldr	r0, [pc, #680]	@ (8004610 <DISPLAY_drawMenu+0x3b8>)
 8004366:	0011      	movs	r1, r2
 8004368:	f7ff ff66 	bl	8004238 <DISPLAY_PrintStrLarge>
	return t % 60;
 800436c:	213c      	movs	r1, #60	@ 0x3c
 800436e:	0028      	movs	r0, r5
 8004370:	f7fb ff72 	bl	8000258 <__aeabi_uidivmod>
	return t / 60;
 8004374:	0028      	movs	r0, r5
			sprintf(str, "< %02dh%02dm >", calculateHours(minuteLeft), calculateMinute(minuteLeft));
 8004376:	b28c      	uxth	r4, r1
	return t / 60;
 8004378:	213c      	movs	r1, #60	@ 0x3c
 800437a:	f7fb fee7 	bl	800014c <__udivsi3>
			sprintf(str, "< %02dh%02dm >", calculateHours(minuteLeft), calculateMinute(minuteLeft));
 800437e:	0023      	movs	r3, r4
 8004380:	b2c2      	uxtb	r2, r0
 8004382:	49a4      	ldr	r1, [pc, #656]	@ (8004614 <DISPLAY_drawMenu+0x3bc>)
 8004384:	a809      	add	r0, sp, #36	@ 0x24
 8004386:	f004 ff97 	bl	80092b8 <siprintf>
			DISPLAY_PrintStrMedium(str, 29, 22);
 800438a:	2216      	movs	r2, #22
 800438c:	211d      	movs	r1, #29
 800438e:	a809      	add	r0, sp, #36	@ 0x24
 8004390:	f7ff ff42 	bl	8004218 <DISPLAY_PrintStrMedium>
			ssd1306_Line(35, 23, 35, 29, White);
 8004394:	2401      	movs	r4, #1
 8004396:	2223      	movs	r2, #35	@ 0x23
 8004398:	231d      	movs	r3, #29
 800439a:	0010      	movs	r0, r2
 800439c:	2117      	movs	r1, #23
 800439e:	9400      	str	r4, [sp, #0]
 80043a0:	f7ff fa82 	bl	80038a8 <ssd1306_Line>
			ssd1306_Line(92, 23, 92, 29, White);
 80043a4:	231d      	movs	r3, #29
 80043a6:	225c      	movs	r2, #92	@ 0x5c
 80043a8:	9400      	str	r4, [sp, #0]
			ssd1306_Line(85, 23, 85, 29, White);
 80043aa:	2117      	movs	r1, #23
 80043ac:	e054      	b.n	8004458 <DISPLAY_drawMenu+0x200>
			SSD1306_VERTEX left_arrow[] = { { 16, 6 }, { 0, 16 }, { 16, 26 }, { 16, 6 } };
 80043ae:	4d9a      	ldr	r5, [pc, #616]	@ (8004618 <DISPLAY_drawMenu+0x3c0>)
 80043b0:	2208      	movs	r2, #8
 80043b2:	0029      	movs	r1, r5
 80043b4:	a805      	add	r0, sp, #20
 80043b6:	f005 f887 	bl	80094c8 <memcpy>
			ssd1306_Polyline(left_arrow, sizeof(left_arrow) / sizeof(left_arrow[0]), White);
 80043ba:	2201      	movs	r2, #1
 80043bc:	2104      	movs	r1, #4
 80043be:	a805      	add	r0, sp, #20
 80043c0:	f7ff faba 	bl	8003938 <ssd1306_Polyline>
			SSD1306_VERTEX right_arrow[] = { { 111, 6 }, { 127, 16 }, { 111, 26 }, { 111, 6 } };
 80043c4:	0029      	movs	r1, r5
 80043c6:	2208      	movs	r2, #8
 80043c8:	3108      	adds	r1, #8
 80043ca:	a807      	add	r0, sp, #28
 80043cc:	f005 f87c 	bl	80094c8 <memcpy>
			ssd1306_Polyline(right_arrow, sizeof(right_arrow) / sizeof(right_arrow[0]), White);
 80043d0:	2201      	movs	r2, #1
 80043d2:	2104      	movs	r1, #4
 80043d4:	a807      	add	r0, sp, #28
 80043d6:	f7ff faaf 	bl	8003938 <ssd1306_Polyline>
			ssd1306_Line(20, 5, 107, 5, White);
 80043da:	2501      	movs	r5, #1
 80043dc:	2305      	movs	r3, #5
 80043de:	226b      	movs	r2, #107	@ 0x6b
 80043e0:	0019      	movs	r1, r3
 80043e2:	2014      	movs	r0, #20
 80043e4:	9500      	str	r5, [sp, #0]
 80043e6:	f7ff fa5f 	bl	80038a8 <ssd1306_Line>
			ssd1306_Line(20, 27, 107, 27, White);
 80043ea:	231b      	movs	r3, #27
 80043ec:	226b      	movs	r2, #107	@ 0x6b
 80043ee:	0019      	movs	r1, r3
 80043f0:	2014      	movs	r0, #20
 80043f2:	9500      	str	r5, [sp, #0]
 80043f4:	f7ff fa58 	bl	80038a8 <ssd1306_Line>
			MATERIAL_getMaterialName(str, curretMaterialID);
 80043f8:	0021      	movs	r1, r4
 80043fa:	a809      	add	r0, sp, #36	@ 0x24
 80043fc:	f000 f9e8 	bl	80047d0 <MATERIAL_getMaterialName>
			DISPLAY_PrintStrMedium(str, 27, 12);
 8004400:	220c      	movs	r2, #12
 8004402:	211b      	movs	r1, #27
 8004404:	a809      	add	r0, sp, #36	@ 0x24
 8004406:	f7ff ff07 	bl	8004218 <DISPLAY_PrintStrMedium>
			sprintf(str, "%d C", MATERIAL_getMaterialTargetTemp(curretMaterialID));
 800440a:	0020      	movs	r0, r4
 800440c:	f000 f9ea 	bl	80047e4 <MATERIAL_getMaterialTargetTemp>
 8004410:	497b      	ldr	r1, [pc, #492]	@ (8004600 <DISPLAY_drawMenu+0x3a8>)
 8004412:	0002      	movs	r2, r0
 8004414:	a809      	add	r0, sp, #36	@ 0x24
 8004416:	f004 ff4f 	bl	80092b8 <siprintf>
			DISPLAY_PrintStrMedium(str, 72, 12);
 800441a:	220c      	movs	r2, #12
 800441c:	2148      	movs	r1, #72	@ 0x48
 800441e:	a809      	add	r0, sp, #36	@ 0x24
				DISPLAY_PrintStrMedium("<SAVE      DISC.>", 0, 20);
 8004420:	f7ff fefa 	bl	8004218 <DISPLAY_PrintStrMedium>
 8004424:	e781      	b.n	800432a <DISPLAY_drawMenu+0xd2>
			sprintf(str, "CUSTOM 1: < %d C >", MATERIAL_getMaterialTargetTemp(MATERIAL_ID_CUS_1));
 8004426:	2008      	movs	r0, #8
 8004428:	f000 f9dc 	bl	80047e4 <MATERIAL_getMaterialTargetTemp>
 800442c:	0002      	movs	r2, r0
 800442e:	497b      	ldr	r1, [pc, #492]	@ (800461c <DISPLAY_drawMenu+0x3c4>)
			sprintf(str, "CUSTOM 2: < %d C >", MATERIAL_getMaterialTargetTemp(MATERIAL_ID_CUS_2));
 8004430:	a809      	add	r0, sp, #36	@ 0x24
 8004432:	f004 ff41 	bl	80092b8 <siprintf>
			DISPLAY_PrintStrMedium(str, 0, 13);
 8004436:	220d      	movs	r2, #13
 8004438:	2100      	movs	r1, #0
 800443a:	a809      	add	r0, sp, #36	@ 0x24
 800443c:	f7ff feec 	bl	8004218 <DISPLAY_PrintStrMedium>
			ssd1306_Line(76, 14, 76, 20, White);
 8004440:	2401      	movs	r4, #1
 8004442:	224c      	movs	r2, #76	@ 0x4c
 8004444:	2314      	movs	r3, #20
 8004446:	210e      	movs	r1, #14
 8004448:	0010      	movs	r0, r2
 800444a:	9400      	str	r4, [sp, #0]
 800444c:	f7ff fa2c 	bl	80038a8 <ssd1306_Line>
			ssd1306_Line(119, 14, 119, 20, White);
 8004450:	2314      	movs	r3, #20
 8004452:	2277      	movs	r2, #119	@ 0x77
 8004454:	210e      	movs	r1, #14
 8004456:	9400      	str	r4, [sp, #0]
			ssd1306_Line(85, 23, 85, 29, White);
 8004458:	0010      	movs	r0, r2
 800445a:	f7ff fa25 	bl	80038a8 <ssd1306_Line>
}
 800445e:	e764      	b.n	800432a <DISPLAY_drawMenu+0xd2>
			sprintf(str, "CUSTOM 2: < %d C >", MATERIAL_getMaterialTargetTemp(MATERIAL_ID_CUS_2));
 8004460:	2009      	movs	r0, #9
 8004462:	f000 f9bf 	bl	80047e4 <MATERIAL_getMaterialTargetTemp>
 8004466:	496e      	ldr	r1, [pc, #440]	@ (8004620 <DISPLAY_drawMenu+0x3c8>)
 8004468:	0002      	movs	r2, r0
 800446a:	e7e1      	b.n	8004430 <DISPLAY_drawMenu+0x1d8>
			DISPLAY_PrintStrLarge("AUTOCAL", 25, 0);
 800446c:	2200      	movs	r2, #0
 800446e:	2119      	movs	r1, #25
 8004470:	486c      	ldr	r0, [pc, #432]	@ (8004624 <DISPLAY_drawMenu+0x3cc>)
 8004472:	f7ff fee1 	bl	8004238 <DISPLAY_PrintStrLarge>
			DISPLAY_PrintStrMedium("HOLD OK TO START", 8, 22);
 8004476:	2216      	movs	r2, #22
 8004478:	2108      	movs	r1, #8
 800447a:	486b      	ldr	r0, [pc, #428]	@ (8004628 <DISPLAY_drawMenu+0x3d0>)
 800447c:	e7d0      	b.n	8004420 <DISPLAY_drawMenu+0x1c8>
			DISPLAY_PrintStrMedium("PID AUTOCAL", 0, 5);
 800447e:	2205      	movs	r2, #5
 8004480:	2100      	movs	r1, #0
 8004482:	486a      	ldr	r0, [pc, #424]	@ (800462c <DISPLAY_drawMenu+0x3d4>)
 8004484:	f7ff fec8 	bl	8004218 <DISPLAY_PrintStrMedium>
			DISPLAY_PrintStrMedium("IS STARTING", 0, 20);
 8004488:	2214      	movs	r2, #20
 800448a:	2100      	movs	r1, #0
 800448c:	4868      	ldr	r0, [pc, #416]	@ (8004630 <DISPLAY_drawMenu+0x3d8>)
 800448e:	f7ff fec3 	bl	8004218 <DISPLAY_PrintStrMedium>
			ssd1306_UpdateScreen();
 8004492:	f7ff f96f 	bl	8003774 <ssd1306_UpdateScreen>
			HAL_Delay(2000);
 8004496:	20fa      	movs	r0, #250	@ 0xfa
 8004498:	00c0      	lsls	r0, r0, #3
 800449a:	f001 fc8b 	bl	8005db4 <HAL_Delay>
			DISPLAY_PrintStrMedium("IT CAN TAKE", 0, 5);
 800449e:	2205      	movs	r2, #5
 80044a0:	2100      	movs	r1, #0
 80044a2:	4864      	ldr	r0, [pc, #400]	@ (8004634 <DISPLAY_drawMenu+0x3dc>)
 80044a4:	f7ff feb8 	bl	8004218 <DISPLAY_PrintStrMedium>
			DISPLAY_PrintStrMedium("SEVERAL MINUTES", 0, 20);
 80044a8:	2214      	movs	r2, #20
 80044aa:	2100      	movs	r1, #0
 80044ac:	4862      	ldr	r0, [pc, #392]	@ (8004638 <DISPLAY_drawMenu+0x3e0>)
 80044ae:	f7ff feb3 	bl	8004218 <DISPLAY_PrintStrMedium>
			ssd1306_UpdateScreen();
 80044b2:	f7ff f95f 	bl	8003774 <ssd1306_UpdateScreen>
			HAL_Delay(2000);
 80044b6:	20fa      	movs	r0, #250	@ 0xfa
 80044b8:	00c0      	lsls	r0, r0, #3
 80044ba:	f001 fc7b 	bl	8005db4 <HAL_Delay>
			PIDautoCal(PID_AUTOCAL_TEMPERATURE, PID_AUTOTUNE_HYSTERESIS, PID_AUTOCAL_CYCLES, &kp, &ki, &kd);
 80044be:	2180      	movs	r1, #128	@ 0x80
 80044c0:	4a5e      	ldr	r2, [pc, #376]	@ (800463c <DISPLAY_drawMenu+0x3e4>)
 80044c2:	4b5f      	ldr	r3, [pc, #380]	@ (8004640 <DISPLAY_drawMenu+0x3e8>)
 80044c4:	9201      	str	r2, [sp, #4]
 80044c6:	4a5f      	ldr	r2, [pc, #380]	@ (8004644 <DISPLAY_drawMenu+0x3ec>)
 80044c8:	485f      	ldr	r0, [pc, #380]	@ (8004648 <DISPLAY_drawMenu+0x3f0>)
 80044ca:	9200      	str	r2, [sp, #0]
 80044cc:	05c9      	lsls	r1, r1, #23
 80044ce:	2208      	movs	r2, #8
 80044d0:	f000 fa48 	bl	8004964 <PIDautoCal>
			break;
 80044d4:	e729      	b.n	800432a <DISPLAY_drawMenu+0xd2>
			if (DISPLAY_intermittentState()) {
 80044d6:	f7ff fe73 	bl	80041c0 <DISPLAY_intermittentState>
 80044da:	1e04      	subs	r4, r0, #0
 80044dc:	d00d      	beq.n	80044fa <DISPLAY_drawMenu+0x2a2>
				DISPLAY_PrintStrMedium("CALIB. FINISCHED!", 0, 5);
 80044de:	2205      	movs	r2, #5
 80044e0:	2100      	movs	r1, #0
 80044e2:	485a      	ldr	r0, [pc, #360]	@ (800464c <DISPLAY_drawMenu+0x3f4>)
 80044e4:	f7ff fe98 	bl	8004218 <DISPLAY_PrintStrMedium>
				DISPLAY_PrintStrMedium(">PRESS OK BUTTON<", 0, 20);
 80044e8:	2214      	movs	r2, #20
 80044ea:	2100      	movs	r1, #0
 80044ec:	4858      	ldr	r0, [pc, #352]	@ (8004650 <DISPLAY_drawMenu+0x3f8>)
 80044ee:	f7ff fe93 	bl	8004218 <DISPLAY_PrintStrMedium>
				DISPLAY_PrintStrMedium("<SAVE      DISC.>", 0, 20);
 80044f2:	2214      	movs	r2, #20
 80044f4:	2100      	movs	r1, #0
 80044f6:	4857      	ldr	r0, [pc, #348]	@ (8004654 <DISPLAY_drawMenu+0x3fc>)
 80044f8:	e792      	b.n	8004420 <DISPLAY_drawMenu+0x1c8>
				DISPLAY_PrintStrMedium("NEW PID VALUE ARE:", 0, 0);
 80044fa:	0022      	movs	r2, r4
 80044fc:	0021      	movs	r1, r4
 80044fe:	4856      	ldr	r0, [pc, #344]	@ (8004658 <DISPLAY_drawMenu+0x400>)
 8004500:	f7ff fe8a 	bl	8004218 <DISPLAY_PrintStrMedium>
				sprintf(str, "KP=%0.3f KI=%0.3f", kp, ki);
 8004504:	4b4e      	ldr	r3, [pc, #312]	@ (8004640 <DISPLAY_drawMenu+0x3e8>)
 8004506:	6818      	ldr	r0, [r3, #0]
 8004508:	f7ff f818 	bl	800353c <__aeabi_f2d>
 800450c:	4b4d      	ldr	r3, [pc, #308]	@ (8004644 <DISPLAY_drawMenu+0x3ec>)
 800450e:	0006      	movs	r6, r0
 8004510:	6818      	ldr	r0, [r3, #0]
 8004512:	000f      	movs	r7, r1
 8004514:	f7ff f812 	bl	800353c <__aeabi_f2d>
 8004518:	4d50      	ldr	r5, [pc, #320]	@ (800465c <DISPLAY_drawMenu+0x404>)
 800451a:	003b      	movs	r3, r7
 800451c:	9000      	str	r0, [sp, #0]
 800451e:	9101      	str	r1, [sp, #4]
 8004520:	0032      	movs	r2, r6
 8004522:	0029      	movs	r1, r5
 8004524:	a809      	add	r0, sp, #36	@ 0x24
 8004526:	f004 fec7 	bl	80092b8 <siprintf>
				DISPLAY_PrintStrSmall(str, 0, 12);
 800452a:	220c      	movs	r2, #12
 800452c:	0021      	movs	r1, r4
 800452e:	a809      	add	r0, sp, #36	@ 0x24
 8004530:	f7ff fe62 	bl	80041f8 <DISPLAY_PrintStrSmall>
				sprintf(str, "KD=%0.3f", kd);
 8004534:	4b41      	ldr	r3, [pc, #260]	@ (800463c <DISPLAY_drawMenu+0x3e4>)
 8004536:	6818      	ldr	r0, [r3, #0]
 8004538:	f7ff f800 	bl	800353c <__aeabi_f2d>
 800453c:	0002      	movs	r2, r0
 800453e:	000b      	movs	r3, r1
 8004540:	4947      	ldr	r1, [pc, #284]	@ (8004660 <DISPLAY_drawMenu+0x408>)
			sprintf(str, "KD=%0.3f  L.OK EDIT", kd);
 8004542:	a809      	add	r0, sp, #36	@ 0x24
 8004544:	f004 feb8 	bl	80092b8 <siprintf>
			DISPLAY_PrintStrSmall(str, 0, 22);
 8004548:	2216      	movs	r2, #22
 800454a:	2100      	movs	r1, #0
 800454c:	a809      	add	r0, sp, #36	@ 0x24
 800454e:	f7ff fe53 	bl	80041f8 <DISPLAY_PrintStrSmall>
			break;
 8004552:	e6ea      	b.n	800432a <DISPLAY_drawMenu+0xd2>
			DISPLAY_PrintStrMedium("PID VALUES:", 0, 0);
 8004554:	2200      	movs	r2, #0
 8004556:	4843      	ldr	r0, [pc, #268]	@ (8004664 <DISPLAY_drawMenu+0x40c>)
 8004558:	0011      	movs	r1, r2
 800455a:	f7ff fe5d 	bl	8004218 <DISPLAY_PrintStrMedium>
			sprintf(str, "KP=%0.3f KI=%0.3f", kp, ki);
 800455e:	4b38      	ldr	r3, [pc, #224]	@ (8004640 <DISPLAY_drawMenu+0x3e8>)
 8004560:	6818      	ldr	r0, [r3, #0]
 8004562:	f7fe ffeb 	bl	800353c <__aeabi_f2d>
 8004566:	4b37      	ldr	r3, [pc, #220]	@ (8004644 <DISPLAY_drawMenu+0x3ec>)
 8004568:	0006      	movs	r6, r0
 800456a:	6818      	ldr	r0, [r3, #0]
 800456c:	000f      	movs	r7, r1
 800456e:	f7fe ffe5 	bl	800353c <__aeabi_f2d>
 8004572:	4c3a      	ldr	r4, [pc, #232]	@ (800465c <DISPLAY_drawMenu+0x404>)
 8004574:	003b      	movs	r3, r7
 8004576:	9000      	str	r0, [sp, #0]
 8004578:	9101      	str	r1, [sp, #4]
 800457a:	0032      	movs	r2, r6
 800457c:	0021      	movs	r1, r4
 800457e:	a809      	add	r0, sp, #36	@ 0x24
 8004580:	f004 fe9a 	bl	80092b8 <siprintf>
			DISPLAY_PrintStrSmall(str, 0, 12);
 8004584:	220c      	movs	r2, #12
 8004586:	2100      	movs	r1, #0
 8004588:	a809      	add	r0, sp, #36	@ 0x24
 800458a:	f7ff fe35 	bl	80041f8 <DISPLAY_PrintStrSmall>
			sprintf(str, "KD=%0.3f  L.OK EDIT", kd);
 800458e:	4b2b      	ldr	r3, [pc, #172]	@ (800463c <DISPLAY_drawMenu+0x3e4>)
 8004590:	6818      	ldr	r0, [r3, #0]
 8004592:	f7fe ffd3 	bl	800353c <__aeabi_f2d>
 8004596:	000b      	movs	r3, r1
 8004598:	0002      	movs	r2, r0
 800459a:	4933      	ldr	r1, [pc, #204]	@ (8004668 <DISPLAY_drawMenu+0x410>)
 800459c:	e7d1      	b.n	8004542 <DISPLAY_drawMenu+0x2ea>
			DISPLAY_PrintStrLarge("SET Kp:", 0, 0);
 800459e:	2200      	movs	r2, #0
 80045a0:	4832      	ldr	r0, [pc, #200]	@ (800466c <DISPLAY_drawMenu+0x414>)
 80045a2:	0011      	movs	r1, r2
 80045a4:	f7ff fe48 	bl	8004238 <DISPLAY_PrintStrLarge>
			sprintf(str, "< %05.2f >", kp);
 80045a8:	4b25      	ldr	r3, [pc, #148]	@ (8004640 <DISPLAY_drawMenu+0x3e8>)
			sprintf(str, "< %05.2f >", kd);
 80045aa:	6818      	ldr	r0, [r3, #0]
 80045ac:	f7fe ffc6 	bl	800353c <__aeabi_f2d>
 80045b0:	000b      	movs	r3, r1
 80045b2:	0002      	movs	r2, r0
 80045b4:	492e      	ldr	r1, [pc, #184]	@ (8004670 <DISPLAY_drawMenu+0x418>)
 80045b6:	a809      	add	r0, sp, #36	@ 0x24
 80045b8:	f004 fe7e 	bl	80092b8 <siprintf>
			DISPLAY_PrintStrMedium(str, 29, 22);
 80045bc:	2216      	movs	r2, #22
 80045be:	211d      	movs	r1, #29
 80045c0:	a809      	add	r0, sp, #36	@ 0x24
 80045c2:	f7ff fe29 	bl	8004218 <DISPLAY_PrintStrMedium>
			ssd1306_Line(35, 23, 35, 29, White);
 80045c6:	2401      	movs	r4, #1
 80045c8:	2223      	movs	r2, #35	@ 0x23
 80045ca:	231d      	movs	r3, #29
 80045cc:	0010      	movs	r0, r2
 80045ce:	2117      	movs	r1, #23
 80045d0:	9400      	str	r4, [sp, #0]
 80045d2:	f7ff f969 	bl	80038a8 <ssd1306_Line>
			ssd1306_Line(85, 23, 85, 29, White);
 80045d6:	231d      	movs	r3, #29
 80045d8:	2255      	movs	r2, #85	@ 0x55
 80045da:	9400      	str	r4, [sp, #0]
 80045dc:	e6e5      	b.n	80043aa <DISPLAY_drawMenu+0x152>
			DISPLAY_PrintStrLarge("SET Ki:", 0, 0);
 80045de:	2200      	movs	r2, #0
 80045e0:	4824      	ldr	r0, [pc, #144]	@ (8004674 <DISPLAY_drawMenu+0x41c>)
 80045e2:	0011      	movs	r1, r2
 80045e4:	f7ff fe28 	bl	8004238 <DISPLAY_PrintStrLarge>
			sprintf(str, "< %05.2f >", ki);
 80045e8:	4b16      	ldr	r3, [pc, #88]	@ (8004644 <DISPLAY_drawMenu+0x3ec>)
 80045ea:	e7de      	b.n	80045aa <DISPLAY_drawMenu+0x352>
			DISPLAY_PrintStrLarge("SET Kd:", 0, 0);
 80045ec:	2200      	movs	r2, #0
 80045ee:	4822      	ldr	r0, [pc, #136]	@ (8004678 <DISPLAY_drawMenu+0x420>)
 80045f0:	0011      	movs	r1, r2
 80045f2:	f7ff fe21 	bl	8004238 <DISPLAY_PrintStrLarge>
			sprintf(str, "< %05.2f >", kd);
 80045f6:	4b11      	ldr	r3, [pc, #68]	@ (800463c <DISPLAY_drawMenu+0x3e4>)
 80045f8:	e7d7      	b.n	80045aa <DISPLAY_drawMenu+0x352>
 80045fa:	46c0      	nop			@ (mov r8, r8)
 80045fc:	0800d5f9 	.word	0x0800d5f9
 8004600:	0800d601 	.word	0x0800d601
 8004604:	400c0000 	.word	0x400c0000
 8004608:	0800d606 	.word	0x0800d606
 800460c:	0800d60b 	.word	0x0800d60b
 8004610:	0800d612 	.word	0x0800d612
 8004614:	0800d61d 	.word	0x0800d61d
 8004618:	0800ba50 	.word	0x0800ba50
 800461c:	0800d62c 	.word	0x0800d62c
 8004620:	0800d63f 	.word	0x0800d63f
 8004624:	0800d667 	.word	0x0800d667
 8004628:	0800d652 	.word	0x0800d652
 800462c:	0800d663 	.word	0x0800d663
 8004630:	0800d66f 	.word	0x0800d66f
 8004634:	0800d67b 	.word	0x0800d67b
 8004638:	0800d687 	.word	0x0800d687
 800463c:	20000018 	.word	0x20000018
 8004640:	20000020 	.word	0x20000020
 8004644:	2000001c 	.word	0x2000001c
 8004648:	428c0000 	.word	0x428c0000
 800464c:	0800d697 	.word	0x0800d697
 8004650:	0800d6a9 	.word	0x0800d6a9
 8004654:	0800d6bb 	.word	0x0800d6bb
 8004658:	0800d6cd 	.word	0x0800d6cd
 800465c:	0800d6e0 	.word	0x0800d6e0
 8004660:	0800d6f2 	.word	0x0800d6f2
 8004664:	0800d6fb 	.word	0x0800d6fb
 8004668:	0800d707 	.word	0x0800d707
 800466c:	0800d71b 	.word	0x0800d71b
 8004670:	0800d723 	.word	0x0800d723
 8004674:	0800d72e 	.word	0x0800d72e
 8004678:	0800d736 	.word	0x0800d736

0800467c <MATERIAL_initMaterials>:
#define MATERIALS_NUMBER 10
Material materialsLibrary[MATERIALS_NUMBER];

void MATERIAL_initMaterials() {
	/* PLA */
	materialsLibrary[0].id = MATERIAL_ID_PLA;
 800467c:	2300      	movs	r3, #0
void MATERIAL_initMaterials() {
 800467e:	b570      	push	{r4, r5, r6, lr}
	materialsLibrary[0].id = MATERIAL_ID_PLA;
 8004680:	4c32      	ldr	r4, [pc, #200]	@ (800474c <MATERIAL_initMaterials+0xd0>)
	sprintf(materialsLibrary[0].name, "PLA");
 8004682:	4933      	ldr	r1, [pc, #204]	@ (8004750 <MATERIAL_initMaterials+0xd4>)
 8004684:	4833      	ldr	r0, [pc, #204]	@ (8004754 <MATERIAL_initMaterials+0xd8>)
	materialsLibrary[0].target_temp = 60;
 8004686:	263c      	movs	r6, #60	@ 0x3c
	materialsLibrary[0].id = MATERIAL_ID_PLA;
 8004688:	7023      	strb	r3, [r4, #0]
	sprintf(materialsLibrary[0].name, "PLA");
 800468a:	f004 ff0a 	bl	80094a2 <strcpy>

	/* PETG */
	materialsLibrary[1].id = MATERIAL_ID_PETG;
 800468e:	2301      	movs	r3, #1
	sprintf(materialsLibrary[1].name, "PETG");
 8004690:	4931      	ldr	r1, [pc, #196]	@ (8004758 <MATERIAL_initMaterials+0xdc>)
 8004692:	4832      	ldr	r0, [pc, #200]	@ (800475c <MATERIAL_initMaterials+0xe0>)
	materialsLibrary[1].target_temp = 70;
 8004694:	2546      	movs	r5, #70	@ 0x46
	materialsLibrary[0].target_temp = 60;
 8004696:	72e6      	strb	r6, [r4, #11]
	materialsLibrary[1].id = MATERIAL_ID_PETG;
 8004698:	7323      	strb	r3, [r4, #12]
	sprintf(materialsLibrary[1].name, "PETG");
 800469a:	f004 ff02 	bl	80094a2 <strcpy>

	/* TPU */
	materialsLibrary[2].id = MATERIAL_ID_TPU;
 800469e:	2302      	movs	r3, #2
	sprintf(materialsLibrary[2].name, "TPU");
 80046a0:	492f      	ldr	r1, [pc, #188]	@ (8004760 <MATERIAL_initMaterials+0xe4>)
 80046a2:	4830      	ldr	r0, [pc, #192]	@ (8004764 <MATERIAL_initMaterials+0xe8>)
	materialsLibrary[1].target_temp = 70;
 80046a4:	75e5      	strb	r5, [r4, #23]
	materialsLibrary[2].id = MATERIAL_ID_TPU;
 80046a6:	7623      	strb	r3, [r4, #24]
	sprintf(materialsLibrary[2].name, "TPU");
 80046a8:	f004 fefb 	bl	80094a2 <strcpy>
	materialsLibrary[2].target_temp = 55;
 80046ac:	2237      	movs	r2, #55	@ 0x37
 80046ae:	1d23      	adds	r3, r4, #4
 80046b0:	77da      	strb	r2, [r3, #31]

	/* ABS */
	materialsLibrary[3].id = MATERIAL_ID_ABS;
	sprintf(materialsLibrary[3].name, "ABS");
 80046b2:	492d      	ldr	r1, [pc, #180]	@ (8004768 <MATERIAL_initMaterials+0xec>)
	materialsLibrary[3].id = MATERIAL_ID_ABS;
 80046b4:	1d63      	adds	r3, r4, #5
 80046b6:	3a34      	subs	r2, #52	@ 0x34
	sprintf(materialsLibrary[3].name, "ABS");
 80046b8:	482c      	ldr	r0, [pc, #176]	@ (800476c <MATERIAL_initMaterials+0xf0>)
	materialsLibrary[3].id = MATERIAL_ID_ABS;
 80046ba:	77da      	strb	r2, [r3, #31]
	sprintf(materialsLibrary[3].name, "ABS");
 80046bc:	f004 fef1 	bl	80094a2 <strcpy>
	materialsLibrary[3].target_temp = 65;
 80046c0:	0023      	movs	r3, r4
 80046c2:	2241      	movs	r2, #65	@ 0x41
 80046c4:	332f      	adds	r3, #47	@ 0x2f
 80046c6:	701a      	strb	r2, [r3, #0]

	/* NYLON */
	materialsLibrary[4].id = MATERIAL_ID_NYLON;
 80046c8:	0023      	movs	r3, r4
 80046ca:	3a3d      	subs	r2, #61	@ 0x3d
 80046cc:	3330      	adds	r3, #48	@ 0x30
	sprintf(materialsLibrary[4].name, "NYLON");
 80046ce:	4928      	ldr	r1, [pc, #160]	@ (8004770 <MATERIAL_initMaterials+0xf4>)
 80046d0:	4828      	ldr	r0, [pc, #160]	@ (8004774 <MATERIAL_initMaterials+0xf8>)
	materialsLibrary[4].id = MATERIAL_ID_NYLON;
 80046d2:	701a      	strb	r2, [r3, #0]
	sprintf(materialsLibrary[4].name, "NYLON");
 80046d4:	f004 fee5 	bl	80094a2 <strcpy>
	materialsLibrary[4].target_temp = 70;
 80046d8:	0023      	movs	r3, r4

	/* PC */
	materialsLibrary[5].id = MATERIAL_ID_PC;
 80046da:	2205      	movs	r2, #5
	materialsLibrary[4].target_temp = 70;
 80046dc:	333b      	adds	r3, #59	@ 0x3b
 80046de:	701d      	strb	r5, [r3, #0]
	sprintf(materialsLibrary[5].name, "PC");
 80046e0:	4925      	ldr	r1, [pc, #148]	@ (8004778 <MATERIAL_initMaterials+0xfc>)
	materialsLibrary[5].id = MATERIAL_ID_PC;
 80046e2:	19a3      	adds	r3, r4, r6
	sprintf(materialsLibrary[5].name, "PC");
 80046e4:	4825      	ldr	r0, [pc, #148]	@ (800477c <MATERIAL_initMaterials+0x100>)
	materialsLibrary[5].id = MATERIAL_ID_PC;
 80046e6:	701a      	strb	r2, [r3, #0]
	sprintf(materialsLibrary[5].name, "PC");
 80046e8:	f004 fedb 	bl	80094a2 <strcpy>
	materialsLibrary[5].target_temp = 70;
 80046ec:	0023      	movs	r3, r4
 80046ee:	3347      	adds	r3, #71	@ 0x47
 80046f0:	701d      	strb	r5, [r3, #0]

	/* PP */
	materialsLibrary[6].id = MATERIAL_ID_PP;
 80046f2:	0023      	movs	r3, r4
 80046f4:	2206      	movs	r2, #6
 80046f6:	3348      	adds	r3, #72	@ 0x48
	sprintf(materialsLibrary[6].name, "PP");
 80046f8:	4921      	ldr	r1, [pc, #132]	@ (8004780 <MATERIAL_initMaterials+0x104>)
 80046fa:	4822      	ldr	r0, [pc, #136]	@ (8004784 <MATERIAL_initMaterials+0x108>)
	materialsLibrary[6].id = MATERIAL_ID_PP;
 80046fc:	701a      	strb	r2, [r3, #0]
	sprintf(materialsLibrary[6].name, "PP");
 80046fe:	f004 fed0 	bl	80094a2 <strcpy>
	materialsLibrary[6].target_temp = 70;
 8004702:	0023      	movs	r3, r4
 8004704:	3353      	adds	r3, #83	@ 0x53
 8004706:	701d      	strb	r5, [r3, #0]

	/* ASA */
	materialsLibrary[7].id = MATERIAL_ID_ASA;
 8004708:	0023      	movs	r3, r4
 800470a:	2207      	movs	r2, #7
 800470c:	3354      	adds	r3, #84	@ 0x54
	sprintf(materialsLibrary[7].name, "ASA");
 800470e:	491e      	ldr	r1, [pc, #120]	@ (8004788 <MATERIAL_initMaterials+0x10c>)
 8004710:	481e      	ldr	r0, [pc, #120]	@ (800478c <MATERIAL_initMaterials+0x110>)
	materialsLibrary[7].id = MATERIAL_ID_ASA;
 8004712:	701a      	strb	r2, [r3, #0]
	sprintf(materialsLibrary[7].name, "ASA");
 8004714:	f004 fec5 	bl	80094a2 <strcpy>
	materialsLibrary[7].target_temp = 60;
 8004718:	0023      	movs	r3, r4
 800471a:	335f      	adds	r3, #95	@ 0x5f
 800471c:	701e      	strb	r6, [r3, #0]

	/* CUSTOM 1 */
	materialsLibrary[8].id = MATERIAL_ID_CUS_1;
 800471e:	0023      	movs	r3, r4
 8004720:	2208      	movs	r2, #8
 8004722:	3360      	adds	r3, #96	@ 0x60
	sprintf(materialsLibrary[8].name, "CUS.1");
 8004724:	491a      	ldr	r1, [pc, #104]	@ (8004790 <MATERIAL_initMaterials+0x114>)
 8004726:	481b      	ldr	r0, [pc, #108]	@ (8004794 <MATERIAL_initMaterials+0x118>)
	materialsLibrary[8].id = MATERIAL_ID_CUS_1;
 8004728:	701a      	strb	r2, [r3, #0]
	sprintf(materialsLibrary[8].name, "CUS.1");
 800472a:	f004 feba 	bl	80094a2 <strcpy>
	materialsLibrary[8].target_temp = 50;
 800472e:	0023      	movs	r3, r4
 8004730:	3d14      	subs	r5, #20
 8004732:	336b      	adds	r3, #107	@ 0x6b
 8004734:	701d      	strb	r5, [r3, #0]

	/* CUSTOM 2 */
	materialsLibrary[9].id = MATERIAL_ID_CUS_2;
 8004736:	0023      	movs	r3, r4
 8004738:	2209      	movs	r2, #9
 800473a:	336c      	adds	r3, #108	@ 0x6c
	sprintf(materialsLibrary[9].name, "CUS.2");
 800473c:	4916      	ldr	r1, [pc, #88]	@ (8004798 <MATERIAL_initMaterials+0x11c>)
	materialsLibrary[9].target_temp = 50;
 800473e:	3477      	adds	r4, #119	@ 0x77
	sprintf(materialsLibrary[9].name, "CUS.2");
 8004740:	4816      	ldr	r0, [pc, #88]	@ (800479c <MATERIAL_initMaterials+0x120>)
	materialsLibrary[9].id = MATERIAL_ID_CUS_2;
 8004742:	701a      	strb	r2, [r3, #0]
	sprintf(materialsLibrary[9].name, "CUS.2");
 8004744:	f004 fead 	bl	80094a2 <strcpy>
	materialsLibrary[9].target_temp = 50;
 8004748:	7025      	strb	r5, [r4, #0]

}
 800474a:	bd70      	pop	{r4, r5, r6, pc}
 800474c:	20000448 	.word	0x20000448
 8004750:	0800d73e 	.word	0x0800d73e
 8004754:	20000449 	.word	0x20000449
 8004758:	0800d742 	.word	0x0800d742
 800475c:	20000455 	.word	0x20000455
 8004760:	0800d747 	.word	0x0800d747
 8004764:	20000461 	.word	0x20000461
 8004768:	0800d74b 	.word	0x0800d74b
 800476c:	2000046d 	.word	0x2000046d
 8004770:	0800d74f 	.word	0x0800d74f
 8004774:	20000479 	.word	0x20000479
 8004778:	0800d755 	.word	0x0800d755
 800477c:	20000485 	.word	0x20000485
 8004780:	0800d758 	.word	0x0800d758
 8004784:	20000491 	.word	0x20000491
 8004788:	0800d75b 	.word	0x0800d75b
 800478c:	2000049d 	.word	0x2000049d
 8004790:	0800d75f 	.word	0x0800d75f
 8004794:	200004a9 	.word	0x200004a9
 8004798:	0800d765 	.word	0x0800d765
 800479c:	200004b5 	.word	0x200004b5

080047a0 <MATERIAL_getNextMaterial>:

uint8_t MATERIAL_getNextMaterial(uint8_t materialID) {
 80047a0:	b510      	push	{r4, lr}
	uint8_t currentId = materialID;
	currentId = (currentId + 1) % MATERIALS_NUMBER;
 80047a2:	210a      	movs	r1, #10
 80047a4:	3001      	adds	r0, #1
 80047a6:	f7fb fe41 	bl	800042c <__aeabi_idivmod>
	return currentId;
 80047aa:	b2c8      	uxtb	r0, r1
}
 80047ac:	bd10      	pop	{r4, pc}
	...

080047b0 <MATERIAL_setTargetTemp>:

void MATERIAL_setTargetTemp(uint8_t materialID, uint8_t set){
	materialsLibrary[materialID].target_temp = set;
 80047b0:	220c      	movs	r2, #12
 80047b2:	4342      	muls	r2, r0
 80047b4:	4b01      	ldr	r3, [pc, #4]	@ (80047bc <MATERIAL_setTargetTemp+0xc>)
 80047b6:	189b      	adds	r3, r3, r2
 80047b8:	72d9      	strb	r1, [r3, #11]
}
 80047ba:	4770      	bx	lr
 80047bc:	20000448 	.word	0x20000448

080047c0 <MATERIAL_getPrevMaterial>:

uint8_t MATERIAL_getPrevMaterial(uint8_t materialID) {
 80047c0:	b510      	push	{r4, lr}
	uint8_t currentId = materialID;
	currentId = (currentId +  MATERIALS_NUMBER - 1) % MATERIALS_NUMBER;
 80047c2:	210a      	movs	r1, #10
 80047c4:	3009      	adds	r0, #9
 80047c6:	f7fb fe31 	bl	800042c <__aeabi_idivmod>
	return currentId;
 80047ca:	b2c8      	uxtb	r0, r1
}
 80047cc:	bd10      	pop	{r4, pc}
	...

080047d0 <MATERIAL_getMaterialName>:

void MATERIAL_getMaterialName(char *str, uint8_t materialID){
	strcpy(str, materialsLibrary[materialID].name);
 80047d0:	230c      	movs	r3, #12
void MATERIAL_getMaterialName(char *str, uint8_t materialID){
 80047d2:	b510      	push	{r4, lr}
	strcpy(str, materialsLibrary[materialID].name);
 80047d4:	434b      	muls	r3, r1
 80047d6:	4902      	ldr	r1, [pc, #8]	@ (80047e0 <MATERIAL_getMaterialName+0x10>)
 80047d8:	1859      	adds	r1, r3, r1
 80047da:	f004 fe62 	bl	80094a2 <strcpy>
}
 80047de:	bd10      	pop	{r4, pc}
 80047e0:	20000449 	.word	0x20000449

080047e4 <MATERIAL_getMaterialTargetTemp>:

uint8_t MATERIAL_getMaterialTargetTemp(uint8_t materialID){
	return materialsLibrary[materialID].target_temp;
 80047e4:	220c      	movs	r2, #12
 80047e6:	4342      	muls	r2, r0
 80047e8:	4b01      	ldr	r3, [pc, #4]	@ (80047f0 <MATERIAL_getMaterialTargetTemp+0xc>)
 80047ea:	189b      	adds	r3, r3, r2
 80047ec:	7ad8      	ldrb	r0, [r3, #11]
}
 80047ee:	4770      	bx	lr
 80047f0:	20000448 	.word	0x20000448

080047f4 <setDuty>:

extern volatile uint8_t currentMenu;
extern uint32_t timerTimer;

void setDuty(uint8_t duty) {
	TIM17->CCR1 = duty;
 80047f4:	4b01      	ldr	r3, [pc, #4]	@ (80047fc <setDuty+0x8>)
 80047f6:	6358      	str	r0, [r3, #52]	@ 0x34
}
 80047f8:	4770      	bx	lr
 80047fa:	46c0      	nop			@ (mov r8, r8)
 80047fc:	40014800 	.word	0x40014800

08004800 <pid_control>:

uint8_t pid_control(float kp, float ki, float kd, float target, float real, uint16_t dutymax) {
 8004800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004802:	b0a9      	sub	sp, #164	@ 0xa4
 8004804:	1c05      	adds	r5, r0, #0
 8004806:	1c18      	adds	r0, r3, #0
 8004808:	ab2e      	add	r3, sp, #184	@ 0xb8
 800480a:	9108      	str	r1, [sp, #32]
 800480c:	cb02      	ldmia	r3!, {r1}
 800480e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8004810:	881b      	ldrh	r3, [r3, #0]
 8004812:	930c      	str	r3, [sp, #48]	@ 0x30
	static float integral = 0.0f;
	static float previous_error = 0.0f;
	const float dt = 0.5f; // interval of (500 ms)

	float error = target - real;
 8004814:	f7fc fbd8 	bl	8000fc8 <__aeabi_fsub>
	integral += error * dt;
 8004818:	21fc      	movs	r1, #252	@ 0xfc
 800481a:	0589      	lsls	r1, r1, #22
	float error = target - real;
 800481c:	9007      	str	r0, [sp, #28]
	integral += error * dt;
 800481e:	f7fc fa79 	bl	8000d14 <__aeabi_fmul>
 8004822:	4f3e      	ldr	r7, [pc, #248]	@ (800491c <pid_control+0x11c>)
 8004824:	900d      	str	r0, [sp, #52]	@ 0x34
 8004826:	6839      	ldr	r1, [r7, #0]
 8004828:	f7fb feb4 	bl	8000594 <__aeabi_fadd>
	float derivative = (error - previous_error) / dt;
 800482c:	4e3c      	ldr	r6, [pc, #240]	@ (8004920 <pid_control+0x120>)
	integral += error * dt;
 800482e:	9009      	str	r0, [sp, #36]	@ 0x24
	float derivative = (error - previous_error) / dt;
 8004830:	6831      	ldr	r1, [r6, #0]
	integral += error * dt;
 8004832:	6038      	str	r0, [r7, #0]
	float derivative = (error - previous_error) / dt;
 8004834:	9807      	ldr	r0, [sp, #28]
 8004836:	f7fc fbc7 	bl	8000fc8 <__aeabi_fsub>
 800483a:	1c01      	adds	r1, r0, #0
 800483c:	f7fb feaa 	bl	8000594 <__aeabi_fadd>
	previous_error = error;
 8004840:	9b07      	ldr	r3, [sp, #28]
	float derivative = (error - previous_error) / dt;
 8004842:	1c04      	adds	r4, r0, #0
	previous_error = error;
 8004844:	6033      	str	r3, [r6, #0]
//	}
//	if (error >= 10) {// to keep the overshoot small and have long term error reduced
//		integral = 0.0f;	// reset the integral value if the error is more than 10 deg
//	}

	float output = kp * error + ki * integral + kd * derivative;
 8004846:	1c18      	adds	r0, r3, #0
 8004848:	1c29      	adds	r1, r5, #0
 800484a:	f7fc fa63 	bl	8000d14 <__aeabi_fmul>
 800484e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004850:	1c05      	adds	r5, r0, #0
 8004852:	1c20      	adds	r0, r4, #0
 8004854:	f7fc fa5e 	bl	8000d14 <__aeabi_fmul>
 8004858:	9908      	ldr	r1, [sp, #32]
 800485a:	1c06      	adds	r6, r0, #0
 800485c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800485e:	f7fc fa59 	bl	8000d14 <__aeabi_fmul>
 8004862:	1c29      	adds	r1, r5, #0
 8004864:	f7fb fe96 	bl	8000594 <__aeabi_fadd>
 8004868:	1c31      	adds	r1, r6, #0
 800486a:	f7fb fe93 	bl	8000594 <__aeabi_fadd>
 800486e:	1c04      	adds	r4, r0, #0

	if (output > dutymax) {	// do not increment the integral term if the duty is already at max value. To prevent integral wind-up
 8004870:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8004872:	f7fc fe2d 	bl	80014d0 <__aeabi_i2f>
 8004876:	1c21      	adds	r1, r4, #0
 8004878:	900a      	str	r0, [sp, #40]	@ 0x28
 800487a:	f7fb fe2d 	bl	80004d8 <__aeabi_fcmplt>
 800487e:	2800      	cmp	r0, #0
 8004880:	d00e      	beq.n	80048a0 <pid_control+0xa0>
		integral -= error * dt;
 8004882:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004884:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004886:	f7fc fb9f 	bl	8000fc8 <__aeabi_fsub>
		output = kp * error + ki * integral + kd * derivative;
 800488a:	9908      	ldr	r1, [sp, #32]
		integral -= error * dt;
 800488c:	6038      	str	r0, [r7, #0]
		output = kp * error + ki * integral + kd * derivative;
 800488e:	f7fc fa41 	bl	8000d14 <__aeabi_fmul>
 8004892:	1c29      	adds	r1, r5, #0
 8004894:	f7fb fe7e 	bl	8000594 <__aeabi_fadd>
 8004898:	1c31      	adds	r1, r6, #0
 800489a:	f7fb fe7b 	bl	8000594 <__aeabi_fadd>
 800489e:	1c04      	adds	r4, r0, #0
	}

// convert the range of the duty obtained
	if (output < 0)
 80048a0:	2100      	movs	r1, #0
 80048a2:	1c20      	adds	r0, r4, #0
 80048a4:	f7fb fe18 	bl	80004d8 <__aeabi_fcmplt>
 80048a8:	2800      	cmp	r0, #0
 80048aa:	d134      	bne.n	8004916 <pid_control+0x116>
		output = 0;
	if (output > dutymax)
 80048ac:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80048ae:	1c21      	adds	r1, r4, #0
 80048b0:	f7fb fe12 	bl	80004d8 <__aeabi_fcmplt>
 80048b4:	2800      	cmp	r0, #0
 80048b6:	d003      	beq.n	80048c0 <pid_control+0xc0>
		output = dutymax;
 80048b8:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80048ba:	f7fc fe59 	bl	8001570 <__aeabi_ui2f>
 80048be:	1c04      	adds	r4, r0, #0

// for serial debug
	uint8_t str[100];
	sprintf(str, "kpe: %0.2f\tkie: %0.2f\tkde: %0.2f\tout: %0.2f\n", kp * error, ki * integral, kd * error, output);
 80048c0:	1c28      	adds	r0, r5, #0
 80048c2:	f7fe fe3b 	bl	800353c <__aeabi_f2d>
 80048c6:	0006      	movs	r6, r0
 80048c8:	1c20      	adds	r0, r4, #0
 80048ca:	000f      	movs	r7, r1
 80048cc:	f7fe fe36 	bl	800353c <__aeabi_f2d>
 80048d0:	9004      	str	r0, [sp, #16]
 80048d2:	9105      	str	r1, [sp, #20]
 80048d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80048d6:	9807      	ldr	r0, [sp, #28]
 80048d8:	f7fc fa1c 	bl	8000d14 <__aeabi_fmul>
 80048dc:	f7fe fe2e 	bl	800353c <__aeabi_f2d>
 80048e0:	9002      	str	r0, [sp, #8]
 80048e2:	9103      	str	r1, [sp, #12]
 80048e4:	4b0d      	ldr	r3, [pc, #52]	@ (800491c <pid_control+0x11c>)
 80048e6:	9808      	ldr	r0, [sp, #32]
 80048e8:	6819      	ldr	r1, [r3, #0]
 80048ea:	f7fc fa13 	bl	8000d14 <__aeabi_fmul>
 80048ee:	f7fe fe25 	bl	800353c <__aeabi_f2d>
 80048f2:	4d0c      	ldr	r5, [pc, #48]	@ (8004924 <pid_control+0x124>)
 80048f4:	0032      	movs	r2, r6
 80048f6:	003b      	movs	r3, r7
 80048f8:	9000      	str	r0, [sp, #0]
 80048fa:	9101      	str	r1, [sp, #4]
 80048fc:	0029      	movs	r1, r5
 80048fe:	a80f      	add	r0, sp, #60	@ 0x3c
 8004900:	f004 fcda 	bl	80092b8 <siprintf>
	printString(str);
 8004904:	a80f      	add	r0, sp, #60	@ 0x3c
 8004906:	f000 fdb9 	bl	800547c <printString>

	return (uint8_t) output;
 800490a:	1c20      	adds	r0, r4, #0
 800490c:	f7fb fe0c 	bl	8000528 <__aeabi_f2uiz>
 8004910:	b2c0      	uxtb	r0, r0
}
 8004912:	b029      	add	sp, #164	@ 0xa4
 8004914:	bdf0      	pop	{r4, r5, r6, r7, pc}
		output = 0;
 8004916:	2400      	movs	r4, #0
 8004918:	e7d2      	b.n	80048c0 <pid_control+0xc0>
 800491a:	46c0      	nop			@ (mov r8, r8)
 800491c:	200004c4 	.word	0x200004c4
 8004920:	200004c0 	.word	0x200004c0
 8004924:	0800d76b 	.word	0x0800d76b

08004928 <storeNewTemp>:

	timerTimer = HAL_GetTick();
	currentMenu = MENU_AUTOCAL_2;
}

void storeNewTemp(float temp, uint16_t *index, uint16_t *temps) {
 8004928:	b570      	push	{r4, r5, r6, lr}
	temps[*index] = (uint16_t) (temp * 100.0f);
 800492a:	880d      	ldrh	r5, [r1, #0]
void storeNewTemp(float temp, uint16_t *index, uint16_t *temps) {
 800492c:	000c      	movs	r4, r1
	temps[*index] = (uint16_t) (temp * 100.0f);
 800492e:	4906      	ldr	r1, [pc, #24]	@ (8004948 <storeNewTemp+0x20>)
void storeNewTemp(float temp, uint16_t *index, uint16_t *temps) {
 8004930:	0016      	movs	r6, r2
	temps[*index] = (uint16_t) (temp * 100.0f);
 8004932:	f7fc f9ef 	bl	8000d14 <__aeabi_fmul>
 8004936:	f7fb fdf7 	bl	8000528 <__aeabi_f2uiz>
 800493a:	006d      	lsls	r5, r5, #1
 800493c:	5370      	strh	r0, [r6, r5]
	*index += 1;
 800493e:	8823      	ldrh	r3, [r4, #0]
 8004940:	3301      	adds	r3, #1
 8004942:	8023      	strh	r3, [r4, #0]
}
 8004944:	bd70      	pop	{r4, r5, r6, pc}
 8004946:	46c0      	nop			@ (mov r8, r8)
 8004948:	42c80000 	.word	0x42c80000

0800494c <getStoredTemp>:

float getStoredTemp(uint16_t *temps, uint16_t index) {
 800494c:	b510      	push	{r4, lr}
	return ((float) temps[index]) / 100.0f;
 800494e:	0049      	lsls	r1, r1, #1
 8004950:	5a08      	ldrh	r0, [r1, r0]
 8004952:	f7fc fe0d 	bl	8001570 <__aeabi_ui2f>
 8004956:	4902      	ldr	r1, [pc, #8]	@ (8004960 <getStoredTemp+0x14>)
 8004958:	f7fc f80e 	bl	8000978 <__aeabi_fdiv>
}
 800495c:	bd10      	pop	{r4, pc}
 800495e:	46c0      	nop			@ (mov r8, r8)
 8004960:	42c80000 	.word	0x42c80000

08004964 <PIDautoCal>:
void PIDautoCal(float tempTarget, float hysteresis, uint8_t cycles, float *kp, float *ki, float *kd) { // bang-bang Ziegler-Nicloas PID auto calibration
 8004964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004966:	4cf0      	ldr	r4, [pc, #960]	@ (8004d28 <PIDautoCal+0x3c4>)
 8004968:	44a5      	add	sp, r4
 800496a:	900f      	str	r0, [sp, #60]	@ 0x3c
	printString("START PID AUTOTUNE PROCESS...\n");
 800496c:	48ef      	ldr	r0, [pc, #956]	@ (8004d2c <PIDautoCal+0x3c8>)
void PIDautoCal(float tempTarget, float hysteresis, uint8_t cycles, float *kp, float *ki, float *kd) { // bang-bang Ziegler-Nicloas PID auto calibration
 800496e:	9112      	str	r1, [sp, #72]	@ 0x48
 8004970:	9213      	str	r2, [sp, #76]	@ 0x4c
 8004972:	9314      	str	r3, [sp, #80]	@ 0x50
	printString("START PID AUTOTUNE PROCESS...\n");
 8004974:	f000 fd82 	bl	800547c <printString>
	uint32_t timer1 = HAL_GetTick(); // for 'millis()' non blocking application during the steps loop
 8004978:	f001 fa16 	bl	8005da8 <HAL_GetTick>
	uint16_t nextTempsIndex = 0;
 800497c:	221a      	movs	r2, #26
 800497e:	2300      	movs	r3, #0
 8004980:	a910      	add	r1, sp, #64	@ 0x40
 8004982:	1852      	adds	r2, r2, r1
	uint32_t timer1 = HAL_GetTick(); // for 'millis()' non blocking application during the steps loop
 8004984:	9010      	str	r0, [sp, #64]	@ 0x40
	uint16_t nextTempsIndex = 0;
 8004986:	8013      	strh	r3, [r2, #0]
	uint8_t turnedOn = 0;
 8004988:	9306      	str	r3, [sp, #24]
	uint8_t cycleNumber = 0;
 800498a:	9308      	str	r3, [sp, #32]
		float Treal = getTemperature();
 800498c:	f7ff f8f6 	bl	8003b7c <getTemperature>
		HAL_GPIO_WritePin(LED_HEATING_GPIO_Port, LED_HEATING_Pin, turnedOn);
 8004990:	2102      	movs	r1, #2
 8004992:	9a06      	ldr	r2, [sp, #24]
		float Treal = getTemperature();
 8004994:	1c05      	adds	r5, r0, #0
		HAL_GPIO_WritePin(LED_HEATING_GPIO_Port, LED_HEATING_Pin, turnedOn);
 8004996:	48e6      	ldr	r0, [pc, #920]	@ (8004d30 <PIDautoCal+0x3cc>)
 8004998:	f001 ff86 	bl	80068a8 <HAL_GPIO_WritePin>
		if (Treal < tempTarget - hysteresis && !turnedOn) {	// turn on the heater
 800499c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800499e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80049a0:	f7fc fb12 	bl	8000fc8 <__aeabi_fsub>
 80049a4:	1c29      	adds	r1, r5, #0
 80049a6:	f7fb fdab 	bl	8000500 <__aeabi_fcmpgt>
 80049aa:	2800      	cmp	r0, #0
 80049ac:	d013      	beq.n	80049d6 <PIDautoCal+0x72>
 80049ae:	9b06      	ldr	r3, [sp, #24]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d110      	bne.n	80049d6 <PIDautoCal+0x72>
	TIM17->CCR1 = duty;
 80049b4:	22ff      	movs	r2, #255	@ 0xff
 80049b6:	4bdf      	ldr	r3, [pc, #892]	@ (8004d34 <PIDautoCal+0x3d0>)
			sprintf(str, "New cycle began, cycle number %d\n", cycleNumber);
 80049b8:	49df      	ldr	r1, [pc, #892]	@ (8004d38 <PIDautoCal+0x3d4>)
	TIM17->CCR1 = duty;
 80049ba:	635a      	str	r2, [r3, #52]	@ 0x34
			cycleNumber++;	// start next cycle
 80049bc:	9b08      	ldr	r3, [sp, #32]
			sprintf(str, "New cycle began, cycle number %d\n", cycleNumber);
 80049be:	a82b      	add	r0, sp, #172	@ 0xac
			cycleNumber++;	// start next cycle
 80049c0:	3301      	adds	r3, #1
 80049c2:	b2db      	uxtb	r3, r3
			sprintf(str, "New cycle began, cycle number %d\n", cycleNumber);
 80049c4:	001a      	movs	r2, r3
			cycleNumber++;	// start next cycle
 80049c6:	9308      	str	r3, [sp, #32]
			sprintf(str, "New cycle began, cycle number %d\n", cycleNumber);
 80049c8:	f004 fc76 	bl	80092b8 <siprintf>
			printString(str);
 80049cc:	a82b      	add	r0, sp, #172	@ 0xac
 80049ce:	f000 fd55 	bl	800547c <printString>
			turnedOn = 1;
 80049d2:	2301      	movs	r3, #1
 80049d4:	9306      	str	r3, [sp, #24]
		if (Treal > tempTarget + hysteresis && turnedOn) {	// turn off the heater
 80049d6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80049d8:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80049da:	f7fb fddb 	bl	8000594 <__aeabi_fadd>
 80049de:	1c29      	adds	r1, r5, #0
 80049e0:	f7fb fd7a 	bl	80004d8 <__aeabi_fcmplt>
 80049e4:	2800      	cmp	r0, #0
 80049e6:	d007      	beq.n	80049f8 <PIDautoCal+0x94>
 80049e8:	9b06      	ldr	r3, [sp, #24]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d002      	beq.n	80049f4 <PIDautoCal+0x90>
	TIM17->CCR1 = duty;
 80049ee:	2200      	movs	r2, #0
 80049f0:	4bd0      	ldr	r3, [pc, #832]	@ (8004d34 <PIDautoCal+0x3d0>)
 80049f2:	635a      	str	r2, [r3, #52]	@ 0x34
			turnedOn = 1;
 80049f4:	2300      	movs	r3, #0
 80049f6:	9306      	str	r3, [sp, #24]
		if (HAL_GetTick() - timer1 >= READINGS_PERIOD) { // repeat what's inside every 2 second
 80049f8:	f001 f9d6 	bl	8005da8 <HAL_GetTick>
 80049fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80049fe:	1ac0      	subs	r0, r0, r3
 8004a00:	23fa      	movs	r3, #250	@ 0xfa
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	4298      	cmp	r0, r3
 8004a06:	d36b      	bcc.n	8004ae0 <PIDautoCal+0x17c>
			storeNewTemp(Treal, &nextTempsIndex, temps);
 8004a08:	241a      	movs	r4, #26
			timer1 = HAL_GetTick();
 8004a0a:	f001 f9cd 	bl	8005da8 <HAL_GetTick>
			storeNewTemp(Treal, &nextTempsIndex, temps);
 8004a0e:	ab10      	add	r3, sp, #64	@ 0x40
 8004a10:	18e4      	adds	r4, r4, r3
 8004a12:	aa38      	add	r2, sp, #224	@ 0xe0
 8004a14:	0021      	movs	r1, r4
			timer1 = HAL_GetTick();
 8004a16:	9010      	str	r0, [sp, #64]	@ 0x40
			storeNewTemp(Treal, &nextTempsIndex, temps);
 8004a18:	1c28      	adds	r0, r5, #0
 8004a1a:	f7ff ff85 	bl	8004928 <storeNewTemp>
			sprintf(str, "Ttarget= %f\tTreal= %f\n", tempTarget, getStoredTemp(temps, nextTempsIndex - 1));
 8004a1e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8004a20:	f7fe fd8c 	bl	800353c <__aeabi_f2d>
 8004a24:	8823      	ldrh	r3, [r4, #0]
 8004a26:	0006      	movs	r6, r0
 8004a28:	930d      	str	r3, [sp, #52]	@ 0x34
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	930a      	str	r3, [sp, #40]	@ 0x28
 8004a2e:	466b      	mov	r3, sp
 8004a30:	8d1c      	ldrh	r4, [r3, #40]	@ 0x28
 8004a32:	000f      	movs	r7, r1
 8004a34:	a838      	add	r0, sp, #224	@ 0xe0
 8004a36:	0021      	movs	r1, r4
 8004a38:	f7ff ff88 	bl	800494c <getStoredTemp>
 8004a3c:	f7fe fd7e 	bl	800353c <__aeabi_f2d>
 8004a40:	4dbe      	ldr	r5, [pc, #760]	@ (8004d3c <PIDautoCal+0x3d8>)
 8004a42:	0032      	movs	r2, r6
 8004a44:	003b      	movs	r3, r7
 8004a46:	9000      	str	r0, [sp, #0]
 8004a48:	9101      	str	r1, [sp, #4]
 8004a4a:	0029      	movs	r1, r5
 8004a4c:	a82b      	add	r0, sp, #172	@ 0xac
 8004a4e:	f004 fc33 	bl	80092b8 <siprintf>
			printString(str);
 8004a52:	a82b      	add	r0, sp, #172	@ 0xac
 8004a54:	f000 fd12 	bl	800547c <printString>
			ssd1306_Fill(Black);
 8004a58:	2000      	movs	r0, #0
 8004a5a:	f7fe fe7d 	bl	8003758 <ssd1306_Fill>
			sprintf(str, "Ts: %0.0f", tempTarget);
 8004a5e:	003b      	movs	r3, r7
 8004a60:	0032      	movs	r2, r6
 8004a62:	49b7      	ldr	r1, [pc, #732]	@ (8004d40 <PIDautoCal+0x3dc>)
 8004a64:	a82b      	add	r0, sp, #172	@ 0xac
 8004a66:	f004 fc27 	bl	80092b8 <siprintf>
			DISPLAY_PrintStrMedium(str, 0, 0);
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	a82b      	add	r0, sp, #172	@ 0xac
 8004a6e:	0011      	movs	r1, r2
 8004a70:	f7ff fbd2 	bl	8004218 <DISPLAY_PrintStrMedium>
			sprintf(str, "Tr %0.2f", getStoredTemp(temps, nextTempsIndex - 1));
 8004a74:	0021      	movs	r1, r4
 8004a76:	a838      	add	r0, sp, #224	@ 0xe0
 8004a78:	f7ff ff68 	bl	800494c <getStoredTemp>
 8004a7c:	f7fe fd5e 	bl	800353c <__aeabi_f2d>
 8004a80:	000b      	movs	r3, r1
 8004a82:	0002      	movs	r2, r0
 8004a84:	49af      	ldr	r1, [pc, #700]	@ (8004d44 <PIDautoCal+0x3e0>)
 8004a86:	a82b      	add	r0, sp, #172	@ 0xac
 8004a88:	f004 fc16 	bl	80092b8 <siprintf>
			DISPLAY_PrintStrMedium(str, 0, 11);
 8004a8c:	220b      	movs	r2, #11
 8004a8e:	2100      	movs	r1, #0
 8004a90:	a82b      	add	r0, sp, #172	@ 0xac
 8004a92:	f7ff fbc1 	bl	8004218 <DISPLAY_PrintStrMedium>
			sprintf(str, "Cy: %d/%d", cycleNumber, cycles);
 8004a96:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004a98:	49ab      	ldr	r1, [pc, #684]	@ (8004d48 <PIDautoCal+0x3e4>)
 8004a9a:	9a08      	ldr	r2, [sp, #32]
 8004a9c:	a82b      	add	r0, sp, #172	@ 0xac
 8004a9e:	f004 fc0b 	bl	80092b8 <siprintf>
			DISPLAY_PrintStrMedium(str, 0, 22);
 8004aa2:	2216      	movs	r2, #22
 8004aa4:	2100      	movs	r1, #0
 8004aa6:	a82b      	add	r0, sp, #172	@ 0xac
 8004aa8:	f7ff fbb6 	bl	8004218 <DISPLAY_PrintStrMedium>
			ssd1306_Line(59, 30, 127, 30, White);	// x axis
 8004aac:	2501      	movs	r5, #1
 8004aae:	231e      	movs	r3, #30
 8004ab0:	227f      	movs	r2, #127	@ 0x7f
 8004ab2:	0019      	movs	r1, r3
 8004ab4:	203b      	movs	r0, #59	@ 0x3b
 8004ab6:	9500      	str	r5, [sp, #0]
 8004ab8:	f7fe fef6 	bl	80038a8 <ssd1306_Line>
			ssd1306_Line(60, 0, 60, 32, White);	// y axis
 8004abc:	223c      	movs	r2, #60	@ 0x3c
 8004abe:	2320      	movs	r3, #32
 8004ac0:	2100      	movs	r1, #0
 8004ac2:	0010      	movs	r0, r2
 8004ac4:	9500      	str	r5, [sp, #0]
 8004ac6:	f7fe feef 	bl	80038a8 <ssd1306_Line>
			if (nextTempsIndex - 1 >= 67)
 8004aca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004acc:	2b43      	cmp	r3, #67	@ 0x43
 8004ace:	d900      	bls.n	8004ad2 <PIDautoCal+0x16e>
 8004ad0:	e17a      	b.n	8004dc8 <PIDautoCal+0x464>
				limit = nextTempsIndex - 1;
 8004ad2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004ad4:	930e      	str	r3, [sp, #56]	@ 0x38
			if (limit >= 2) {
 8004ad6:	42ab      	cmp	r3, r5
 8004ad8:	dd00      	ble.n	8004adc <PIDautoCal+0x178>
 8004ada:	e177      	b.n	8004dcc <PIDautoCal+0x468>
			ssd1306_UpdateScreen();
 8004adc:	f7fe fe4a 	bl	8003774 <ssd1306_UpdateScreen>
		HAL_GPIO_TogglePin(LED_ALIVE_GPIO_Port, LED_ALIVE_Pin);
 8004ae0:	2110      	movs	r1, #16
 8004ae2:	489a      	ldr	r0, [pc, #616]	@ (8004d4c <PIDautoCal+0x3e8>)
 8004ae4:	f001 fee6 	bl	80068b4 <HAL_GPIO_TogglePin>
		if (cycleNumber >= cycles + 1) {	// the first step is finished
 8004ae8:	9b08      	ldr	r3, [sp, #32]
 8004aea:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d800      	bhi.n	8004af2 <PIDautoCal+0x18e>
 8004af0:	e74c      	b.n	800498c <PIDautoCal+0x28>
	TIM17->CCR1 = duty;
 8004af2:	2600      	movs	r6, #0
 8004af4:	4b8f      	ldr	r3, [pc, #572]	@ (8004d34 <PIDautoCal+0x3d0>)
	for (int i = MAX_MIN_FINDER_WINDOW; i < nextTempsIndex - 1 - MAX_MIN_FINDER_WINDOW; i++) {
 8004af6:	2414      	movs	r4, #20
	TIM17->CCR1 = duty;
 8004af8:	635e      	str	r6, [r3, #52]	@ 0x34
	sprintf(str, "Measurements made %d\n", nextTempsIndex - 1);
 8004afa:	231a      	movs	r3, #26
 8004afc:	aa10      	add	r2, sp, #64	@ 0x40
 8004afe:	189b      	adds	r3, r3, r2
 8004b00:	881f      	ldrh	r7, [r3, #0]
 8004b02:	4993      	ldr	r1, [pc, #588]	@ (8004d50 <PIDautoCal+0x3ec>)
 8004b04:	1e7a      	subs	r2, r7, #1
 8004b06:	a82b      	add	r0, sp, #172	@ 0xac
 8004b08:	f004 fbd6 	bl	80092b8 <siprintf>
	printString(str);
 8004b0c:	a82b      	add	r0, sp, #172	@ 0xac
 8004b0e:	f000 fcb5 	bl	800547c <printString>
	for (int i = MAX_MIN_FINDER_WINDOW; i < nextTempsIndex - 1 - MAX_MIN_FINDER_WINDOW; i++) {
 8004b12:	ad42      	add	r5, sp, #264	@ 0x108
	uint16_t nextMinsIndex = 0;
 8004b14:	9606      	str	r6, [sp, #24]
	uint16_t nextMaxsIndex = 0;
 8004b16:	9608      	str	r6, [sp, #32]
	for (int i = MAX_MIN_FINDER_WINDOW; i < nextTempsIndex - 1 - MAX_MIN_FINDER_WINDOW; i++) {
 8004b18:	003b      	movs	r3, r7
 8004b1a:	3b15      	subs	r3, #21
 8004b1c:	42a3      	cmp	r3, r4
 8004b1e:	dd00      	ble.n	8004b22 <PIDautoCal+0x1be>
 8004b20:	e1c1      	b.n	8004ea6 <PIDautoCal+0x542>
	for (int i = INITIAL_OSCILLATION_TO_SKIP; i < nextMaxsIndex - 1; i++) {	// -1 for the first skipped, -1 for the correct number (nextMinsIndex are one more)
 8004b22:	2501      	movs	r5, #1
	float avgMax = 0.0f;
 8004b24:	2400      	movs	r4, #0
	printString("Calcualting min and max values\n");
 8004b26:	488b      	ldr	r0, [pc, #556]	@ (8004d54 <PIDautoCal+0x3f0>)
 8004b28:	f000 fca8 	bl	800547c <printString>
	for (int i = INITIAL_OSCILLATION_TO_SKIP; i < nextMaxsIndex - 1; i++) {	// -1 for the first skipped, -1 for the correct number (nextMinsIndex are one more)
 8004b2c:	9b08      	ldr	r3, [sp, #32]
		avgMax += getStoredTemp(temps, maxsIndex[i]);
 8004b2e:	af17      	add	r7, sp, #92	@ 0x5c
	for (int i = INITIAL_OSCILLATION_TO_SKIP; i < nextMaxsIndex - 1; i++) {	// -1 for the first skipped, -1 for the correct number (nextMinsIndex are one more)
 8004b30:	1e5e      	subs	r6, r3, #1
 8004b32:	42ae      	cmp	r6, r5
 8004b34:	dd00      	ble.n	8004b38 <PIDautoCal+0x1d4>
 8004b36:	e1d7      	b.n	8004ee8 <PIDautoCal+0x584>
	for (int i = INITIAL_OSCILLATION_TO_SKIP; i < nextMinsIndex - 1; i++) {	// -1 for the first skipped, -1 for the correct number (nextMinsIndex are one more)
 8004b38:	2601      	movs	r6, #1
	float avgMin = 0.0f;
 8004b3a:	2500      	movs	r5, #0
	for (int i = INITIAL_OSCILLATION_TO_SKIP; i < nextMinsIndex - 1; i++) {	// -1 for the first skipped, -1 for the correct number (nextMinsIndex are one more)
 8004b3c:	9b06      	ldr	r3, [sp, #24]
		avgMin += getStoredTemp(temps, minsIndex[i]);
 8004b3e:	af21      	add	r7, sp, #132	@ 0x84
	for (int i = INITIAL_OSCILLATION_TO_SKIP; i < nextMinsIndex - 1; i++) {	// -1 for the first skipped, -1 for the correct number (nextMinsIndex are one more)
 8004b40:	3b01      	subs	r3, #1
 8004b42:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004b46:	42b3      	cmp	r3, r6
 8004b48:	dd00      	ble.n	8004b4c <PIDautoCal+0x1e8>
 8004b4a:	e1d9      	b.n	8004f00 <PIDautoCal+0x59c>
	avgMax /= nextMaxsIndex - 1 - INITIAL_OSCILLATION_TO_SKIP;
 8004b4c:	9f08      	ldr	r7, [sp, #32]
 8004b4e:	3f02      	subs	r7, #2
 8004b50:	0038      	movs	r0, r7
 8004b52:	f7fc fcbd 	bl	80014d0 <__aeabi_i2f>
 8004b56:	1c01      	adds	r1, r0, #0
 8004b58:	1c06      	adds	r6, r0, #0
 8004b5a:	1c20      	adds	r0, r4, #0
 8004b5c:	f7fb ff0c 	bl	8000978 <__aeabi_fdiv>
 8004b60:	1c04      	adds	r4, r0, #0
	avgMin /= nextMinsIndex - 1 - INITIAL_OSCILLATION_TO_SKIP;
 8004b62:	9806      	ldr	r0, [sp, #24]
 8004b64:	3802      	subs	r0, #2
 8004b66:	f7fc fcb3 	bl	80014d0 <__aeabi_i2f>
 8004b6a:	1c01      	adds	r1, r0, #0
 8004b6c:	1c28      	adds	r0, r5, #0
 8004b6e:	f7fb ff03 	bl	8000978 <__aeabi_fdiv>
 8004b72:	1c05      	adds	r5, r0, #0
	sprintf(str, "Average max is %0.2f, average min is %0.2f\n", avgMax, avgMin);
 8004b74:	1c20      	adds	r0, r4, #0
 8004b76:	f7fe fce1 	bl	800353c <__aeabi_f2d>
 8004b7a:	9008      	str	r0, [sp, #32]
 8004b7c:	9109      	str	r1, [sp, #36]	@ 0x24
 8004b7e:	1c28      	adds	r0, r5, #0
 8004b80:	f7fe fcdc 	bl	800353c <__aeabi_f2d>
 8004b84:	900a      	str	r0, [sp, #40]	@ 0x28
 8004b86:	910b      	str	r1, [sp, #44]	@ 0x2c
 8004b88:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004b8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004b8c:	4972      	ldr	r1, [pc, #456]	@ (8004d58 <PIDautoCal+0x3f4>)
 8004b8e:	9200      	str	r2, [sp, #0]
 8004b90:	9301      	str	r3, [sp, #4]
 8004b92:	9a08      	ldr	r2, [sp, #32]
 8004b94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b96:	a82b      	add	r0, sp, #172	@ 0xac
 8004b98:	f004 fb8e 	bl	80092b8 <siprintf>
	printString(str);
 8004b9c:	a82b      	add	r0, sp, #172	@ 0xac
 8004b9e:	f000 fc6d 	bl	800547c <printString>
	printString("Start the parameter calculation, last step\n");
 8004ba2:	486e      	ldr	r0, [pc, #440]	@ (8004d5c <PIDautoCal+0x3f8>)
 8004ba4:	f000 fc6a 	bl	800547c <printString>
	float A = (avgMax - avgMin) / 2.0f;
 8004ba8:	1c29      	adds	r1, r5, #0
 8004baa:	1c20      	adds	r0, r4, #0
 8004bac:	f7fc fa0c 	bl	8000fc8 <__aeabi_fsub>
 8004bb0:	21fc      	movs	r1, #252	@ 0xfc
 8004bb2:	0589      	lsls	r1, r1, #22
 8004bb4:	f7fc f8ae 	bl	8000d14 <__aeabi_fmul>
	ku = (4 * D) / (3.14159265359 * A);
 8004bb8:	f7fe fcc0 	bl	800353c <__aeabi_f2d>
 8004bbc:	4a68      	ldr	r2, [pc, #416]	@ (8004d60 <PIDautoCal+0x3fc>)
 8004bbe:	4b69      	ldr	r3, [pc, #420]	@ (8004d64 <PIDautoCal+0x400>)
 8004bc0:	9006      	str	r0, [sp, #24]
 8004bc2:	9107      	str	r1, [sp, #28]
 8004bc4:	f7fd fd1a 	bl	80025fc <__aeabi_dmul>
 8004bc8:	0002      	movs	r2, r0
 8004bca:	000b      	movs	r3, r1
 8004bcc:	2000      	movs	r0, #0
 8004bce:	4966      	ldr	r1, [pc, #408]	@ (8004d68 <PIDautoCal+0x404>)
 8004bd0:	f7fd f8da 	bl	8001d88 <__aeabi_ddiv>
 8004bd4:	f7fe fcfa 	bl	80035cc <__aeabi_d2f>
	for (int i = INITIAL_OSCILLATION_TO_SKIP; i < nextMaxsIndex - 1 - INITIAL_OSCILLATION_TO_SKIP; i++) {    // skip some peak
 8004bd8:	2501      	movs	r5, #1
	float Pu = 0.0f;
 8004bda:	2400      	movs	r4, #0
	ku = (4 * D) / (3.14159265359 * A);
 8004bdc:	900d      	str	r0, [sp, #52]	@ 0x34
	for (int i = INITIAL_OSCILLATION_TO_SKIP; i < nextMaxsIndex - 1 - INITIAL_OSCILLATION_TO_SKIP; i++) {    // skip some peak
 8004bde:	42af      	cmp	r7, r5
 8004be0:	dd00      	ble.n	8004be4 <PIDautoCal+0x280>
 8004be2:	e199      	b.n	8004f18 <PIDautoCal+0x5b4>
	Pu = Pu / (nextMaxsIndex - 1 - INITIAL_OSCILLATION_TO_SKIP);  // -1 for the first skipped, -1 for the correct number (nextMinsIndex are one more)
 8004be4:	1c31      	adds	r1, r6, #0
 8004be6:	1c20      	adds	r0, r4, #0
 8004be8:	f7fb fec6 	bl	8000978 <__aeabi_fdiv>
 8004bec:	900e      	str	r0, [sp, #56]	@ 0x38
	sprintf(str, "Ku is %f, Pu is %f, D is %f, A is %f\n", ku, Pu, D, A);
 8004bee:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004bf0:	f7fe fca4 	bl	800353c <__aeabi_f2d>
 8004bf4:	0006      	movs	r6, r0
 8004bf6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8004bf8:	000f      	movs	r7, r1
 8004bfa:	f7fe fc9f 	bl	800353c <__aeabi_f2d>
 8004bfe:	9a06      	ldr	r2, [sp, #24]
 8004c00:	9b07      	ldr	r3, [sp, #28]
 8004c02:	0004      	movs	r4, r0
 8004c04:	000d      	movs	r5, r1
 8004c06:	9204      	str	r2, [sp, #16]
 8004c08:	9305      	str	r3, [sp, #20]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	4b57      	ldr	r3, [pc, #348]	@ (8004d6c <PIDautoCal+0x408>)
 8004c0e:	9400      	str	r4, [sp, #0]
 8004c10:	9501      	str	r5, [sp, #4]
 8004c12:	9202      	str	r2, [sp, #8]
 8004c14:	9303      	str	r3, [sp, #12]
 8004c16:	4956      	ldr	r1, [pc, #344]	@ (8004d70 <PIDautoCal+0x40c>)
 8004c18:	0032      	movs	r2, r6
 8004c1a:	003b      	movs	r3, r7
 8004c1c:	a82b      	add	r0, sp, #172	@ 0xac
 8004c1e:	f004 fb4b 	bl	80092b8 <siprintf>
	printString(str);
 8004c22:	a82b      	add	r0, sp, #172	@ 0xac
 8004c24:	f000 fc2a 	bl	800547c <printString>
	ssd1306_Fill(Black);
 8004c28:	2000      	movs	r0, #0
 8004c2a:	f7fe fd95 	bl	8003758 <ssd1306_Fill>
	sprintf(str, "Average max: %0.2f", avgMax);
 8004c2e:	9a08      	ldr	r2, [sp, #32]
 8004c30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c32:	4950      	ldr	r1, [pc, #320]	@ (8004d74 <PIDautoCal+0x410>)
 8004c34:	a82b      	add	r0, sp, #172	@ 0xac
 8004c36:	f004 fb3f 	bl	80092b8 <siprintf>
	DISPLAY_PrintStrMedium(str, 0, 0);
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	a82b      	add	r0, sp, #172	@ 0xac
 8004c3e:	0011      	movs	r1, r2
 8004c40:	f7ff faea 	bl	8004218 <DISPLAY_PrintStrMedium>
	sprintf(str, "Average min: %0.2f", avgMin);
 8004c44:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004c46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004c48:	494b      	ldr	r1, [pc, #300]	@ (8004d78 <PIDautoCal+0x414>)
 8004c4a:	a82b      	add	r0, sp, #172	@ 0xac
 8004c4c:	f004 fb34 	bl	80092b8 <siprintf>
	DISPLAY_PrintStrMedium(str, 0, 11);
 8004c50:	a82b      	add	r0, sp, #172	@ 0xac
 8004c52:	220b      	movs	r2, #11
 8004c54:	2100      	movs	r1, #0
 8004c56:	f7ff fadf 	bl	8004218 <DISPLAY_PrintStrMedium>
	sprintf(str, "Oscil. period: %0.2f", Pu);
 8004c5a:	002b      	movs	r3, r5
 8004c5c:	0022      	movs	r2, r4
 8004c5e:	4947      	ldr	r1, [pc, #284]	@ (8004d7c <PIDautoCal+0x418>)
 8004c60:	a82b      	add	r0, sp, #172	@ 0xac
 8004c62:	f004 fb29 	bl	80092b8 <siprintf>
	DISPLAY_PrintStrMedium(str, 0, 22);
 8004c66:	2216      	movs	r2, #22
 8004c68:	2100      	movs	r1, #0
 8004c6a:	a82b      	add	r0, sp, #172	@ 0xac
 8004c6c:	f7ff fad4 	bl	8004218 <DISPLAY_PrintStrMedium>
	ssd1306_UpdateScreen();
 8004c70:	f7fe fd80 	bl	8003774 <ssd1306_UpdateScreen>
	HAL_Delay(3000);
 8004c74:	4842      	ldr	r0, [pc, #264]	@ (8004d80 <PIDautoCal+0x41c>)
 8004c76:	f001 f89d 	bl	8005db4 <HAL_Delay>
	ssd1306_Fill(Black);
 8004c7a:	2000      	movs	r0, #0
 8004c7c:	f7fe fd6c 	bl	8003758 <ssd1306_Fill>
	sprintf(str, "Ku: %0.2f", ku);
 8004c80:	003b      	movs	r3, r7
 8004c82:	0032      	movs	r2, r6
 8004c84:	493f      	ldr	r1, [pc, #252]	@ (8004d84 <PIDautoCal+0x420>)
 8004c86:	a82b      	add	r0, sp, #172	@ 0xac
 8004c88:	f004 fb16 	bl	80092b8 <siprintf>
	DISPLAY_PrintStrMedium(str, 0, 0);
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	a82b      	add	r0, sp, #172	@ 0xac
 8004c90:	0011      	movs	r1, r2
 8004c92:	f7ff fac1 	bl	8004218 <DISPLAY_PrintStrMedium>
	sprintf(str, "D: 1.0f");
 8004c96:	493c      	ldr	r1, [pc, #240]	@ (8004d88 <PIDautoCal+0x424>)
 8004c98:	a82b      	add	r0, sp, #172	@ 0xac
 8004c9a:	f004 fc02 	bl	80094a2 <strcpy>
	DISPLAY_PrintStrMedium(str, 0, 11);
 8004c9e:	a82b      	add	r0, sp, #172	@ 0xac
 8004ca0:	220b      	movs	r2, #11
 8004ca2:	2100      	movs	r1, #0
 8004ca4:	f7ff fab8 	bl	8004218 <DISPLAY_PrintStrMedium>
	sprintf(str, "A: %0.2f", A);
 8004ca8:	9a06      	ldr	r2, [sp, #24]
 8004caa:	9b07      	ldr	r3, [sp, #28]
 8004cac:	4937      	ldr	r1, [pc, #220]	@ (8004d8c <PIDautoCal+0x428>)
 8004cae:	a82b      	add	r0, sp, #172	@ 0xac
 8004cb0:	f004 fb02 	bl	80092b8 <siprintf>
	DISPLAY_PrintStrMedium(str, 0, 22);
 8004cb4:	2216      	movs	r2, #22
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	a82b      	add	r0, sp, #172	@ 0xac
 8004cba:	f7ff faad 	bl	8004218 <DISPLAY_PrintStrMedium>
	ssd1306_UpdateScreen();
 8004cbe:	f7fe fd59 	bl	8003774 <ssd1306_UpdateScreen>
	HAL_Delay(3000);
 8004cc2:	482f      	ldr	r0, [pc, #188]	@ (8004d80 <PIDautoCal+0x41c>)
 8004cc4:	f001 f876 	bl	8005db4 <HAL_Delay>
	*kp = 0.45f * ku;
 8004cc8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004cca:	4931      	ldr	r1, [pc, #196]	@ (8004d90 <PIDautoCal+0x42c>)
 8004ccc:	f7fc f822 	bl	8000d14 <__aeabi_fmul>
	*ki = (1.5f * *kp) / (Pu / 8);	// modified the period / 8 to have an high ki term (otherwise an offset don't go away)
 8004cd0:	21ff      	movs	r1, #255	@ 0xff
	*kp = 0.45f * ku;
 8004cd2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
	*ki = (1.5f * *kp) / (Pu / 8);	// modified the period / 8 to have an high ki term (otherwise an offset don't go away)
 8004cd4:	0589      	lsls	r1, r1, #22
	*kp = 0.45f * ku;
 8004cd6:	6018      	str	r0, [r3, #0]
	*ki = (1.5f * *kp) / (Pu / 8);	// modified the period / 8 to have an high ki term (otherwise an offset don't go away)
 8004cd8:	f7fc f81c 	bl	8000d14 <__aeabi_fmul>
 8004cdc:	21f8      	movs	r1, #248	@ 0xf8
 8004cde:	1c04      	adds	r4, r0, #0
 8004ce0:	0589      	lsls	r1, r1, #22
 8004ce2:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8004ce4:	f7fc f816 	bl	8000d14 <__aeabi_fmul>
 8004ce8:	1c01      	adds	r1, r0, #0
 8004cea:	1c20      	adds	r0, r4, #0
 8004cec:	f7fb fe44 	bl	8000978 <__aeabi_fdiv>
 8004cf0:	4b28      	ldr	r3, [pc, #160]	@ (8004d94 <PIDautoCal+0x430>)
 8004cf2:	aa10      	add	r2, sp, #64	@ 0x40
 8004cf4:	189b      	adds	r3, r3, r2
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6018      	str	r0, [r3, #0]
	*kd = 0;
 8004cfa:	4b27      	ldr	r3, [pc, #156]	@ (8004d98 <PIDautoCal+0x434>)
 8004cfc:	189b      	adds	r3, r3, r2
 8004cfe:	2200      	movs	r2, #0
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	601a      	str	r2, [r3, #0]
	sprintf(str, "Kp is %f, Ki is %f, Kd is %f,\n", *kp, *ki, *kd);
 8004d04:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004d06:	6818      	ldr	r0, [r3, #0]
 8004d08:	f7fe fc18 	bl	800353c <__aeabi_f2d>
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	2300      	movs	r3, #0
 8004d10:	9202      	str	r2, [sp, #8]
 8004d12:	9303      	str	r3, [sp, #12]
 8004d14:	4b1f      	ldr	r3, [pc, #124]	@ (8004d94 <PIDautoCal+0x430>)
 8004d16:	aa10      	add	r2, sp, #64	@ 0x40
 8004d18:	189b      	adds	r3, r3, r2
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	0004      	movs	r4, r0
 8004d1e:	6818      	ldr	r0, [r3, #0]
 8004d20:	000d      	movs	r5, r1
 8004d22:	f7fe fc0b 	bl	800353c <__aeabi_f2d>
 8004d26:	e039      	b.n	8004d9c <PIDautoCal+0x438>
 8004d28:	ffffef7c 	.word	0xffffef7c
 8004d2c:	0800d798 	.word	0x0800d798
 8004d30:	50000c00 	.word	0x50000c00
 8004d34:	40014800 	.word	0x40014800
 8004d38:	0800d7b7 	.word	0x0800d7b7
 8004d3c:	0800d7d9 	.word	0x0800d7d9
 8004d40:	0800d7f0 	.word	0x0800d7f0
 8004d44:	0800d7fa 	.word	0x0800d7fa
 8004d48:	0800d803 	.word	0x0800d803
 8004d4c:	50000400 	.word	0x50000400
 8004d50:	0800d80d 	.word	0x0800d80d
 8004d54:	0800d889 	.word	0x0800d889
 8004d58:	0800d8a9 	.word	0x0800d8a9
 8004d5c:	0800d8d5 	.word	0x0800d8d5
 8004d60:	54442eea 	.word	0x54442eea
 8004d64:	400921fb 	.word	0x400921fb
 8004d68:	407fe000 	.word	0x407fe000
 8004d6c:	405fe000 	.word	0x405fe000
 8004d70:	0800d901 	.word	0x0800d901
 8004d74:	0800d927 	.word	0x0800d927
 8004d78:	0800d93a 	.word	0x0800d93a
 8004d7c:	0800d94d 	.word	0x0800d94d
 8004d80:	00000bb8 	.word	0x00000bb8
 8004d84:	0800d962 	.word	0x0800d962
 8004d88:	0800d96c 	.word	0x0800d96c
 8004d8c:	0800d974 	.word	0x0800d974
 8004d90:	3ee66666 	.word	0x3ee66666
 8004d94:	00001058 	.word	0x00001058
 8004d98:	0000105c 	.word	0x0000105c
 8004d9c:	4e82      	ldr	r6, [pc, #520]	@ (8004fa8 <PIDautoCal+0x644>)
 8004d9e:	0022      	movs	r2, r4
 8004da0:	002b      	movs	r3, r5
 8004da2:	9000      	str	r0, [sp, #0]
 8004da4:	9101      	str	r1, [sp, #4]
 8004da6:	0031      	movs	r1, r6
 8004da8:	a82b      	add	r0, sp, #172	@ 0xac
 8004daa:	f004 fa85 	bl	80092b8 <siprintf>
	printString(str);
 8004dae:	a82b      	add	r0, sp, #172	@ 0xac
 8004db0:	f000 fb64 	bl	800547c <printString>
	timerTimer = HAL_GetTick();
 8004db4:	f000 fff8 	bl	8005da8 <HAL_GetTick>
	currentMenu = MENU_AUTOCAL_2;
 8004db8:	2207      	movs	r2, #7
	timerTimer = HAL_GetTick();
 8004dba:	4b7c      	ldr	r3, [pc, #496]	@ (8004fac <PIDautoCal+0x648>)
 8004dbc:	6018      	str	r0, [r3, #0]
	currentMenu = MENU_AUTOCAL_2;
 8004dbe:	4b7c      	ldr	r3, [pc, #496]	@ (8004fb0 <PIDautoCal+0x64c>)
 8004dc0:	701a      	strb	r2, [r3, #0]
}
 8004dc2:	4b7c      	ldr	r3, [pc, #496]	@ (8004fb4 <PIDautoCal+0x650>)
 8004dc4:	449d      	add	sp, r3
 8004dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				limit = 67;
 8004dc8:	2343      	movs	r3, #67	@ 0x43
 8004dca:	930e      	str	r3, [sp, #56]	@ 0x38
			float absMax = 0;
 8004dcc:	2600      	movs	r6, #0
 8004dce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004dd0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004dd2:	1a9f      	subs	r7, r3, r2
			float absMin = 20000.0f;
 8004dd4:	4b78      	ldr	r3, [pc, #480]	@ (8004fb8 <PIDautoCal+0x654>)
 8004dd6:	b2bf      	uxth	r7, r7
 8004dd8:	930a      	str	r3, [sp, #40]	@ 0x28
					if (getStoredTemp(temps, nextTempsIndex - x) > absMax)
 8004dda:	0021      	movs	r1, r4
 8004ddc:	a838      	add	r0, sp, #224	@ 0xe0
 8004dde:	f7ff fdb5 	bl	800494c <getStoredTemp>
 8004de2:	1c31      	adds	r1, r6, #0
 8004de4:	1c05      	adds	r5, r0, #0
 8004de6:	f7fb fb8b 	bl	8000500 <__aeabi_fcmpgt>
 8004dea:	2800      	cmp	r0, #0
 8004dec:	d000      	beq.n	8004df0 <PIDautoCal+0x48c>
						absMax = getStoredTemp(temps, nextTempsIndex - x);
 8004dee:	1c2e      	adds	r6, r5, #0
					if (getStoredTemp(temps, nextTempsIndex - x) < absMin)
 8004df0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004df2:	1c28      	adds	r0, r5, #0
 8004df4:	f7fb fb70 	bl	80004d8 <__aeabi_fcmplt>
 8004df8:	2800      	cmp	r0, #0
 8004dfa:	d000      	beq.n	8004dfe <PIDautoCal+0x49a>
						absMin = getStoredTemp(temps, nextTempsIndex - x);
 8004dfc:	950a      	str	r5, [sp, #40]	@ 0x28
				for (int x = 1; x < limit; x++) {
 8004dfe:	3c01      	subs	r4, #1
 8004e00:	b2a4      	uxth	r4, r4
 8004e02:	42bc      	cmp	r4, r7
 8004e04:	d1e9      	bne.n	8004dda <PIDautoCal+0x476>
				float scale = 30.0f / (2.0f + absMax - absMin);	// the scale vary according to the max and min value to display +2 for some margin
 8004e06:	2180      	movs	r1, #128	@ 0x80
 8004e08:	1c30      	adds	r0, r6, #0
 8004e0a:	05c9      	lsls	r1, r1, #23
 8004e0c:	f7fb fbc2 	bl	8000594 <__aeabi_fadd>
 8004e10:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004e12:	f7fc f8d9 	bl	8000fc8 <__aeabi_fsub>
 8004e16:	1c01      	adds	r1, r0, #0
 8004e18:	4868      	ldr	r0, [pc, #416]	@ (8004fbc <PIDautoCal+0x658>)
 8004e1a:	f7fb fdad 	bl	8000978 <__aeabi_fdiv>
				for (int x = 2; x < limit; x++) {	// take the last 50 value of temp
 8004e1e:	2402      	movs	r4, #2
				float scale = 30.0f / (2.0f + absMax - absMin);	// the scale vary according to the max and min value to display +2 for some margin
 8004e20:	9011      	str	r0, [sp, #68]	@ 0x44
				printString(str);
 8004e22:	a82b      	add	r0, sp, #172	@ 0xac
 8004e24:	f000 fb2a 	bl	800547c <printString>
				for (int x = 2; x < limit; x++) {	// take the last 50 value of temp
 8004e28:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8004e2a:	3e03      	subs	r6, #3
 8004e2c:	b2b6      	uxth	r6, r6
 8004e2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004e30:	429c      	cmp	r4, r3
 8004e32:	d100      	bne.n	8004e36 <PIDautoCal+0x4d2>
 8004e34:	e652      	b.n	8004adc <PIDautoCal+0x178>
					uint8_t yPrev = (uint8_t) (30.0f - ((getStoredTemp(temps, nextTempsIndex - x - 1) - absMin) * scale));
 8004e36:	0031      	movs	r1, r6
 8004e38:	a838      	add	r0, sp, #224	@ 0xe0
 8004e3a:	f7ff fd87 	bl	800494c <getStoredTemp>
 8004e3e:	1c71      	adds	r1, r6, #1
 8004e40:	900d      	str	r0, [sp, #52]	@ 0x34
					uint8_t yNow = (uint8_t) (30.0f - ((getStoredTemp(temps, nextTempsIndex - x) - absMin) * scale));
 8004e42:	b289      	uxth	r1, r1
 8004e44:	a838      	add	r0, sp, #224	@ 0xe0
 8004e46:	f7ff fd81 	bl	800494c <getStoredTemp>
 8004e4a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004e4c:	f7fc f8bc 	bl	8000fc8 <__aeabi_fsub>
 8004e50:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8004e52:	f7fb ff5f 	bl	8000d14 <__aeabi_fmul>
 8004e56:	1c01      	adds	r1, r0, #0
 8004e58:	4858      	ldr	r0, [pc, #352]	@ (8004fbc <PIDautoCal+0x658>)
 8004e5a:	f7fc f8b5 	bl	8000fc8 <__aeabi_fsub>
 8004e5e:	f7fb fb63 	bl	8000528 <__aeabi_f2uiz>
					ssd1306_Line(128 - x - 1, yPrev, 128 - x, yNow, White);
 8004e62:	b2c3      	uxtb	r3, r0
 8004e64:	9315      	str	r3, [sp, #84]	@ 0x54
 8004e66:	2380      	movs	r3, #128	@ 0x80
					uint8_t yPrev = (uint8_t) (30.0f - ((getStoredTemp(temps, nextTempsIndex - x - 1) - absMin) * scale));
 8004e68:	990a      	ldr	r1, [sp, #40]	@ 0x28
					ssd1306_Line(128 - x - 1, yPrev, 128 - x, yNow, White);
 8004e6a:	425b      	negs	r3, r3
 8004e6c:	b2e7      	uxtb	r7, r4
					uint8_t yPrev = (uint8_t) (30.0f - ((getStoredTemp(temps, nextTempsIndex - x - 1) - absMin) * scale));
 8004e6e:	980d      	ldr	r0, [sp, #52]	@ 0x34
					ssd1306_Line(128 - x - 1, yPrev, 128 - x, yNow, White);
 8004e70:	1bdd      	subs	r5, r3, r7
					uint8_t yPrev = (uint8_t) (30.0f - ((getStoredTemp(temps, nextTempsIndex - x - 1) - absMin) * scale));
 8004e72:	f7fc f8a9 	bl	8000fc8 <__aeabi_fsub>
 8004e76:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8004e78:	f7fb ff4c 	bl	8000d14 <__aeabi_fmul>
 8004e7c:	1c01      	adds	r1, r0, #0
 8004e7e:	484f      	ldr	r0, [pc, #316]	@ (8004fbc <PIDautoCal+0x658>)
 8004e80:	f7fc f8a2 	bl	8000fc8 <__aeabi_fsub>
 8004e84:	f7fb fb50 	bl	8000528 <__aeabi_f2uiz>
					ssd1306_Line(128 - x - 1, yPrev, 128 - x, yNow, White);
 8004e88:	b2c1      	uxtb	r1, r0
 8004e8a:	207f      	movs	r0, #127	@ 0x7f
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	b2ed      	uxtb	r5, r5
 8004e90:	1bc0      	subs	r0, r0, r7
 8004e92:	9300      	str	r3, [sp, #0]
 8004e94:	002a      	movs	r2, r5
 8004e96:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004e98:	b2c0      	uxtb	r0, r0
 8004e9a:	3e01      	subs	r6, #1
 8004e9c:	f7fe fd04 	bl	80038a8 <ssd1306_Line>
				for (int x = 2; x < limit; x++) {	// take the last 50 value of temp
 8004ea0:	3401      	adds	r4, #1
 8004ea2:	b2b6      	uxth	r6, r6
 8004ea4:	e7c3      	b.n	8004e2e <PIDautoCal+0x4ca>
		for (int j = 1; j <= MAX_MIN_FINDER_WINDOW; j++) {
 8004ea6:	2101      	movs	r1, #1
			if (temps[i] <= temps[i - j]) {
 8004ea8:	882a      	ldrh	r2, [r5, #0]
 8004eaa:	004b      	lsls	r3, r1, #1
 8004eac:	425b      	negs	r3, r3
 8004eae:	5ae8      	ldrh	r0, [r5, r3]
 8004eb0:	4290      	cmp	r0, r2
 8004eb2:	d217      	bcs.n	8004ee4 <PIDautoCal+0x580>
			if (temps[i] < temps[i + j]) {
 8004eb4:	425b      	negs	r3, r3
 8004eb6:	5aeb      	ldrh	r3, [r5, r3]
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d813      	bhi.n	8004ee4 <PIDautoCal+0x580>
		for (int j = 1; j <= MAX_MIN_FINDER_WINDOW; j++) {
 8004ebc:	3101      	adds	r1, #1
 8004ebe:	2915      	cmp	r1, #21
 8004ec0:	d1f3      	bne.n	8004eaa <PIDautoCal+0x546>
		uint16_t isMax = 1;
 8004ec2:	2601      	movs	r6, #1
		for (int j = 1; j <= MAX_MIN_FINDER_WINDOW; j++) {
 8004ec4:	2101      	movs	r1, #1
			if (temps[i] >= temps[i - j]) {
 8004ec6:	004b      	lsls	r3, r1, #1
 8004ec8:	425b      	negs	r3, r3
 8004eca:	5ae8      	ldrh	r0, [r5, r3]
 8004ecc:	4290      	cmp	r0, r2
 8004ece:	d932      	bls.n	8004f36 <PIDautoCal+0x5d2>
			if (temps[i] > temps[i + j]) {
 8004ed0:	425b      	negs	r3, r3
 8004ed2:	5aeb      	ldrh	r3, [r5, r3]
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d32e      	bcc.n	8004f36 <PIDautoCal+0x5d2>
		for (int j = 1; j <= MAX_MIN_FINDER_WINDOW; j++) {
 8004ed8:	3101      	adds	r1, #1
 8004eda:	2915      	cmp	r1, #21
 8004edc:	d1f3      	bne.n	8004ec6 <PIDautoCal+0x562>
		if (isMax) {
 8004ede:	2e00      	cmp	r6, #0
 8004ee0:	d046      	beq.n	8004f70 <PIDautoCal+0x60c>
 8004ee2:	e02b      	b.n	8004f3c <PIDautoCal+0x5d8>
				isMax = 0;
 8004ee4:	2600      	movs	r6, #0
 8004ee6:	e7ed      	b.n	8004ec4 <PIDautoCal+0x560>
		avgMax += getStoredTemp(temps, maxsIndex[i]);
 8004ee8:	006b      	lsls	r3, r5, #1
 8004eea:	5bd9      	ldrh	r1, [r3, r7]
 8004eec:	a838      	add	r0, sp, #224	@ 0xe0
 8004eee:	f7ff fd2d 	bl	800494c <getStoredTemp>
 8004ef2:	1c01      	adds	r1, r0, #0
 8004ef4:	1c20      	adds	r0, r4, #0
 8004ef6:	f7fb fb4d 	bl	8000594 <__aeabi_fadd>
	for (int i = INITIAL_OSCILLATION_TO_SKIP; i < nextMaxsIndex - 1; i++) {	// -1 for the first skipped, -1 for the correct number (nextMinsIndex are one more)
 8004efa:	3501      	adds	r5, #1
		avgMax += getStoredTemp(temps, maxsIndex[i]);
 8004efc:	1c04      	adds	r4, r0, #0
	for (int i = INITIAL_OSCILLATION_TO_SKIP; i < nextMaxsIndex - 1; i++) {	// -1 for the first skipped, -1 for the correct number (nextMinsIndex are one more)
 8004efe:	e618      	b.n	8004b32 <PIDautoCal+0x1ce>
		avgMin += getStoredTemp(temps, minsIndex[i]);
 8004f00:	0073      	lsls	r3, r6, #1
 8004f02:	5bd9      	ldrh	r1, [r3, r7]
 8004f04:	a838      	add	r0, sp, #224	@ 0xe0
 8004f06:	f7ff fd21 	bl	800494c <getStoredTemp>
 8004f0a:	1c01      	adds	r1, r0, #0
 8004f0c:	1c28      	adds	r0, r5, #0
 8004f0e:	f7fb fb41 	bl	8000594 <__aeabi_fadd>
	for (int i = INITIAL_OSCILLATION_TO_SKIP; i < nextMinsIndex - 1; i++) {	// -1 for the first skipped, -1 for the correct number (nextMinsIndex are one more)
 8004f12:	3601      	adds	r6, #1
		avgMin += getStoredTemp(temps, minsIndex[i]);
 8004f14:	1c05      	adds	r5, r0, #0
	for (int i = INITIAL_OSCILLATION_TO_SKIP; i < nextMinsIndex - 1; i++) {	// -1 for the first skipped, -1 for the correct number (nextMinsIndex are one more)
 8004f16:	e615      	b.n	8004b44 <PIDautoCal+0x1e0>
		Pu += maxsIndex[i] * READINGS_PERIOD / 1000; // * second between each reading
 8004f18:	211c      	movs	r1, #28
 8004f1a:	aa10      	add	r2, sp, #64	@ 0x40
 8004f1c:	006b      	lsls	r3, r5, #1
 8004f1e:	1852      	adds	r2, r2, r1
 8004f20:	5ad0      	ldrh	r0, [r2, r3]
	for (int i = INITIAL_OSCILLATION_TO_SKIP; i < nextMaxsIndex - 1 - INITIAL_OSCILLATION_TO_SKIP; i++) {    // skip some peak
 8004f22:	3501      	adds	r5, #1
		Pu += maxsIndex[i] * READINGS_PERIOD / 1000; // * second between each reading
 8004f24:	0040      	lsls	r0, r0, #1
 8004f26:	f7fc fad3 	bl	80014d0 <__aeabi_i2f>
 8004f2a:	1c01      	adds	r1, r0, #0
 8004f2c:	1c20      	adds	r0, r4, #0
 8004f2e:	f7fb fb31 	bl	8000594 <__aeabi_fadd>
 8004f32:	1c04      	adds	r4, r0, #0
	for (int i = INITIAL_OSCILLATION_TO_SKIP; i < nextMaxsIndex - 1 - INITIAL_OSCILLATION_TO_SKIP; i++) {    // skip some peak
 8004f34:	e653      	b.n	8004bde <PIDautoCal+0x27a>
		if (isMax) {
 8004f36:	2e00      	cmp	r6, #0
 8004f38:	d033      	beq.n	8004fa2 <PIDautoCal+0x63e>
 8004f3a:	2600      	movs	r6, #0
			maxsIndex[nextMaxsIndex] = i;
 8004f3c:	9b08      	ldr	r3, [sp, #32]
 8004f3e:	b2a1      	uxth	r1, r4
 8004f40:	005a      	lsls	r2, r3, #1
			sprintf(str, "Max found at time %d seconds, with value %0.2f°C\n", i, getStoredTemp(temps, i));
 8004f42:	a838      	add	r0, sp, #224	@ 0xe0
			maxsIndex[nextMaxsIndex] = i;
 8004f44:	ab17      	add	r3, sp, #92	@ 0x5c
 8004f46:	52d1      	strh	r1, [r2, r3]
			sprintf(str, "Max found at time %d seconds, with value %0.2f°C\n", i, getStoredTemp(temps, i));
 8004f48:	f7ff fd00 	bl	800494c <getStoredTemp>
 8004f4c:	f7fe faf6 	bl	800353c <__aeabi_f2d>
 8004f50:	0022      	movs	r2, r4
 8004f52:	9000      	str	r0, [sp, #0]
 8004f54:	9101      	str	r1, [sp, #4]
 8004f56:	491a      	ldr	r1, [pc, #104]	@ (8004fc0 <PIDautoCal+0x65c>)
 8004f58:	a82b      	add	r0, sp, #172	@ 0xac
 8004f5a:	f004 f9ad 	bl	80092b8 <siprintf>
			printString(str);
 8004f5e:	a82b      	add	r0, sp, #172	@ 0xac
 8004f60:	f000 fa8c 	bl	800547c <printString>
			nextMaxsIndex++;
 8004f64:	9b08      	ldr	r3, [sp, #32]
 8004f66:	3301      	adds	r3, #1
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	9308      	str	r3, [sp, #32]
		if (isMin) {
 8004f6c:	2e00      	cmp	r6, #0
 8004f6e:	d018      	beq.n	8004fa2 <PIDautoCal+0x63e>
			minsIndex[nextMinsIndex] = i;
 8004f70:	9b06      	ldr	r3, [sp, #24]
 8004f72:	b2a1      	uxth	r1, r4
 8004f74:	005a      	lsls	r2, r3, #1
			sprintf(str, "Min found at time %d seconds, with value %0.2f°C\n", i, getStoredTemp(temps, i));
 8004f76:	a838      	add	r0, sp, #224	@ 0xe0
			minsIndex[nextMinsIndex] = i;
 8004f78:	ab21      	add	r3, sp, #132	@ 0x84
 8004f7a:	52d1      	strh	r1, [r2, r3]
			sprintf(str, "Min found at time %d seconds, with value %0.2f°C\n", i, getStoredTemp(temps, i));
 8004f7c:	f7ff fce6 	bl	800494c <getStoredTemp>
 8004f80:	f7fe fadc 	bl	800353c <__aeabi_f2d>
 8004f84:	4e0f      	ldr	r6, [pc, #60]	@ (8004fc4 <PIDautoCal+0x660>)
 8004f86:	9000      	str	r0, [sp, #0]
 8004f88:	9101      	str	r1, [sp, #4]
 8004f8a:	0022      	movs	r2, r4
 8004f8c:	0031      	movs	r1, r6
 8004f8e:	a82b      	add	r0, sp, #172	@ 0xac
 8004f90:	f004 f992 	bl	80092b8 <siprintf>
			printString(str);
 8004f94:	a82b      	add	r0, sp, #172	@ 0xac
 8004f96:	f000 fa71 	bl	800547c <printString>
			nextMinsIndex++;
 8004f9a:	9b06      	ldr	r3, [sp, #24]
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	9306      	str	r3, [sp, #24]
	for (int i = MAX_MIN_FINDER_WINDOW; i < nextTempsIndex - 1 - MAX_MIN_FINDER_WINDOW; i++) {
 8004fa2:	3401      	adds	r4, #1
 8004fa4:	3502      	adds	r5, #2
 8004fa6:	e5b7      	b.n	8004b18 <PIDautoCal+0x1b4>
 8004fa8:	0800d97d 	.word	0x0800d97d
 8004fac:	20000024 	.word	0x20000024
 8004fb0:	20000587 	.word	0x20000587
 8004fb4:	00001084 	.word	0x00001084
 8004fb8:	469c4000 	.word	0x469c4000
 8004fbc:	41f00000 	.word	0x41f00000
 8004fc0:	0800d823 	.word	0x0800d823
 8004fc4:	0800d856 	.word	0x0800d856

08004fc8 <floatToBytes>:
	}
	*kd = bytesToFloat(data);

}

void floatToBytes(float value, uint8_t *array) {
 8004fc8:	b507      	push	{r0, r1, r2, lr}
	memcpy(array, &value, sizeof(float));
 8004fca:	2204      	movs	r2, #4
void floatToBytes(float value, uint8_t *array) {
 8004fcc:	9001      	str	r0, [sp, #4]
 8004fce:	0008      	movs	r0, r1
	memcpy(array, &value, sizeof(float));
 8004fd0:	a901      	add	r1, sp, #4
 8004fd2:	f004 fa79 	bl	80094c8 <memcpy>
}
 8004fd6:	bd07      	pop	{r0, r1, r2, pc}

08004fd8 <bytesToFloat>:

float bytesToFloat(const uint8_t *array) {
 8004fd8:	b507      	push	{r0, r1, r2, lr}
 8004fda:	0001      	movs	r1, r0
	float value;
	memcpy(&value, array, sizeof(float));
 8004fdc:	2204      	movs	r2, #4
 8004fde:	a801      	add	r0, sp, #4
 8004fe0:	f004 fa72 	bl	80094c8 <memcpy>
	return value;
 8004fe4:	9801      	ldr	r0, [sp, #4]
}
 8004fe6:	bd0e      	pop	{r1, r2, r3, pc}

08004fe8 <read_byte_eeprom>:

uint8_t read_byte_eeprom(uint8_t address) {
	uint8_t data;
	HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 8004fe8:	23fa      	movs	r3, #250	@ 0xfa
uint8_t read_byte_eeprom(uint8_t address) {
 8004fea:	b530      	push	{r4, r5, lr}
	HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 8004fec:	009b      	lsls	r3, r3, #2
uint8_t read_byte_eeprom(uint8_t address) {
 8004fee:	b087      	sub	sp, #28
	HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 8004ff0:	2517      	movs	r5, #23
 8004ff2:	9302      	str	r3, [sp, #8]
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	4c06      	ldr	r4, [pc, #24]	@ (8005010 <read_byte_eeprom+0x28>)
 8004ff8:	446d      	add	r5, sp
uint8_t read_byte_eeprom(uint8_t address) {
 8004ffa:	0002      	movs	r2, r0
	HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 8004ffc:	21a0      	movs	r1, #160	@ 0xa0
 8004ffe:	0020      	movs	r0, r4
 8005000:	9301      	str	r3, [sp, #4]
 8005002:	9500      	str	r5, [sp, #0]
 8005004:	f001 fedc 	bl	8006dc0 <HAL_I2C_Mem_Read>
	return data;
 8005008:	7828      	ldrb	r0, [r5, #0]
}
 800500a:	b007      	add	sp, #28
 800500c:	bd30      	pop	{r4, r5, pc}
 800500e:	46c0      	nop			@ (mov r8, r8)
 8005010:	2000052c 	.word	0x2000052c

08005014 <loadSettingsFromEeprom>:
void loadSettingsFromEeprom(float *kp, float *ki, float *kd) {
 8005014:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005016:	0007      	movs	r7, r0
 8005018:	000e      	movs	r6, r1
 800501a:	0015      	movs	r5, r2
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < sizeof(float); i++) {
 800501c:	2400      	movs	r4, #0
		data[i] = read_byte_eeprom(i);
 800501e:	b2e0      	uxtb	r0, r4
 8005020:	f7ff ffe2 	bl	8004fe8 <read_byte_eeprom>
 8005024:	466b      	mov	r3, sp
 8005026:	3304      	adds	r3, #4
 8005028:	5518      	strb	r0, [r3, r4]
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < sizeof(float); i++) {
 800502a:	3401      	adds	r4, #1
 800502c:	2c04      	cmp	r4, #4
 800502e:	d1f6      	bne.n	800501e <loadSettingsFromEeprom+0xa>
	*kp = bytesToFloat(data);
 8005030:	0018      	movs	r0, r3
 8005032:	f7ff ffd1 	bl	8004fd8 <bytesToFloat>
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < sizeof(float); i++) {
 8005036:	2400      	movs	r4, #0
	*kp = bytesToFloat(data);
 8005038:	6038      	str	r0, [r7, #0]
		data[i] = read_byte_eeprom(i + sizeof(float));
 800503a:	1d20      	adds	r0, r4, #4
 800503c:	b2c0      	uxtb	r0, r0
 800503e:	f7ff ffd3 	bl	8004fe8 <read_byte_eeprom>
 8005042:	466b      	mov	r3, sp
 8005044:	3304      	adds	r3, #4
 8005046:	5518      	strb	r0, [r3, r4]
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < sizeof(float); i++) {
 8005048:	3401      	adds	r4, #1
 800504a:	2c04      	cmp	r4, #4
 800504c:	d1f5      	bne.n	800503a <loadSettingsFromEeprom+0x26>
	*ki = bytesToFloat(data);
 800504e:	0018      	movs	r0, r3
 8005050:	f7ff ffc2 	bl	8004fd8 <bytesToFloat>
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < sizeof(float); i++) {
 8005054:	2400      	movs	r4, #0
	*ki = bytesToFloat(data);
 8005056:	6030      	str	r0, [r6, #0]
		data[i] = read_byte_eeprom(i + (2 * sizeof(float)));
 8005058:	0020      	movs	r0, r4
 800505a:	3008      	adds	r0, #8
 800505c:	b2c0      	uxtb	r0, r0
 800505e:	f7ff ffc3 	bl	8004fe8 <read_byte_eeprom>
 8005062:	466b      	mov	r3, sp
 8005064:	3304      	adds	r3, #4
 8005066:	5518      	strb	r0, [r3, r4]
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < sizeof(float); i++) {
 8005068:	3401      	adds	r4, #1
 800506a:	2c04      	cmp	r4, #4
 800506c:	d1f4      	bne.n	8005058 <loadSettingsFromEeprom+0x44>
	*kd = bytesToFloat(data);
 800506e:	0018      	movs	r0, r3
 8005070:	f7ff ffb2 	bl	8004fd8 <bytesToFloat>
 8005074:	6028      	str	r0, [r5, #0]
}
 8005076:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08005078 <write_byte_eeprom>:

void write_byte_eeprom(uint8_t address, uint8_t value) {
 8005078:	0002      	movs	r2, r0
	uint8_t data = value;
	HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 800507a:	23fa      	movs	r3, #250	@ 0xfa
	uint8_t data = value;
 800507c:	2017      	movs	r0, #23
void write_byte_eeprom(uint8_t address, uint8_t value) {
 800507e:	b510      	push	{r4, lr}
 8005080:	b086      	sub	sp, #24
	uint8_t data = value;
 8005082:	4468      	add	r0, sp
	HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 8005084:	009b      	lsls	r3, r3, #2
	uint8_t data = value;
 8005086:	7001      	strb	r1, [r0, #0]
	HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 8005088:	9302      	str	r3, [sp, #8]
 800508a:	2301      	movs	r3, #1
 800508c:	4c05      	ldr	r4, [pc, #20]	@ (80050a4 <write_byte_eeprom+0x2c>)
 800508e:	21a0      	movs	r1, #160	@ 0xa0
 8005090:	9301      	str	r3, [sp, #4]
 8005092:	9000      	str	r0, [sp, #0]
 8005094:	0020      	movs	r0, r4
 8005096:	f001 fdb9 	bl	8006c0c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 800509a:	200a      	movs	r0, #10
 800509c:	f000 fe8a 	bl	8005db4 <HAL_Delay>
}
 80050a0:	b006      	add	sp, #24
 80050a2:	bd10      	pop	{r4, pc}
 80050a4:	2000052c 	.word	0x2000052c

080050a8 <storeSettingsToEeprom>:
void storeSettingsToEeprom(float kp, float ki, float kd) {
 80050a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80050aa:	1c0e      	adds	r6, r1, #0
	floatToBytes(kp, data);
 80050ac:	a901      	add	r1, sp, #4
void storeSettingsToEeprom(float kp, float ki, float kd) {
 80050ae:	1c15      	adds	r5, r2, #0
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < sizeof(float); i++) {
 80050b0:	2400      	movs	r4, #0
	floatToBytes(kp, data);
 80050b2:	f7ff ff89 	bl	8004fc8 <floatToBytes>
		write_byte_eeprom(i, data[i]);
 80050b6:	466b      	mov	r3, sp
 80050b8:	3304      	adds	r3, #4
 80050ba:	5d19      	ldrb	r1, [r3, r4]
 80050bc:	b2e0      	uxtb	r0, r4
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < sizeof(float); i++) {
 80050be:	3401      	adds	r4, #1
		write_byte_eeprom(i, data[i]);
 80050c0:	f7ff ffda 	bl	8005078 <write_byte_eeprom>
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < sizeof(float); i++) {
 80050c4:	2c04      	cmp	r4, #4
 80050c6:	d1f6      	bne.n	80050b6 <storeSettingsToEeprom+0xe>
	floatToBytes(ki, data);
 80050c8:	a901      	add	r1, sp, #4
 80050ca:	1c30      	adds	r0, r6, #0
 80050cc:	f7ff ff7c 	bl	8004fc8 <floatToBytes>
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < sizeof(float); i++) {
 80050d0:	2400      	movs	r4, #0
		write_byte_eeprom(i + sizeof(float), data[i]);
 80050d2:	466b      	mov	r3, sp
 80050d4:	1d20      	adds	r0, r4, #4
 80050d6:	3304      	adds	r3, #4
 80050d8:	5d19      	ldrb	r1, [r3, r4]
 80050da:	b2c0      	uxtb	r0, r0
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < sizeof(float); i++) {
 80050dc:	3401      	adds	r4, #1
		write_byte_eeprom(i + sizeof(float), data[i]);
 80050de:	f7ff ffcb 	bl	8005078 <write_byte_eeprom>
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < sizeof(float); i++) {
 80050e2:	2c04      	cmp	r4, #4
 80050e4:	d1f5      	bne.n	80050d2 <storeSettingsToEeprom+0x2a>
	floatToBytes(kd, data);
 80050e6:	a901      	add	r1, sp, #4
 80050e8:	1c28      	adds	r0, r5, #0
 80050ea:	f7ff ff6d 	bl	8004fc8 <floatToBytes>
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < sizeof(float); i++) {
 80050ee:	2400      	movs	r4, #0
		write_byte_eeprom(i + (2 * sizeof(float)), data[i]);
 80050f0:	0020      	movs	r0, r4
 80050f2:	466b      	mov	r3, sp
 80050f4:	3008      	adds	r0, #8
 80050f6:	3304      	adds	r3, #4
 80050f8:	5d19      	ldrb	r1, [r3, r4]
 80050fa:	b2c0      	uxtb	r0, r0
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < sizeof(float); i++) {
 80050fc:	3401      	adds	r4, #1
		write_byte_eeprom(i + (2 * sizeof(float)), data[i]);
 80050fe:	f7ff ffbb 	bl	8005078 <write_byte_eeprom>
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < sizeof(float); i++) {
 8005102:	2c04      	cmp	r4, #4
 8005104:	d1f4      	bne.n	80050f0 <storeSettingsToEeprom+0x48>
}
 8005106:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08005108 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8005108:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800510a:	220c      	movs	r2, #12
 800510c:	2100      	movs	r1, #0
 800510e:	a801      	add	r0, sp, #4
 8005110:	f004 f940 	bl	8009394 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8005114:	4c19      	ldr	r4, [pc, #100]	@ (800517c <MX_ADC1_Init+0x74>)
 8005116:	4b1a      	ldr	r3, [pc, #104]	@ (8005180 <MX_ADC1_Init+0x78>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005118:	2204      	movs	r2, #4
  hadc1.Instance = ADC1;
 800511a:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800511c:	2380      	movs	r3, #128	@ 0x80
 800511e:	05db      	lsls	r3, r3, #23
 8005120:	6063      	str	r3, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005122:	2300      	movs	r3, #0
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005124:	6162      	str	r2, [r4, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 1;
 8005126:	3a03      	subs	r2, #3
 8005128:	61e2      	str	r2, [r4, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800512a:	18a2      	adds	r2, r4, r2
 800512c:	77d3      	strb	r3, [r2, #31]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800512e:	0022      	movs	r2, r4
 8005130:	322c      	adds	r2, #44	@ 0x2c
 8005132:	7013      	strb	r3, [r2, #0]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8005134:	2207      	movs	r2, #7
 8005136:	6362      	str	r2, [r4, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8005138:	63a2      	str	r2, [r4, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800513a:	0022      	movs	r2, r4
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800513c:	0020      	movs	r0, r4
  hadc1.Init.OversamplingMode = DISABLE;
 800513e:	323c      	adds	r2, #60	@ 0x3c
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005140:	60a3      	str	r3, [r4, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005142:	60e3      	str	r3, [r4, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005144:	6123      	str	r3, [r4, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8005146:	8323      	strh	r3, [r4, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005148:	76a3      	strb	r3, [r4, #26]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800514a:	6263      	str	r3, [r4, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800514c:	62a3      	str	r3, [r4, #40]	@ 0x28
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800514e:	6323      	str	r3, [r4, #48]	@ 0x30
  hadc1.Init.OversamplingMode = DISABLE;
 8005150:	7013      	strb	r3, [r2, #0]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8005152:	64e3      	str	r3, [r4, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005154:	f000 fe44 	bl	8005de0 <HAL_ADC_Init>
 8005158:	2800      	cmp	r0, #0
 800515a:	d001      	beq.n	8005160 <MX_ADC1_Init+0x58>
  {
    Error_Handler();
 800515c:	f000 fb64 	bl	8005828 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005160:	4b08      	ldr	r3, [pc, #32]	@ (8005184 <MX_ADC1_Init+0x7c>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005162:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 8005164:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005166:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005168:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800516a:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800516c:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800516e:	f000 ffaf 	bl	80060d0 <HAL_ADC_ConfigChannel>
 8005172:	2800      	cmp	r0, #0
 8005174:	d001      	beq.n	800517a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8005176:	f000 fb57 	bl	8005828 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800517a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 800517c:	200004c8 	.word	0x200004c8
 8005180:	40012400 	.word	0x40012400
 8005184:	04000002 	.word	0x04000002

08005188 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8005188:	b510      	push	{r4, lr}
 800518a:	0004      	movs	r4, r0
 800518c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800518e:	2214      	movs	r2, #20
 8005190:	2100      	movs	r1, #0
 8005192:	a803      	add	r0, sp, #12
 8005194:	f004 f8fe 	bl	8009394 <memset>
  if(adcHandle->Instance==ADC1)
 8005198:	4b10      	ldr	r3, [pc, #64]	@ (80051dc <HAL_ADC_MspInit+0x54>)
 800519a:	6822      	ldr	r2, [r4, #0]
 800519c:	429a      	cmp	r2, r3
 800519e:	d11a      	bne.n	80051d6 <HAL_ADC_MspInit+0x4e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80051a0:	2180      	movs	r1, #128	@ 0x80
 80051a2:	4b0f      	ldr	r3, [pc, #60]	@ (80051e0 <HAL_ADC_MspInit+0x58>)
 80051a4:	0349      	lsls	r1, r1, #13
 80051a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = NTC_ADC1_IN1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(NTC_ADC1_IN1_GPIO_Port, &GPIO_InitStruct);
 80051a8:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_ADC_CLK_ENABLE();
 80051aa:	430a      	orrs	r2, r1
 80051ac:	641a      	str	r2, [r3, #64]	@ 0x40
 80051ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_GPIO_Init(NTC_ADC1_IN1_GPIO_Port, &GPIO_InitStruct);
 80051b0:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_ADC_CLK_ENABLE();
 80051b2:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051b4:	2101      	movs	r1, #1
    __HAL_RCC_ADC_CLK_ENABLE();
 80051b6:	9201      	str	r2, [sp, #4]
 80051b8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051bc:	430a      	orrs	r2, r1
 80051be:	635a      	str	r2, [r3, #52]	@ 0x34
 80051c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051c2:	400b      	ands	r3, r1
 80051c4:	9302      	str	r3, [sp, #8]
 80051c6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = NTC_ADC1_IN1_Pin;
 80051c8:	2302      	movs	r3, #2
 80051ca:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80051cc:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(NTC_ADC1_IN1_GPIO_Port, &GPIO_InitStruct);
 80051ce:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80051d0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(NTC_ADC1_IN1_GPIO_Port, &GPIO_InitStruct);
 80051d2:	f001 fab7 	bl	8006744 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80051d6:	b008      	add	sp, #32
 80051d8:	bd10      	pop	{r4, pc}
 80051da:	46c0      	nop			@ (mov r8, r8)
 80051dc:	40012400 	.word	0x40012400
 80051e0:	40021000 	.word	0x40021000

080051e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80051e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051e6:	b08b      	sub	sp, #44	@ 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051e8:	2214      	movs	r2, #20
 80051ea:	2100      	movs	r1, #0
 80051ec:	a805      	add	r0, sp, #20
 80051ee:	f004 f8d1 	bl	8009394 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80051f2:	2104      	movs	r1, #4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80051f4:	2501      	movs	r5, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80051f6:	4b29      	ldr	r3, [pc, #164]	@ (800529c <MX_GPIO_Init+0xb8>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_HEATING_Pin|LED_LIGHT_Pin, GPIO_PIN_RESET);
 80051f8:	4f29      	ldr	r7, [pc, #164]	@ (80052a0 <MX_GPIO_Init+0xbc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80051fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ALIVE_GPIO_Port, LED_ALIVE_Pin, GPIO_PIN_RESET);
 80051fc:	4e29      	ldr	r6, [pc, #164]	@ (80052a4 <MX_GPIO_Init+0xc0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80051fe:	430a      	orrs	r2, r1
 8005200:	635a      	str	r2, [r3, #52]	@ 0x34
 8005202:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOD, LED_HEATING_Pin|LED_LIGHT_Pin, GPIO_PIN_RESET);
 8005204:	0038      	movs	r0, r7
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005206:	400a      	ands	r2, r1
 8005208:	9201      	str	r2, [sp, #4]
 800520a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800520c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800520e:	1849      	adds	r1, r1, r1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005210:	432a      	orrs	r2, r5
 8005212:	635a      	str	r2, [r3, #52]	@ 0x34
 8005214:	6b5a      	ldr	r2, [r3, #52]	@ 0x34

  /*Configure GPIO pins : BUTTON3_Pin BUTTON2_Pin BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON2_Pin|BUTTON1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005216:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005218:	402a      	ands	r2, r5
 800521a:	9202      	str	r2, [sp, #8]
 800521c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800521e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005220:	430a      	orrs	r2, r1
 8005222:	635a      	str	r2, [r3, #52]	@ 0x34
 8005224:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005226:	400a      	ands	r2, r1
 8005228:	9203      	str	r2, [sp, #12]
 800522a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800522c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800522e:	3906      	subs	r1, #6
 8005230:	430a      	orrs	r2, r1
 8005232:	635a      	str	r2, [r3, #52]	@ 0x34
 8005234:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOD, LED_HEATING_Pin|LED_LIGHT_Pin, GPIO_PIN_RESET);
 8005236:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005238:	400b      	ands	r3, r1
 800523a:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOD, LED_HEATING_Pin|LED_LIGHT_Pin, GPIO_PIN_RESET);
 800523c:	3108      	adds	r1, #8
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800523e:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOD, LED_HEATING_Pin|LED_LIGHT_Pin, GPIO_PIN_RESET);
 8005240:	f001 fb32 	bl	80068a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_ALIVE_GPIO_Port, LED_ALIVE_Pin, GPIO_PIN_RESET);
 8005244:	2200      	movs	r2, #0
 8005246:	0030      	movs	r0, r6
 8005248:	2110      	movs	r1, #16
 800524a:	f001 fb2d 	bl	80068a8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON2_Pin|BUTTON1_Pin;
 800524e:	23e0      	movs	r3, #224	@ 0xe0
 8005250:	021b      	lsls	r3, r3, #8
 8005252:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8005254:	23c4      	movs	r3, #196	@ 0xc4
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005256:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8005258:	039b      	lsls	r3, r3, #14
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800525a:	4813      	ldr	r0, [pc, #76]	@ (80052a8 <MX_GPIO_Init+0xc4>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800525c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800525e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005260:	f001 fa70 	bl	8006744 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_HEATING_Pin LED_LIGHT_Pin */
  GPIO_InitStruct.Pin = LED_HEATING_Pin|LED_LIGHT_Pin;
 8005264:	230a      	movs	r3, #10
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005266:	0038      	movs	r0, r7
 8005268:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = LED_HEATING_Pin|LED_LIGHT_Pin;
 800526a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800526c:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800526e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005270:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005272:	f001 fa67 	bl	8006744 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_ALIVE_Pin */
  GPIO_InitStruct.Pin = LED_ALIVE_Pin;
 8005276:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_ALIVE_GPIO_Port, &GPIO_InitStruct);
 8005278:	0030      	movs	r0, r6
 800527a:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = LED_ALIVE_Pin;
 800527c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800527e:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005280:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005282:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LED_ALIVE_GPIO_Port, &GPIO_InitStruct);
 8005284:	f001 fa5e 	bl	8006744 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8005288:	0022      	movs	r2, r4
 800528a:	0021      	movs	r1, r4
 800528c:	2007      	movs	r0, #7
 800528e:	f001 fa09 	bl	80066a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8005292:	2007      	movs	r0, #7
 8005294:	f001 fa30 	bl	80066f8 <HAL_NVIC_EnableIRQ>

}
 8005298:	b00b      	add	sp, #44	@ 0x2c
 800529a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800529c:	40021000 	.word	0x40021000
 80052a0:	50000c00 	.word	0x50000c00
 80052a4:	50000400 	.word	0x50000400
 80052a8:	50000800 	.word	0x50000800

080052ac <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80052ac:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80052ae:	4b15      	ldr	r3, [pc, #84]	@ (8005304 <MX_I2C1_Init+0x58>)
 80052b0:	4c15      	ldr	r4, [pc, #84]	@ (8005308 <MX_I2C1_Init+0x5c>)
  hi2c1.Init.Timing = 0x00910B1C;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80052b2:	2201      	movs	r2, #1
  hi2c1.Instance = I2C1;
 80052b4:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x00910B1C;
 80052b6:	4b15      	ldr	r3, [pc, #84]	@ (800530c <MX_I2C1_Init+0x60>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80052b8:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x00910B1C;
 80052ba:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80052bc:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80052be:	60e2      	str	r2, [r4, #12]
  hi2c1.Init.OwnAddress1 = 0;
 80052c0:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80052c2:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80052c4:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80052c6:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80052c8:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80052ca:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80052cc:	f001 fc40 	bl	8006b50 <HAL_I2C_Init>
 80052d0:	2800      	cmp	r0, #0
 80052d2:	d001      	beq.n	80052d8 <MX_I2C1_Init+0x2c>
  {
    Error_Handler();
 80052d4:	f000 faa8 	bl	8005828 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80052d8:	2100      	movs	r1, #0
 80052da:	0020      	movs	r0, r4
 80052dc:	f001 fe4e 	bl	8006f7c <HAL_I2CEx_ConfigAnalogFilter>
 80052e0:	2800      	cmp	r0, #0
 80052e2:	d001      	beq.n	80052e8 <MX_I2C1_Init+0x3c>
  {
    Error_Handler();
 80052e4:	f000 faa0 	bl	8005828 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80052e8:	2100      	movs	r1, #0
 80052ea:	0020      	movs	r0, r4
 80052ec:	f001 fe6c 	bl	8006fc8 <HAL_I2CEx_ConfigDigitalFilter>
 80052f0:	2800      	cmp	r0, #0
 80052f2:	d001      	beq.n	80052f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80052f4:	f000 fa98 	bl	8005828 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80052f8:	2080      	movs	r0, #128	@ 0x80
 80052fa:	0340      	lsls	r0, r0, #13
 80052fc:	f001 fe88 	bl	8007010 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005300:	bd10      	pop	{r4, pc}
 8005302:	46c0      	nop			@ (mov r8, r8)
 8005304:	40005400 	.word	0x40005400
 8005308:	2000052c 	.word	0x2000052c
 800530c:	00910b1c 	.word	0x00910b1c

08005310 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005310:	b510      	push	{r4, lr}
 8005312:	0004      	movs	r4, r0
 8005314:	b08e      	sub	sp, #56	@ 0x38

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005316:	2214      	movs	r2, #20
 8005318:	2100      	movs	r1, #0
 800531a:	a803      	add	r0, sp, #12
 800531c:	f004 f83a 	bl	8009394 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005320:	2218      	movs	r2, #24
 8005322:	2100      	movs	r1, #0
 8005324:	a808      	add	r0, sp, #32
 8005326:	f004 f835 	bl	8009394 <memset>
  if(i2cHandle->Instance==I2C1)
 800532a:	4b18      	ldr	r3, [pc, #96]	@ (800538c <HAL_I2C_MspInit+0x7c>)
 800532c:	6822      	ldr	r2, [r4, #0]
 800532e:	429a      	cmp	r2, r3
 8005330:	d129      	bne.n	8005386 <HAL_I2C_MspInit+0x76>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005332:	2320      	movs	r3, #32
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005334:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005336:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005338:	f002 f9c8 	bl	80076cc <HAL_RCCEx_PeriphCLKConfig>
 800533c:	2800      	cmp	r0, #0
 800533e:	d001      	beq.n	8005344 <HAL_I2C_MspInit+0x34>
    {
      Error_Handler();
 8005340:	f000 fa72 	bl	8005828 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005344:	2202      	movs	r2, #2
 8005346:	4c12      	ldr	r4, [pc, #72]	@ (8005390 <HAL_I2C_MspInit+0x80>)
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005348:	4812      	ldr	r0, [pc, #72]	@ (8005394 <HAL_I2C_MspInit+0x84>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800534a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800534c:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800534e:	4313      	orrs	r3, r2
 8005350:	6363      	str	r3, [r4, #52]	@ 0x34
 8005352:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005354:	4013      	ands	r3, r2
 8005356:	9301      	str	r3, [sp, #4]
 8005358:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800535a:	23c0      	movs	r3, #192	@ 0xc0
 800535c:	005b      	lsls	r3, r3, #1
 800535e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005360:	3b6f      	subs	r3, #111	@ 0x6f
 8005362:	3bff      	subs	r3, #255	@ 0xff
 8005364:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005366:	2300      	movs	r3, #0
 8005368:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800536a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800536c:	3306      	adds	r3, #6
 800536e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005370:	f001 f9e8 	bl	8006744 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005374:	2280      	movs	r2, #128	@ 0x80
 8005376:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005378:	0392      	lsls	r2, r2, #14
 800537a:	4313      	orrs	r3, r2
 800537c:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800537e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005380:	4013      	ands	r3, r2
 8005382:	9302      	str	r3, [sp, #8]
 8005384:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8005386:	b00e      	add	sp, #56	@ 0x38
 8005388:	bd10      	pop	{r4, pc}
 800538a:	46c0      	nop			@ (mov r8, r8)
 800538c:	40005400 	.word	0x40005400
 8005390:	40021000 	.word	0x40021000
 8005394:	50000400 	.word	0x50000400

08005398 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8005398:	b510      	push	{r4, lr}
 800539a:	b092      	sub	sp, #72	@ 0x48
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800539c:	2234      	movs	r2, #52	@ 0x34
 800539e:	2100      	movs	r1, #0
 80053a0:	a805      	add	r0, sp, #20
 80053a2:	f003 fff7 	bl	8009394 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80053a6:	2210      	movs	r2, #16
 80053a8:	2100      	movs	r1, #0
 80053aa:	a801      	add	r0, sp, #4
 80053ac:	f003 fff2 	bl	8009394 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80053b0:	2080      	movs	r0, #128	@ 0x80
 80053b2:	0080      	lsls	r0, r0, #2
 80053b4:	f001 fe40 	bl	8007038 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80053b8:	2380      	movs	r3, #128	@ 0x80
 80053ba:	005b      	lsls	r3, r3, #1
 80053bc:	9308      	str	r3, [sp, #32]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80053be:	2300      	movs	r3, #0
 80053c0:	9309      	str	r3, [sp, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80053c2:	930e      	str	r3, [sp, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLN = 8;
 80053c4:	3308      	adds	r3, #8
 80053c6:	930f      	str	r3, [sp, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80053c8:	2380      	movs	r3, #128	@ 0x80
 80053ca:	029b      	lsls	r3, r3, #10
 80053cc:	9310      	str	r3, [sp, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80053ce:	2380      	movs	r3, #128	@ 0x80
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80053d0:	2402      	movs	r4, #2
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80053d2:	2240      	movs	r2, #64	@ 0x40
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80053d4:	059b      	lsls	r3, r3, #22
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80053d6:	a805      	add	r0, sp, #20
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80053d8:	9405      	str	r4, [sp, #20]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80053da:	920a      	str	r2, [sp, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80053dc:	940c      	str	r4, [sp, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80053de:	940d      	str	r4, [sp, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80053e0:	9311      	str	r3, [sp, #68]	@ 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80053e2:	f001 fe55 	bl	8007090 <HAL_RCC_OscConfig>
 80053e6:	2800      	cmp	r0, #0
 80053e8:	d001      	beq.n	80053ee <SystemClock_Config+0x56>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80053ea:	b672      	cpsid	i
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80053ec:	e7fe      	b.n	80053ec <SystemClock_Config+0x54>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 80053ee:	2307      	movs	r3, #7
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80053f0:	9003      	str	r0, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80053f2:	9004      	str	r0, [sp, #16]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80053f4:	0021      	movs	r1, r4
 80053f6:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 80053f8:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80053fa:	9402      	str	r4, [sp, #8]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80053fc:	f002 f8a8 	bl	8007550 <HAL_RCC_ClockConfig>
 8005400:	2800      	cmp	r0, #0
 8005402:	d001      	beq.n	8005408 <SystemClock_Config+0x70>
 8005404:	b672      	cpsid	i
	while (1) {
 8005406:	e7fe      	b.n	8005406 <SystemClock_Config+0x6e>
}
 8005408:	b012      	add	sp, #72	@ 0x48
 800540a:	bd10      	pop	{r4, pc}

0800540c <HAL_TIM_PeriodElapsedCallback>:
	if (htim == &htim3) {
 800540c:	4b0b      	ldr	r3, [pc, #44]	@ (800543c <HAL_TIM_PeriodElapsedCallback+0x30>)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800540e:	b510      	push	{r4, lr}
	if (htim == &htim3) {
 8005410:	4298      	cmp	r0, r3
 8005412:	d102      	bne.n	800541a <HAL_TIM_PeriodElapsedCallback+0xe>
		runPid = 1;
 8005414:	2201      	movs	r2, #1
 8005416:	4b0a      	ldr	r3, [pc, #40]	@ (8005440 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8005418:	701a      	strb	r2, [r3, #0]
	if (htim == &htim17) {
 800541a:	4b0a      	ldr	r3, [pc, #40]	@ (8005444 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800541c:	4298      	cmp	r0, r3
 800541e:	d10c      	bne.n	800543a <HAL_TIM_PeriodElapsedCallback+0x2e>
		if (duty != 0 && currentMenu != MENU_AUTOCAL_1) {
 8005420:	4b09      	ldr	r3, [pc, #36]	@ (8005448 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d008      	beq.n	800543a <HAL_TIM_PeriodElapsedCallback+0x2e>
 8005428:	4b08      	ldr	r3, [pc, #32]	@ (800544c <HAL_TIM_PeriodElapsedCallback+0x40>)
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	2b06      	cmp	r3, #6
 800542e:	d004      	beq.n	800543a <HAL_TIM_PeriodElapsedCallback+0x2e>
			HAL_GPIO_WritePin(LED_HEATING_GPIO_Port, LED_HEATING_Pin, 1);
 8005430:	2201      	movs	r2, #1
 8005432:	2102      	movs	r1, #2
 8005434:	4806      	ldr	r0, [pc, #24]	@ (8005450 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8005436:	f001 fa37 	bl	80068a8 <HAL_GPIO_WritePin>
}
 800543a:	bd10      	pop	{r4, pc}
 800543c:	2000062c 	.word	0x2000062c
 8005440:	20000582 	.word	0x20000582
 8005444:	20000594 	.word	0x20000594
 8005448:	20000581 	.word	0x20000581
 800544c:	20000587 	.word	0x20000587
 8005450:	50000c00 	.word	0x50000c00

08005454 <HAL_TIM_PWM_PulseFinishedCallback>:
	if (htim == &htim17) {
 8005454:	4b06      	ldr	r3, [pc, #24]	@ (8005470 <HAL_TIM_PWM_PulseFinishedCallback+0x1c>)
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8005456:	b510      	push	{r4, lr}
	if (htim == &htim17) {
 8005458:	4283      	cmp	r3, r0
 800545a:	d108      	bne.n	800546e <HAL_TIM_PWM_PulseFinishedCallback+0x1a>
		if (currentMenu != MENU_AUTOCAL_1) {
 800545c:	4b05      	ldr	r3, [pc, #20]	@ (8005474 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	2b06      	cmp	r3, #6
 8005462:	d004      	beq.n	800546e <HAL_TIM_PWM_PulseFinishedCallback+0x1a>
			HAL_GPIO_WritePin(LED_HEATING_GPIO_Port, LED_HEATING_Pin, 0);
 8005464:	2200      	movs	r2, #0
 8005466:	2102      	movs	r1, #2
 8005468:	4803      	ldr	r0, [pc, #12]	@ (8005478 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 800546a:	f001 fa1d 	bl	80068a8 <HAL_GPIO_WritePin>
}
 800546e:	bd10      	pop	{r4, pc}
 8005470:	20000594 	.word	0x20000594
 8005474:	20000587 	.word	0x20000587
 8005478:	50000c00 	.word	0x50000c00

0800547c <printString>:
void printString(char *str) {
 800547c:	b510      	push	{r4, lr}
 800547e:	0004      	movs	r4, r0
	HAL_UART_Transmit(&huart2, str, strlen(str), HAL_MAX_DELAY);
 8005480:	f7fa fe3e 	bl	8000100 <strlen>
 8005484:	2301      	movs	r3, #1
 8005486:	b282      	uxth	r2, r0
 8005488:	0021      	movs	r1, r4
 800548a:	425b      	negs	r3, r3
 800548c:	4801      	ldr	r0, [pc, #4]	@ (8005494 <printString+0x18>)
 800548e:	f003 f8ec 	bl	800866a <HAL_UART_Transmit>
}
 8005492:	bd10      	pop	{r4, pc}
 8005494:	20000678 	.word	0x20000678

08005498 <main>:
int main(void) {
 8005498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800549a:	b0a3      	sub	sp, #140	@ 0x8c
	HAL_Init();
 800549c:	f000 fc64 	bl	8005d68 <HAL_Init>
	SystemClock_Config();
 80054a0:	f7ff ff7a 	bl	8005398 <SystemClock_Config>
	MX_GPIO_Init();
 80054a4:	f7ff fe9e 	bl	80051e4 <MX_GPIO_Init>
	MX_ADC1_Init();
 80054a8:	f7ff fe2e 	bl	8005108 <MX_ADC1_Init>
	MX_I2C1_Init();
 80054ac:	f7ff fefe 	bl	80052ac <MX_I2C1_Init>
	MX_USART2_UART_Init();
 80054b0:	f000 fbbc 	bl	8005c2c <MX_USART2_UART_Init>
	MX_TIM16_Init();
 80054b4:	f000 fb0e 	bl	8005ad4 <MX_TIM16_Init>
	MX_TIM3_Init();
 80054b8:	f000 fa4e 	bl	8005958 <MX_TIM3_Init>
	MX_TIM17_Init();
 80054bc:	f000 fb60 	bl	8005b80 <MX_TIM17_Init>
	ssd1306_Init();
 80054c0:	f7fe fada 	bl	8003a78 <ssd1306_Init>
	HAL_Delay(50);
 80054c4:	2032      	movs	r0, #50	@ 0x32
 80054c6:	f000 fc75 	bl	8005db4 <HAL_Delay>
	HAL_ADCEx_Calibration_Start(&hadc1);
 80054ca:	4cbb      	ldr	r4, [pc, #748]	@ (80057b8 <main+0x320>)
 80054cc:	0020      	movs	r0, r4
 80054ce:	f001 f837 	bl	8006540 <HAL_ADCEx_Calibration_Start>
	HAL_Delay(50);
 80054d2:	2032      	movs	r0, #50	@ 0x32
 80054d4:	f000 fc6e 	bl	8005db4 <HAL_Delay>
	HAL_ADC_Init(&hadc1);
 80054d8:	0020      	movs	r0, r4
	currentMaterialID = MATERIAL_ID_PLA;
 80054da:	2400      	movs	r4, #0
	HAL_ADC_Init(&hadc1);
 80054dc:	f000 fc80 	bl	8005de0 <HAL_ADC_Init>
	initButtons();
 80054e0:	f7fe fb94 	bl	8003c0c <initButtons>
	HAL_UART_Init(&huart2);
 80054e4:	48b5      	ldr	r0, [pc, #724]	@ (80057bc <main+0x324>)
 80054e6:	f003 f98f 	bl	8008808 <HAL_UART_Init>
	MATERIAL_initMaterials();
 80054ea:	f7ff f8c7 	bl	800467c <MATERIAL_initMaterials>
	HAL_TIM_Base_Init(&htim16);
 80054ee:	4db4      	ldr	r5, [pc, #720]	@ (80057c0 <main+0x328>)
	currentMaterialID = MATERIAL_ID_PLA;
 80054f0:	4bb4      	ldr	r3, [pc, #720]	@ (80057c4 <main+0x32c>)
	HAL_TIM_Base_Init(&htim16);
 80054f2:	0028      	movs	r0, r5
	currentMaterialID = MATERIAL_ID_PLA;
 80054f4:	701c      	strb	r4, [r3, #0]
 80054f6:	9304      	str	r3, [sp, #16]
	HAL_TIM_Base_Init(&htim16);
 80054f8:	f002 fbc2 	bl	8007c80 <HAL_TIM_Base_Init>
	HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80054fc:	0021      	movs	r1, r4
 80054fe:	0028      	movs	r0, r5
 8005500:	f002 fdfe 	bl	8008100 <HAL_TIM_PWM_Start>
	TIM16->CCR1 = 0;
 8005504:	4bb0      	ldr	r3, [pc, #704]	@ (80057c8 <main+0x330>)
	HAL_TIM_Base_Init(&htim17);
 8005506:	4db1      	ldr	r5, [pc, #708]	@ (80057cc <main+0x334>)
	TIM16->CCR1 = 0;
 8005508:	635c      	str	r4, [r3, #52]	@ 0x34
	HAL_TIM_Base_Init(&htim17);
 800550a:	0028      	movs	r0, r5
 800550c:	f002 fbb8 	bl	8007c80 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT(&htim17);
 8005510:	0028      	movs	r0, r5
 8005512:	f002 fa95 	bl	8007a40 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim17, TIM_CHANNEL_1);
 8005516:	0021      	movs	r1, r4
 8005518:	0028      	movs	r0, r5
 800551a:	f002 fe79 	bl	8008210 <HAL_TIM_PWM_Start_IT>
	setDuty(0);
 800551e:	0020      	movs	r0, r4
 8005520:	f7ff f968 	bl	80047f4 <setDuty>
	HAL_TIM_Base_Init(&htim3);
 8005524:	4caa      	ldr	r4, [pc, #680]	@ (80057d0 <main+0x338>)
 8005526:	0020      	movs	r0, r4
 8005528:	f002 fbaa 	bl	8007c80 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT(&htim3);
 800552c:	0020      	movs	r0, r4
 800552e:	f002 fa87 	bl	8007a40 <HAL_TIM_Base_Start_IT>
	HAL_Delay(2000);	// otherwise the serial debug will not work
 8005532:	20fa      	movs	r0, #250	@ 0xfa
 8005534:	00c0      	lsls	r0, r0, #3
 8005536:	f000 fc3d 	bl	8005db4 <HAL_Delay>
	if (read_byte_eeprom(EEPROM_ISFIRSTBOOT_ADDRESS) != FIRST_TIME_EEPROM_VALUE) {// if this is the first time eeprom is written or is empty, write the default settings
 800553a:	2064      	movs	r0, #100	@ 0x64
 800553c:	f7ff fd54 	bl	8004fe8 <read_byte_eeprom>
 8005540:	4ca4      	ldr	r4, [pc, #656]	@ (80057d4 <main+0x33c>)
 8005542:	284f      	cmp	r0, #79	@ 0x4f
 8005544:	d100      	bne.n	8005548 <main+0xb0>
 8005546:	e0ff      	b.n	8005748 <main+0x2b0>
		printString("First boot, or eeprom was empty\n");
 8005548:	48a3      	ldr	r0, [pc, #652]	@ (80057d8 <main+0x340>)
 800554a:	f7ff ff97 	bl	800547c <printString>
		storeSettingsToEeprom(kp, ki, kd);	// store settings
 800554e:	4ea3      	ldr	r6, [pc, #652]	@ (80057dc <main+0x344>)
 8005550:	4da3      	ldr	r5, [pc, #652]	@ (80057e0 <main+0x348>)
 8005552:	6820      	ldr	r0, [r4, #0]
 8005554:	6831      	ldr	r1, [r6, #0]
 8005556:	682a      	ldr	r2, [r5, #0]
 8005558:	f7ff fda6 	bl	80050a8 <storeSettingsToEeprom>
		loadSettingsFromEeprom(&kp, &ki, &kd);	// than read settings for a check
 800555c:	002a      	movs	r2, r5
 800555e:	0031      	movs	r1, r6
 8005560:	0020      	movs	r0, r4
 8005562:	f7ff fd57 	bl	8005014 <loadSettingsFromEeprom>
		sprintf(message, "Stored default kp, ki, kd value (%f, %f, %f)\n", kp, ki, kd);
 8005566:	6820      	ldr	r0, [r4, #0]
 8005568:	6833      	ldr	r3, [r6, #0]
 800556a:	682f      	ldr	r7, [r5, #0]
 800556c:	9305      	str	r3, [sp, #20]
 800556e:	f7fd ffe5 	bl	800353c <__aeabi_f2d>
 8005572:	0004      	movs	r4, r0
 8005574:	1c38      	adds	r0, r7, #0
 8005576:	000d      	movs	r5, r1
 8005578:	f7fd ffe0 	bl	800353c <__aeabi_f2d>
 800557c:	9002      	str	r0, [sp, #8]
 800557e:	9103      	str	r1, [sp, #12]
 8005580:	9805      	ldr	r0, [sp, #20]
 8005582:	f7fd ffdb 	bl	800353c <__aeabi_f2d>
 8005586:	4e97      	ldr	r6, [pc, #604]	@ (80057e4 <main+0x34c>)
 8005588:	0022      	movs	r2, r4
 800558a:	002b      	movs	r3, r5
 800558c:	9000      	str	r0, [sp, #0]
 800558e:	9101      	str	r1, [sp, #4]
 8005590:	0031      	movs	r1, r6
 8005592:	a809      	add	r0, sp, #36	@ 0x24
 8005594:	f003 fe90 	bl	80092b8 <siprintf>
		printString(message);
 8005598:	a809      	add	r0, sp, #36	@ 0x24
 800559a:	f7ff ff6f 	bl	800547c <printString>
		write_byte_eeprom(EEPROM_ISFIRSTBOOT_ADDRESS, FIRST_TIME_EEPROM_VALUE);
 800559e:	2064      	movs	r0, #100	@ 0x64
 80055a0:	214f      	movs	r1, #79	@ 0x4f
 80055a2:	f7ff fd69 	bl	8005078 <write_byte_eeprom>
		printString("Now the eeprom was initialized the first time\n");
 80055a6:	4890      	ldr	r0, [pc, #576]	@ (80057e8 <main+0x350>)
		printString(message);
 80055a8:	f7ff ff68 	bl	800547c <printString>
		uint8_t relase = BUTTONS_tick();
 80055ac:	f7fe fd0a 	bl	8003fc4 <BUTTONS_tick>
 80055b0:	9007      	str	r0, [sp, #28]
		float realTemp = getTemperature();	// caluclate the real temp
 80055b2:	f7fe fae3 	bl	8003b7c <getTemperature>
		if (minutesLeft <= 0) {
 80055b6:	4d8d      	ldr	r5, [pc, #564]	@ (80057ec <main+0x354>)
 80055b8:	4b8d      	ldr	r3, [pc, #564]	@ (80057f0 <main+0x358>)
 80055ba:	8829      	ldrh	r1, [r5, #0]
		float realTemp = getTemperature();	// caluclate the real temp
 80055bc:	1c07      	adds	r7, r0, #0
		if (minutesLeft <= 0) {
 80055be:	b28a      	uxth	r2, r1
 80055c0:	2900      	cmp	r1, #0
 80055c2:	d000      	beq.n	80055c6 <main+0x12e>
 80055c4:	e0e2      	b.n	800578c <main+0x2f4>
			minutesLeft = 0;
 80055c6:	802a      	strh	r2, [r5, #0]
			heaterOn = 1;
 80055c8:	701a      	strb	r2, [r3, #0]
		if (heaterOn) {
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	b2dc      	uxtb	r4, r3
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d100      	bne.n	80055d4 <main+0x13c>
 80055d2:	e0dd      	b.n	8005790 <main+0x2f8>
			HAL_GPIO_WritePin(LED_LIGHT_GPIO_Port, LED_LIGHT_Pin, 1);	// turn on the light
 80055d4:	2201      	movs	r2, #1
 80055d6:	2108      	movs	r1, #8
 80055d8:	4886      	ldr	r0, [pc, #536]	@ (80057f4 <main+0x35c>)
 80055da:	f001 f965 	bl	80068a8 <HAL_GPIO_WritePin>
			if (runPid) {	// run the pid control every 500ms
 80055de:	4c86      	ldr	r4, [pc, #536]	@ (80057f8 <main+0x360>)
 80055e0:	7823      	ldrb	r3, [r4, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d01f      	beq.n	8005626 <main+0x18e>
				duty = pid_control(kp, ki, kd, MATERIAL_getMaterialTargetTemp(currentMaterialID), realTemp, UINT8_MAX);
 80055e6:	4b7b      	ldr	r3, [pc, #492]	@ (80057d4 <main+0x33c>)
 80055e8:	681e      	ldr	r6, [r3, #0]
 80055ea:	4b7c      	ldr	r3, [pc, #496]	@ (80057dc <main+0x344>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	9305      	str	r3, [sp, #20]
 80055f0:	4b7b      	ldr	r3, [pc, #492]	@ (80057e0 <main+0x348>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	9306      	str	r3, [sp, #24]
 80055f6:	9b04      	ldr	r3, [sp, #16]
 80055f8:	7818      	ldrb	r0, [r3, #0]
 80055fa:	b2c0      	uxtb	r0, r0
 80055fc:	f7ff f8f2 	bl	80047e4 <MATERIAL_getMaterialTargetTemp>
 8005600:	f7fb ffb6 	bl	8001570 <__aeabi_ui2f>
 8005604:	22ff      	movs	r2, #255	@ 0xff
 8005606:	1c03      	adds	r3, r0, #0
 8005608:	9905      	ldr	r1, [sp, #20]
 800560a:	9201      	str	r2, [sp, #4]
 800560c:	9700      	str	r7, [sp, #0]
 800560e:	9a06      	ldr	r2, [sp, #24]
 8005610:	1c30      	adds	r0, r6, #0
 8005612:	f7ff f8f5 	bl	8004800 <pid_control>
 8005616:	4b79      	ldr	r3, [pc, #484]	@ (80057fc <main+0x364>)
 8005618:	7018      	strb	r0, [r3, #0]
				setDuty(duty);
 800561a:	7818      	ldrb	r0, [r3, #0]
 800561c:	b2c0      	uxtb	r0, r0
 800561e:	f7ff f8e9 	bl	80047f4 <setDuty>
				runPid = 0;
 8005622:	2300      	movs	r3, #0
 8005624:	7023      	strb	r3, [r4, #0]
		if (HAL_GetTick() - timerTimer >= MINUTES_STEP * 60 * 1000) {
 8005626:	f000 fbbf 	bl	8005da8 <HAL_GetTick>
 800562a:	4e75      	ldr	r6, [pc, #468]	@ (8005800 <main+0x368>)
 800562c:	6833      	ldr	r3, [r6, #0]
 800562e:	1ac0      	subs	r0, r0, r3
 8005630:	4b74      	ldr	r3, [pc, #464]	@ (8005804 <main+0x36c>)
 8005632:	4298      	cmp	r0, r3
 8005634:	d955      	bls.n	80056e2 <main+0x24a>
			if (minutesLeft - MINUTES_STEP == 0 || minutesLeft <= 0) {
 8005636:	4a6d      	ldr	r2, [pc, #436]	@ (80057ec <main+0x354>)
 8005638:	8813      	ldrh	r3, [r2, #0]
 800563a:	2b0a      	cmp	r3, #10
 800563c:	d003      	beq.n	8005646 <main+0x1ae>
 800563e:	8813      	ldrh	r3, [r2, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d000      	beq.n	8005646 <main+0x1ae>
 8005644:	e0b0      	b.n	80057a8 <main+0x310>
				minutesLeft = 0;
 8005646:	2400      	movs	r4, #0
				ssd1306_Fill(Black);
 8005648:	0020      	movs	r0, r4
				minutesLeft = 0;
 800564a:	802c      	strh	r4, [r5, #0]
				ssd1306_Fill(Black);
 800564c:	f7fe f884 	bl	8003758 <ssd1306_Fill>
				DISPLAY_PrintStrLarge("TIME OVER", 14, 0);
 8005650:	0022      	movs	r2, r4
 8005652:	210e      	movs	r1, #14
 8005654:	486c      	ldr	r0, [pc, #432]	@ (8005808 <main+0x370>)
 8005656:	f7fe fdef 	bl	8004238 <DISPLAY_PrintStrLarge>
				DISPLAY_PrintStrMedium("Set new time!", 18, 22);
 800565a:	2216      	movs	r2, #22
 800565c:	2112      	movs	r1, #18
 800565e:	486b      	ldr	r0, [pc, #428]	@ (800580c <main+0x374>)
 8005660:	f7fe fdda 	bl	8004218 <DISPLAY_PrintStrMedium>
				ssd1306_UpdateScreen();
 8005664:	f7fe f886 	bl	8003774 <ssd1306_UpdateScreen>
				BUZZER_shortPressBeep();
 8005668:	f7fe fd6c 	bl	8004144 <BUZZER_shortPressBeep>
				BUZZER_shortPressBeep();
 800566c:	f7fe fd6a 	bl	8004144 <BUZZER_shortPressBeep>
				HAL_Delay(200);
 8005670:	20c8      	movs	r0, #200	@ 0xc8
 8005672:	f000 fb9f 	bl	8005db4 <HAL_Delay>
				BUZZER_shortPressBeep();
 8005676:	f7fe fd65 	bl	8004144 <BUZZER_shortPressBeep>
				BUZZER_shortPressBeep();
 800567a:	f7fe fd63 	bl	8004144 <BUZZER_shortPressBeep>
				HAL_Delay(200);
 800567e:	20c8      	movs	r0, #200	@ 0xc8
 8005680:	f000 fb98 	bl	8005db4 <HAL_Delay>
				BUZZER_shortPressBeep();
 8005684:	f7fe fd5e 	bl	8004144 <BUZZER_shortPressBeep>
				BUZZER_shortPressBeep();
 8005688:	f7fe fd5c 	bl	8004144 <BUZZER_shortPressBeep>
				HAL_Delay(200);
 800568c:	20c8      	movs	r0, #200	@ 0xc8
 800568e:	f000 fb91 	bl	8005db4 <HAL_Delay>
				BUZZER_shortPressBeep();
 8005692:	f7fe fd57 	bl	8004144 <BUZZER_shortPressBeep>
				BUZZER_shortPressBeep();
 8005696:	f7fe fd55 	bl	8004144 <BUZZER_shortPressBeep>
				HAL_Delay(1000);
 800569a:	20fa      	movs	r0, #250	@ 0xfa
 800569c:	0080      	lsls	r0, r0, #2
 800569e:	f000 fb89 	bl	8005db4 <HAL_Delay>
				BUZZER_shortPressBeep();
 80056a2:	f7fe fd4f 	bl	8004144 <BUZZER_shortPressBeep>
				BUZZER_shortPressBeep();
 80056a6:	f7fe fd4d 	bl	8004144 <BUZZER_shortPressBeep>
				HAL_Delay(200);
 80056aa:	20c8      	movs	r0, #200	@ 0xc8
 80056ac:	f000 fb82 	bl	8005db4 <HAL_Delay>
				BUZZER_shortPressBeep();
 80056b0:	f7fe fd48 	bl	8004144 <BUZZER_shortPressBeep>
				BUZZER_shortPressBeep();
 80056b4:	f7fe fd46 	bl	8004144 <BUZZER_shortPressBeep>
				HAL_Delay(200);
 80056b8:	20c8      	movs	r0, #200	@ 0xc8
 80056ba:	f000 fb7b 	bl	8005db4 <HAL_Delay>
				BUZZER_shortPressBeep();
 80056be:	f7fe fd41 	bl	8004144 <BUZZER_shortPressBeep>
				BUZZER_shortPressBeep();
 80056c2:	f7fe fd3f 	bl	8004144 <BUZZER_shortPressBeep>
				HAL_Delay(200);
 80056c6:	20c8      	movs	r0, #200	@ 0xc8
 80056c8:	f000 fb74 	bl	8005db4 <HAL_Delay>
				BUZZER_shortPressBeep();
 80056cc:	f7fe fd3a 	bl	8004144 <BUZZER_shortPressBeep>
				BUZZER_shortPressBeep();
 80056d0:	f7fe fd38 	bl	8004144 <BUZZER_shortPressBeep>
				HAL_Delay(1000);
 80056d4:	20fa      	movs	r0, #250	@ 0xfa
 80056d6:	0080      	lsls	r0, r0, #2
 80056d8:	f000 fb6c 	bl	8005db4 <HAL_Delay>
			timerTimer = HAL_GetTick();
 80056dc:	f000 fb64 	bl	8005da8 <HAL_GetTick>
 80056e0:	6030      	str	r0, [r6, #0]
		if (HAL_GetTick() - timerDisplayUpdate >= 1000 / DISPLAY_FPS) {
 80056e2:	f000 fb61 	bl	8005da8 <HAL_GetTick>
 80056e6:	4c4a      	ldr	r4, [pc, #296]	@ (8005810 <main+0x378>)
 80056e8:	6823      	ldr	r3, [r4, #0]
 80056ea:	1ac0      	subs	r0, r0, r3
 80056ec:	2863      	cmp	r0, #99	@ 0x63
 80056ee:	d91b      	bls.n	8005728 <main+0x290>
			DISPLAY_drawMenu(currentMenu, currentMaterialID, realTemp, minutesLeft, duty);
 80056f0:	4b48      	ldr	r3, [pc, #288]	@ (8005814 <main+0x37c>)
 80056f2:	4a42      	ldr	r2, [pc, #264]	@ (80057fc <main+0x364>)
 80056f4:	7818      	ldrb	r0, [r3, #0]
 80056f6:	9b04      	ldr	r3, [sp, #16]
 80056f8:	b2c0      	uxtb	r0, r0
 80056fa:	7819      	ldrb	r1, [r3, #0]
 80056fc:	4b3b      	ldr	r3, [pc, #236]	@ (80057ec <main+0x354>)
 80056fe:	b2c9      	uxtb	r1, r1
 8005700:	881b      	ldrh	r3, [r3, #0]
 8005702:	7812      	ldrb	r2, [r2, #0]
 8005704:	b29b      	uxth	r3, r3
 8005706:	9200      	str	r2, [sp, #0]
 8005708:	1c3a      	adds	r2, r7, #0
 800570a:	f7fe fda5 	bl	8004258 <DISPLAY_drawMenu>
			if (relase) {
 800570e:	9b07      	ldr	r3, [sp, #28]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d004      	beq.n	800571e <main+0x286>
				DISPLAY_PrintStrSmall("RELASE", 50, 24);
 8005714:	2218      	movs	r2, #24
 8005716:	2132      	movs	r1, #50	@ 0x32
 8005718:	483f      	ldr	r0, [pc, #252]	@ (8005818 <main+0x380>)
 800571a:	f7fe fd6d 	bl	80041f8 <DISPLAY_PrintStrSmall>
			ssd1306_UpdateScreen();
 800571e:	f7fe f829 	bl	8003774 <ssd1306_UpdateScreen>
			timerDisplayUpdate = HAL_GetTick();
 8005722:	f000 fb41 	bl	8005da8 <HAL_GetTick>
 8005726:	6020      	str	r0, [r4, #0]
		if (HAL_GetTick() - timerLedAlive >= LED_ALIVE_FLASHING_PERIOD / 2) {
 8005728:	f000 fb3e 	bl	8005da8 <HAL_GetTick>
 800572c:	4c3b      	ldr	r4, [pc, #236]	@ (800581c <main+0x384>)
 800572e:	6823      	ldr	r3, [r4, #0]
 8005730:	1ac0      	subs	r0, r0, r3
 8005732:	28f9      	cmp	r0, #249	@ 0xf9
 8005734:	d800      	bhi.n	8005738 <main+0x2a0>
 8005736:	e739      	b.n	80055ac <main+0x114>
			HAL_GPIO_TogglePin(LED_ALIVE_GPIO_Port, LED_ALIVE_Pin);
 8005738:	2110      	movs	r1, #16
 800573a:	4839      	ldr	r0, [pc, #228]	@ (8005820 <main+0x388>)
 800573c:	f001 f8ba 	bl	80068b4 <HAL_GPIO_TogglePin>
			timerLedAlive = HAL_GetTick();
 8005740:	f000 fb32 	bl	8005da8 <HAL_GetTick>
 8005744:	6020      	str	r0, [r4, #0]
 8005746:	e731      	b.n	80055ac <main+0x114>
		loadSettingsFromEeprom(&kp, &ki, &kd);
 8005748:	4d25      	ldr	r5, [pc, #148]	@ (80057e0 <main+0x348>)
 800574a:	4e24      	ldr	r6, [pc, #144]	@ (80057dc <main+0x344>)
 800574c:	002a      	movs	r2, r5
 800574e:	0031      	movs	r1, r6
 8005750:	0020      	movs	r0, r4
 8005752:	f7ff fc5f 	bl	8005014 <loadSettingsFromEeprom>
		sprintf(message, "Loaded kp, ki, kd value from eeprom (%f, %f, %f)\n", kp, ki, kd);
 8005756:	6820      	ldr	r0, [r4, #0]
 8005758:	6833      	ldr	r3, [r6, #0]
 800575a:	682f      	ldr	r7, [r5, #0]
 800575c:	9305      	str	r3, [sp, #20]
 800575e:	f7fd feed 	bl	800353c <__aeabi_f2d>
 8005762:	0004      	movs	r4, r0
 8005764:	1c38      	adds	r0, r7, #0
 8005766:	000d      	movs	r5, r1
 8005768:	f7fd fee8 	bl	800353c <__aeabi_f2d>
 800576c:	9002      	str	r0, [sp, #8]
 800576e:	9103      	str	r1, [sp, #12]
 8005770:	9805      	ldr	r0, [sp, #20]
 8005772:	f7fd fee3 	bl	800353c <__aeabi_f2d>
 8005776:	4e2b      	ldr	r6, [pc, #172]	@ (8005824 <main+0x38c>)
 8005778:	9000      	str	r0, [sp, #0]
 800577a:	9101      	str	r1, [sp, #4]
 800577c:	0022      	movs	r2, r4
 800577e:	002b      	movs	r3, r5
 8005780:	0031      	movs	r1, r6
 8005782:	a809      	add	r0, sp, #36	@ 0x24
 8005784:	f003 fd98 	bl	80092b8 <siprintf>
		printString(message);
 8005788:	a809      	add	r0, sp, #36	@ 0x24
 800578a:	e70d      	b.n	80055a8 <main+0x110>
			heaterOn = 1;
 800578c:	2201      	movs	r2, #1
 800578e:	e71b      	b.n	80055c8 <main+0x130>
			HAL_GPIO_WritePin(LED_LIGHT_GPIO_Port, LED_LIGHT_Pin, 0); // turn off the light
 8005790:	0022      	movs	r2, r4
 8005792:	2108      	movs	r1, #8
 8005794:	4817      	ldr	r0, [pc, #92]	@ (80057f4 <main+0x35c>)
 8005796:	f001 f887 	bl	80068a8 <HAL_GPIO_WritePin>
			duty = 0;
 800579a:	4b18      	ldr	r3, [pc, #96]	@ (80057fc <main+0x364>)
 800579c:	701c      	strb	r4, [r3, #0]
			setDuty(duty);
 800579e:	7818      	ldrb	r0, [r3, #0]
 80057a0:	b2c0      	uxtb	r0, r0
 80057a2:	f7ff f827 	bl	80047f4 <setDuty>
 80057a6:	e73e      	b.n	8005626 <main+0x18e>
				minutesLeft -= MINUTES_STEP;
 80057a8:	8813      	ldrh	r3, [r2, #0]
 80057aa:	3b0a      	subs	r3, #10
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	8013      	strh	r3, [r2, #0]
				BUZZER_longPressBeep();
 80057b0:	f7fe fcdc 	bl	800416c <BUZZER_longPressBeep>
 80057b4:	e792      	b.n	80056dc <main+0x244>
 80057b6:	46c0      	nop			@ (mov r8, r8)
 80057b8:	200004c8 	.word	0x200004c8
 80057bc:	20000678 	.word	0x20000678
 80057c0:	200005e0 	.word	0x200005e0
 80057c4:	20000586 	.word	0x20000586
 80057c8:	40014400 	.word	0x40014400
 80057cc:	20000594 	.word	0x20000594
 80057d0:	2000062c 	.word	0x2000062c
 80057d4:	20000020 	.word	0x20000020
 80057d8:	0800d99c 	.word	0x0800d99c
 80057dc:	2000001c 	.word	0x2000001c
 80057e0:	20000018 	.word	0x20000018
 80057e4:	0800d9bd 	.word	0x0800d9bd
 80057e8:	0800d9eb 	.word	0x0800d9eb
 80057ec:	20000584 	.word	0x20000584
 80057f0:	20000580 	.word	0x20000580
 80057f4:	50000c00 	.word	0x50000c00
 80057f8:	20000582 	.word	0x20000582
 80057fc:	20000581 	.word	0x20000581
 8005800:	20000024 	.word	0x20000024
 8005804:	000927bf 	.word	0x000927bf
 8005808:	0800da4c 	.word	0x0800da4c
 800580c:	0800da56 	.word	0x0800da56
 8005810:	20000588 	.word	0x20000588
 8005814:	20000587 	.word	0x20000587
 8005818:	0800da64 	.word	0x0800da64
 800581c:	2000058c 	.word	0x2000058c
 8005820:	50000400 	.word	0x50000400
 8005824:	0800da1a 	.word	0x0800da1a

08005828 <Error_Handler>:
 8005828:	b672      	cpsid	i
	while (1) {
 800582a:	e7fe      	b.n	800582a <Error_Handler+0x2>

0800582c <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800582c:	2101      	movs	r1, #1
 800582e:	4b0a      	ldr	r3, [pc, #40]	@ (8005858 <HAL_MspInit+0x2c>)
{
 8005830:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005832:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005834:	430a      	orrs	r2, r1
 8005836:	641a      	str	r2, [r3, #64]	@ 0x40
 8005838:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800583a:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 800583c:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800583e:	9200      	str	r2, [sp, #0]
 8005840:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005842:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005844:	0549      	lsls	r1, r1, #21
 8005846:	430a      	orrs	r2, r1
 8005848:	63da      	str	r2, [r3, #60]	@ 0x3c
 800584a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800584c:	400b      	ands	r3, r1
 800584e:	9301      	str	r3, [sp, #4]
 8005850:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005852:	b002      	add	sp, #8
 8005854:	4770      	bx	lr
 8005856:	46c0      	nop			@ (mov r8, r8)
 8005858:	40021000 	.word	0x40021000

0800585c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800585c:	e7fe      	b.n	800585c <NMI_Handler>

0800585e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800585e:	e7fe      	b.n	800585e <HardFault_Handler>

08005860 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005860:	4770      	bx	lr

08005862 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8005862:	4770      	bx	lr

08005864 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005864:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005866:	f000 fa93 	bl	8005d90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800586a:	bd10      	pop	{r4, pc}

0800586c <EXTI4_15_IRQHandler>:
void EXTI4_15_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON3_Pin);
 800586c:	2080      	movs	r0, #128	@ 0x80
{
 800586e:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler(BUTTON3_Pin);
 8005870:	0180      	lsls	r0, r0, #6
 8005872:	f001 f827 	bl	80068c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON2_Pin);
 8005876:	2080      	movs	r0, #128	@ 0x80
 8005878:	01c0      	lsls	r0, r0, #7
 800587a:	f001 f823 	bl	80068c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON1_Pin);
 800587e:	2080      	movs	r0, #128	@ 0x80
 8005880:	0200      	lsls	r0, r0, #8
 8005882:	f001 f81f 	bl	80068c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8005886:	bd10      	pop	{r4, pc}

08005888 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005888:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800588a:	4802      	ldr	r0, [pc, #8]	@ (8005894 <TIM3_IRQHandler+0xc>)
 800588c:	f002 f908 	bl	8007aa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005890:	bd10      	pop	{r4, pc}
 8005892:	46c0      	nop			@ (mov r8, r8)
 8005894:	2000062c 	.word	0x2000062c

08005898 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8005898:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800589a:	4802      	ldr	r0, [pc, #8]	@ (80058a4 <TIM17_IRQHandler+0xc>)
 800589c:	f002 f900 	bl	8007aa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80058a0:	bd10      	pop	{r4, pc}
 80058a2:	46c0      	nop			@ (mov r8, r8)
 80058a4:	20000594 	.word	0x20000594

080058a8 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80058a8:	2001      	movs	r0, #1
 80058aa:	4770      	bx	lr

080058ac <_kill>:

int _kill(int pid, int sig)
{
 80058ac:	b510      	push	{r4, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80058ae:	f003 fdcb 	bl	8009448 <__errno>
 80058b2:	2316      	movs	r3, #22
 80058b4:	6003      	str	r3, [r0, #0]
  return -1;
 80058b6:	2001      	movs	r0, #1
}
 80058b8:	4240      	negs	r0, r0
 80058ba:	bd10      	pop	{r4, pc}

080058bc <_exit>:

void _exit (int status)
{
 80058bc:	b510      	push	{r4, lr}
  errno = EINVAL;
 80058be:	f003 fdc3 	bl	8009448 <__errno>
 80058c2:	2316      	movs	r3, #22
 80058c4:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80058c6:	e7fe      	b.n	80058c6 <_exit+0xa>

080058c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80058c8:	b570      	push	{r4, r5, r6, lr}
 80058ca:	000e      	movs	r6, r1
 80058cc:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058ce:	2500      	movs	r5, #0
 80058d0:	42a5      	cmp	r5, r4
 80058d2:	db01      	blt.n	80058d8 <_read+0x10>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 80058d4:	0020      	movs	r0, r4
 80058d6:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 80058d8:	e000      	b.n	80058dc <_read+0x14>
 80058da:	bf00      	nop
 80058dc:	5570      	strb	r0, [r6, r5]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058de:	3501      	adds	r5, #1
 80058e0:	e7f6      	b.n	80058d0 <_read+0x8>

080058e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80058e2:	b570      	push	{r4, r5, r6, lr}
 80058e4:	000e      	movs	r6, r1
 80058e6:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058e8:	2500      	movs	r5, #0
 80058ea:	42a5      	cmp	r5, r4
 80058ec:	db01      	blt.n	80058f2 <_write+0x10>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 80058ee:	0020      	movs	r0, r4
 80058f0:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 80058f2:	5d70      	ldrb	r0, [r6, r5]
 80058f4:	e000      	b.n	80058f8 <_write+0x16>
 80058f6:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058f8:	3501      	adds	r5, #1
 80058fa:	e7f6      	b.n	80058ea <_write+0x8>

080058fc <_close>:

int _close(int file)
{
  (void)file;
  return -1;
 80058fc:	2001      	movs	r0, #1
}
 80058fe:	4240      	negs	r0, r0
 8005900:	4770      	bx	lr

08005902 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8005902:	2380      	movs	r3, #128	@ 0x80
 8005904:	019b      	lsls	r3, r3, #6
  return 0;
}
 8005906:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8005908:	604b      	str	r3, [r1, #4]
}
 800590a:	4770      	bx	lr

0800590c <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 800590c:	2001      	movs	r0, #1
 800590e:	4770      	bx	lr

08005910 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8005910:	2000      	movs	r0, #0
 8005912:	4770      	bx	lr

08005914 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005914:	490b      	ldr	r1, [pc, #44]	@ (8005944 <_sbrk+0x30>)
 8005916:	4a0c      	ldr	r2, [pc, #48]	@ (8005948 <_sbrk+0x34>)
{
 8005918:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800591a:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800591c:	490b      	ldr	r1, [pc, #44]	@ (800594c <_sbrk+0x38>)
{
 800591e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8005920:	6808      	ldr	r0, [r1, #0]
 8005922:	2800      	cmp	r0, #0
 8005924:	d101      	bne.n	800592a <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 8005926:	480a      	ldr	r0, [pc, #40]	@ (8005950 <_sbrk+0x3c>)
 8005928:	6008      	str	r0, [r1, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800592a:	6808      	ldr	r0, [r1, #0]
 800592c:	18c3      	adds	r3, r0, r3
 800592e:	4293      	cmp	r3, r2
 8005930:	d906      	bls.n	8005940 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 8005932:	f003 fd89 	bl	8009448 <__errno>
 8005936:	230c      	movs	r3, #12
 8005938:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800593a:	2001      	movs	r0, #1
 800593c:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800593e:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8005940:	600b      	str	r3, [r1, #0]
  return (void *)prev_heap_end;
 8005942:	e7fc      	b.n	800593e <_sbrk+0x2a>
 8005944:	00000400 	.word	0x00000400
 8005948:	20002000 	.word	0x20002000
 800594c:	20000590 	.word	0x20000590
 8005950:	20000860 	.word	0x20000860

08005954 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005954:	4770      	bx	lr
	...

08005958 <MX_TIM3_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005958:	b510      	push	{r4, lr}
 800595a:	b088      	sub	sp, #32

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800595c:	2210      	movs	r2, #16
 800595e:	2100      	movs	r1, #0
 8005960:	a804      	add	r0, sp, #16
 8005962:	f003 fd17 	bl	8009394 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005966:	220c      	movs	r2, #12
 8005968:	2100      	movs	r1, #0
 800596a:	a801      	add	r0, sp, #4
 800596c:	f003 fd12 	bl	8009394 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005970:	4c15      	ldr	r4, [pc, #84]	@ (80059c8 <MX_TIM3_Init+0x70>)
 8005972:	4b16      	ldr	r3, [pc, #88]	@ (80059cc <MX_TIM3_Init+0x74>)
  htim3.Init.Prescaler = 64000-1;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 2000;
 8005974:	22fa      	movs	r2, #250	@ 0xfa
  htim3.Instance = TIM3;
 8005976:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = 64000-1;
 8005978:	4b15      	ldr	r3, [pc, #84]	@ (80059d0 <MX_TIM3_Init+0x78>)
  htim3.Init.Period = 2000;
 800597a:	00d2      	lsls	r2, r2, #3
  htim3.Init.Prescaler = 64000-1;
 800597c:	6063      	str	r3, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800597e:	2300      	movs	r3, #0
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005980:	0020      	movs	r0, r4
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005982:	60a3      	str	r3, [r4, #8]
  htim3.Init.Period = 2000;
 8005984:	60e2      	str	r2, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005986:	6123      	str	r3, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005988:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800598a:	f002 f979 	bl	8007c80 <HAL_TIM_Base_Init>
 800598e:	2800      	cmp	r0, #0
 8005990:	d001      	beq.n	8005996 <MX_TIM3_Init+0x3e>
  {
    Error_Handler();
 8005992:	f7ff ff49 	bl	8005828 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005996:	2380      	movs	r3, #128	@ 0x80
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005998:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800599a:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800599c:	a904      	add	r1, sp, #16
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800599e:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80059a0:	f002 fa90 	bl	8007ec4 <HAL_TIM_ConfigClockSource>
 80059a4:	2800      	cmp	r0, #0
 80059a6:	d001      	beq.n	80059ac <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80059a8:	f7ff ff3e 	bl	8005828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80059ac:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80059ae:	0020      	movs	r0, r4
 80059b0:	a901      	add	r1, sp, #4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80059b2:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80059b4:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80059b6:	f002 fc2f 	bl	8008218 <HAL_TIMEx_MasterConfigSynchronization>
 80059ba:	2800      	cmp	r0, #0
 80059bc:	d001      	beq.n	80059c2 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80059be:	f7ff ff33 	bl	8005828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80059c2:	b008      	add	sp, #32
 80059c4:	bd10      	pop	{r4, pc}
 80059c6:	46c0      	nop			@ (mov r8, r8)
 80059c8:	2000062c 	.word	0x2000062c
 80059cc:	40000400 	.word	0x40000400
 80059d0:	0000f9ff 	.word	0x0000f9ff

080059d4 <HAL_TIM_Base_MspInit>:
  HAL_TIM_MspPostInit(&htim17);

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80059d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  if(tim_baseHandle->Instance==TIM3)
 80059d6:	6803      	ldr	r3, [r0, #0]
 80059d8:	4a1b      	ldr	r2, [pc, #108]	@ (8005a48 <HAL_TIM_Base_MspInit+0x74>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d111      	bne.n	8005a02 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80059de:	2102      	movs	r1, #2
 80059e0:	4b1a      	ldr	r3, [pc, #104]	@ (8005a4c <HAL_TIM_Base_MspInit+0x78>)

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80059e2:	2010      	movs	r0, #16
    __HAL_RCC_TIM3_CLK_ENABLE();
 80059e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80059e6:	430a      	orrs	r2, r1
 80059e8:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80059ea:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 80059ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ee:	400b      	ands	r3, r1
 80059f0:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80059f2:	0011      	movs	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 80059f4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80059f6:	f000 fe55 	bl	80066a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80059fa:	2010      	movs	r0, #16
    /* TIM17 clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();

    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80059fc:	f000 fe7c 	bl	80066f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8005a00:	e00c      	b.n	8005a1c <HAL_TIM_Base_MspInit+0x48>
  else if(tim_baseHandle->Instance==TIM16)
 8005a02:	4a13      	ldr	r2, [pc, #76]	@ (8005a50 <HAL_TIM_Base_MspInit+0x7c>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d10b      	bne.n	8005a20 <HAL_TIM_Base_MspInit+0x4c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005a08:	2180      	movs	r1, #128	@ 0x80
 8005a0a:	4b10      	ldr	r3, [pc, #64]	@ (8005a4c <HAL_TIM_Base_MspInit+0x78>)
 8005a0c:	0289      	lsls	r1, r1, #10
 8005a0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a10:	430a      	orrs	r2, r1
 8005a12:	641a      	str	r2, [r3, #64]	@ 0x40
 8005a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a16:	400b      	ands	r3, r1
 8005a18:	9302      	str	r3, [sp, #8]
 8005a1a:	9b02      	ldr	r3, [sp, #8]
}
 8005a1c:	b005      	add	sp, #20
 8005a1e:	bd00      	pop	{pc}
  else if(tim_baseHandle->Instance==TIM17)
 8005a20:	4a0c      	ldr	r2, [pc, #48]	@ (8005a54 <HAL_TIM_Base_MspInit+0x80>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d1fa      	bne.n	8005a1c <HAL_TIM_Base_MspInit+0x48>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8005a26:	2180      	movs	r1, #128	@ 0x80
 8005a28:	4b08      	ldr	r3, [pc, #32]	@ (8005a4c <HAL_TIM_Base_MspInit+0x78>)
 8005a2a:	02c9      	lsls	r1, r1, #11
 8005a2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8005a2e:	2016      	movs	r0, #22
    __HAL_RCC_TIM17_CLK_ENABLE();
 8005a30:	430a      	orrs	r2, r1
 8005a32:	641a      	str	r2, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8005a34:	2200      	movs	r2, #0
    __HAL_RCC_TIM17_CLK_ENABLE();
 8005a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a38:	400b      	ands	r3, r1
 8005a3a:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8005a3c:	0011      	movs	r1, r2
    __HAL_RCC_TIM17_CLK_ENABLE();
 8005a3e:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8005a40:	f000 fe30 	bl	80066a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8005a44:	2016      	movs	r0, #22
 8005a46:	e7d9      	b.n	80059fc <HAL_TIM_Base_MspInit+0x28>
 8005a48:	40000400 	.word	0x40000400
 8005a4c:	40021000 	.word	0x40021000
 8005a50:	40014400 	.word	0x40014400
 8005a54:	40014800 	.word	0x40014800

08005a58 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005a58:	b510      	push	{r4, lr}
 8005a5a:	0004      	movs	r4, r0
 8005a5c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a5e:	2214      	movs	r2, #20
 8005a60:	2100      	movs	r1, #0
 8005a62:	a803      	add	r0, sp, #12
 8005a64:	f003 fc96 	bl	8009394 <memset>
  if(timHandle->Instance==TIM16)
 8005a68:	6823      	ldr	r3, [r4, #0]
 8005a6a:	4a15      	ldr	r2, [pc, #84]	@ (8005ac0 <HAL_TIM_MspPostInit+0x68>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d113      	bne.n	8005a98 <HAL_TIM_MspPostInit+0x40>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005a70:	2108      	movs	r1, #8
 8005a72:	4b14      	ldr	r3, [pc, #80]	@ (8005ac4 <HAL_TIM_MspPostInit+0x6c>)
    GPIO_InitStruct.Pin = BUZZER_PWM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
    HAL_GPIO_Init(BUZZER_PWM_GPIO_Port, &GPIO_InitStruct);
 8005a74:	4814      	ldr	r0, [pc, #80]	@ (8005ac8 <HAL_TIM_MspPostInit+0x70>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005a76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	635a      	str	r2, [r3, #52]	@ 0x34
 8005a7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a7e:	400b      	ands	r3, r1
 8005a80:	9301      	str	r3, [sp, #4]
 8005a82:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = BUZZER_PWM_Pin;
 8005a84:	2301      	movs	r3, #1
 8005a86:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a88:	18db      	adds	r3, r3, r3
 8005a8a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8005a8c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(BUZZER_PWM_GPIO_Port, &GPIO_InitStruct);
 8005a8e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = HEATER_PWM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
    HAL_GPIO_Init(HEATER_PWM_GPIO_Port, &GPIO_InitStruct);
 8005a90:	f000 fe58 	bl	8006744 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8005a94:	b008      	add	sp, #32
 8005a96:	bd10      	pop	{r4, pc}
  else if(timHandle->Instance==TIM17)
 8005a98:	4a0c      	ldr	r2, [pc, #48]	@ (8005acc <HAL_TIM_MspPostInit+0x74>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d1fa      	bne.n	8005a94 <HAL_TIM_MspPostInit+0x3c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a9e:	2302      	movs	r3, #2
 8005aa0:	4a08      	ldr	r2, [pc, #32]	@ (8005ac4 <HAL_TIM_MspPostInit+0x6c>)
    HAL_GPIO_Init(HEATER_PWM_GPIO_Port, &GPIO_InitStruct);
 8005aa2:	480b      	ldr	r0, [pc, #44]	@ (8005ad0 <HAL_TIM_MspPostInit+0x78>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005aa4:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8005aa6:	4319      	orrs	r1, r3
 8005aa8:	6351      	str	r1, [r2, #52]	@ 0x34
 8005aaa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
    HAL_GPIO_Init(HEATER_PWM_GPIO_Port, &GPIO_InitStruct);
 8005aac:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005aae:	401a      	ands	r2, r3
 8005ab0:	9202      	str	r2, [sp, #8]
 8005ab2:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Pin = HEATER_PWM_Pin;
 8005ab4:	2280      	movs	r2, #128	@ 0x80
 8005ab6:	0092      	lsls	r2, r2, #2
 8005ab8:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005aba:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 8005abc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(HEATER_PWM_GPIO_Port, &GPIO_InitStruct);
 8005abe:	e7e7      	b.n	8005a90 <HAL_TIM_MspPostInit+0x38>
 8005ac0:	40014400 	.word	0x40014400
 8005ac4:	40021000 	.word	0x40021000
 8005ac8:	50000c00 	.word	0x50000c00
 8005acc:	40014800 	.word	0x40014800
 8005ad0:	50000400 	.word	0x50000400

08005ad4 <MX_TIM16_Init>:
{
 8005ad4:	b530      	push	{r4, r5, lr}
 8005ad6:	b095      	sub	sp, #84	@ 0x54
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005ad8:	221c      	movs	r2, #28
 8005ada:	2100      	movs	r1, #0
 8005adc:	4668      	mov	r0, sp
 8005ade:	f003 fc59 	bl	8009394 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005ae2:	2234      	movs	r2, #52	@ 0x34
 8005ae4:	2100      	movs	r1, #0
 8005ae6:	a807      	add	r0, sp, #28
 8005ae8:	f003 fc54 	bl	8009394 <memset>
  htim16.Instance = TIM16;
 8005aec:	4d21      	ldr	r5, [pc, #132]	@ (8005b74 <MX_TIM16_Init+0xa0>)
 8005aee:	4b22      	ldr	r3, [pc, #136]	@ (8005b78 <MX_TIM16_Init+0xa4>)
  htim16.Init.Period = 1000-1;
 8005af0:	4a22      	ldr	r2, [pc, #136]	@ (8005b7c <MX_TIM16_Init+0xa8>)
  htim16.Instance = TIM16;
 8005af2:	602b      	str	r3, [r5, #0]
  htim16.Init.Prescaler = 16-1;
 8005af4:	230f      	movs	r3, #15
 8005af6:	606b      	str	r3, [r5, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005af8:	2300      	movs	r3, #0
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8005afa:	0028      	movs	r0, r5
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005afc:	60ab      	str	r3, [r5, #8]
  htim16.Init.Period = 1000-1;
 8005afe:	60ea      	str	r2, [r5, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b00:	612b      	str	r3, [r5, #16]
  htim16.Init.RepetitionCounter = 0;
 8005b02:	616b      	str	r3, [r5, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b04:	61ab      	str	r3, [r5, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8005b06:	f002 f8bb 	bl	8007c80 <HAL_TIM_Base_Init>
 8005b0a:	2800      	cmp	r0, #0
 8005b0c:	d001      	beq.n	8005b12 <MX_TIM16_Init+0x3e>
    Error_Handler();
 8005b0e:	f7ff fe8b 	bl	8005828 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8005b12:	0028      	movs	r0, r5
 8005b14:	f002 f8de 	bl	8007cd4 <HAL_TIM_PWM_Init>
 8005b18:	2800      	cmp	r0, #0
 8005b1a:	d001      	beq.n	8005b20 <MX_TIM16_Init+0x4c>
    Error_Handler();
 8005b1c:	f7ff fe84 	bl	8005828 <Error_Handler>
  sConfigOC.Pulse = 0;
 8005b20:	2400      	movs	r4, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005b22:	2360      	movs	r3, #96	@ 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005b24:	0022      	movs	r2, r4
 8005b26:	4669      	mov	r1, sp
 8005b28:	0028      	movs	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005b2a:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 0;
 8005b2c:	9401      	str	r4, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005b2e:	9402      	str	r4, [sp, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005b30:	9403      	str	r4, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005b32:	9404      	str	r4, [sp, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005b34:	9405      	str	r4, [sp, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005b36:	9406      	str	r4, [sp, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005b38:	f002 f932 	bl	8007da0 <HAL_TIM_PWM_ConfigChannel>
 8005b3c:	42a0      	cmp	r0, r4
 8005b3e:	d001      	beq.n	8005b44 <MX_TIM16_Init+0x70>
    Error_Handler();
 8005b40:	f7ff fe72 	bl	8005828 <Error_Handler>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005b44:	2380      	movs	r3, #128	@ 0x80
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8005b46:	0028      	movs	r0, r5
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005b48:	019b      	lsls	r3, r3, #6
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8005b4a:	a907      	add	r1, sp, #28
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005b4c:	9407      	str	r4, [sp, #28]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005b4e:	9408      	str	r4, [sp, #32]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005b50:	9409      	str	r4, [sp, #36]	@ 0x24
  sBreakDeadTimeConfig.DeadTime = 0;
 8005b52:	940a      	str	r4, [sp, #40]	@ 0x28
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005b54:	940b      	str	r4, [sp, #44]	@ 0x2c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005b56:	930c      	str	r3, [sp, #48]	@ 0x30
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005b58:	940d      	str	r4, [sp, #52]	@ 0x34
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005b5a:	9413      	str	r4, [sp, #76]	@ 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8005b5c:	f002 fb8c 	bl	8008278 <HAL_TIMEx_ConfigBreakDeadTime>
 8005b60:	2800      	cmp	r0, #0
 8005b62:	d001      	beq.n	8005b68 <MX_TIM16_Init+0x94>
    Error_Handler();
 8005b64:	f7ff fe60 	bl	8005828 <Error_Handler>
  HAL_TIM_MspPostInit(&htim16);
 8005b68:	0028      	movs	r0, r5
 8005b6a:	f7ff ff75 	bl	8005a58 <HAL_TIM_MspPostInit>
}
 8005b6e:	b015      	add	sp, #84	@ 0x54
 8005b70:	bd30      	pop	{r4, r5, pc}
 8005b72:	46c0      	nop			@ (mov r8, r8)
 8005b74:	200005e0 	.word	0x200005e0
 8005b78:	40014400 	.word	0x40014400
 8005b7c:	000003e7 	.word	0x000003e7

08005b80 <MX_TIM17_Init>:
{
 8005b80:	b530      	push	{r4, r5, lr}
 8005b82:	b095      	sub	sp, #84	@ 0x54
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005b84:	221c      	movs	r2, #28
 8005b86:	2100      	movs	r1, #0
 8005b88:	4668      	mov	r0, sp
 8005b8a:	f003 fc03 	bl	8009394 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005b8e:	2234      	movs	r2, #52	@ 0x34
 8005b90:	2100      	movs	r1, #0
 8005b92:	a807      	add	r0, sp, #28
 8005b94:	f003 fbfe 	bl	8009394 <memset>
  htim17.Instance = TIM17;
 8005b98:	4d21      	ldr	r5, [pc, #132]	@ (8005c20 <MX_TIM17_Init+0xa0>)
 8005b9a:	4b22      	ldr	r3, [pc, #136]	@ (8005c24 <MX_TIM17_Init+0xa4>)
  htim17.Init.Period = 256-1;
 8005b9c:	22ff      	movs	r2, #255	@ 0xff
  htim17.Instance = TIM17;
 8005b9e:	602b      	str	r3, [r5, #0]
  htim17.Init.Prescaler = 64000-1;
 8005ba0:	4b21      	ldr	r3, [pc, #132]	@ (8005c28 <MX_TIM17_Init+0xa8>)
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8005ba2:	0028      	movs	r0, r5
  htim17.Init.Prescaler = 64000-1;
 8005ba4:	606b      	str	r3, [r5, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ba6:	2300      	movs	r3, #0
  htim17.Init.Period = 256-1;
 8005ba8:	60ea      	str	r2, [r5, #12]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005baa:	60ab      	str	r3, [r5, #8]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005bac:	612b      	str	r3, [r5, #16]
  htim17.Init.RepetitionCounter = 0;
 8005bae:	616b      	str	r3, [r5, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005bb0:	61ab      	str	r3, [r5, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8005bb2:	f002 f865 	bl	8007c80 <HAL_TIM_Base_Init>
 8005bb6:	2800      	cmp	r0, #0
 8005bb8:	d001      	beq.n	8005bbe <MX_TIM17_Init+0x3e>
    Error_Handler();
 8005bba:	f7ff fe35 	bl	8005828 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8005bbe:	0028      	movs	r0, r5
 8005bc0:	f002 f888 	bl	8007cd4 <HAL_TIM_PWM_Init>
 8005bc4:	2800      	cmp	r0, #0
 8005bc6:	d001      	beq.n	8005bcc <MX_TIM17_Init+0x4c>
    Error_Handler();
 8005bc8:	f7ff fe2e 	bl	8005828 <Error_Handler>
  sConfigOC.Pulse = 0;
 8005bcc:	2400      	movs	r4, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005bce:	2360      	movs	r3, #96	@ 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005bd0:	0022      	movs	r2, r4
 8005bd2:	4669      	mov	r1, sp
 8005bd4:	0028      	movs	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005bd6:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 0;
 8005bd8:	9401      	str	r4, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005bda:	9402      	str	r4, [sp, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005bdc:	9403      	str	r4, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005bde:	9404      	str	r4, [sp, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005be0:	9405      	str	r4, [sp, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005be2:	9406      	str	r4, [sp, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005be4:	f002 f8dc 	bl	8007da0 <HAL_TIM_PWM_ConfigChannel>
 8005be8:	42a0      	cmp	r0, r4
 8005bea:	d001      	beq.n	8005bf0 <MX_TIM17_Init+0x70>
    Error_Handler();
 8005bec:	f7ff fe1c 	bl	8005828 <Error_Handler>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005bf0:	2380      	movs	r3, #128	@ 0x80
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8005bf2:	0028      	movs	r0, r5
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005bf4:	019b      	lsls	r3, r3, #6
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8005bf6:	a907      	add	r1, sp, #28
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005bf8:	9407      	str	r4, [sp, #28]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005bfa:	9408      	str	r4, [sp, #32]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005bfc:	9409      	str	r4, [sp, #36]	@ 0x24
  sBreakDeadTimeConfig.DeadTime = 0;
 8005bfe:	940a      	str	r4, [sp, #40]	@ 0x28
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005c00:	940b      	str	r4, [sp, #44]	@ 0x2c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005c02:	930c      	str	r3, [sp, #48]	@ 0x30
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005c04:	940d      	str	r4, [sp, #52]	@ 0x34
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005c06:	9413      	str	r4, [sp, #76]	@ 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8005c08:	f002 fb36 	bl	8008278 <HAL_TIMEx_ConfigBreakDeadTime>
 8005c0c:	2800      	cmp	r0, #0
 8005c0e:	d001      	beq.n	8005c14 <MX_TIM17_Init+0x94>
    Error_Handler();
 8005c10:	f7ff fe0a 	bl	8005828 <Error_Handler>
  HAL_TIM_MspPostInit(&htim17);
 8005c14:	0028      	movs	r0, r5
 8005c16:	f7ff ff1f 	bl	8005a58 <HAL_TIM_MspPostInit>
}
 8005c1a:	b015      	add	sp, #84	@ 0x54
 8005c1c:	bd30      	pop	{r4, r5, pc}
 8005c1e:	46c0      	nop			@ (mov r8, r8)
 8005c20:	20000594 	.word	0x20000594
 8005c24:	40014800 	.word	0x40014800
 8005c28:	0000f9ff 	.word	0x0000f9ff

08005c2c <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005c2c:	480c      	ldr	r0, [pc, #48]	@ (8005c60 <MX_USART2_UART_Init+0x34>)
 8005c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8005c64 <MX_USART2_UART_Init+0x38>)
{
 8005c30:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 8005c32:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8005c34:	23e1      	movs	r3, #225	@ 0xe1
 8005c36:	025b      	lsls	r3, r3, #9
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005c38:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 115200;
 8005c3a:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005c3c:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005c3e:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005c40:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005c42:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005c44:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005c46:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005c48:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005c4a:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005c4c:	6243      	str	r3, [r0, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005c4e:	6283      	str	r3, [r0, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005c50:	f002 fdda 	bl	8008808 <HAL_UART_Init>
 8005c54:	2800      	cmp	r0, #0
 8005c56:	d001      	beq.n	8005c5c <MX_USART2_UART_Init+0x30>
  {
    Error_Handler();
 8005c58:	f7ff fde6 	bl	8005828 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005c5c:	bd10      	pop	{r4, pc}
 8005c5e:	46c0      	nop			@ (mov r8, r8)
 8005c60:	20000678 	.word	0x20000678
 8005c64:	40004400 	.word	0x40004400

08005c68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005c68:	b510      	push	{r4, lr}
 8005c6a:	0004      	movs	r4, r0
 8005c6c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c6e:	2214      	movs	r2, #20
 8005c70:	2100      	movs	r1, #0
 8005c72:	a803      	add	r0, sp, #12
 8005c74:	f003 fb8e 	bl	8009394 <memset>
  if(uartHandle->Instance==USART2)
 8005c78:	4b10      	ldr	r3, [pc, #64]	@ (8005cbc <HAL_UART_MspInit+0x54>)
 8005c7a:	6822      	ldr	r2, [r4, #0]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d11b      	bne.n	8005cb8 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005c80:	2180      	movs	r1, #128	@ 0x80
 8005c82:	4b0f      	ldr	r3, [pc, #60]	@ (8005cc0 <HAL_UART_MspInit+0x58>)
 8005c84:	0289      	lsls	r1, r1, #10
 8005c86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c88:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 8005c8a:	430a      	orrs	r2, r1
 8005c8c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005c8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c90:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_ENABLE();
 8005c92:	400a      	ands	r2, r1
 8005c94:	9201      	str	r2, [sp, #4]
 8005c96:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c98:	2201      	movs	r2, #1
 8005c9a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005c9c:	4311      	orrs	r1, r2
 8005c9e:	6359      	str	r1, [r3, #52]	@ 0x34
 8005ca0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ca2:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	9302      	str	r3, [sp, #8]
 8005ca8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005caa:	230c      	movs	r3, #12
 8005cac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cae:	3b0a      	subs	r3, #10
 8005cb0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8005cb2:	9207      	str	r2, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cb4:	f000 fd46 	bl	8006744 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005cb8:	b008      	add	sp, #32
 8005cba:	bd10      	pop	{r4, pc}
 8005cbc:	40004400 	.word	0x40004400
 8005cc0:	40021000 	.word	0x40021000

08005cc4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005cc4:	480d      	ldr	r0, [pc, #52]	@ (8005cfc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005cc6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005cc8:	f7ff fe44 	bl	8005954 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005ccc:	480c      	ldr	r0, [pc, #48]	@ (8005d00 <LoopForever+0x6>)
  ldr r1, =_edata
 8005cce:	490d      	ldr	r1, [pc, #52]	@ (8005d04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005cd0:	4a0d      	ldr	r2, [pc, #52]	@ (8005d08 <LoopForever+0xe>)
  movs r3, #0
 8005cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005cd4:	e002      	b.n	8005cdc <LoopCopyDataInit>

08005cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005cda:	3304      	adds	r3, #4

08005cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005ce0:	d3f9      	bcc.n	8005cd6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8005d0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005ce4:	4c0a      	ldr	r4, [pc, #40]	@ (8005d10 <LoopForever+0x16>)
  movs r3, #0
 8005ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005ce8:	e001      	b.n	8005cee <LoopFillZerobss>

08005cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005cec:	3204      	adds	r2, #4

08005cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005cf0:	d3fb      	bcc.n	8005cea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005cf2:	f003 fbaf 	bl	8009454 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8005cf6:	f7ff fbcf 	bl	8005498 <main>

08005cfa <LoopForever>:

LoopForever:
  b LoopForever
 8005cfa:	e7fe      	b.n	8005cfa <LoopForever>
  ldr   r0, =_estack
 8005cfc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8005d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005d04:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8005d08:	0800de64 	.word	0x0800de64
  ldr r2, =_sbss
 8005d0c:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8005d10:	2000085c 	.word	0x2000085c

08005d14 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005d14:	e7fe      	b.n	8005d14 <ADC1_IRQHandler>
	...

08005d18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005d18:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8005d1a:	4b10      	ldr	r3, [pc, #64]	@ (8005d5c <HAL_InitTick+0x44>)
{
 8005d1c:	0005      	movs	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 8005d1e:	7819      	ldrb	r1, [r3, #0]
 8005d20:	2900      	cmp	r1, #0
 8005d22:	d101      	bne.n	8005d28 <HAL_InitTick+0x10>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8005d24:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8005d26:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8005d28:	20fa      	movs	r0, #250	@ 0xfa
 8005d2a:	0080      	lsls	r0, r0, #2
 8005d2c:	f7fa fa0e 	bl	800014c <__udivsi3>
 8005d30:	4c0b      	ldr	r4, [pc, #44]	@ (8005d60 <HAL_InitTick+0x48>)
 8005d32:	0001      	movs	r1, r0
 8005d34:	6820      	ldr	r0, [r4, #0]
 8005d36:	f7fa fa09 	bl	800014c <__udivsi3>
 8005d3a:	f000 fce9 	bl	8006710 <HAL_SYSTICK_Config>
 8005d3e:	1e04      	subs	r4, r0, #0
 8005d40:	d1f0      	bne.n	8005d24 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005d42:	2d03      	cmp	r5, #3
 8005d44:	d8ee      	bhi.n	8005d24 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005d46:	0002      	movs	r2, r0
 8005d48:	2001      	movs	r0, #1
 8005d4a:	0029      	movs	r1, r5
 8005d4c:	4240      	negs	r0, r0
 8005d4e:	f000 fca9 	bl	80066a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005d52:	4b04      	ldr	r3, [pc, #16]	@ (8005d64 <HAL_InitTick+0x4c>)
 8005d54:	0020      	movs	r0, r4
 8005d56:	601d      	str	r5, [r3, #0]
  return status;
 8005d58:	e7e5      	b.n	8005d26 <HAL_InitTick+0xe>
 8005d5a:	46c0      	nop			@ (mov r8, r8)
 8005d5c:	2000002c 	.word	0x2000002c
 8005d60:	20000028 	.word	0x20000028
 8005d64:	20000030 	.word	0x20000030

08005d68 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005d68:	2380      	movs	r3, #128	@ 0x80
 8005d6a:	4a08      	ldr	r2, [pc, #32]	@ (8005d8c <HAL_Init+0x24>)
 8005d6c:	005b      	lsls	r3, r3, #1
 8005d6e:	6811      	ldr	r1, [r2, #0]
{
 8005d70:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005d72:	430b      	orrs	r3, r1
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005d74:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005d76:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005d78:	f7ff ffce 	bl	8005d18 <HAL_InitTick>
 8005d7c:	1e04      	subs	r4, r0, #0
 8005d7e:	d103      	bne.n	8005d88 <HAL_Init+0x20>
  HAL_MspInit();
 8005d80:	f7ff fd54 	bl	800582c <HAL_MspInit>
}
 8005d84:	0020      	movs	r0, r4
 8005d86:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8005d88:	2401      	movs	r4, #1
 8005d8a:	e7fb      	b.n	8005d84 <HAL_Init+0x1c>
 8005d8c:	40022000 	.word	0x40022000

08005d90 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8005d90:	4a03      	ldr	r2, [pc, #12]	@ (8005da0 <HAL_IncTick+0x10>)
 8005d92:	4b04      	ldr	r3, [pc, #16]	@ (8005da4 <HAL_IncTick+0x14>)
 8005d94:	6811      	ldr	r1, [r2, #0]
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	185b      	adds	r3, r3, r1
 8005d9a:	6013      	str	r3, [r2, #0]
}
 8005d9c:	4770      	bx	lr
 8005d9e:	46c0      	nop			@ (mov r8, r8)
 8005da0:	2000070c 	.word	0x2000070c
 8005da4:	2000002c 	.word	0x2000002c

08005da8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005da8:	4b01      	ldr	r3, [pc, #4]	@ (8005db0 <HAL_GetTick+0x8>)
 8005daa:	6818      	ldr	r0, [r3, #0]
}
 8005dac:	4770      	bx	lr
 8005dae:	46c0      	nop			@ (mov r8, r8)
 8005db0:	2000070c 	.word	0x2000070c

08005db4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005db4:	b570      	push	{r4, r5, r6, lr}
 8005db6:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005db8:	f7ff fff6 	bl	8005da8 <HAL_GetTick>
 8005dbc:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005dbe:	1c63      	adds	r3, r4, #1
 8005dc0:	d002      	beq.n	8005dc8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8005dc2:	4b04      	ldr	r3, [pc, #16]	@ (8005dd4 <HAL_Delay+0x20>)
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005dc8:	f7ff ffee 	bl	8005da8 <HAL_GetTick>
 8005dcc:	1b40      	subs	r0, r0, r5
 8005dce:	42a0      	cmp	r0, r4
 8005dd0:	d3fa      	bcc.n	8005dc8 <HAL_Delay+0x14>
  {
  }
}
 8005dd2:	bd70      	pop	{r4, r5, r6, pc}
 8005dd4:	2000002c 	.word	0x2000002c

08005dd8 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005dd8:	6880      	ldr	r0, [r0, #8]
 8005dda:	0740      	lsls	r0, r0, #29
 8005ddc:	0fc0      	lsrs	r0, r0, #31
}
 8005dde:	4770      	bx	lr

08005de0 <HAL_ADC_Init>:
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr1 = 0UL;
  uint32_t tmp_cfgr2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005de0:	2300      	movs	r3, #0
{
 8005de2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005de4:	b085      	sub	sp, #20
 8005de6:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8005de8:	9303      	str	r3, [sp, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005dea:	4298      	cmp	r0, r3
 8005dec:	d100      	bne.n	8005df0 <HAL_ADC_Init+0x10>
 8005dee:	e0f0      	b.n	8005fd2 <HAL_ADC_Init+0x1f2>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005df0:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 8005df2:	429d      	cmp	r5, r3
 8005df4:	d105      	bne.n	8005e02 <HAL_ADC_Init+0x22>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005df6:	f7ff f9c7 	bl	8005188 <HAL_ADC_MspInit>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005dfa:	0023      	movs	r3, r4
 8005dfc:	3354      	adds	r3, #84	@ 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 8005dfe:	65e5      	str	r5, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8005e00:	701d      	strb	r5, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005e02:	2380      	movs	r3, #128	@ 0x80
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005e04:	6825      	ldr	r5, [r4, #0]
 8005e06:	055b      	lsls	r3, r3, #21
 8005e08:	68aa      	ldr	r2, [r5, #8]
 8005e0a:	421a      	tst	r2, r3
 8005e0c:	d100      	bne.n	8005e10 <HAL_ADC_Init+0x30>
 8005e0e:	e0a7      	b.n	8005f60 <HAL_ADC_Init+0x180>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e10:	2200      	movs	r2, #0
 8005e12:	68ab      	ldr	r3, [r5, #8]
 8005e14:	9201      	str	r2, [sp, #4]
 8005e16:	00db      	lsls	r3, r3, #3
 8005e18:	d408      	bmi.n	8005e2c <HAL_ADC_Init+0x4c>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e1a:	2310      	movs	r3, #16

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e1c:	2601      	movs	r6, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e1e:	6da2      	ldr	r2, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8005e20:	9601      	str	r6, [sp, #4]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e22:	4313      	orrs	r3, r2
 8005e24:	65a3      	str	r3, [r4, #88]	@ 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e26:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005e28:	4333      	orrs	r3, r6
 8005e2a:	65e3      	str	r3, [r4, #92]	@ 0x5c

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005e2c:	0028      	movs	r0, r5
 8005e2e:	f7ff ffd3 	bl	8005dd8 <LL_ADC_REG_IsConversionOngoing>

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005e32:	2210      	movs	r2, #16
 8005e34:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005e36:	4013      	ands	r3, r2
 8005e38:	4303      	orrs	r3, r0
 8005e3a:	d000      	beq.n	8005e3e <HAL_ADC_Init+0x5e>
 8005e3c:	e0cc      	b.n	8005fd8 <HAL_ADC_Init+0x1f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005e3e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8005e40:	4b67      	ldr	r3, [pc, #412]	@ (8005fe0 <HAL_ADC_Init+0x200>)
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
                    hadc->Init.DataAlign                                           |
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005e42:	6920      	ldr	r0, [r4, #16]
    ADC_STATE_CLR_SET(hadc->State,
 8005e44:	401a      	ands	r2, r3
 8005e46:	3306      	adds	r3, #6
 8005e48:	33ff      	adds	r3, #255	@ 0xff
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005e4e:	68ab      	ldr	r3, [r5, #8]
 8005e50:	07db      	lsls	r3, r3, #31
 8005e52:	d461      	bmi.n	8005f18 <HAL_ADC_Init+0x138>
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005e54:	6b27      	ldr	r7, [r4, #48]	@ 0x30
 8005e56:	68e1      	ldr	r1, [r4, #12]
 8005e58:	1e7b      	subs	r3, r7, #1
 8005e5a:	419f      	sbcs	r7, r3
 8005e5c:	68a3      	ldr	r3, [r4, #8]
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005e5e:	7ea2      	ldrb	r2, [r4, #26]
 8005e60:	430b      	orrs	r3, r1
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005e62:	7e21      	ldrb	r1, [r4, #24]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005e64:	033f      	lsls	r7, r7, #12
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005e66:	0389      	lsls	r1, r1, #14
 8005e68:	430b      	orrs	r3, r1
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005e6a:	7e61      	ldrb	r1, [r4, #25]
 8005e6c:	03c9      	lsls	r1, r1, #15
 8005e6e:	430b      	orrs	r3, r1
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005e70:	0351      	lsls	r1, r2, #13
 8005e72:	430b      	orrs	r3, r1
 8005e74:	469c      	mov	ip, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005e76:	2800      	cmp	r0, #0
 8005e78:	db00      	blt.n	8005e7c <HAL_ADC_Init+0x9c>
 8005e7a:	e086      	b.n	8005f8a <HAL_ADC_Init+0x1aa>
 8005e7c:	0041      	lsls	r1, r0, #1
 8005e7e:	0849      	lsrs	r1, r1, #1
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005e80:	0023      	movs	r3, r4
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005e82:	4666      	mov	r6, ip
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005e84:	332c      	adds	r3, #44	@ 0x2c
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005e8a:	4333      	orrs	r3, r6
 8005e8c:	433b      	orrs	r3, r7
 8005e8e:	430b      	orrs	r3, r1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005e90:	1c61      	adds	r1, r4, #1
 8005e92:	7fc9      	ldrb	r1, [r1, #31]
 8005e94:	2901      	cmp	r1, #1
 8005e96:	d105      	bne.n	8005ea4 <HAL_ADC_Init+0xc4>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8005e98:	2a00      	cmp	r2, #0
 8005e9a:	d000      	beq.n	8005e9e <HAL_ADC_Init+0xbe>
 8005e9c:	e078      	b.n	8005f90 <HAL_ADC_Init+0x1b0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8005e9e:	2280      	movs	r2, #128	@ 0x80
 8005ea0:	0252      	lsls	r2, r2, #9
 8005ea2:	4313      	orrs	r3, r2
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005ea4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005ea6:	2a00      	cmp	r2, #0
 8005ea8:	d005      	beq.n	8005eb6 <HAL_ADC_Init+0xd6>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005eaa:	21e0      	movs	r1, #224	@ 0xe0
 8005eac:	0049      	lsls	r1, r1, #1
 8005eae:	400a      	ands	r2, r1
 8005eb0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	4313      	orrs	r3, r2
                      hadc->Init.ExternalTrigConvEdge);
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8005eb6:	68ea      	ldr	r2, [r5, #12]
 8005eb8:	494a      	ldr	r1, [pc, #296]	@ (8005fe4 <HAL_ADC_Init+0x204>)
 8005eba:	400a      	ands	r2, r1
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	60eb      	str	r3, [r5, #12]

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
                    hadc->Init.TriggerFrequencyMode
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8005ec0:	0023      	movs	r3, r4
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005ec2:	6862      	ldr	r2, [r4, #4]
      if (hadc->Init.OversamplingMode == ENABLE)
 8005ec4:	333c      	adds	r3, #60	@ 0x3c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005ec6:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
      if (hadc->Init.OversamplingMode == ENABLE)
 8005ec8:	781b      	ldrb	r3, [r3, #0]
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005eca:	0f97      	lsrs	r7, r2, #30
 8005ecc:	07bf      	lsls	r7, r7, #30
      if (hadc->Init.OversamplingMode == ENABLE)
 8005ece:	469c      	mov	ip, r3
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005ed0:	4339      	orrs	r1, r7
      if (hadc->Init.OversamplingMode == ENABLE)
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d108      	bne.n	8005ee8 <HAL_ADC_Init+0x108>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8005ed6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005ed8:	6c66      	ldr	r6, [r4, #68]	@ 0x44
 8005eda:	4333      	orrs	r3, r6
 8005edc:	430b      	orrs	r3, r1
 8005ede:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005ee0:	430b      	orrs	r3, r1
 8005ee2:	4661      	mov	r1, ip
 8005ee4:	433b      	orrs	r3, r7
 8005ee6:	4319      	orrs	r1, r3
                      hadc->Init.Oversampling.RightBitShift |
                      hadc->Init.Oversampling.TriggeredMode
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8005ee8:	692b      	ldr	r3, [r5, #16]
 8005eea:	4f3f      	ldr	r7, [pc, #252]	@ (8005fe8 <HAL_ADC_Init+0x208>)
 8005eec:	403b      	ands	r3, r7
 8005eee:	430b      	orrs	r3, r1
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005ef0:	2180      	movs	r1, #128	@ 0x80
      MODIFY_REG(hadc->Instance->CFGR2,
 8005ef2:	612b      	str	r3, [r5, #16]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005ef4:	0053      	lsls	r3, r2, #1
 8005ef6:	085b      	lsrs	r3, r3, #1
 8005ef8:	05c9      	lsls	r1, r1, #23
 8005efa:	428b      	cmp	r3, r1
 8005efc:	d00c      	beq.n	8005f18 <HAL_ADC_Init+0x138>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005efe:	2380      	movs	r3, #128	@ 0x80
 8005f00:	061b      	lsls	r3, r3, #24
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d008      	beq.n	8005f18 <HAL_ADC_Init+0x138>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8005f06:	4939      	ldr	r1, [pc, #228]	@ (8005fec <HAL_ADC_Init+0x20c>)
 8005f08:	4f39      	ldr	r7, [pc, #228]	@ (8005ff0 <HAL_ADC_Init+0x210>)
 8005f0a:	680b      	ldr	r3, [r1, #0]
 8005f0c:	403b      	ands	r3, r7
 8005f0e:	27f0      	movs	r7, #240	@ 0xf0
 8005f10:	03bf      	lsls	r7, r7, #14
 8005f12:	403a      	ands	r2, r7
 8005f14:	4313      	orrs	r3, r2
 8005f16:	600b      	str	r3, [r1, #0]
  MODIFY_REG(ADCx->SMPR,
 8005f18:	2107      	movs	r1, #7
 8005f1a:	2770      	movs	r7, #112	@ 0x70
 8005f1c:	696b      	ldr	r3, [r5, #20]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8005f1e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8005f20:	438b      	bics	r3, r1
 8005f22:	4313      	orrs	r3, r2
 8005f24:	616b      	str	r3, [r5, #20]
 8005f26:	6969      	ldr	r1, [r5, #20]
 8005f28:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005f2a:	43b9      	bics	r1, r7
 8005f2c:	011b      	lsls	r3, r3, #4
 8005f2e:	430b      	orrs	r3, r1
 8005f30:	616b      	str	r3, [r5, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8005f32:	2800      	cmp	r0, #0
 8005f34:	d134      	bne.n	8005fa0 <HAL_ADC_Init+0x1c0>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8005f36:	2310      	movs	r3, #16
 8005f38:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8005f3a:	425b      	negs	r3, r3
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8005f3c:	430b      	orrs	r3, r1
 8005f3e:	62ab      	str	r3, [r5, #40]	@ 0x28
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8005f40:	2107      	movs	r1, #7
 8005f42:	696b      	ldr	r3, [r5, #20]
 8005f44:	400b      	ands	r3, r1
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d139      	bne.n	8005fbe <HAL_ADC_Init+0x1de>
        == hadc->Init.SamplingTimeCommon1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	65e3      	str	r3, [r4, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005f4e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8005f50:	3303      	adds	r3, #3
 8005f52:	439a      	bics	r2, r3
 8005f54:	3b02      	subs	r3, #2
 8005f56:	4313      	orrs	r3, r2
 8005f58:	65a3      	str	r3, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
  }

  return tmp_hal_status;
}
 8005f5a:	9801      	ldr	r0, [sp, #4]
 8005f5c:	b005      	add	sp, #20
 8005f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(ADCx->CR,
 8005f60:	68aa      	ldr	r2, [r5, #8]
 8005f62:	4924      	ldr	r1, [pc, #144]	@ (8005ff4 <HAL_ADC_Init+0x214>)
 8005f64:	400a      	ands	r2, r1
 8005f66:	4313      	orrs	r3, r2
 8005f68:	60ab      	str	r3, [r5, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005f6a:	4b23      	ldr	r3, [pc, #140]	@ (8005ff8 <HAL_ADC_Init+0x218>)
 8005f6c:	4923      	ldr	r1, [pc, #140]	@ (8005ffc <HAL_ADC_Init+0x21c>)
 8005f6e:	6818      	ldr	r0, [r3, #0]
 8005f70:	f7fa f8ec 	bl	800014c <__udivsi3>
 8005f74:	3001      	adds	r0, #1
 8005f76:	0040      	lsls	r0, r0, #1
 8005f78:	9003      	str	r0, [sp, #12]
    while (wait_loop_index != 0UL)
 8005f7a:	9b03      	ldr	r3, [sp, #12]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d100      	bne.n	8005f82 <HAL_ADC_Init+0x1a2>
 8005f80:	e746      	b.n	8005e10 <HAL_ADC_Init+0x30>
      wait_loop_index--;
 8005f82:	9b03      	ldr	r3, [sp, #12]
 8005f84:	3b01      	subs	r3, #1
 8005f86:	9303      	str	r3, [sp, #12]
 8005f88:	e7f7      	b.n	8005f7a <HAL_ADC_Init+0x19a>
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005f8a:	2180      	movs	r1, #128	@ 0x80
 8005f8c:	0389      	lsls	r1, r1, #14
 8005f8e:	e777      	b.n	8005e80 <HAL_ADC_Init+0xa0>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f90:	2220      	movs	r2, #32
 8005f92:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8005f94:	433a      	orrs	r2, r7
 8005f96:	65a2      	str	r2, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f98:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8005f9a:	4311      	orrs	r1, r2
 8005f9c:	65e1      	str	r1, [r4, #92]	@ 0x5c
 8005f9e:	e781      	b.n	8005ea4 <HAL_ADC_Init+0xc4>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005fa0:	2380      	movs	r3, #128	@ 0x80
 8005fa2:	039b      	lsls	r3, r3, #14
 8005fa4:	4298      	cmp	r0, r3
 8005fa6:	d1cb      	bne.n	8005f40 <HAL_ADC_Init+0x160>
      MODIFY_REG(hadc->Instance->CHSELR,
 8005fa8:	211c      	movs	r1, #28
 8005faa:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8005fac:	69e3      	ldr	r3, [r4, #28]
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	400b      	ands	r3, r1
 8005fb4:	392c      	subs	r1, #44	@ 0x2c
 8005fb6:	4099      	lsls	r1, r3
 8005fb8:	000b      	movs	r3, r1
 8005fba:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8005fbc:	e7be      	b.n	8005f3c <HAL_ADC_Init+0x15c>
      ADC_STATE_CLR_SET(hadc->State,
 8005fbe:	2312      	movs	r3, #18
 8005fc0:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8005fc2:	439a      	bics	r2, r3
 8005fc4:	3b02      	subs	r3, #2
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005fca:	2301      	movs	r3, #1
 8005fcc:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	65e3      	str	r3, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	9301      	str	r3, [sp, #4]
 8005fd6:	e7c0      	b.n	8005f5a <HAL_ADC_Init+0x17a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005fd8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005fda:	431a      	orrs	r2, r3
 8005fdc:	65a2      	str	r2, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 8005fde:	e7f8      	b.n	8005fd2 <HAL_ADC_Init+0x1f2>
 8005fe0:	fffffefd 	.word	0xfffffefd
 8005fe4:	ffde0201 	.word	0xffde0201
 8005fe8:	1ffffc02 	.word	0x1ffffc02
 8005fec:	40012708 	.word	0x40012708
 8005ff0:	ffc3ffff 	.word	0xffc3ffff
 8005ff4:	6fffffe8 	.word	0x6fffffe8
 8005ff8:	20000028 	.word	0x20000028
 8005ffc:	00030d40 	.word	0x00030d40

08006000 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8006000:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8006002:	6946      	ldr	r6, [r0, #20]
{
 8006004:	0004      	movs	r4, r0
 8006006:	000f      	movs	r7, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8006008:	2e08      	cmp	r6, #8
 800600a:	d00a      	beq.n	8006022 <HAL_ADC_PollForConversion+0x22>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 800600c:	6803      	ldr	r3, [r0, #0]
 800600e:	2001      	movs	r0, #1
 8006010:	68db      	ldr	r3, [r3, #12]

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8006012:	2604      	movs	r6, #4
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8006014:	4203      	tst	r3, r0
 8006016:	d004      	beq.n	8006022 <HAL_ADC_PollForConversion+0x22>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006018:	2320      	movs	r3, #32
 800601a:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800601c:	4313      	orrs	r3, r2
 800601e:	65a3      	str	r3, [r4, #88]	@ 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
  }

  /* Return function status */
  return HAL_OK;
}
 8006020:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 8006022:	f7ff fec1 	bl	8005da8 <HAL_GetTick>
 8006026:	9001      	str	r0, [sp, #4]
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8006028:	6825      	ldr	r5, [r4, #0]
 800602a:	682b      	ldr	r3, [r5, #0]
 800602c:	421e      	tst	r6, r3
 800602e:	d024      	beq.n	800607a <HAL_ADC_PollForConversion+0x7a>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006030:	2380      	movs	r3, #128	@ 0x80
 8006032:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	4313      	orrs	r3, r2
 8006038:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800603a:	23c0      	movs	r3, #192	@ 0xc0
 800603c:	68ea      	ldr	r2, [r5, #12]
 800603e:	011b      	lsls	r3, r3, #4
 8006040:	421a      	tst	r2, r3
 8006042:	d115      	bne.n	8006070 <HAL_ADC_PollForConversion+0x70>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8006044:	7ea3      	ldrb	r3, [r4, #26]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d112      	bne.n	8006070 <HAL_ADC_PollForConversion+0x70>
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800604a:	682b      	ldr	r3, [r5, #0]
 800604c:	071b      	lsls	r3, r3, #28
 800604e:	d50f      	bpl.n	8006070 <HAL_ADC_PollForConversion+0x70>
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006050:	0028      	movs	r0, r5
 8006052:	f7ff fec1 	bl	8005dd8 <LL_ADC_REG_IsConversionOngoing>
 8006056:	2800      	cmp	r0, #0
 8006058:	d127      	bne.n	80060aa <HAL_ADC_PollForConversion+0xaa>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800605a:	220c      	movs	r2, #12
 800605c:	686b      	ldr	r3, [r5, #4]
 800605e:	4393      	bics	r3, r2
 8006060:	606b      	str	r3, [r5, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8006062:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8006064:	4b17      	ldr	r3, [pc, #92]	@ (80060c4 <HAL_ADC_PollForConversion+0xc4>)
 8006066:	401a      	ands	r2, r3
 8006068:	3304      	adds	r3, #4
 800606a:	33ff      	adds	r3, #255	@ 0xff
 800606c:	4313      	orrs	r3, r2
 800606e:	65a3      	str	r3, [r4, #88]	@ 0x58
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8006070:	7e23      	ldrb	r3, [r4, #24]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d022      	beq.n	80060bc <HAL_ADC_PollForConversion+0xbc>
  return HAL_OK;
 8006076:	2000      	movs	r0, #0
 8006078:	e7d2      	b.n	8006020 <HAL_ADC_PollForConversion+0x20>
    if (Timeout != HAL_MAX_DELAY)
 800607a:	1c7b      	adds	r3, r7, #1
 800607c:	d0d5      	beq.n	800602a <HAL_ADC_PollForConversion+0x2a>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800607e:	f7ff fe93 	bl	8005da8 <HAL_GetTick>
 8006082:	9b01      	ldr	r3, [sp, #4]
 8006084:	1ac0      	subs	r0, r0, r3
 8006086:	42b8      	cmp	r0, r7
 8006088:	d801      	bhi.n	800608e <HAL_ADC_PollForConversion+0x8e>
 800608a:	2f00      	cmp	r7, #0
 800608c:	d1cc      	bne.n	8006028 <HAL_ADC_PollForConversion+0x28>
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800608e:	0032      	movs	r2, r6
 8006090:	6823      	ldr	r3, [r4, #0]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	401a      	ands	r2, r3
 8006096:	421e      	tst	r6, r3
 8006098:	d1c6      	bne.n	8006028 <HAL_ADC_PollForConversion+0x28>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800609a:	2304      	movs	r3, #4
 800609c:	6da1      	ldr	r1, [r4, #88]	@ 0x58
          __HAL_UNLOCK(hadc);
 800609e:	3454      	adds	r4, #84	@ 0x54
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80060a0:	430b      	orrs	r3, r1
 80060a2:	6063      	str	r3, [r4, #4]
          return HAL_TIMEOUT;
 80060a4:	2003      	movs	r0, #3
          __HAL_UNLOCK(hadc);
 80060a6:	7022      	strb	r2, [r4, #0]
          return HAL_TIMEOUT;
 80060a8:	e7ba      	b.n	8006020 <HAL_ADC_PollForConversion+0x20>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80060aa:	2320      	movs	r3, #32
 80060ac:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80060ae:	4313      	orrs	r3, r2
 80060b0:	65a3      	str	r3, [r4, #88]	@ 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80060b2:	2301      	movs	r3, #1
 80060b4:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80060b6:	4313      	orrs	r3, r2
 80060b8:	65e3      	str	r3, [r4, #92]	@ 0x5c
 80060ba:	e7d9      	b.n	8006070 <HAL_ADC_PollForConversion+0x70>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80060bc:	230c      	movs	r3, #12
 80060be:	602b      	str	r3, [r5, #0]
 80060c0:	e7d9      	b.n	8006076 <HAL_ADC_PollForConversion+0x76>
 80060c2:	46c0      	nop			@ (mov r8, r8)
 80060c4:	fffffefe 	.word	0xfffffefe

080060c8 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80060c8:	6803      	ldr	r3, [r0, #0]
 80060ca:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 80060cc:	4770      	bx	lr
	...

080060d0 <HAL_ADC_ConfigChannel>:
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80060d0:	2300      	movs	r3, #0
{
 80060d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060d4:	b085      	sub	sp, #20
  __IO uint32_t wait_loop_index = 0UL;
 80060d6:	9303      	str	r3, [sp, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80060d8:	0003      	movs	r3, r0
{
 80060da:	9100      	str	r1, [sp, #0]
  __HAL_LOCK(hadc);
 80060dc:	3354      	adds	r3, #84	@ 0x54
 80060de:	781a      	ldrb	r2, [r3, #0]
{
 80060e0:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80060e2:	2002      	movs	r0, #2
 80060e4:	2a01      	cmp	r2, #1
 80060e6:	d04d      	beq.n	8006184 <HAL_ADC_ConfigChannel+0xb4>
 80060e8:	2201      	movs	r2, #1
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80060ea:	6927      	ldr	r7, [r4, #16]
  __HAL_LOCK(hadc);
 80060ec:	701a      	strb	r2, [r3, #0]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80060ee:	6825      	ldr	r5, [r4, #0]
 80060f0:	0028      	movs	r0, r5
 80060f2:	f7ff fe71 	bl	8005dd8 <LL_ADC_REG_IsConversionOngoing>
 80060f6:	2800      	cmp	r0, #0
 80060f8:	d000      	beq.n	80060fc <HAL_ADC_ConfigChannel+0x2c>
 80060fa:	e0f7      	b.n	80062ec <HAL_ADC_ConfigChannel+0x21c>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80060fc:	9b00      	ldr	r3, [sp, #0]
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80060fe:	2204      	movs	r2, #4
    if (pConfig->Rank != ADC_RANK_NONE)
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	2180      	movs	r1, #128	@ 0x80
 8006104:	469c      	mov	ip, r3
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006106:	4397      	bics	r7, r2
    if (pConfig->Rank != ADC_RANK_NONE)
 8006108:	4662      	mov	r2, ip
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800610a:	9b00      	ldr	r3, [sp, #0]
 800610c:	0609      	lsls	r1, r1, #24
 800610e:	681b      	ldr	r3, [r3, #0]
    if (pConfig->Rank != ADC_RANK_NONE)
 8006110:	2a02      	cmp	r2, #2
 8006112:	d100      	bne.n	8006116 <HAL_ADC_ConfigChannel+0x46>
 8006114:	e0be      	b.n	8006294 <HAL_ADC_ConfigChannel+0x1c4>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8006116:	035a      	lsls	r2, r3, #13
 8006118:	0b52      	lsrs	r2, r2, #13
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800611a:	428f      	cmp	r7, r1
 800611c:	d134      	bne.n	8006188 <HAL_ADC_ConfigChannel+0xb8>
 800611e:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
  MODIFY_REG(ADCx->CHSELR,
 8006120:	430a      	orrs	r2, r1
 8006122:	62aa      	str	r2, [r5, #40]	@ 0x28
  MODIFY_REG(ADCx->SMPR,
 8006124:	9a00      	ldr	r2, [sp, #0]
 8006126:	6968      	ldr	r0, [r5, #20]
 8006128:	6892      	ldr	r2, [r2, #8]
 800612a:	0219      	lsls	r1, r3, #8
 800612c:	4e72      	ldr	r6, [pc, #456]	@ (80062f8 <HAL_ADC_ConfigChannel+0x228>)
 800612e:	400a      	ands	r2, r1
 8006130:	4032      	ands	r2, r6
 8006132:	4388      	bics	r0, r1
 8006134:	4302      	orrs	r2, r0
 8006136:	616a      	str	r2, [r5, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006138:	2b00      	cmp	r3, #0
 800613a:	da1f      	bge.n	800617c <HAL_ADC_ConfigChannel+0xac>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800613c:	21e0      	movs	r1, #224	@ 0xe0
 800613e:	4a6f      	ldr	r2, [pc, #444]	@ (80062fc <HAL_ADC_ConfigChannel+0x22c>)
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006140:	486f      	ldr	r0, [pc, #444]	@ (8006300 <HAL_ADC_ConfigChannel+0x230>)
 8006142:	6815      	ldr	r5, [r2, #0]
 8006144:	0449      	lsls	r1, r1, #17
 8006146:	4029      	ands	r1, r5
 8006148:	4283      	cmp	r3, r0
 800614a:	d000      	beq.n	800614e <HAL_ADC_ConfigChannel+0x7e>
 800614c:	e08c      	b.n	8006268 <HAL_ADC_ConfigChannel+0x198>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800614e:	2080      	movs	r0, #128	@ 0x80
 8006150:	0400      	lsls	r0, r0, #16
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006152:	4205      	tst	r5, r0
 8006154:	d112      	bne.n	800617c <HAL_ADC_ConfigChannel+0xac>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006156:	6813      	ldr	r3, [r2, #0]
 8006158:	4d6a      	ldr	r5, [pc, #424]	@ (8006304 <HAL_ADC_ConfigChannel+0x234>)
 800615a:	402b      	ands	r3, r5
 800615c:	430b      	orrs	r3, r1
 800615e:	4318      	orrs	r0, r3
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006160:	4b69      	ldr	r3, [pc, #420]	@ (8006308 <HAL_ADC_ConfigChannel+0x238>)
 8006162:	6010      	str	r0, [r2, #0]
 8006164:	6818      	ldr	r0, [r3, #0]
 8006166:	4969      	ldr	r1, [pc, #420]	@ (800630c <HAL_ADC_ConfigChannel+0x23c>)
 8006168:	f7f9 fff0 	bl	800014c <__udivsi3>
 800616c:	1c43      	adds	r3, r0, #1
 800616e:	200c      	movs	r0, #12
 8006170:	4358      	muls	r0, r3
 8006172:	9003      	str	r0, [sp, #12]
          while (wait_loop_index != 0UL)
 8006174:	9b03      	ldr	r3, [sp, #12]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d000      	beq.n	800617c <HAL_ADC_ConfigChannel+0xac>
 800617a:	e071      	b.n	8006260 <HAL_ADC_ConfigChannel+0x190>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800617c:	2000      	movs	r0, #0
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);

    tmp_hal_status = HAL_ERROR;
  }

  __HAL_UNLOCK(hadc);
 800617e:	2300      	movs	r3, #0
 8006180:	3454      	adds	r4, #84	@ 0x54
 8006182:	7023      	strb	r3, [r4, #0]

  return tmp_hal_status;
}
 8006184:	b005      	add	sp, #20
 8006186:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8006188:	211f      	movs	r1, #31
 800618a:	4667      	mov	r7, ip
 800618c:	400f      	ands	r7, r1
 800618e:	3910      	subs	r1, #16
 8006190:	40b9      	lsls	r1, r7
 8006192:	43ce      	mvns	r6, r1
 8006194:	9601      	str	r6, [sp, #4]
 8006196:	6e26      	ldr	r6, [r4, #96]	@ 0x60
 8006198:	438e      	bics	r6, r1
 800619a:	0031      	movs	r1, r6
 800619c:	2a00      	cmp	r2, #0
 800619e:	d112      	bne.n	80061c6 <HAL_ADC_ConfigChannel+0xf6>
 80061a0:	0e98      	lsrs	r0, r3, #26
 80061a2:	321f      	adds	r2, #31
 80061a4:	4010      	ands	r0, r2
 80061a6:	40b8      	lsls	r0, r7
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80061a8:	4662      	mov	r2, ip
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80061aa:	4308      	orrs	r0, r1
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80061ac:	0892      	lsrs	r2, r2, #2
 80061ae:	69e1      	ldr	r1, [r4, #28]
 80061b0:	3201      	adds	r2, #1
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80061b2:	6620      	str	r0, [r4, #96]	@ 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80061b4:	428a      	cmp	r2, r1
 80061b6:	d8b5      	bhi.n	8006124 <HAL_ADC_ConfigChannel+0x54>
  MODIFY_REG(ADCx->CHSELR,
 80061b8:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 80061ba:	9801      	ldr	r0, [sp, #4]
 80061bc:	009a      	lsls	r2, r3, #2
 80061be:	0f12      	lsrs	r2, r2, #28
 80061c0:	40ba      	lsls	r2, r7
 80061c2:	4001      	ands	r1, r0
 80061c4:	e7ac      	b.n	8006120 <HAL_ADC_ConfigChannel+0x50>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80061c6:	2201      	movs	r2, #1
 80061c8:	4213      	tst	r3, r2
 80061ca:	d1ec      	bne.n	80061a6 <HAL_ADC_ConfigChannel+0xd6>
 80061cc:	1892      	adds	r2, r2, r2
 80061ce:	4213      	tst	r3, r2
 80061d0:	d124      	bne.n	800621c <HAL_ADC_ConfigChannel+0x14c>
 80061d2:	2604      	movs	r6, #4
 80061d4:	4233      	tst	r3, r6
 80061d6:	d123      	bne.n	8006220 <HAL_ADC_ConfigChannel+0x150>
 80061d8:	071a      	lsls	r2, r3, #28
 80061da:	d423      	bmi.n	8006224 <HAL_ADC_ConfigChannel+0x154>
 80061dc:	06da      	lsls	r2, r3, #27
 80061de:	d423      	bmi.n	8006228 <HAL_ADC_ConfigChannel+0x158>
 80061e0:	069a      	lsls	r2, r3, #26
 80061e2:	d423      	bmi.n	800622c <HAL_ADC_ConfigChannel+0x15c>
 80061e4:	065a      	lsls	r2, r3, #25
 80061e6:	d423      	bmi.n	8006230 <HAL_ADC_ConfigChannel+0x160>
 80061e8:	061a      	lsls	r2, r3, #24
 80061ea:	d423      	bmi.n	8006234 <HAL_ADC_ConfigChannel+0x164>
 80061ec:	05da      	lsls	r2, r3, #23
 80061ee:	d423      	bmi.n	8006238 <HAL_ADC_ConfigChannel+0x168>
 80061f0:	059a      	lsls	r2, r3, #22
 80061f2:	d423      	bmi.n	800623c <HAL_ADC_ConfigChannel+0x16c>
 80061f4:	055a      	lsls	r2, r3, #21
 80061f6:	d423      	bmi.n	8006240 <HAL_ADC_ConfigChannel+0x170>
 80061f8:	051a      	lsls	r2, r3, #20
 80061fa:	d423      	bmi.n	8006244 <HAL_ADC_ConfigChannel+0x174>
 80061fc:	04da      	lsls	r2, r3, #19
 80061fe:	d423      	bmi.n	8006248 <HAL_ADC_ConfigChannel+0x178>
 8006200:	049a      	lsls	r2, r3, #18
 8006202:	d423      	bmi.n	800624c <HAL_ADC_ConfigChannel+0x17c>
 8006204:	045a      	lsls	r2, r3, #17
 8006206:	d423      	bmi.n	8006250 <HAL_ADC_ConfigChannel+0x180>
 8006208:	041a      	lsls	r2, r3, #16
 800620a:	d423      	bmi.n	8006254 <HAL_ADC_ConfigChannel+0x184>
 800620c:	03da      	lsls	r2, r3, #15
 800620e:	d423      	bmi.n	8006258 <HAL_ADC_ConfigChannel+0x188>
 8006210:	039a      	lsls	r2, r3, #14
 8006212:	d423      	bmi.n	800625c <HAL_ADC_ConfigChannel+0x18c>
 8006214:	035a      	lsls	r2, r3, #13
 8006216:	d5c6      	bpl.n	80061a6 <HAL_ADC_ConfigChannel+0xd6>
 8006218:	2012      	movs	r0, #18
 800621a:	e7c4      	b.n	80061a6 <HAL_ADC_ConfigChannel+0xd6>
 800621c:	2001      	movs	r0, #1
 800621e:	e7c2      	b.n	80061a6 <HAL_ADC_ConfigChannel+0xd6>
 8006220:	0010      	movs	r0, r2
 8006222:	e7c0      	b.n	80061a6 <HAL_ADC_ConfigChannel+0xd6>
 8006224:	2003      	movs	r0, #3
 8006226:	e7be      	b.n	80061a6 <HAL_ADC_ConfigChannel+0xd6>
 8006228:	2004      	movs	r0, #4
 800622a:	e7bc      	b.n	80061a6 <HAL_ADC_ConfigChannel+0xd6>
 800622c:	2005      	movs	r0, #5
 800622e:	e7ba      	b.n	80061a6 <HAL_ADC_ConfigChannel+0xd6>
 8006230:	2006      	movs	r0, #6
 8006232:	e7b8      	b.n	80061a6 <HAL_ADC_ConfigChannel+0xd6>
 8006234:	2007      	movs	r0, #7
 8006236:	e7b6      	b.n	80061a6 <HAL_ADC_ConfigChannel+0xd6>
 8006238:	2008      	movs	r0, #8
 800623a:	e7b4      	b.n	80061a6 <HAL_ADC_ConfigChannel+0xd6>
 800623c:	2009      	movs	r0, #9
 800623e:	e7b2      	b.n	80061a6 <HAL_ADC_ConfigChannel+0xd6>
 8006240:	200a      	movs	r0, #10
 8006242:	e7b0      	b.n	80061a6 <HAL_ADC_ConfigChannel+0xd6>
 8006244:	200b      	movs	r0, #11
 8006246:	e7ae      	b.n	80061a6 <HAL_ADC_ConfigChannel+0xd6>
 8006248:	200c      	movs	r0, #12
 800624a:	e7ac      	b.n	80061a6 <HAL_ADC_ConfigChannel+0xd6>
 800624c:	200d      	movs	r0, #13
 800624e:	e7aa      	b.n	80061a6 <HAL_ADC_ConfigChannel+0xd6>
 8006250:	200e      	movs	r0, #14
 8006252:	e7a8      	b.n	80061a6 <HAL_ADC_ConfigChannel+0xd6>
 8006254:	200f      	movs	r0, #15
 8006256:	e7a6      	b.n	80061a6 <HAL_ADC_ConfigChannel+0xd6>
 8006258:	2010      	movs	r0, #16
 800625a:	e7a4      	b.n	80061a6 <HAL_ADC_ConfigChannel+0xd6>
 800625c:	2011      	movs	r0, #17
 800625e:	e7a2      	b.n	80061a6 <HAL_ADC_ConfigChannel+0xd6>
            wait_loop_index--;
 8006260:	9b03      	ldr	r3, [sp, #12]
 8006262:	3b01      	subs	r3, #1
 8006264:	9303      	str	r3, [sp, #12]
 8006266:	e785      	b.n	8006174 <HAL_ADC_ConfigChannel+0xa4>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8006268:	4829      	ldr	r0, [pc, #164]	@ (8006310 <HAL_ADC_ConfigChannel+0x240>)
 800626a:	4283      	cmp	r3, r0
 800626c:	d10b      	bne.n	8006286 <HAL_ADC_ConfigChannel+0x1b6>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800626e:	2080      	movs	r0, #128	@ 0x80
 8006270:	0440      	lsls	r0, r0, #17
 8006272:	4205      	tst	r5, r0
 8006274:	d000      	beq.n	8006278 <HAL_ADC_ConfigChannel+0x1a8>
 8006276:	e781      	b.n	800617c <HAL_ADC_ConfigChannel+0xac>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006278:	6813      	ldr	r3, [r2, #0]
 800627a:	4d22      	ldr	r5, [pc, #136]	@ (8006304 <HAL_ADC_ConfigChannel+0x234>)
 800627c:	402b      	ands	r3, r5
 800627e:	430b      	orrs	r3, r1
 8006280:	4318      	orrs	r0, r3
 8006282:	6010      	str	r0, [r2, #0]
}
 8006284:	e77a      	b.n	800617c <HAL_ADC_ConfigChannel+0xac>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8006286:	4823      	ldr	r0, [pc, #140]	@ (8006314 <HAL_ADC_ConfigChannel+0x244>)
 8006288:	4283      	cmp	r3, r0
 800628a:	d000      	beq.n	800628e <HAL_ADC_ConfigChannel+0x1be>
 800628c:	e776      	b.n	800617c <HAL_ADC_ConfigChannel+0xac>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800628e:	2080      	movs	r0, #128	@ 0x80
 8006290:	03c0      	lsls	r0, r0, #15
 8006292:	e7ee      	b.n	8006272 <HAL_ADC_ConfigChannel+0x1a2>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006294:	428f      	cmp	r7, r1
 8006296:	d104      	bne.n	80062a2 <HAL_ADC_ConfigChannel+0x1d2>
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8006298:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 800629a:	0359      	lsls	r1, r3, #13
 800629c:	0b49      	lsrs	r1, r1, #13
 800629e:	438a      	bics	r2, r1
 80062a0:	62aa      	str	r2, [r5, #40]	@ 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	db00      	blt.n	80062a8 <HAL_ADC_ConfigChannel+0x1d8>
 80062a6:	e769      	b.n	800617c <HAL_ADC_ConfigChannel+0xac>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80062a8:	4a14      	ldr	r2, [pc, #80]	@ (80062fc <HAL_ADC_ConfigChannel+0x22c>)
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80062aa:	4815      	ldr	r0, [pc, #84]	@ (8006300 <HAL_ADC_ConfigChannel+0x230>)
 80062ac:	6811      	ldr	r1, [r2, #0]
 80062ae:	4283      	cmp	r3, r0
 80062b0:	d108      	bne.n	80062c4 <HAL_ADC_ConfigChannel+0x1f4>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80062b2:	23a0      	movs	r3, #160	@ 0xa0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80062b4:	6810      	ldr	r0, [r2, #0]
 80062b6:	045b      	lsls	r3, r3, #17
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80062b8:	400b      	ands	r3, r1
 80062ba:	4912      	ldr	r1, [pc, #72]	@ (8006304 <HAL_ADC_ConfigChannel+0x234>)
 80062bc:	4001      	ands	r1, r0
 80062be:	430b      	orrs	r3, r1
 80062c0:	6013      	str	r3, [r2, #0]
}
 80062c2:	e75b      	b.n	800617c <HAL_ADC_ConfigChannel+0xac>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80062c4:	4812      	ldr	r0, [pc, #72]	@ (8006310 <HAL_ADC_ConfigChannel+0x240>)
 80062c6:	4283      	cmp	r3, r0
 80062c8:	d103      	bne.n	80062d2 <HAL_ADC_ConfigChannel+0x202>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80062ca:	23c0      	movs	r3, #192	@ 0xc0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80062cc:	6810      	ldr	r0, [r2, #0]
 80062ce:	041b      	lsls	r3, r3, #16
 80062d0:	e7f2      	b.n	80062b8 <HAL_ADC_ConfigChannel+0x1e8>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80062d2:	4810      	ldr	r0, [pc, #64]	@ (8006314 <HAL_ADC_ConfigChannel+0x244>)
 80062d4:	4283      	cmp	r3, r0
 80062d6:	d000      	beq.n	80062da <HAL_ADC_ConfigChannel+0x20a>
 80062d8:	e750      	b.n	800617c <HAL_ADC_ConfigChannel+0xac>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80062da:	20c0      	movs	r0, #192	@ 0xc0
 80062dc:	0440      	lsls	r0, r0, #17
 80062de:	6813      	ldr	r3, [r2, #0]
 80062e0:	4001      	ands	r1, r0
 80062e2:	4808      	ldr	r0, [pc, #32]	@ (8006304 <HAL_ADC_ConfigChannel+0x234>)
 80062e4:	4003      	ands	r3, r0
 80062e6:	4319      	orrs	r1, r3
 80062e8:	6011      	str	r1, [r2, #0]
}
 80062ea:	e747      	b.n	800617c <HAL_ADC_ConfigChannel+0xac>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80062ec:	2320      	movs	r3, #32
 80062ee:	6da2      	ldr	r2, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 80062f0:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80062f2:	4313      	orrs	r3, r2
 80062f4:	65a3      	str	r3, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 80062f6:	e742      	b.n	800617e <HAL_ADC_ConfigChannel+0xae>
 80062f8:	07ffff00 	.word	0x07ffff00
 80062fc:	40012708 	.word	0x40012708
 8006300:	b0001000 	.word	0xb0001000
 8006304:	fe3fffff 	.word	0xfe3fffff
 8006308:	20000028 	.word	0x20000028
 800630c:	00030d40 	.word	0x00030d40
 8006310:	b8004000 	.word	0xb8004000
 8006314:	b4002000 	.word	0xb4002000

08006318 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8006318:	b570      	push	{r4, r5, r6, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800631a:	6805      	ldr	r5, [r0, #0]
{
 800631c:	0004      	movs	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800631e:	0028      	movs	r0, r5
 8006320:	f7ff fd5a 	bl	8005dd8 <LL_ADC_REG_IsConversionOngoing>
 8006324:	2800      	cmp	r0, #0
 8006326:	d101      	bne.n	800632c <ADC_ConversionStop+0x14>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8006328:	2000      	movs	r0, #0
}
 800632a:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800632c:	68ab      	ldr	r3, [r5, #8]
 800632e:	079b      	lsls	r3, r3, #30
 8006330:	d405      	bmi.n	800633e <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 8006332:	68aa      	ldr	r2, [r5, #8]
 8006334:	4b0f      	ldr	r3, [pc, #60]	@ (8006374 <ADC_ConversionStop+0x5c>)
 8006336:	401a      	ands	r2, r3
 8006338:	2310      	movs	r3, #16
 800633a:	4313      	orrs	r3, r2
 800633c:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 800633e:	f7ff fd33 	bl	8005da8 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8006342:	2604      	movs	r6, #4
    tickstart = HAL_GetTick();
 8006344:	0005      	movs	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8006346:	6823      	ldr	r3, [r4, #0]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	4233      	tst	r3, r6
 800634c:	d0ec      	beq.n	8006328 <ADC_ConversionStop+0x10>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800634e:	f7ff fd2b 	bl	8005da8 <HAL_GetTick>
 8006352:	1b40      	subs	r0, r0, r5
 8006354:	2802      	cmp	r0, #2
 8006356:	d9f6      	bls.n	8006346 <ADC_ConversionStop+0x2e>
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8006358:	6823      	ldr	r3, [r4, #0]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	4233      	tst	r3, r6
 800635e:	d0f2      	beq.n	8006346 <ADC_ConversionStop+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006360:	2310      	movs	r3, #16
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006362:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006364:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8006366:	4313      	orrs	r3, r2
 8006368:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800636a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800636c:	4303      	orrs	r3, r0
 800636e:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 8006370:	e7db      	b.n	800632a <ADC_ConversionStop+0x12>
 8006372:	46c0      	nop			@ (mov r8, r8)
 8006374:	7fffffe8 	.word	0x7fffffe8

08006378 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006378:	2300      	movs	r3, #0
{
 800637a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800637c:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t wait_loop_index = 0UL;
 800637e:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006380:	6891      	ldr	r1, [r2, #8]
 8006382:	3301      	adds	r3, #1
{
 8006384:	0004      	movs	r4, r0
 8006386:	4219      	tst	r1, r3
 8006388:	d001      	beq.n	800638e <ADC_Enable+0x16>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800638a:	2000      	movs	r0, #0
}
 800638c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800638e:	6890      	ldr	r0, [r2, #8]
 8006390:	4922      	ldr	r1, [pc, #136]	@ (800641c <ADC_Enable+0xa4>)
 8006392:	4208      	tst	r0, r1
 8006394:	d008      	beq.n	80063a8 <ADC_Enable+0x30>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006396:	2210      	movs	r2, #16
 8006398:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800639a:	430a      	orrs	r2, r1
 800639c:	65a2      	str	r2, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800639e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80063a0:	4313      	orrs	r3, r2
      return HAL_ERROR;
 80063a2:	2001      	movs	r0, #1
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80063a4:	65e3      	str	r3, [r4, #92]	@ 0x5c
            return HAL_ERROR;
 80063a6:	e7f1      	b.n	800638c <ADC_Enable+0x14>
  MODIFY_REG(ADCx->CR,
 80063a8:	6891      	ldr	r1, [r2, #8]
 80063aa:	4f1d      	ldr	r7, [pc, #116]	@ (8006420 <ADC_Enable+0xa8>)
 80063ac:	4039      	ands	r1, r7
 80063ae:	430b      	orrs	r3, r1
 80063b0:	6093      	str	r3, [r2, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80063b2:	4b1c      	ldr	r3, [pc, #112]	@ (8006424 <ADC_Enable+0xac>)
 80063b4:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 80063b6:	021b      	lsls	r3, r3, #8
 80063b8:	d421      	bmi.n	80063fe <ADC_Enable+0x86>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80063ba:	7e63      	ldrb	r3, [r4, #25]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d0e4      	beq.n	800638a <ADC_Enable+0x12>
      tickstart = HAL_GetTick();
 80063c0:	f7ff fcf2 	bl	8005da8 <HAL_GetTick>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80063c4:	2501      	movs	r5, #1
      tickstart = HAL_GetTick();
 80063c6:	0006      	movs	r6, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80063c8:	6822      	ldr	r2, [r4, #0]
 80063ca:	6813      	ldr	r3, [r2, #0]
 80063cc:	422b      	tst	r3, r5
 80063ce:	d1dc      	bne.n	800638a <ADC_Enable+0x12>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80063d0:	6893      	ldr	r3, [r2, #8]
 80063d2:	422b      	tst	r3, r5
 80063d4:	d103      	bne.n	80063de <ADC_Enable+0x66>
  MODIFY_REG(ADCx->CR,
 80063d6:	6893      	ldr	r3, [r2, #8]
 80063d8:	403b      	ands	r3, r7
 80063da:	432b      	orrs	r3, r5
 80063dc:	6093      	str	r3, [r2, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80063de:	f7ff fce3 	bl	8005da8 <HAL_GetTick>
 80063e2:	1b80      	subs	r0, r0, r6
 80063e4:	2802      	cmp	r0, #2
 80063e6:	d9ef      	bls.n	80063c8 <ADC_Enable+0x50>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80063e8:	6823      	ldr	r3, [r4, #0]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	422b      	tst	r3, r5
 80063ee:	d1eb      	bne.n	80063c8 <ADC_Enable+0x50>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063f0:	2310      	movs	r3, #16
 80063f2:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80063f4:	4313      	orrs	r3, r2
 80063f6:	65a3      	str	r3, [r4, #88]	@ 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80063f8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80063fa:	432b      	orrs	r3, r5
 80063fc:	e7d1      	b.n	80063a2 <ADC_Enable+0x2a>
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80063fe:	4b0a      	ldr	r3, [pc, #40]	@ (8006428 <ADC_Enable+0xb0>)
 8006400:	490a      	ldr	r1, [pc, #40]	@ (800642c <ADC_Enable+0xb4>)
 8006402:	6818      	ldr	r0, [r3, #0]
 8006404:	f7f9 fea2 	bl	800014c <__udivsi3>
 8006408:	3001      	adds	r0, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 800640a:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 800640c:	9b01      	ldr	r3, [sp, #4]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d0d3      	beq.n	80063ba <ADC_Enable+0x42>
        wait_loop_index--;
 8006412:	9b01      	ldr	r3, [sp, #4]
 8006414:	3b01      	subs	r3, #1
 8006416:	9301      	str	r3, [sp, #4]
 8006418:	e7f8      	b.n	800640c <ADC_Enable+0x94>
 800641a:	46c0      	nop			@ (mov r8, r8)
 800641c:	80000017 	.word	0x80000017
 8006420:	7fffffe8 	.word	0x7fffffe8
 8006424:	40012708 	.word	0x40012708
 8006428:	20000028 	.word	0x20000028
 800642c:	00030d40 	.word	0x00030d40

08006430 <HAL_ADC_Start>:
{
 8006430:	b570      	push	{r4, r5, r6, lr}
 8006432:	0004      	movs	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006434:	6800      	ldr	r0, [r0, #0]
 8006436:	f7ff fccf 	bl	8005dd8 <LL_ADC_REG_IsConversionOngoing>
 800643a:	0006      	movs	r6, r0
    __HAL_LOCK(hadc);
 800643c:	2002      	movs	r0, #2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800643e:	2e00      	cmp	r6, #0
 8006440:	d11d      	bne.n	800647e <HAL_ADC_Start+0x4e>
    __HAL_LOCK(hadc);
 8006442:	0025      	movs	r5, r4
 8006444:	3554      	adds	r5, #84	@ 0x54
 8006446:	782b      	ldrb	r3, [r5, #0]
 8006448:	2b01      	cmp	r3, #1
 800644a:	d018      	beq.n	800647e <HAL_ADC_Start+0x4e>
 800644c:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 800644e:	0020      	movs	r0, r4
    __HAL_LOCK(hadc);
 8006450:	702b      	strb	r3, [r5, #0]
    tmp_hal_status = ADC_Enable(hadc);
 8006452:	f7ff ff91 	bl	8006378 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8006456:	2800      	cmp	r0, #0
 8006458:	d112      	bne.n	8006480 <HAL_ADC_Start+0x50>
      ADC_STATE_CLR_SET(hadc->State,
 800645a:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800645c:	4b09      	ldr	r3, [pc, #36]	@ (8006484 <HAL_ADC_Start+0x54>)
 800645e:	401a      	ands	r2, r3
 8006460:	2380      	movs	r3, #128	@ 0x80
 8006462:	005b      	lsls	r3, r3, #1
 8006464:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006466:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 8006468:	65a3      	str	r3, [r4, #88]	@ 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800646a:	6823      	ldr	r3, [r4, #0]
      ADC_CLEAR_ERRORCODE(hadc);
 800646c:	65e0      	str	r0, [r4, #92]	@ 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800646e:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hadc);
 8006470:	7028      	strb	r0, [r5, #0]
  MODIFY_REG(ADCx->CR,
 8006472:	6899      	ldr	r1, [r3, #8]
 8006474:	4a04      	ldr	r2, [pc, #16]	@ (8006488 <HAL_ADC_Start+0x58>)
 8006476:	4011      	ands	r1, r2
 8006478:	2204      	movs	r2, #4
 800647a:	430a      	orrs	r2, r1
 800647c:	609a      	str	r2, [r3, #8]
}
 800647e:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UNLOCK(hadc);
 8006480:	702e      	strb	r6, [r5, #0]
 8006482:	e7fc      	b.n	800647e <HAL_ADC_Start+0x4e>
 8006484:	fffff0fe 	.word	0xfffff0fe
 8006488:	7fffffe8 	.word	0x7fffffe8

0800648c <ADC_Disable>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800648c:	2201      	movs	r2, #1
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800648e:	6803      	ldr	r3, [r0, #0]
{
 8006490:	b570      	push	{r4, r5, r6, lr}
 8006492:	0004      	movs	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006494:	6898      	ldr	r0, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006496:	6899      	ldr	r1, [r3, #8]
 8006498:	4211      	tst	r1, r2
 800649a:	d101      	bne.n	80064a0 <ADC_Disable+0x14>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800649c:	2000      	movs	r0, #0
}
 800649e:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80064a0:	2102      	movs	r1, #2
      && (tmp_adc_is_disable_on_going == 0UL)
 80064a2:	4208      	tst	r0, r1
 80064a4:	d1fa      	bne.n	800649c <ADC_Disable+0x10>
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80064a6:	2005      	movs	r0, #5
 80064a8:	689d      	ldr	r5, [r3, #8]
 80064aa:	4005      	ands	r5, r0
 80064ac:	2d01      	cmp	r5, #1
 80064ae:	d11e      	bne.n	80064ee <ADC_Disable+0x62>
  MODIFY_REG(ADCx->CR,
 80064b0:	689a      	ldr	r2, [r3, #8]
 80064b2:	4813      	ldr	r0, [pc, #76]	@ (8006500 <ADC_Disable+0x74>)
 80064b4:	4002      	ands	r2, r0
 80064b6:	4311      	orrs	r1, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80064b8:	2203      	movs	r2, #3
 80064ba:	6099      	str	r1, [r3, #8]
 80064bc:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80064be:	f7ff fc73 	bl	8005da8 <HAL_GetTick>
 80064c2:	0006      	movs	r6, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80064c4:	6823      	ldr	r3, [r4, #0]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	422b      	tst	r3, r5
 80064ca:	d0e7      	beq.n	800649c <ADC_Disable+0x10>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80064cc:	f7ff fc6c 	bl	8005da8 <HAL_GetTick>
 80064d0:	1b80      	subs	r0, r0, r6
 80064d2:	2802      	cmp	r0, #2
 80064d4:	d9f6      	bls.n	80064c4 <ADC_Disable+0x38>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80064d6:	6823      	ldr	r3, [r4, #0]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	422b      	tst	r3, r5
 80064dc:	d0f2      	beq.n	80064c4 <ADC_Disable+0x38>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80064de:	2310      	movs	r3, #16
 80064e0:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80064e2:	4313      	orrs	r3, r2
 80064e4:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80064e6:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80064e8:	432b      	orrs	r3, r5
 80064ea:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 80064ec:	e006      	b.n	80064fc <ADC_Disable+0x70>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80064ee:	2310      	movs	r3, #16
 80064f0:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80064f2:	430b      	orrs	r3, r1
 80064f4:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80064f6:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80064f8:	431a      	orrs	r2, r3
 80064fa:	65e2      	str	r2, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 80064fc:	2001      	movs	r0, #1
 80064fe:	e7ce      	b.n	800649e <ADC_Disable+0x12>
 8006500:	7fffffe8 	.word	0x7fffffe8

08006504 <HAL_ADC_Stop>:
{
 8006504:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8006506:	0006      	movs	r6, r0
 8006508:	3654      	adds	r6, #84	@ 0x54
 800650a:	7833      	ldrb	r3, [r6, #0]
{
 800650c:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800650e:	2002      	movs	r0, #2
 8006510:	2b01      	cmp	r3, #1
 8006512:	d012      	beq.n	800653a <HAL_ADC_Stop+0x36>
 8006514:	2501      	movs	r5, #1
  tmp_hal_status = ADC_ConversionStop(hadc);
 8006516:	0020      	movs	r0, r4
  __HAL_LOCK(hadc);
 8006518:	7035      	strb	r5, [r6, #0]
  tmp_hal_status = ADC_ConversionStop(hadc);
 800651a:	f7ff fefd 	bl	8006318 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800651e:	2800      	cmp	r0, #0
 8006520:	d109      	bne.n	8006536 <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 8006522:	0020      	movs	r0, r4
 8006524:	f7ff ffb2 	bl	800648c <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8006528:	2800      	cmp	r0, #0
 800652a:	d104      	bne.n	8006536 <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 800652c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800652e:	4a03      	ldr	r2, [pc, #12]	@ (800653c <HAL_ADC_Stop+0x38>)
 8006530:	4013      	ands	r3, r2
 8006532:	431d      	orrs	r5, r3
 8006534:	65a5      	str	r5, [r4, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 8006536:	2300      	movs	r3, #0
 8006538:	7033      	strb	r3, [r6, #0]
}
 800653a:	bd70      	pop	{r4, r5, r6, pc}
 800653c:	fffffefe 	.word	0xfffffefe

08006540 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8006540:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8006542:	2300      	movs	r3, #0
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8006544:	0005      	movs	r5, r0
 8006546:	2202      	movs	r2, #2
{
 8006548:	b085      	sub	sp, #20
  __IO uint32_t wait_loop_index = 0UL;
 800654a:	9302      	str	r3, [sp, #8]
  __HAL_LOCK(hadc);
 800654c:	3554      	adds	r5, #84	@ 0x54
 800654e:	782b      	ldrb	r3, [r5, #0]
{
 8006550:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8006552:	9200      	str	r2, [sp, #0]
 8006554:	2b01      	cmp	r3, #1
 8006556:	d03e      	beq.n	80065d6 <HAL_ADCEx_Calibration_Start+0x96>
 8006558:	2601      	movs	r6, #1
 800655a:	702e      	strb	r6, [r5, #0]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800655c:	f7ff ff96 	bl	800648c <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006560:	6823      	ldr	r3, [r4, #0]
  tmp_hal_status = ADC_Disable(hadc);
 8006562:	9000      	str	r0, [sp, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006564:	6899      	ldr	r1, [r3, #8]
 8006566:	000a      	movs	r2, r1
 8006568:	4032      	ands	r2, r6
 800656a:	4231      	tst	r1, r6
 800656c:	d006      	beq.n	800657c <HAL_ADCEx_Calibration_Start+0x3c>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800656e:	2310      	movs	r3, #16
 8006570:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8006572:	4313      	orrs	r3, r2
    ADC_STATE_CLR_SET(hadc->State,
 8006574:	65a3      	str	r3, [r4, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8006576:	2300      	movs	r3, #0
 8006578:	702b      	strb	r3, [r5, #0]

  return tmp_hal_status;
 800657a:	e02c      	b.n	80065d6 <HAL_ADCEx_Calibration_Start+0x96>
  MODIFY_REG(ADCx->CR,
 800657c:	2680      	movs	r6, #128	@ 0x80
    ADC_STATE_CLR_SET(hadc->State,
 800657e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006580:	4942      	ldr	r1, [pc, #264]	@ (800668c <HAL_ADCEx_Calibration_Start+0x14c>)
 8006582:	0636      	lsls	r6, r6, #24
 8006584:	4008      	ands	r0, r1
 8006586:	3106      	adds	r1, #6
 8006588:	31ff      	adds	r1, #255	@ 0xff
 800658a:	4301      	orrs	r1, r0
 800658c:	65a1      	str	r1, [r4, #88]	@ 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800658e:	68d8      	ldr	r0, [r3, #12]
 8006590:	493f      	ldr	r1, [pc, #252]	@ (8006690 <HAL_ADCEx_Calibration_Start+0x150>)
 8006592:	46b4      	mov	ip, r6
 8006594:	4008      	ands	r0, r1
 8006596:	9001      	str	r0, [sp, #4]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8006598:	68d9      	ldr	r1, [r3, #12]
 800659a:	483e      	ldr	r0, [pc, #248]	@ (8006694 <HAL_ADCEx_Calibration_Start+0x154>)
 800659c:	4001      	ands	r1, r0
 800659e:	2008      	movs	r0, #8
 80065a0:	60d9      	str	r1, [r3, #12]
 80065a2:	493d      	ldr	r1, [pc, #244]	@ (8006698 <HAL_ADCEx_Calibration_Start+0x158>)
 80065a4:	4667      	mov	r7, ip
 80065a6:	689e      	ldr	r6, [r3, #8]
 80065a8:	400e      	ands	r6, r1
 80065aa:	433e      	orrs	r6, r7
 80065ac:	609e      	str	r6, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80065ae:	689e      	ldr	r6, [r3, #8]
 80065b0:	2e00      	cmp	r6, #0
 80065b2:	da13      	bge.n	80065dc <HAL_ADCEx_Calibration_Start+0x9c>
        wait_loop_index++;
 80065b4:	9e02      	ldr	r6, [sp, #8]
 80065b6:	3601      	adds	r6, #1
 80065b8:	9602      	str	r6, [sp, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80065ba:	9f02      	ldr	r7, [sp, #8]
 80065bc:	4e37      	ldr	r6, [pc, #220]	@ (800669c <HAL_ADCEx_Calibration_Start+0x15c>)
 80065be:	42b7      	cmp	r7, r6
 80065c0:	d9f5      	bls.n	80065ae <HAL_ADCEx_Calibration_Start+0x6e>
          ADC_STATE_CLR_SET(hadc->State,
 80065c2:	2312      	movs	r3, #18
 80065c4:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80065c6:	439a      	bics	r2, r3
 80065c8:	3b02      	subs	r3, #2
 80065ca:	4313      	orrs	r3, r2
 80065cc:	65a3      	str	r3, [r4, #88]	@ 0x58
          __HAL_UNLOCK(hadc);
 80065ce:	2300      	movs	r3, #0
 80065d0:	702b      	strb	r3, [r5, #0]
          return HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	9300      	str	r3, [sp, #0]
}
 80065d6:	9800      	ldr	r0, [sp, #0]
 80065d8:	b005      	add	sp, #20
 80065da:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80065dc:	001e      	movs	r6, r3
 80065de:	277f      	movs	r7, #127	@ 0x7f
 80065e0:	36b4      	adds	r6, #180	@ 0xb4
 80065e2:	6836      	ldr	r6, [r6, #0]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80065e4:	3801      	subs	r0, #1
 80065e6:	403e      	ands	r6, r7
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80065e8:	1992      	adds	r2, r2, r6
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80065ea:	2800      	cmp	r0, #0
 80065ec:	d1da      	bne.n	80065a4 <HAL_ADCEx_Calibration_Start+0x64>
  MODIFY_REG(ADCx->CR,
 80065ee:	2601      	movs	r6, #1
 80065f0:	6898      	ldr	r0, [r3, #8]
    calibration_factor_accumulated /= calibration_index;
 80065f2:	08d2      	lsrs	r2, r2, #3
 80065f4:	4008      	ands	r0, r1
 80065f6:	4330      	orrs	r0, r6
 80065f8:	6098      	str	r0, [r3, #8]
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 80065fa:	2080      	movs	r0, #128	@ 0x80
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 80065fc:	691f      	ldr	r7, [r3, #16]
 80065fe:	05c0      	lsls	r0, r0, #23
 8006600:	4287      	cmp	r7, r0
 8006602:	d31c      	bcc.n	800663e <HAL_ADCEx_Calibration_Start+0xfe>
  MODIFY_REG(ADCx->CALFACT,
 8006604:	001e      	movs	r6, r3
 8006606:	277f      	movs	r7, #127	@ 0x7f
 8006608:	36b4      	adds	r6, #180	@ 0xb4
 800660a:	6830      	ldr	r0, [r6, #0]
 800660c:	43b8      	bics	r0, r7
 800660e:	4310      	orrs	r0, r2
 8006610:	6030      	str	r0, [r6, #0]
  MODIFY_REG(ADCx->CR,
 8006612:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006614:	2601      	movs	r6, #1
  MODIFY_REG(ADCx->CR,
 8006616:	4011      	ands	r1, r2
 8006618:	2202      	movs	r2, #2
 800661a:	430a      	orrs	r2, r1
 800661c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800661e:	f7ff fbc3 	bl	8005da8 <HAL_GetTick>
 8006622:	0007      	movs	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006624:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006626:	689a      	ldr	r2, [r3, #8]
 8006628:	4232      	tst	r2, r6
 800662a:	d11e      	bne.n	800666a <HAL_ADCEx_Calibration_Start+0x12a>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 800662c:	68da      	ldr	r2, [r3, #12]
 800662e:	9901      	ldr	r1, [sp, #4]
 8006630:	430a      	orrs	r2, r1
 8006632:	60da      	str	r2, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8006634:	2203      	movs	r2, #3
 8006636:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006638:	4393      	bics	r3, r2
 800663a:	4333      	orrs	r3, r6
 800663c:	e79a      	b.n	8006574 <HAL_ADCEx_Calibration_Start+0x34>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 800663e:	4818      	ldr	r0, [pc, #96]	@ (80066a0 <HAL_ADCEx_Calibration_Start+0x160>)
 8006640:	6807      	ldr	r7, [r0, #0]
 8006642:	20f0      	movs	r0, #240	@ 0xf0
 8006644:	0380      	lsls	r0, r0, #14
 8006646:	4038      	ands	r0, r7
      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8006648:	27e0      	movs	r7, #224	@ 0xe0
 800664a:	037f      	lsls	r7, r7, #13
 800664c:	42b8      	cmp	r0, r7
 800664e:	d3d9      	bcc.n	8006604 <HAL_ADCEx_Calibration_Start+0xc4>
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 8006650:	0c80      	lsrs	r0, r0, #18
 8006652:	3803      	subs	r0, #3
 8006654:	4086      	lsls	r6, r0
 8006656:	9603      	str	r6, [sp, #12]
        delay_cpu_cycles >>= 1UL;
 8006658:	9803      	ldr	r0, [sp, #12]
 800665a:	0840      	lsrs	r0, r0, #1
          delay_cpu_cycles--;
 800665c:	9003      	str	r0, [sp, #12]
        while (delay_cpu_cycles != 0UL)
 800665e:	9803      	ldr	r0, [sp, #12]
 8006660:	2800      	cmp	r0, #0
 8006662:	d0cf      	beq.n	8006604 <HAL_ADCEx_Calibration_Start+0xc4>
          delay_cpu_cycles--;
 8006664:	9803      	ldr	r0, [sp, #12]
 8006666:	3801      	subs	r0, #1
 8006668:	e7f8      	b.n	800665c <HAL_ADCEx_Calibration_Start+0x11c>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800666a:	f7ff fb9d 	bl	8005da8 <HAL_GetTick>
 800666e:	1bc0      	subs	r0, r0, r7
 8006670:	2802      	cmp	r0, #2
 8006672:	d9d7      	bls.n	8006624 <HAL_ADCEx_Calibration_Start+0xe4>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006674:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	4233      	tst	r3, r6
 800667a:	d0d3      	beq.n	8006624 <HAL_ADCEx_Calibration_Start+0xe4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800667c:	2310      	movs	r3, #16
 800667e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8006680:	4313      	orrs	r3, r2
 8006682:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006684:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8006686:	4333      	orrs	r3, r6
 8006688:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 800668a:	e7a2      	b.n	80065d2 <HAL_ADCEx_Calibration_Start+0x92>
 800668c:	fffffefd 	.word	0xfffffefd
 8006690:	00008003 	.word	0x00008003
 8006694:	ffff7ffc 	.word	0xffff7ffc
 8006698:	7fffffe8 	.word	0x7fffffe8
 800669c:	0002f1ff 	.word	0x0002f1ff
 80066a0:	40012708 	.word	0x40012708

080066a4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80066a4:	b510      	push	{r4, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80066a6:	24ff      	movs	r4, #255	@ 0xff
 80066a8:	2203      	movs	r2, #3
 80066aa:	000b      	movs	r3, r1
 80066ac:	0021      	movs	r1, r4
 80066ae:	4002      	ands	r2, r0
 80066b0:	00d2      	lsls	r2, r2, #3
 80066b2:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80066b4:	019b      	lsls	r3, r3, #6
 80066b6:	4023      	ands	r3, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80066b8:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80066ba:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 80066bc:	2800      	cmp	r0, #0
 80066be:	db0a      	blt.n	80066d6 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80066c0:	24c0      	movs	r4, #192	@ 0xc0
 80066c2:	4a0b      	ldr	r2, [pc, #44]	@ (80066f0 <HAL_NVIC_SetPriority+0x4c>)
 80066c4:	0880      	lsrs	r0, r0, #2
 80066c6:	0080      	lsls	r0, r0, #2
 80066c8:	1880      	adds	r0, r0, r2
 80066ca:	00a4      	lsls	r4, r4, #2
 80066cc:	5902      	ldr	r2, [r0, r4]
 80066ce:	400a      	ands	r2, r1
 80066d0:	4313      	orrs	r3, r2
 80066d2:	5103      	str	r3, [r0, r4]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 80066d4:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80066d6:	220f      	movs	r2, #15
 80066d8:	4010      	ands	r0, r2
 80066da:	3808      	subs	r0, #8
 80066dc:	4a05      	ldr	r2, [pc, #20]	@ (80066f4 <HAL_NVIC_SetPriority+0x50>)
 80066de:	0880      	lsrs	r0, r0, #2
 80066e0:	0080      	lsls	r0, r0, #2
 80066e2:	1880      	adds	r0, r0, r2
 80066e4:	69c2      	ldr	r2, [r0, #28]
 80066e6:	4011      	ands	r1, r2
 80066e8:	4319      	orrs	r1, r3
 80066ea:	61c1      	str	r1, [r0, #28]
 80066ec:	e7f2      	b.n	80066d4 <HAL_NVIC_SetPriority+0x30>
 80066ee:	46c0      	nop			@ (mov r8, r8)
 80066f0:	e000e100 	.word	0xe000e100
 80066f4:	e000ed00 	.word	0xe000ed00

080066f8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80066f8:	2800      	cmp	r0, #0
 80066fa:	db05      	blt.n	8006708 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80066fc:	231f      	movs	r3, #31
 80066fe:	4018      	ands	r0, r3
 8006700:	3b1e      	subs	r3, #30
 8006702:	4083      	lsls	r3, r0
 8006704:	4a01      	ldr	r2, [pc, #4]	@ (800670c <HAL_NVIC_EnableIRQ+0x14>)
 8006706:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006708:	4770      	bx	lr
 800670a:	46c0      	nop			@ (mov r8, r8)
 800670c:	e000e100 	.word	0xe000e100

08006710 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006710:	2280      	movs	r2, #128	@ 0x80
 8006712:	1e43      	subs	r3, r0, #1
 8006714:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8006716:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006718:	4293      	cmp	r3, r2
 800671a:	d20d      	bcs.n	8006738 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800671c:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800671e:	4a07      	ldr	r2, [pc, #28]	@ (800673c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006720:	4807      	ldr	r0, [pc, #28]	@ (8006740 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006722:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006724:	6a03      	ldr	r3, [r0, #32]
 8006726:	0609      	lsls	r1, r1, #24
 8006728:	021b      	lsls	r3, r3, #8
 800672a:	0a1b      	lsrs	r3, r3, #8
 800672c:	430b      	orrs	r3, r1
 800672e:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006730:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006732:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006734:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006736:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8006738:	4770      	bx	lr
 800673a:	46c0      	nop			@ (mov r8, r8)
 800673c:	e000e010 	.word	0xe000e010
 8006740:	e000ed00 	.word	0xe000ed00

08006744 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 8006744:	2300      	movs	r3, #0
{
 8006746:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006748:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800674a:	680a      	ldr	r2, [r1, #0]
 800674c:	0014      	movs	r4, r2
 800674e:	40dc      	lsrs	r4, r3
 8006750:	d101      	bne.n	8006756 <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  }
}
 8006752:	b005      	add	sp, #20
 8006754:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006756:	2501      	movs	r5, #1
 8006758:	0014      	movs	r4, r2
 800675a:	409d      	lsls	r5, r3
 800675c:	402c      	ands	r4, r5
 800675e:	9400      	str	r4, [sp, #0]
    if (iocurrent != 0x00u)
 8006760:	422a      	tst	r2, r5
 8006762:	d100      	bne.n	8006766 <HAL_GPIO_Init+0x22>
 8006764:	e091      	b.n	800688a <HAL_GPIO_Init+0x146>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006766:	684a      	ldr	r2, [r1, #4]
 8006768:	005f      	lsls	r7, r3, #1
 800676a:	4694      	mov	ip, r2
 800676c:	2203      	movs	r2, #3
 800676e:	4664      	mov	r4, ip
 8006770:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006772:	2403      	movs	r4, #3
 8006774:	40bc      	lsls	r4, r7
 8006776:	43e4      	mvns	r4, r4
 8006778:	9401      	str	r4, [sp, #4]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800677a:	1e54      	subs	r4, r2, #1
 800677c:	2c01      	cmp	r4, #1
 800677e:	d82e      	bhi.n	80067de <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 8006780:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006782:	9c01      	ldr	r4, [sp, #4]
 8006784:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006786:	68cc      	ldr	r4, [r1, #12]
 8006788:	40bc      	lsls	r4, r7
 800678a:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 800678c:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800678e:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006790:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006792:	43ac      	bics	r4, r5
 8006794:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006796:	4664      	mov	r4, ip
 8006798:	0924      	lsrs	r4, r4, #4
 800679a:	4034      	ands	r4, r6
 800679c:	409c      	lsls	r4, r3
 800679e:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 80067a0:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 80067a2:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80067a4:	9c01      	ldr	r4, [sp, #4]
 80067a6:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80067a8:	688c      	ldr	r4, [r1, #8]
 80067aa:	40bc      	lsls	r4, r7
 80067ac:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 80067ae:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80067b0:	2a02      	cmp	r2, #2
 80067b2:	d116      	bne.n	80067e2 <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80067b4:	2507      	movs	r5, #7
 80067b6:	260f      	movs	r6, #15
 80067b8:	401d      	ands	r5, r3
 80067ba:	00ad      	lsls	r5, r5, #2
 80067bc:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3u];
 80067be:	08dc      	lsrs	r4, r3, #3
 80067c0:	00a4      	lsls	r4, r4, #2
 80067c2:	1904      	adds	r4, r0, r4
 80067c4:	9402      	str	r4, [sp, #8]
 80067c6:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80067c8:	9603      	str	r6, [sp, #12]
 80067ca:	0026      	movs	r6, r4
 80067cc:	9c03      	ldr	r4, [sp, #12]
 80067ce:	43a6      	bics	r6, r4
 80067d0:	0034      	movs	r4, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80067d2:	690e      	ldr	r6, [r1, #16]
 80067d4:	40ae      	lsls	r6, r5
 80067d6:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3u] = temp;
 80067d8:	9c02      	ldr	r4, [sp, #8]
 80067da:	6226      	str	r6, [r4, #32]
 80067dc:	e001      	b.n	80067e2 <HAL_GPIO_Init+0x9e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80067de:	2a03      	cmp	r2, #3
 80067e0:	d1df      	bne.n	80067a2 <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80067e2:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 80067e4:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80067e6:	9d01      	ldr	r5, [sp, #4]
 80067e8:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80067ea:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80067ec:	24c0      	movs	r4, #192	@ 0xc0
      GPIOx->MODER = temp;
 80067ee:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80067f0:	4662      	mov	r2, ip
 80067f2:	02a4      	lsls	r4, r4, #10
 80067f4:	4222      	tst	r2, r4
 80067f6:	d048      	beq.n	800688a <HAL_GPIO_Init+0x146>
        temp = EXTI->EXTICR[position >> 2u];
 80067f8:	4a25      	ldr	r2, [pc, #148]	@ (8006890 <HAL_GPIO_Init+0x14c>)
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80067fa:	2503      	movs	r5, #3
        temp = EXTI->EXTICR[position >> 2u];
 80067fc:	089c      	lsrs	r4, r3, #2
 80067fe:	00a4      	lsls	r4, r4, #2
 8006800:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8006802:	220f      	movs	r2, #15
 8006804:	401d      	ands	r5, r3
 8006806:	00ed      	lsls	r5, r5, #3
 8006808:	40aa      	lsls	r2, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800680a:	27a0      	movs	r7, #160	@ 0xa0
        temp = EXTI->EXTICR[position >> 2u];
 800680c:	6e26      	ldr	r6, [r4, #96]	@ 0x60
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800680e:	05ff      	lsls	r7, r7, #23
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8006810:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8006812:	2200      	movs	r2, #0
 8006814:	42b8      	cmp	r0, r7
 8006816:	d00c      	beq.n	8006832 <HAL_GPIO_Init+0xee>
 8006818:	4f1e      	ldr	r7, [pc, #120]	@ (8006894 <HAL_GPIO_Init+0x150>)
 800681a:	3201      	adds	r2, #1
 800681c:	42b8      	cmp	r0, r7
 800681e:	d008      	beq.n	8006832 <HAL_GPIO_Init+0xee>
 8006820:	4f1d      	ldr	r7, [pc, #116]	@ (8006898 <HAL_GPIO_Init+0x154>)
 8006822:	3201      	adds	r2, #1
 8006824:	42b8      	cmp	r0, r7
 8006826:	d004      	beq.n	8006832 <HAL_GPIO_Init+0xee>
 8006828:	4f1c      	ldr	r7, [pc, #112]	@ (800689c <HAL_GPIO_Init+0x158>)
 800682a:	3203      	adds	r2, #3
 800682c:	42b8      	cmp	r0, r7
 800682e:	d100      	bne.n	8006832 <HAL_GPIO_Init+0xee>
 8006830:	3a02      	subs	r2, #2
 8006832:	40aa      	lsls	r2, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006834:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8006836:	4332      	orrs	r2, r6
        EXTI->EXTICR[position >> 2u] = temp;
 8006838:	6622      	str	r2, [r4, #96]	@ 0x60
        temp = EXTI->RTSR1;
 800683a:	4c15      	ldr	r4, [pc, #84]	@ (8006890 <HAL_GPIO_Init+0x14c>)
        temp &= ~(iocurrent);
 800683c:	9a00      	ldr	r2, [sp, #0]
        temp = EXTI->RTSR1;
 800683e:	6826      	ldr	r6, [r4, #0]
          temp |= iocurrent;
 8006840:	9d00      	ldr	r5, [sp, #0]
        temp &= ~(iocurrent);
 8006842:	43d2      	mvns	r2, r2
          temp |= iocurrent;
 8006844:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006846:	02ff      	lsls	r7, r7, #11
 8006848:	d401      	bmi.n	800684e <HAL_GPIO_Init+0x10a>
        temp &= ~(iocurrent);
 800684a:	0035      	movs	r5, r6
 800684c:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800684e:	4667      	mov	r7, ip
        EXTI->RTSR1 = temp;
 8006850:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 8006852:	6866      	ldr	r6, [r4, #4]
          temp |= iocurrent;
 8006854:	9d00      	ldr	r5, [sp, #0]
 8006856:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006858:	02bf      	lsls	r7, r7, #10
 800685a:	d401      	bmi.n	8006860 <HAL_GPIO_Init+0x11c>
        temp &= ~(iocurrent);
 800685c:	0035      	movs	r5, r6
 800685e:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006860:	4667      	mov	r7, ip
        EXTI->FTSR1 = temp;
 8006862:	6065      	str	r5, [r4, #4]
        temp = EXTI->EMR1;
 8006864:	4c0e      	ldr	r4, [pc, #56]	@ (80068a0 <HAL_GPIO_Init+0x15c>)
          temp |= iocurrent;
 8006866:	9d00      	ldr	r5, [sp, #0]
        temp = EXTI->EMR1;
 8006868:	6fe6      	ldr	r6, [r4, #124]	@ 0x7c
          temp |= iocurrent;
 800686a:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800686c:	03bf      	lsls	r7, r7, #14
 800686e:	d401      	bmi.n	8006874 <HAL_GPIO_Init+0x130>
        temp &= ~(iocurrent);
 8006870:	0035      	movs	r5, r6
 8006872:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006874:	4667      	mov	r7, ip
        EXTI->EMR1 = temp;
 8006876:	67e5      	str	r5, [r4, #124]	@ 0x7c
        temp = EXTI->IMR1;
 8006878:	4c0a      	ldr	r4, [pc, #40]	@ (80068a4 <HAL_GPIO_Init+0x160>)
          temp |= iocurrent;
 800687a:	9e00      	ldr	r6, [sp, #0]
        temp = EXTI->IMR1;
 800687c:	6fe5      	ldr	r5, [r4, #124]	@ 0x7c
          temp |= iocurrent;
 800687e:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006880:	03ff      	lsls	r7, r7, #15
 8006882:	d401      	bmi.n	8006888 <HAL_GPIO_Init+0x144>
        temp &= ~(iocurrent);
 8006884:	4015      	ands	r5, r2
 8006886:	002e      	movs	r6, r5
        EXTI->IMR1 = temp;
 8006888:	67e6      	str	r6, [r4, #124]	@ 0x7c
    position++;
 800688a:	3301      	adds	r3, #1
 800688c:	e75d      	b.n	800674a <HAL_GPIO_Init+0x6>
 800688e:	46c0      	nop			@ (mov r8, r8)
 8006890:	40021800 	.word	0x40021800
 8006894:	50000400 	.word	0x50000400
 8006898:	50000800 	.word	0x50000800
 800689c:	50000c00 	.word	0x50000c00
 80068a0:	40021808 	.word	0x40021808
 80068a4:	40021804 	.word	0x40021804

080068a8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80068a8:	2a00      	cmp	r2, #0
 80068aa:	d001      	beq.n	80068b0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80068ac:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80068ae:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80068b0:	6281      	str	r1, [r0, #40]	@ 0x28
}
 80068b2:	e7fc      	b.n	80068ae <HAL_GPIO_WritePin+0x6>

080068b4 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80068b4:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80068b6:	0013      	movs	r3, r2
 80068b8:	400b      	ands	r3, r1
 80068ba:	041b      	lsls	r3, r3, #16
 80068bc:	4391      	bics	r1, r2
 80068be:	430b      	orrs	r3, r1
 80068c0:	6183      	str	r3, [r0, #24]
}
 80068c2:	4770      	bx	lr

080068c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80068c4:	b570      	push	{r4, r5, r6, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80068c6:	4d08      	ldr	r5, [pc, #32]	@ (80068e8 <HAL_GPIO_EXTI_IRQHandler+0x24>)
{
 80068c8:	0004      	movs	r4, r0
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80068ca:	68eb      	ldr	r3, [r5, #12]
 80068cc:	4218      	tst	r0, r3
 80068ce:	d002      	beq.n	80068d6 <HAL_GPIO_EXTI_IRQHandler+0x12>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80068d0:	60e8      	str	r0, [r5, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80068d2:	f7fd fbcf 	bl	8004074 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80068d6:	692b      	ldr	r3, [r5, #16]
 80068d8:	4223      	tst	r3, r4
 80068da:	d003      	beq.n	80068e4 <HAL_GPIO_EXTI_IRQHandler+0x20>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80068dc:	0020      	movs	r0, r4
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80068de:	612c      	str	r4, [r5, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80068e0:	f7fd fc06 	bl	80040f0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80068e4:	bd70      	pop	{r4, r5, r6, pc}
 80068e6:	46c0      	nop			@ (mov r8, r8)
 80068e8:	40021800 	.word	0x40021800

080068ec <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80068ec:	6803      	ldr	r3, [r0, #0]
 80068ee:	699a      	ldr	r2, [r3, #24]
 80068f0:	0792      	lsls	r2, r2, #30
 80068f2:	d501      	bpl.n	80068f8 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80068f4:	2200      	movs	r2, #0
 80068f6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80068f8:	2201      	movs	r2, #1
 80068fa:	6999      	ldr	r1, [r3, #24]
 80068fc:	4211      	tst	r1, r2
 80068fe:	d102      	bne.n	8006906 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006900:	6999      	ldr	r1, [r3, #24]
 8006902:	430a      	orrs	r2, r1
 8006904:	619a      	str	r2, [r3, #24]
  }
}
 8006906:	4770      	bx	lr

08006908 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006908:	b530      	push	{r4, r5, lr}
 800690a:	9c03      	ldr	r4, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800690c:	6800      	ldr	r0, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800690e:	4323      	orrs	r3, r4
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006910:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006912:	0589      	lsls	r1, r1, #22
 8006914:	431a      	orrs	r2, r3
 8006916:	0d89      	lsrs	r1, r1, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8006918:	4b05      	ldr	r3, [pc, #20]	@ (8006930 <I2C_TransferConfig+0x28>)
 800691a:	6845      	ldr	r5, [r0, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800691c:	430a      	orrs	r2, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 800691e:	0d64      	lsrs	r4, r4, #21
 8006920:	4323      	orrs	r3, r4
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006922:	0052      	lsls	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8006924:	439d      	bics	r5, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006926:	0852      	lsrs	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8006928:	432a      	orrs	r2, r5
 800692a:	6042      	str	r2, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800692c:	bd30      	pop	{r4, r5, pc}
 800692e:	46c0      	nop			@ (mov r8, r8)
 8006930:	03ff63ff 	.word	0x03ff63ff

08006934 <I2C_IsErrorOccurred>:
{
 8006934:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006936:	0015      	movs	r5, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8006938:	6802      	ldr	r2, [r0, #0]
{
 800693a:	000e      	movs	r6, r1
  uint32_t itflag   = hi2c->Instance->ISR;
 800693c:	6991      	ldr	r1, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800693e:	2310      	movs	r3, #16
 8006940:	000f      	movs	r7, r1
{
 8006942:	0004      	movs	r4, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006944:	401f      	ands	r7, r3
  HAL_StatusTypeDef status = HAL_OK;
 8006946:	2000      	movs	r0, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006948:	4219      	tst	r1, r3
 800694a:	d00d      	beq.n	8006968 <I2C_IsErrorOccurred+0x34>
  HAL_StatusTypeDef status = HAL_OK;
 800694c:	0007      	movs	r7, r0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800694e:	61d3      	str	r3, [r2, #28]
  uint32_t error_code = 0;
 8006950:	9001      	str	r0, [sp, #4]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006952:	6823      	ldr	r3, [r4, #0]
 8006954:	2120      	movs	r1, #32
 8006956:	699a      	ldr	r2, [r3, #24]
 8006958:	420a      	tst	r2, r1
 800695a:	d15f      	bne.n	8006a1c <I2C_IsErrorOccurred+0xe8>
 800695c:	2f00      	cmp	r7, #0
 800695e:	d031      	beq.n	80069c4 <I2C_IsErrorOccurred+0x90>
    error_code |= HAL_I2C_ERROR_AF;
 8006960:	2704      	movs	r7, #4
    status = HAL_ERROR;
 8006962:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_AF;
 8006964:	9b01      	ldr	r3, [sp, #4]
 8006966:	431f      	orrs	r7, r3
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006968:	2280      	movs	r2, #128	@ 0x80
  itflag = hi2c->Instance->ISR;
 800696a:	6825      	ldr	r5, [r4, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800696c:	0052      	lsls	r2, r2, #1
  itflag = hi2c->Instance->ISR;
 800696e:	69ab      	ldr	r3, [r5, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006970:	4213      	tst	r3, r2
 8006972:	d002      	beq.n	800697a <I2C_IsErrorOccurred+0x46>
    error_code |= HAL_I2C_ERROR_BERR;
 8006974:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006976:	61ea      	str	r2, [r5, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8006978:	4307      	orrs	r7, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800697a:	2280      	movs	r2, #128	@ 0x80
 800697c:	00d2      	lsls	r2, r2, #3
 800697e:	4213      	tst	r3, r2
 8006980:	d003      	beq.n	800698a <I2C_IsErrorOccurred+0x56>
    error_code |= HAL_I2C_ERROR_OVR;
 8006982:	2108      	movs	r1, #8
    status = HAL_ERROR;
 8006984:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_OVR;
 8006986:	430f      	orrs	r7, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006988:	61ea      	str	r2, [r5, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800698a:	2280      	movs	r2, #128	@ 0x80
 800698c:	0092      	lsls	r2, r2, #2
 800698e:	4213      	tst	r3, r2
 8006990:	d049      	beq.n	8006a26 <I2C_IsErrorOccurred+0xf2>
    error_code |= HAL_I2C_ERROR_ARLO;
 8006992:	2302      	movs	r3, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006994:	61ea      	str	r2, [r5, #28]
    error_code |= HAL_I2C_ERROR_ARLO;
 8006996:	431f      	orrs	r7, r3
    I2C_Flush_TXDR(hi2c);
 8006998:	0020      	movs	r0, r4
 800699a:	f7ff ffa7 	bl	80068ec <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800699e:	686b      	ldr	r3, [r5, #4]
 80069a0:	4a22      	ldr	r2, [pc, #136]	@ (8006a2c <I2C_IsErrorOccurred+0xf8>)
    __HAL_UNLOCK(hi2c);
 80069a2:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 80069a4:	4013      	ands	r3, r2
 80069a6:	606b      	str	r3, [r5, #4]
    hi2c->ErrorCode |= error_code;
 80069a8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80069aa:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 80069ac:	433b      	orrs	r3, r7
 80069ae:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80069b0:	0023      	movs	r3, r4
 80069b2:	3341      	adds	r3, #65	@ 0x41
 80069b4:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069b6:	0022      	movs	r2, r4
 80069b8:	2300      	movs	r3, #0
 80069ba:	3242      	adds	r2, #66	@ 0x42
    __HAL_UNLOCK(hi2c);
 80069bc:	3440      	adds	r4, #64	@ 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069be:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80069c0:	7023      	strb	r3, [r4, #0]
 80069c2:	e032      	b.n	8006a2a <I2C_IsErrorOccurred+0xf6>
      if (Timeout != HAL_MAX_DELAY)
 80069c4:	1c72      	adds	r2, r6, #1
 80069c6:	d0c5      	beq.n	8006954 <I2C_IsErrorOccurred+0x20>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80069c8:	f7ff f9ee 	bl	8005da8 <HAL_GetTick>
 80069cc:	1b40      	subs	r0, r0, r5
 80069ce:	42b0      	cmp	r0, r6
 80069d0:	d801      	bhi.n	80069d6 <I2C_IsErrorOccurred+0xa2>
 80069d2:	2e00      	cmp	r6, #0
 80069d4:	d1bd      	bne.n	8006952 <I2C_IsErrorOccurred+0x1e>
          tmp2 = hi2c->Mode;
 80069d6:	0022      	movs	r2, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80069d8:	6823      	ldr	r3, [r4, #0]
          tmp2 = hi2c->Mode;
 80069da:	3242      	adds	r2, #66	@ 0x42
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80069dc:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 80069de:	7811      	ldrb	r1, [r2, #0]
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80069e0:	699a      	ldr	r2, [r3, #24]
          tmp2 = hi2c->Mode;
 80069e2:	b2c9      	uxtb	r1, r1
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80069e4:	0412      	lsls	r2, r2, #16
 80069e6:	d50b      	bpl.n	8006a00 <I2C_IsErrorOccurred+0xcc>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80069e8:	2280      	movs	r2, #128	@ 0x80
 80069ea:	01d2      	lsls	r2, r2, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80069ec:	4210      	tst	r0, r2
 80069ee:	d107      	bne.n	8006a00 <I2C_IsErrorOccurred+0xcc>
              (tmp1 != I2C_CR2_STOP) && \
 80069f0:	2920      	cmp	r1, #32
 80069f2:	d005      	beq.n	8006a00 <I2C_IsErrorOccurred+0xcc>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80069f4:	6859      	ldr	r1, [r3, #4]
 80069f6:	430a      	orrs	r2, r1
 80069f8:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 80069fa:	f7ff f9d5 	bl	8005da8 <HAL_GetTick>
 80069fe:	0005      	movs	r5, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a00:	2220      	movs	r2, #32
 8006a02:	6823      	ldr	r3, [r4, #0]
 8006a04:	699b      	ldr	r3, [r3, #24]
 8006a06:	4213      	tst	r3, r2
 8006a08:	d1a3      	bne.n	8006952 <I2C_IsErrorOccurred+0x1e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006a0a:	f7ff f9cd 	bl	8005da8 <HAL_GetTick>
 8006a0e:	1b40      	subs	r0, r0, r5
 8006a10:	2819      	cmp	r0, #25
 8006a12:	d9f5      	bls.n	8006a00 <I2C_IsErrorOccurred+0xcc>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006a14:	2320      	movs	r3, #32
              status = HAL_ERROR;
 8006a16:	2701      	movs	r7, #1
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006a18:	9301      	str	r3, [sp, #4]
 8006a1a:	e79a      	b.n	8006952 <I2C_IsErrorOccurred+0x1e>
    if (status == HAL_OK)
 8006a1c:	2f00      	cmp	r7, #0
 8006a1e:	d19f      	bne.n	8006960 <I2C_IsErrorOccurred+0x2c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a20:	2220      	movs	r2, #32
 8006a22:	61da      	str	r2, [r3, #28]
 8006a24:	e79c      	b.n	8006960 <I2C_IsErrorOccurred+0x2c>
  if (status != HAL_OK)
 8006a26:	2800      	cmp	r0, #0
 8006a28:	d1b6      	bne.n	8006998 <I2C_IsErrorOccurred+0x64>
}
 8006a2a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006a2c:	fe00e800 	.word	0xfe00e800

08006a30 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8006a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a32:	0004      	movs	r4, r0
 8006a34:	000d      	movs	r5, r1
 8006a36:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006a38:	2702      	movs	r7, #2
 8006a3a:	6823      	ldr	r3, [r4, #0]
 8006a3c:	699b      	ldr	r3, [r3, #24]
 8006a3e:	423b      	tst	r3, r7
 8006a40:	d001      	beq.n	8006a46 <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 8006a42:	2000      	movs	r0, #0
 8006a44:	e021      	b.n	8006a8a <I2C_WaitOnTXISFlagUntilTimeout+0x5a>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a46:	0032      	movs	r2, r6
 8006a48:	0029      	movs	r1, r5
 8006a4a:	0020      	movs	r0, r4
 8006a4c:	f7ff ff72 	bl	8006934 <I2C_IsErrorOccurred>
 8006a50:	2800      	cmp	r0, #0
 8006a52:	d119      	bne.n	8006a88 <I2C_WaitOnTXISFlagUntilTimeout+0x58>
    if (Timeout != HAL_MAX_DELAY)
 8006a54:	1c6b      	adds	r3, r5, #1
 8006a56:	d0f0      	beq.n	8006a3a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a58:	f7ff f9a6 	bl	8005da8 <HAL_GetTick>
 8006a5c:	1b80      	subs	r0, r0, r6
 8006a5e:	42a8      	cmp	r0, r5
 8006a60:	d801      	bhi.n	8006a66 <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 8006a62:	2d00      	cmp	r5, #0
 8006a64:	d1e9      	bne.n	8006a3a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006a66:	6823      	ldr	r3, [r4, #0]
 8006a68:	6999      	ldr	r1, [r3, #24]
 8006a6a:	2302      	movs	r3, #2
 8006a6c:	000a      	movs	r2, r1
 8006a6e:	401a      	ands	r2, r3
 8006a70:	4219      	tst	r1, r3
 8006a72:	d1e2      	bne.n	8006a3a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a74:	2120      	movs	r1, #32
 8006a76:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8006a78:	430b      	orrs	r3, r1
 8006a7a:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006a7c:	0023      	movs	r3, r4
          __HAL_UNLOCK(hi2c);
 8006a7e:	3440      	adds	r4, #64	@ 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 8006a80:	3341      	adds	r3, #65	@ 0x41
 8006a82:	7019      	strb	r1, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a84:	705a      	strb	r2, [r3, #1]
          __HAL_UNLOCK(hi2c);
 8006a86:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 8006a88:	2001      	movs	r0, #1
}
 8006a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006a8c <I2C_WaitOnFlagUntilTimeout>:
{
 8006a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a8e:	0004      	movs	r4, r0
 8006a90:	000d      	movs	r5, r1
 8006a92:	0017      	movs	r7, r2
 8006a94:	001e      	movs	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a96:	6823      	ldr	r3, [r4, #0]
 8006a98:	699b      	ldr	r3, [r3, #24]
 8006a9a:	402b      	ands	r3, r5
 8006a9c:	1b5b      	subs	r3, r3, r5
 8006a9e:	425a      	negs	r2, r3
 8006aa0:	4153      	adcs	r3, r2
 8006aa2:	42bb      	cmp	r3, r7
 8006aa4:	d001      	beq.n	8006aaa <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8006aa6:	2000      	movs	r0, #0
 8006aa8:	e026      	b.n	8006af8 <I2C_WaitOnFlagUntilTimeout+0x6c>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006aaa:	0031      	movs	r1, r6
 8006aac:	0020      	movs	r0, r4
 8006aae:	9a06      	ldr	r2, [sp, #24]
 8006ab0:	f7ff ff40 	bl	8006934 <I2C_IsErrorOccurred>
 8006ab4:	2800      	cmp	r0, #0
 8006ab6:	d11e      	bne.n	8006af6 <I2C_WaitOnFlagUntilTimeout+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8006ab8:	1c73      	adds	r3, r6, #1
 8006aba:	d0ec      	beq.n	8006a96 <I2C_WaitOnFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006abc:	f7ff f974 	bl	8005da8 <HAL_GetTick>
 8006ac0:	9b06      	ldr	r3, [sp, #24]
 8006ac2:	1ac0      	subs	r0, r0, r3
 8006ac4:	42b0      	cmp	r0, r6
 8006ac6:	d801      	bhi.n	8006acc <I2C_WaitOnFlagUntilTimeout+0x40>
 8006ac8:	2e00      	cmp	r6, #0
 8006aca:	d1e4      	bne.n	8006a96 <I2C_WaitOnFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006acc:	6823      	ldr	r3, [r4, #0]
 8006ace:	699b      	ldr	r3, [r3, #24]
 8006ad0:	402b      	ands	r3, r5
 8006ad2:	1b5b      	subs	r3, r3, r5
 8006ad4:	425a      	negs	r2, r3
 8006ad6:	4153      	adcs	r3, r2
 8006ad8:	42bb      	cmp	r3, r7
 8006ada:	d1dc      	bne.n	8006a96 <I2C_WaitOnFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006adc:	2220      	movs	r2, #32
 8006ade:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006ae4:	0023      	movs	r3, r4
 8006ae6:	3341      	adds	r3, #65	@ 0x41
 8006ae8:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006aea:	0022      	movs	r2, r4
 8006aec:	2300      	movs	r3, #0
 8006aee:	3242      	adds	r2, #66	@ 0x42
          __HAL_UNLOCK(hi2c);
 8006af0:	3440      	adds	r4, #64	@ 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006af2:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 8006af4:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8006af6:	2001      	movs	r0, #1
}
 8006af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006afa <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8006afa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006afc:	0004      	movs	r4, r0
 8006afe:	000e      	movs	r6, r1
 8006b00:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b02:	2520      	movs	r5, #32
 8006b04:	6823      	ldr	r3, [r4, #0]
 8006b06:	699b      	ldr	r3, [r3, #24]
 8006b08:	422b      	tst	r3, r5
 8006b0a:	d001      	beq.n	8006b10 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8006b0c:	2000      	movs	r0, #0
 8006b0e:	e01d      	b.n	8006b4c <I2C_WaitOnSTOPFlagUntilTimeout+0x52>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b10:	003a      	movs	r2, r7
 8006b12:	0031      	movs	r1, r6
 8006b14:	0020      	movs	r0, r4
 8006b16:	f7ff ff0d 	bl	8006934 <I2C_IsErrorOccurred>
 8006b1a:	2800      	cmp	r0, #0
 8006b1c:	d115      	bne.n	8006b4a <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b1e:	f7ff f943 	bl	8005da8 <HAL_GetTick>
 8006b22:	1bc0      	subs	r0, r0, r7
 8006b24:	42b0      	cmp	r0, r6
 8006b26:	d801      	bhi.n	8006b2c <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8006b28:	2e00      	cmp	r6, #0
 8006b2a:	d1eb      	bne.n	8006b04 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006b2c:	6823      	ldr	r3, [r4, #0]
 8006b2e:	699b      	ldr	r3, [r3, #24]
 8006b30:	001a      	movs	r2, r3
 8006b32:	402a      	ands	r2, r5
 8006b34:	422b      	tst	r3, r5
 8006b36:	d1e5      	bne.n	8006b04 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b38:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8006b3a:	432b      	orrs	r3, r5
 8006b3c:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006b3e:	0023      	movs	r3, r4
        __HAL_UNLOCK(hi2c);
 8006b40:	3440      	adds	r4, #64	@ 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8006b42:	3341      	adds	r3, #65	@ 0x41
 8006b44:	701d      	strb	r5, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b46:	705a      	strb	r2, [r3, #1]
        __HAL_UNLOCK(hi2c);
 8006b48:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 8006b4a:	2001      	movs	r0, #1
}
 8006b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006b50 <HAL_I2C_Init>:
{
 8006b50:	b570      	push	{r4, r5, r6, lr}
 8006b52:	0004      	movs	r4, r0
    return HAL_ERROR;
 8006b54:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8006b56:	2c00      	cmp	r4, #0
 8006b58:	d04e      	beq.n	8006bf8 <HAL_I2C_Init+0xa8>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006b5a:	0025      	movs	r5, r4
 8006b5c:	3541      	adds	r5, #65	@ 0x41
 8006b5e:	782b      	ldrb	r3, [r5, #0]
 8006b60:	b2da      	uxtb	r2, r3
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d105      	bne.n	8006b72 <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 8006b66:	0023      	movs	r3, r4
 8006b68:	3340      	adds	r3, #64	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8006b6a:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 8006b6c:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 8006b6e:	f7fe fbcf 	bl	8005310 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006b72:	2324      	movs	r3, #36	@ 0x24
  __HAL_I2C_DISABLE(hi2c);
 8006b74:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006b76:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8006b78:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006b7a:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8006b7c:	681a      	ldr	r2, [r3, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006b7e:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8006b80:	438a      	bics	r2, r1
 8006b82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006b84:	491d      	ldr	r1, [pc, #116]	@ (8006bfc <HAL_I2C_Init+0xac>)
 8006b86:	6862      	ldr	r2, [r4, #4]
 8006b88:	400a      	ands	r2, r1
 8006b8a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006b8c:	689a      	ldr	r2, [r3, #8]
 8006b8e:	491c      	ldr	r1, [pc, #112]	@ (8006c00 <HAL_I2C_Init+0xb0>)
 8006b90:	400a      	ands	r2, r1
 8006b92:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006b94:	2801      	cmp	r0, #1
 8006b96:	d107      	bne.n	8006ba8 <HAL_I2C_Init+0x58>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006b98:	2280      	movs	r2, #128	@ 0x80
 8006b9a:	0212      	lsls	r2, r2, #8
 8006b9c:	4332      	orrs	r2, r6
 8006b9e:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006ba0:	685a      	ldr	r2, [r3, #4]
 8006ba2:	4818      	ldr	r0, [pc, #96]	@ (8006c04 <HAL_I2C_Init+0xb4>)
 8006ba4:	4002      	ands	r2, r0
 8006ba6:	e009      	b.n	8006bbc <HAL_I2C_Init+0x6c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006ba8:	2284      	movs	r2, #132	@ 0x84
 8006baa:	0212      	lsls	r2, r2, #8
 8006bac:	4332      	orrs	r2, r6
 8006bae:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006bb0:	2802      	cmp	r0, #2
 8006bb2:	d1f5      	bne.n	8006ba0 <HAL_I2C_Init+0x50>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006bb4:	2280      	movs	r2, #128	@ 0x80
 8006bb6:	6858      	ldr	r0, [r3, #4]
 8006bb8:	0112      	lsls	r2, r2, #4
 8006bba:	4302      	orrs	r2, r0
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006bbc:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006bbe:	6858      	ldr	r0, [r3, #4]
 8006bc0:	4a11      	ldr	r2, [pc, #68]	@ (8006c08 <HAL_I2C_Init+0xb8>)
 8006bc2:	4302      	orrs	r2, r0
 8006bc4:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006bc6:	68da      	ldr	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006bc8:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006bca:	400a      	ands	r2, r1
 8006bcc:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006bce:	6961      	ldr	r1, [r4, #20]
 8006bd0:	6922      	ldr	r2, [r4, #16]
 8006bd2:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006bd4:	69a1      	ldr	r1, [r4, #24]
 8006bd6:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006bd8:	430a      	orrs	r2, r1
 8006bda:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006bdc:	6a21      	ldr	r1, [r4, #32]
 8006bde:	69e2      	ldr	r2, [r4, #28]
 8006be0:	430a      	orrs	r2, r1
 8006be2:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8006be4:	2201      	movs	r2, #1
 8006be6:	6819      	ldr	r1, [r3, #0]
 8006be8:	430a      	orrs	r2, r1
 8006bea:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8006bec:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006bee:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006bf0:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8006bf2:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bf4:	3442      	adds	r4, #66	@ 0x42
 8006bf6:	7020      	strb	r0, [r4, #0]
}
 8006bf8:	bd70      	pop	{r4, r5, r6, pc}
 8006bfa:	46c0      	nop			@ (mov r8, r8)
 8006bfc:	f0ffffff 	.word	0xf0ffffff
 8006c00:	ffff7fff 	.word	0xffff7fff
 8006c04:	fffff7ff 	.word	0xfffff7ff
 8006c08:	02008000 	.word	0x02008000

08006c0c <HAL_I2C_Mem_Write>:
{
 8006c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c0e:	0007      	movs	r7, r0
{
 8006c10:	b087      	sub	sp, #28
 8006c12:	9303      	str	r3, [sp, #12]
 8006c14:	ab0c      	add	r3, sp, #48	@ 0x30
 8006c16:	9202      	str	r2, [sp, #8]
 8006c18:	cb04      	ldmia	r3!, {r2}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c1a:	3741      	adds	r7, #65	@ 0x41
{
 8006c1c:	881b      	ldrh	r3, [r3, #0]
 8006c1e:	9204      	str	r2, [sp, #16]
 8006c20:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c22:	783b      	ldrb	r3, [r7, #0]
{
 8006c24:	0004      	movs	r4, r0
 8006c26:	000e      	movs	r6, r1
    __HAL_LOCK(hi2c);
 8006c28:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c2a:	2b20      	cmp	r3, #32
 8006c2c:	d108      	bne.n	8006c40 <HAL_I2C_Mem_Write+0x34>
    if ((pData == NULL) || (Size == 0U))
 8006c2e:	2a00      	cmp	r2, #0
 8006c30:	d002      	beq.n	8006c38 <HAL_I2C_Mem_Write+0x2c>
 8006c32:	9b05      	ldr	r3, [sp, #20]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d105      	bne.n	8006c44 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006c38:	2380      	movs	r3, #128	@ 0x80
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8006c3e:	2001      	movs	r0, #1
}
 8006c40:	b007      	add	sp, #28
 8006c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8006c44:	0023      	movs	r3, r4
 8006c46:	3340      	adds	r3, #64	@ 0x40
 8006c48:	781a      	ldrb	r2, [r3, #0]
 8006c4a:	2002      	movs	r0, #2
 8006c4c:	2a01      	cmp	r2, #1
 8006c4e:	d0f7      	beq.n	8006c40 <HAL_I2C_Mem_Write+0x34>
 8006c50:	2201      	movs	r2, #1
 8006c52:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8006c54:	f7ff f8a8 	bl	8005da8 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006c58:	2180      	movs	r1, #128	@ 0x80
    tickstart = HAL_GetTick();
 8006c5a:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006c5c:	9000      	str	r0, [sp, #0]
 8006c5e:	2319      	movs	r3, #25
 8006c60:	2201      	movs	r2, #1
 8006c62:	0020      	movs	r0, r4
 8006c64:	0209      	lsls	r1, r1, #8
 8006c66:	f7ff ff11 	bl	8006a8c <I2C_WaitOnFlagUntilTimeout>
 8006c6a:	2800      	cmp	r0, #0
 8006c6c:	d1e7      	bne.n	8006c3e <HAL_I2C_Mem_Write+0x32>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006c6e:	2321      	movs	r3, #33	@ 0x21
 8006c70:	703b      	strb	r3, [r7, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006c72:	0027      	movs	r7, r4
 8006c74:	331f      	adds	r3, #31
 8006c76:	3742      	adds	r7, #66	@ 0x42
 8006c78:	703b      	strb	r3, [r7, #0]
    hi2c->pBuffPtr  = pData;
 8006c7a:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c7c:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 8006c7e:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006c80:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 8006c82:	6360      	str	r0, [r4, #52]	@ 0x34
    hi2c->XferCount = Size;
 8006c84:	8563      	strh	r3, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006c86:	466b      	mov	r3, sp
 8006c88:	7b1a      	ldrb	r2, [r3, #12]
 8006c8a:	4b4b      	ldr	r3, [pc, #300]	@ (8006db8 <HAL_I2C_Mem_Write+0x1ac>)
 8006c8c:	0031      	movs	r1, r6
 8006c8e:	9300      	str	r3, [sp, #0]
 8006c90:	2380      	movs	r3, #128	@ 0x80
 8006c92:	0020      	movs	r0, r4
 8006c94:	045b      	lsls	r3, r3, #17
 8006c96:	f7ff fe37 	bl	8006908 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c9a:	002a      	movs	r2, r5
 8006c9c:	0020      	movs	r0, r4
 8006c9e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006ca0:	f7ff fec6 	bl	8006a30 <I2C_WaitOnTXISFlagUntilTimeout>
 8006ca4:	2800      	cmp	r0, #0
 8006ca6:	d129      	bne.n	8006cfc <HAL_I2C_Mem_Write+0xf0>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006ca8:	9a03      	ldr	r2, [sp, #12]
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006caa:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006cac:	2a01      	cmp	r2, #1
 8006cae:	d116      	bne.n	8006cde <HAL_I2C_Mem_Write+0xd2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006cb0:	466a      	mov	r2, sp
 8006cb2:	7a12      	ldrb	r2, [r2, #8]
 8006cb4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	2180      	movs	r1, #128	@ 0x80
 8006cba:	0020      	movs	r0, r4
 8006cbc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006cbe:	9500      	str	r5, [sp, #0]
 8006cc0:	f7ff fee4 	bl	8006a8c <I2C_WaitOnFlagUntilTimeout>
 8006cc4:	2800      	cmp	r0, #0
 8006cc6:	d119      	bne.n	8006cfc <HAL_I2C_Mem_Write+0xf0>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006cc8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8006cca:	2bff      	cmp	r3, #255	@ 0xff
 8006ccc:	d81a      	bhi.n	8006d04 <HAL_I2C_Mem_Write+0xf8>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006cce:	2380      	movs	r3, #128	@ 0x80
      hi2c->XferSize = hi2c->XferCount;
 8006cd0:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006cd2:	049b      	lsls	r3, r3, #18
      hi2c->XferSize = hi2c->XferCount;
 8006cd4:	b292      	uxth	r2, r2
 8006cd6:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006cd8:	b2d2      	uxtb	r2, r2
 8006cda:	9000      	str	r0, [sp, #0]
 8006cdc:	e017      	b.n	8006d0e <HAL_I2C_Mem_Write+0x102>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006cde:	9a02      	ldr	r2, [sp, #8]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ce0:	0020      	movs	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006ce2:	0a12      	lsrs	r2, r2, #8
 8006ce4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ce6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006ce8:	002a      	movs	r2, r5
 8006cea:	f7ff fea1 	bl	8006a30 <I2C_WaitOnTXISFlagUntilTimeout>
 8006cee:	2800      	cmp	r0, #0
 8006cf0:	d104      	bne.n	8006cfc <HAL_I2C_Mem_Write+0xf0>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006cf2:	466b      	mov	r3, sp
 8006cf4:	6822      	ldr	r2, [r4, #0]
 8006cf6:	7a1b      	ldrb	r3, [r3, #8]
 8006cf8:	6293      	str	r3, [r2, #40]	@ 0x28
 8006cfa:	e7dc      	b.n	8006cb6 <HAL_I2C_Mem_Write+0xaa>
      __HAL_UNLOCK(hi2c);
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	3440      	adds	r4, #64	@ 0x40
 8006d00:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8006d02:	e79c      	b.n	8006c3e <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d04:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006d06:	2380      	movs	r3, #128	@ 0x80
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d08:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006d0a:	045b      	lsls	r3, r3, #17
 8006d0c:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006d0e:	0031      	movs	r1, r6
 8006d10:	0020      	movs	r0, r4
 8006d12:	f7ff fdf9 	bl	8006908 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d16:	002a      	movs	r2, r5
 8006d18:	0020      	movs	r0, r4
 8006d1a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006d1c:	f7ff fe88 	bl	8006a30 <I2C_WaitOnTXISFlagUntilTimeout>
 8006d20:	2800      	cmp	r0, #0
 8006d22:	d000      	beq.n	8006d26 <HAL_I2C_Mem_Write+0x11a>
 8006d24:	e78b      	b.n	8006c3e <HAL_I2C_Mem_Write+0x32>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006d26:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006d28:	6822      	ldr	r2, [r4, #0]
 8006d2a:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8006d2c:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006d2e:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8006d30:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8006d32:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8006d34:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8006d36:	3b01      	subs	r3, #1
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8006d3c:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006d3e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8006d40:	b292      	uxth	r2, r2
 8006d42:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d016      	beq.n	8006d76 <HAL_I2C_Mem_Write+0x16a>
 8006d48:	2a00      	cmp	r2, #0
 8006d4a:	d114      	bne.n	8006d76 <HAL_I2C_Mem_Write+0x16a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006d4c:	2180      	movs	r1, #128	@ 0x80
 8006d4e:	0020      	movs	r0, r4
 8006d50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d52:	9500      	str	r5, [sp, #0]
 8006d54:	f7ff fe9a 	bl	8006a8c <I2C_WaitOnFlagUntilTimeout>
 8006d58:	2800      	cmp	r0, #0
 8006d5a:	d000      	beq.n	8006d5e <HAL_I2C_Mem_Write+0x152>
 8006d5c:	e76f      	b.n	8006c3e <HAL_I2C_Mem_Write+0x32>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d5e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8006d60:	2bff      	cmp	r3, #255	@ 0xff
 8006d62:	d921      	bls.n	8006da8 <HAL_I2C_Mem_Write+0x19c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d64:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006d66:	2380      	movs	r3, #128	@ 0x80
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d68:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006d6a:	045b      	lsls	r3, r3, #17
 8006d6c:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006d6e:	0031      	movs	r1, r6
 8006d70:	0020      	movs	r0, r4
 8006d72:	f7ff fdc9 	bl	8006908 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8006d76:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d1cc      	bne.n	8006d16 <HAL_I2C_Mem_Write+0x10a>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d7c:	002a      	movs	r2, r5
 8006d7e:	0020      	movs	r0, r4
 8006d80:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006d82:	f7ff feba 	bl	8006afa <I2C_WaitOnSTOPFlagUntilTimeout>
 8006d86:	2800      	cmp	r0, #0
 8006d88:	d000      	beq.n	8006d8c <HAL_I2C_Mem_Write+0x180>
 8006d8a:	e758      	b.n	8006c3e <HAL_I2C_Mem_Write+0x32>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d8c:	2120      	movs	r1, #32
 8006d8e:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8006d90:	4d0a      	ldr	r5, [pc, #40]	@ (8006dbc <HAL_I2C_Mem_Write+0x1b0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d92:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8006d94:	685a      	ldr	r2, [r3, #4]
 8006d96:	402a      	ands	r2, r5
 8006d98:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006d9a:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8006d9c:	3440      	adds	r4, #64	@ 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8006d9e:	3341      	adds	r3, #65	@ 0x41
 8006da0:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006da2:	7038      	strb	r0, [r7, #0]
    __HAL_UNLOCK(hi2c);
 8006da4:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8006da6:	e74b      	b.n	8006c40 <HAL_I2C_Mem_Write+0x34>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006da8:	2380      	movs	r3, #128	@ 0x80
          hi2c->XferSize = hi2c->XferCount;
 8006daa:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006dac:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8006dae:	b292      	uxth	r2, r2
 8006db0:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006db2:	b2d2      	uxtb	r2, r2
 8006db4:	9000      	str	r0, [sp, #0]
 8006db6:	e7da      	b.n	8006d6e <HAL_I2C_Mem_Write+0x162>
 8006db8:	80002000 	.word	0x80002000
 8006dbc:	fe00e800 	.word	0xfe00e800

08006dc0 <HAL_I2C_Mem_Read>:
{
 8006dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006dc2:	0006      	movs	r6, r0
{
 8006dc4:	b087      	sub	sp, #28
 8006dc6:	9303      	str	r3, [sp, #12]
 8006dc8:	ab0c      	add	r3, sp, #48	@ 0x30
 8006dca:	9202      	str	r2, [sp, #8]
 8006dcc:	cb04      	ldmia	r3!, {r2}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006dce:	3641      	adds	r6, #65	@ 0x41
{
 8006dd0:	881b      	ldrh	r3, [r3, #0]
 8006dd2:	9204      	str	r2, [sp, #16]
 8006dd4:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006dd6:	7833      	ldrb	r3, [r6, #0]
{
 8006dd8:	0004      	movs	r4, r0
 8006dda:	000f      	movs	r7, r1
    __HAL_LOCK(hi2c);
 8006ddc:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006dde:	2b20      	cmp	r3, #32
 8006de0:	d108      	bne.n	8006df4 <HAL_I2C_Mem_Read+0x34>
    if ((pData == NULL) || (Size == 0U))
 8006de2:	2a00      	cmp	r2, #0
 8006de4:	d002      	beq.n	8006dec <HAL_I2C_Mem_Read+0x2c>
 8006de6:	9b05      	ldr	r3, [sp, #20]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d105      	bne.n	8006df8 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006dec:	2380      	movs	r3, #128	@ 0x80
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8006df2:	2001      	movs	r0, #1
}
 8006df4:	b007      	add	sp, #28
 8006df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8006df8:	0023      	movs	r3, r4
 8006dfa:	3340      	adds	r3, #64	@ 0x40
 8006dfc:	781a      	ldrb	r2, [r3, #0]
 8006dfe:	2002      	movs	r0, #2
 8006e00:	2a01      	cmp	r2, #1
 8006e02:	d0f7      	beq.n	8006df4 <HAL_I2C_Mem_Read+0x34>
 8006e04:	2201      	movs	r2, #1
 8006e06:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8006e08:	f7fe ffce 	bl	8005da8 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006e0c:	2180      	movs	r1, #128	@ 0x80
 8006e0e:	2319      	movs	r3, #25
 8006e10:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8006e12:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006e14:	2201      	movs	r2, #1
 8006e16:	0020      	movs	r0, r4
 8006e18:	0209      	lsls	r1, r1, #8
 8006e1a:	f7ff fe37 	bl	8006a8c <I2C_WaitOnFlagUntilTimeout>
 8006e1e:	1e03      	subs	r3, r0, #0
 8006e20:	d1e7      	bne.n	8006df2 <HAL_I2C_Mem_Read+0x32>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006e22:	2222      	movs	r2, #34	@ 0x22
 8006e24:	7032      	strb	r2, [r6, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006e26:	0026      	movs	r6, r4
 8006e28:	321e      	adds	r2, #30
 8006e2a:	3642      	adds	r6, #66	@ 0x42
 8006e2c:	7032      	strb	r2, [r6, #0]
    hi2c->pBuffPtr  = pData;
 8006e2e:	9a04      	ldr	r2, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e30:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 8006e32:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006e34:	9a05      	ldr	r2, [sp, #20]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006e36:	494e      	ldr	r1, [pc, #312]	@ (8006f70 <HAL_I2C_Mem_Read+0x1b0>)
    hi2c->XferCount = Size;
 8006e38:	8562      	strh	r2, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006e3a:	466a      	mov	r2, sp
    hi2c->XferISR   = NULL;
 8006e3c:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006e3e:	7b12      	ldrb	r2, [r2, #12]
 8006e40:	0020      	movs	r0, r4
 8006e42:	9100      	str	r1, [sp, #0]
 8006e44:	0039      	movs	r1, r7
 8006e46:	f7ff fd5f 	bl	8006908 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e4a:	002a      	movs	r2, r5
 8006e4c:	0020      	movs	r0, r4
 8006e4e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006e50:	f7ff fdee 	bl	8006a30 <I2C_WaitOnTXISFlagUntilTimeout>
 8006e54:	2800      	cmp	r0, #0
 8006e56:	d12a      	bne.n	8006eae <HAL_I2C_Mem_Read+0xee>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e58:	9a03      	ldr	r2, [sp, #12]
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e5a:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e5c:	2a01      	cmp	r2, #1
 8006e5e:	d117      	bne.n	8006e90 <HAL_I2C_Mem_Read+0xd0>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e60:	466a      	mov	r2, sp
 8006e62:	7a12      	ldrb	r2, [r2, #8]
 8006e64:	629a      	str	r2, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006e66:	2200      	movs	r2, #0
 8006e68:	2140      	movs	r1, #64	@ 0x40
 8006e6a:	0020      	movs	r0, r4
 8006e6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e6e:	9500      	str	r5, [sp, #0]
 8006e70:	f7ff fe0c 	bl	8006a8c <I2C_WaitOnFlagUntilTimeout>
 8006e74:	2800      	cmp	r0, #0
 8006e76:	d11a      	bne.n	8006eae <HAL_I2C_Mem_Read+0xee>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e78:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8006e7a:	4b3e      	ldr	r3, [pc, #248]	@ (8006f74 <HAL_I2C_Mem_Read+0x1b4>)
 8006e7c:	2aff      	cmp	r2, #255	@ 0xff
 8006e7e:	d81a      	bhi.n	8006eb6 <HAL_I2C_Mem_Read+0xf6>
      hi2c->XferSize = hi2c->XferCount;
 8006e80:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8006e82:	b292      	uxth	r2, r2
 8006e84:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006e86:	9300      	str	r3, [sp, #0]
 8006e88:	2380      	movs	r3, #128	@ 0x80
 8006e8a:	b2d2      	uxtb	r2, r2
 8006e8c:	049b      	lsls	r3, r3, #18
 8006e8e:	e017      	b.n	8006ec0 <HAL_I2C_Mem_Read+0x100>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006e90:	9a02      	ldr	r2, [sp, #8]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e92:	0020      	movs	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006e94:	0a12      	lsrs	r2, r2, #8
 8006e96:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e98:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006e9a:	002a      	movs	r2, r5
 8006e9c:	f7ff fdc8 	bl	8006a30 <I2C_WaitOnTXISFlagUntilTimeout>
 8006ea0:	2800      	cmp	r0, #0
 8006ea2:	d104      	bne.n	8006eae <HAL_I2C_Mem_Read+0xee>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006ea4:	466b      	mov	r3, sp
 8006ea6:	6822      	ldr	r2, [r4, #0]
 8006ea8:	7a1b      	ldrb	r3, [r3, #8]
 8006eaa:	6293      	str	r3, [r2, #40]	@ 0x28
 8006eac:	e7db      	b.n	8006e66 <HAL_I2C_Mem_Read+0xa6>
      __HAL_UNLOCK(hi2c);
 8006eae:	2300      	movs	r3, #0
 8006eb0:	3440      	adds	r4, #64	@ 0x40
 8006eb2:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8006eb4:	e79d      	b.n	8006df2 <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006eb6:	22ff      	movs	r2, #255	@ 0xff
 8006eb8:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006eba:	9300      	str	r3, [sp, #0]
 8006ebc:	2380      	movs	r3, #128	@ 0x80
 8006ebe:	045b      	lsls	r3, r3, #17
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006ec0:	0039      	movs	r1, r7
 8006ec2:	0020      	movs	r0, r4
 8006ec4:	f7ff fd20 	bl	8006908 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006ec8:	2200      	movs	r2, #0
 8006eca:	2104      	movs	r1, #4
 8006ecc:	0020      	movs	r0, r4
 8006ece:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ed0:	9500      	str	r5, [sp, #0]
 8006ed2:	f7ff fddb 	bl	8006a8c <I2C_WaitOnFlagUntilTimeout>
 8006ed6:	2800      	cmp	r0, #0
 8006ed8:	d000      	beq.n	8006edc <HAL_I2C_Mem_Read+0x11c>
 8006eda:	e78a      	b.n	8006df2 <HAL_I2C_Mem_Read+0x32>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006edc:	6823      	ldr	r3, [r4, #0]
 8006ede:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ee0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006ee2:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8006ee4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8006ee6:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8006ee8:	3301      	adds	r3, #1
 8006eea:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8006eec:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8006eee:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8006ef0:	3b01      	subs	r3, #1
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006ef6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8006ef8:	b292      	uxth	r2, r2
 8006efa:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d016      	beq.n	8006f2e <HAL_I2C_Mem_Read+0x16e>
 8006f00:	2a00      	cmp	r2, #0
 8006f02:	d114      	bne.n	8006f2e <HAL_I2C_Mem_Read+0x16e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006f04:	2180      	movs	r1, #128	@ 0x80
 8006f06:	0020      	movs	r0, r4
 8006f08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f0a:	9500      	str	r5, [sp, #0]
 8006f0c:	f7ff fdbe 	bl	8006a8c <I2C_WaitOnFlagUntilTimeout>
 8006f10:	2800      	cmp	r0, #0
 8006f12:	d000      	beq.n	8006f16 <HAL_I2C_Mem_Read+0x156>
 8006f14:	e76d      	b.n	8006df2 <HAL_I2C_Mem_Read+0x32>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f16:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8006f18:	2bff      	cmp	r3, #255	@ 0xff
 8006f1a:	d921      	bls.n	8006f60 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f1c:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006f1e:	2380      	movs	r3, #128	@ 0x80
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f20:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006f22:	045b      	lsls	r3, r3, #17
 8006f24:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006f26:	0039      	movs	r1, r7
 8006f28:	0020      	movs	r0, r4
 8006f2a:	f7ff fced 	bl	8006908 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8006f2e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d1c9      	bne.n	8006ec8 <HAL_I2C_Mem_Read+0x108>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f34:	002a      	movs	r2, r5
 8006f36:	0020      	movs	r0, r4
 8006f38:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006f3a:	f7ff fdde 	bl	8006afa <I2C_WaitOnSTOPFlagUntilTimeout>
 8006f3e:	2800      	cmp	r0, #0
 8006f40:	d000      	beq.n	8006f44 <HAL_I2C_Mem_Read+0x184>
 8006f42:	e756      	b.n	8006df2 <HAL_I2C_Mem_Read+0x32>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f44:	2120      	movs	r1, #32
 8006f46:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8006f48:	4d0b      	ldr	r5, [pc, #44]	@ (8006f78 <HAL_I2C_Mem_Read+0x1b8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f4a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8006f4c:	685a      	ldr	r2, [r3, #4]
 8006f4e:	402a      	ands	r2, r5
 8006f50:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006f52:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8006f54:	3440      	adds	r4, #64	@ 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8006f56:	3341      	adds	r3, #65	@ 0x41
 8006f58:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006f5a:	7030      	strb	r0, [r6, #0]
    __HAL_UNLOCK(hi2c);
 8006f5c:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8006f5e:	e749      	b.n	8006df4 <HAL_I2C_Mem_Read+0x34>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006f60:	2380      	movs	r3, #128	@ 0x80
          hi2c->XferSize = hi2c->XferCount;
 8006f62:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006f64:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8006f66:	b292      	uxth	r2, r2
 8006f68:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006f6a:	b2d2      	uxtb	r2, r2
 8006f6c:	9000      	str	r0, [sp, #0]
 8006f6e:	e7da      	b.n	8006f26 <HAL_I2C_Mem_Read+0x166>
 8006f70:	80002000 	.word	0x80002000
 8006f74:	80002400 	.word	0x80002400
 8006f78:	fe00e800 	.word	0xfe00e800

08006f7c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f7e:	0004      	movs	r4, r0
 8006f80:	3441      	adds	r4, #65	@ 0x41
 8006f82:	7822      	ldrb	r2, [r4, #0]
{
 8006f84:	0003      	movs	r3, r0
 8006f86:	000f      	movs	r7, r1
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f88:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f8a:	b2d6      	uxtb	r6, r2
 8006f8c:	2a20      	cmp	r2, #32
 8006f8e:	d118      	bne.n	8006fc2 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 8006f90:	001d      	movs	r5, r3
 8006f92:	3540      	adds	r5, #64	@ 0x40
 8006f94:	782a      	ldrb	r2, [r5, #0]
 8006f96:	2a01      	cmp	r2, #1
 8006f98:	d013      	beq.n	8006fc2 <HAL_I2CEx_ConfigAnalogFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f9a:	2224      	movs	r2, #36	@ 0x24
 8006f9c:	7022      	strb	r2, [r4, #0]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	3a23      	subs	r2, #35	@ 0x23
 8006fa2:	6819      	ldr	r1, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006fa4:	4807      	ldr	r0, [pc, #28]	@ (8006fc4 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 8006fa6:	4391      	bics	r1, r2
 8006fa8:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006faa:	6819      	ldr	r1, [r3, #0]
 8006fac:	4001      	ands	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fae:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006fb0:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8006fb2:	6819      	ldr	r1, [r3, #0]
 8006fb4:	4339      	orrs	r1, r7
 8006fb6:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8006fb8:	6819      	ldr	r1, [r3, #0]
 8006fba:	430a      	orrs	r2, r1
 8006fbc:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8006fbe:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8006fc0:	7028      	strb	r0, [r5, #0]
  }
  else
  {
    return HAL_BUSY;
  }
}
 8006fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fc4:	ffffefff 	.word	0xffffefff

08006fc8 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fc8:	0002      	movs	r2, r0
{
 8006fca:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fcc:	3241      	adds	r2, #65	@ 0x41
 8006fce:	7814      	ldrb	r4, [r2, #0]
{
 8006fd0:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fd2:	b2e5      	uxtb	r5, r4
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fd4:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fd6:	2c20      	cmp	r4, #32
 8006fd8:	d117      	bne.n	800700a <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8006fda:	001c      	movs	r4, r3
 8006fdc:	3440      	adds	r4, #64	@ 0x40
 8006fde:	7826      	ldrb	r6, [r4, #0]
 8006fe0:	2e01      	cmp	r6, #1
 8006fe2:	d012      	beq.n	800700a <HAL_I2CEx_ConfigDigitalFilter+0x42>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006fe4:	3022      	adds	r0, #34	@ 0x22
 8006fe6:	7010      	strb	r0, [r2, #0]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	3823      	subs	r0, #35	@ 0x23
 8006fec:	681e      	ldr	r6, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006fee:	4f07      	ldr	r7, [pc, #28]	@ (800700c <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 8006ff0:	4386      	bics	r6, r0
 8006ff2:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8006ff4:	681e      	ldr	r6, [r3, #0]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006ff6:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8006ff8:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8006ffa:	4331      	orrs	r1, r6

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006ffc:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006ffe:	6819      	ldr	r1, [r3, #0]
 8007000:	4308      	orrs	r0, r1
 8007002:	6018      	str	r0, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007004:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8007006:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8007008:	7020      	strb	r0, [r4, #0]
  }
  else
  {
    return HAL_BUSY;
  }
}
 800700a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800700c:	fffff0ff 	.word	0xfffff0ff

08007010 <HAL_I2CEx_EnableFastModePlus>:
{
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007010:	2101      	movs	r1, #1
 8007012:	4b07      	ldr	r3, [pc, #28]	@ (8007030 <HAL_I2CEx_EnableFastModePlus+0x20>)
{
 8007014:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007016:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007018:	430a      	orrs	r2, r1
 800701a:	641a      	str	r2, [r3, #64]	@ 0x40
 800701c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 800701e:	4a05      	ldr	r2, [pc, #20]	@ (8007034 <HAL_I2CEx_EnableFastModePlus+0x24>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007020:	400b      	ands	r3, r1
 8007022:	9301      	str	r3, [sp, #4]
 8007024:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8007026:	6813      	ldr	r3, [r2, #0]
 8007028:	4303      	orrs	r3, r0
 800702a:	6013      	str	r3, [r2, #0]
}
 800702c:	b002      	add	sp, #8
 800702e:	4770      	bx	lr
 8007030:	40021000 	.word	0x40021000
 8007034:	40010000 	.word	0x40010000

08007038 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007038:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800703a:	4c11      	ldr	r4, [pc, #68]	@ (8007080 <HAL_PWREx_ControlVoltageScaling+0x48>)
 800703c:	4911      	ldr	r1, [pc, #68]	@ (8007084 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 800703e:	6823      	ldr	r3, [r4, #0]
{
 8007040:	0002      	movs	r2, r0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8007042:	400b      	ands	r3, r1
 8007044:	4303      	orrs	r3, r0
 8007046:	6023      	str	r3, [r4, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007048:	2380      	movs	r3, #128	@ 0x80
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800704a:	2000      	movs	r0, #0
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	429a      	cmp	r2, r3
 8007050:	d10e      	bne.n	8007070 <HAL_PWREx_ControlVoltageScaling+0x38>
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8007052:	4b0d      	ldr	r3, [pc, #52]	@ (8007088 <HAL_PWREx_ControlVoltageScaling+0x50>)
 8007054:	490d      	ldr	r1, [pc, #52]	@ (800708c <HAL_PWREx_ControlVoltageScaling+0x54>)
 8007056:	6818      	ldr	r0, [r3, #0]
 8007058:	2306      	movs	r3, #6
 800705a:	4358      	muls	r0, r3
 800705c:	f7f9 f876 	bl	800014c <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007060:	2280      	movs	r2, #128	@ 0x80
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8007062:	1c43      	adds	r3, r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007064:	00d2      	lsls	r2, r2, #3
 8007066:	6961      	ldr	r1, [r4, #20]
 8007068:	0008      	movs	r0, r1
 800706a:	4010      	ands	r0, r2
 800706c:	4211      	tst	r1, r2
 800706e:	d100      	bne.n	8007072 <HAL_PWREx_ControlVoltageScaling+0x3a>
}
 8007070:	bd10      	pop	{r4, pc}
      if (wait_loop_index != 0U)
 8007072:	2b00      	cmp	r3, #0
 8007074:	d001      	beq.n	800707a <HAL_PWREx_ControlVoltageScaling+0x42>
        wait_loop_index--;
 8007076:	3b01      	subs	r3, #1
 8007078:	e7f5      	b.n	8007066 <HAL_PWREx_ControlVoltageScaling+0x2e>
        return HAL_TIMEOUT;
 800707a:	2003      	movs	r0, #3
 800707c:	e7f8      	b.n	8007070 <HAL_PWREx_ControlVoltageScaling+0x38>
 800707e:	46c0      	nop			@ (mov r8, r8)
 8007080:	40007000 	.word	0x40007000
 8007084:	fffff9ff 	.word	0xfffff9ff
 8007088:	20000028 	.word	0x20000028
 800708c:	000f4240 	.word	0x000f4240

08007090 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007092:	0004      	movs	r4, r0
 8007094:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007096:	2800      	cmp	r0, #0
 8007098:	d102      	bne.n	80070a0 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 800709a:	2001      	movs	r0, #1
        }
      }
    }
  }
  return HAL_OK;
}
 800709c:	b005      	add	sp, #20
 800709e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070a0:	6803      	ldr	r3, [r0, #0]
 80070a2:	07db      	lsls	r3, r3, #31
 80070a4:	d410      	bmi.n	80070c8 <HAL_RCC_OscConfig+0x38>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070a6:	6823      	ldr	r3, [r4, #0]
 80070a8:	079b      	lsls	r3, r3, #30
 80070aa:	d45c      	bmi.n	8007166 <HAL_RCC_OscConfig+0xd6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80070ac:	6823      	ldr	r3, [r4, #0]
 80070ae:	071b      	lsls	r3, r3, #28
 80070b0:	d500      	bpl.n	80070b4 <HAL_RCC_OscConfig+0x24>
 80070b2:	e0c1      	b.n	8007238 <HAL_RCC_OscConfig+0x1a8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070b4:	6823      	ldr	r3, [r4, #0]
 80070b6:	075b      	lsls	r3, r3, #29
 80070b8:	d500      	bpl.n	80070bc <HAL_RCC_OscConfig+0x2c>
 80070ba:	e0f2      	b.n	80072a2 <HAL_RCC_OscConfig+0x212>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80070bc:	69e3      	ldr	r3, [r4, #28]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d000      	beq.n	80070c4 <HAL_RCC_OscConfig+0x34>
 80070c2:	e179      	b.n	80073b8 <HAL_RCC_OscConfig+0x328>
  return HAL_OK;
 80070c4:	2000      	movs	r0, #0
 80070c6:	e7e9      	b.n	800709c <HAL_RCC_OscConfig+0xc>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070c8:	2238      	movs	r2, #56	@ 0x38
 80070ca:	4daf      	ldr	r5, [pc, #700]	@ (8007388 <HAL_RCC_OscConfig+0x2f8>)
 80070cc:	68ab      	ldr	r3, [r5, #8]
 80070ce:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80070d0:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80070d2:	2b10      	cmp	r3, #16
 80070d4:	d109      	bne.n	80070ea <HAL_RCC_OscConfig+0x5a>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80070d6:	43d3      	mvns	r3, r2
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80070d8:	079b      	lsls	r3, r3, #30
 80070da:	d108      	bne.n	80070ee <HAL_RCC_OscConfig+0x5e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070dc:	682b      	ldr	r3, [r5, #0]
 80070de:	039b      	lsls	r3, r3, #14
 80070e0:	d5e1      	bpl.n	80070a6 <HAL_RCC_OscConfig+0x16>
 80070e2:	6863      	ldr	r3, [r4, #4]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d1de      	bne.n	80070a6 <HAL_RCC_OscConfig+0x16>
 80070e8:	e7d7      	b.n	800709a <HAL_RCC_OscConfig+0xa>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80070ea:	2b08      	cmp	r3, #8
 80070ec:	d0f6      	beq.n	80070dc <HAL_RCC_OscConfig+0x4c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070ee:	2280      	movs	r2, #128	@ 0x80
 80070f0:	6863      	ldr	r3, [r4, #4]
 80070f2:	0252      	lsls	r2, r2, #9
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d111      	bne.n	800711c <HAL_RCC_OscConfig+0x8c>
 80070f8:	682a      	ldr	r2, [r5, #0]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80070fe:	f7fe fe53 	bl	8005da8 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007102:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8007104:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007106:	02bf      	lsls	r7, r7, #10
 8007108:	682b      	ldr	r3, [r5, #0]
 800710a:	423b      	tst	r3, r7
 800710c:	d1cb      	bne.n	80070a6 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800710e:	f7fe fe4b 	bl	8005da8 <HAL_GetTick>
 8007112:	1b80      	subs	r0, r0, r6
 8007114:	2864      	cmp	r0, #100	@ 0x64
 8007116:	d9f7      	bls.n	8007108 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 8007118:	2003      	movs	r0, #3
 800711a:	e7bf      	b.n	800709c <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800711c:	21a0      	movs	r1, #160	@ 0xa0
 800711e:	02c9      	lsls	r1, r1, #11
 8007120:	428b      	cmp	r3, r1
 8007122:	d108      	bne.n	8007136 <HAL_RCC_OscConfig+0xa6>
 8007124:	2380      	movs	r3, #128	@ 0x80
 8007126:	6829      	ldr	r1, [r5, #0]
 8007128:	02db      	lsls	r3, r3, #11
 800712a:	430b      	orrs	r3, r1
 800712c:	602b      	str	r3, [r5, #0]
 800712e:	682b      	ldr	r3, [r5, #0]
 8007130:	431a      	orrs	r2, r3
 8007132:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007134:	e7e3      	b.n	80070fe <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007136:	682a      	ldr	r2, [r5, #0]
 8007138:	4994      	ldr	r1, [pc, #592]	@ (800738c <HAL_RCC_OscConfig+0x2fc>)
 800713a:	400a      	ands	r2, r1
 800713c:	602a      	str	r2, [r5, #0]
 800713e:	682a      	ldr	r2, [r5, #0]
 8007140:	4993      	ldr	r1, [pc, #588]	@ (8007390 <HAL_RCC_OscConfig+0x300>)
 8007142:	400a      	ands	r2, r1
 8007144:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007146:	2b00      	cmp	r3, #0
 8007148:	d1d9      	bne.n	80070fe <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 800714a:	f7fe fe2d 	bl	8005da8 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800714e:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8007150:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007152:	02bf      	lsls	r7, r7, #10
 8007154:	682b      	ldr	r3, [r5, #0]
 8007156:	423b      	tst	r3, r7
 8007158:	d0a5      	beq.n	80070a6 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800715a:	f7fe fe25 	bl	8005da8 <HAL_GetTick>
 800715e:	1b80      	subs	r0, r0, r6
 8007160:	2864      	cmp	r0, #100	@ 0x64
 8007162:	d9f7      	bls.n	8007154 <HAL_RCC_OscConfig+0xc4>
 8007164:	e7d8      	b.n	8007118 <HAL_RCC_OscConfig+0x88>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007166:	2238      	movs	r2, #56	@ 0x38
 8007168:	4d87      	ldr	r5, [pc, #540]	@ (8007388 <HAL_RCC_OscConfig+0x2f8>)
 800716a:	68ab      	ldr	r3, [r5, #8]
 800716c:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800716e:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8007170:	2b10      	cmp	r3, #16
 8007172:	d128      	bne.n	80071c6 <HAL_RCC_OscConfig+0x136>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007174:	2103      	movs	r1, #3
 8007176:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8007178:	2a02      	cmp	r2, #2
 800717a:	d126      	bne.n	80071ca <HAL_RCC_OscConfig+0x13a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800717c:	682a      	ldr	r2, [r5, #0]
 800717e:	0552      	lsls	r2, r2, #21
 8007180:	d503      	bpl.n	800718a <HAL_RCC_OscConfig+0xfa>
 8007182:	68e2      	ldr	r2, [r4, #12]
 8007184:	2a00      	cmp	r2, #0
 8007186:	d100      	bne.n	800718a <HAL_RCC_OscConfig+0xfa>
 8007188:	e787      	b.n	800709a <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800718a:	6869      	ldr	r1, [r5, #4]
 800718c:	6962      	ldr	r2, [r4, #20]
 800718e:	4881      	ldr	r0, [pc, #516]	@ (8007394 <HAL_RCC_OscConfig+0x304>)
 8007190:	0212      	lsls	r2, r2, #8
 8007192:	4001      	ands	r1, r0
 8007194:	430a      	orrs	r2, r1
 8007196:	606a      	str	r2, [r5, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007198:	2b00      	cmp	r3, #0
 800719a:	d10c      	bne.n	80071b6 <HAL_RCC_OscConfig+0x126>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800719c:	682b      	ldr	r3, [r5, #0]
 800719e:	4a7e      	ldr	r2, [pc, #504]	@ (8007398 <HAL_RCC_OscConfig+0x308>)
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80071a0:	497e      	ldr	r1, [pc, #504]	@ (800739c <HAL_RCC_OscConfig+0x30c>)
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80071a2:	4013      	ands	r3, r2
 80071a4:	6922      	ldr	r2, [r4, #16]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	602b      	str	r3, [r5, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80071aa:	682b      	ldr	r3, [r5, #0]
 80071ac:	4a7c      	ldr	r2, [pc, #496]	@ (80073a0 <HAL_RCC_OscConfig+0x310>)
 80071ae:	049b      	lsls	r3, r3, #18
 80071b0:	0f5b      	lsrs	r3, r3, #29
 80071b2:	40da      	lsrs	r2, r3
 80071b4:	600a      	str	r2, [r1, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80071b6:	4b7b      	ldr	r3, [pc, #492]	@ (80073a4 <HAL_RCC_OscConfig+0x314>)
 80071b8:	6818      	ldr	r0, [r3, #0]
 80071ba:	f7fe fdad 	bl	8005d18 <HAL_InitTick>
 80071be:	2800      	cmp	r0, #0
 80071c0:	d100      	bne.n	80071c4 <HAL_RCC_OscConfig+0x134>
 80071c2:	e773      	b.n	80070ac <HAL_RCC_OscConfig+0x1c>
 80071c4:	e769      	b.n	800709a <HAL_RCC_OscConfig+0xa>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d0d8      	beq.n	800717c <HAL_RCC_OscConfig+0xec>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80071ca:	68e3      	ldr	r3, [r4, #12]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d020      	beq.n	8007212 <HAL_RCC_OscConfig+0x182>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80071d0:	682b      	ldr	r3, [r5, #0]
 80071d2:	4a71      	ldr	r2, [pc, #452]	@ (8007398 <HAL_RCC_OscConfig+0x308>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80071d4:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80071d6:	4013      	ands	r3, r2
 80071d8:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80071da:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80071dc:	4313      	orrs	r3, r2
 80071de:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 80071e0:	2380      	movs	r3, #128	@ 0x80
 80071e2:	682a      	ldr	r2, [r5, #0]
 80071e4:	005b      	lsls	r3, r3, #1
 80071e6:	4313      	orrs	r3, r2
 80071e8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80071ea:	f7fe fddd 	bl	8005da8 <HAL_GetTick>
 80071ee:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80071f0:	682b      	ldr	r3, [r5, #0]
 80071f2:	423b      	tst	r3, r7
 80071f4:	d007      	beq.n	8007206 <HAL_RCC_OscConfig+0x176>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071f6:	686a      	ldr	r2, [r5, #4]
 80071f8:	6963      	ldr	r3, [r4, #20]
 80071fa:	4966      	ldr	r1, [pc, #408]	@ (8007394 <HAL_RCC_OscConfig+0x304>)
 80071fc:	021b      	lsls	r3, r3, #8
 80071fe:	400a      	ands	r2, r1
 8007200:	4313      	orrs	r3, r2
 8007202:	606b      	str	r3, [r5, #4]
 8007204:	e752      	b.n	80070ac <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007206:	f7fe fdcf 	bl	8005da8 <HAL_GetTick>
 800720a:	1b80      	subs	r0, r0, r6
 800720c:	2802      	cmp	r0, #2
 800720e:	d9ef      	bls.n	80071f0 <HAL_RCC_OscConfig+0x160>
 8007210:	e782      	b.n	8007118 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8007212:	682b      	ldr	r3, [r5, #0]
 8007214:	4a64      	ldr	r2, [pc, #400]	@ (80073a8 <HAL_RCC_OscConfig+0x318>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007216:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_DISABLE();
 8007218:	4013      	ands	r3, r2
 800721a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800721c:	f7fe fdc4 	bl	8005da8 <HAL_GetTick>
 8007220:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007222:	00ff      	lsls	r7, r7, #3
 8007224:	682b      	ldr	r3, [r5, #0]
 8007226:	423b      	tst	r3, r7
 8007228:	d100      	bne.n	800722c <HAL_RCC_OscConfig+0x19c>
 800722a:	e73f      	b.n	80070ac <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800722c:	f7fe fdbc 	bl	8005da8 <HAL_GetTick>
 8007230:	1b80      	subs	r0, r0, r6
 8007232:	2802      	cmp	r0, #2
 8007234:	d9f6      	bls.n	8007224 <HAL_RCC_OscConfig+0x194>
 8007236:	e76f      	b.n	8007118 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8007238:	2238      	movs	r2, #56	@ 0x38
 800723a:	4d53      	ldr	r5, [pc, #332]	@ (8007388 <HAL_RCC_OscConfig+0x2f8>)
 800723c:	68ab      	ldr	r3, [r5, #8]
 800723e:	4013      	ands	r3, r2
 8007240:	2b18      	cmp	r3, #24
 8007242:	d108      	bne.n	8007256 <HAL_RCC_OscConfig+0x1c6>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8007244:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8007246:	079b      	lsls	r3, r3, #30
 8007248:	d400      	bmi.n	800724c <HAL_RCC_OscConfig+0x1bc>
 800724a:	e733      	b.n	80070b4 <HAL_RCC_OscConfig+0x24>
 800724c:	69a3      	ldr	r3, [r4, #24]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d000      	beq.n	8007254 <HAL_RCC_OscConfig+0x1c4>
 8007252:	e72f      	b.n	80070b4 <HAL_RCC_OscConfig+0x24>
 8007254:	e721      	b.n	800709a <HAL_RCC_OscConfig+0xa>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007256:	69a2      	ldr	r2, [r4, #24]
 8007258:	2301      	movs	r3, #1
 800725a:	2a00      	cmp	r2, #0
 800725c:	d010      	beq.n	8007280 <HAL_RCC_OscConfig+0x1f0>
        __HAL_RCC_LSI_ENABLE();
 800725e:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007260:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 8007262:	4313      	orrs	r3, r2
 8007264:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8007266:	f7fe fd9f 	bl	8005da8 <HAL_GetTick>
 800726a:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800726c:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 800726e:	423b      	tst	r3, r7
 8007270:	d000      	beq.n	8007274 <HAL_RCC_OscConfig+0x1e4>
 8007272:	e71f      	b.n	80070b4 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007274:	f7fe fd98 	bl	8005da8 <HAL_GetTick>
 8007278:	1b80      	subs	r0, r0, r6
 800727a:	2802      	cmp	r0, #2
 800727c:	d9f6      	bls.n	800726c <HAL_RCC_OscConfig+0x1dc>
 800727e:	e74b      	b.n	8007118 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_LSI_DISABLE();
 8007280:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007282:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 8007284:	439a      	bics	r2, r3
 8007286:	662a      	str	r2, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8007288:	f7fe fd8e 	bl	8005da8 <HAL_GetTick>
 800728c:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800728e:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8007290:	423b      	tst	r3, r7
 8007292:	d100      	bne.n	8007296 <HAL_RCC_OscConfig+0x206>
 8007294:	e70e      	b.n	80070b4 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007296:	f7fe fd87 	bl	8005da8 <HAL_GetTick>
 800729a:	1b80      	subs	r0, r0, r6
 800729c:	2802      	cmp	r0, #2
 800729e:	d9f6      	bls.n	800728e <HAL_RCC_OscConfig+0x1fe>
 80072a0:	e73a      	b.n	8007118 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80072a2:	2238      	movs	r2, #56	@ 0x38
 80072a4:	4d38      	ldr	r5, [pc, #224]	@ (8007388 <HAL_RCC_OscConfig+0x2f8>)
 80072a6:	68ab      	ldr	r3, [r5, #8]
 80072a8:	4013      	ands	r3, r2
 80072aa:	2b20      	cmp	r3, #32
 80072ac:	d108      	bne.n	80072c0 <HAL_RCC_OscConfig+0x230>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80072ae:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 80072b0:	079b      	lsls	r3, r3, #30
 80072b2:	d400      	bmi.n	80072b6 <HAL_RCC_OscConfig+0x226>
 80072b4:	e702      	b.n	80070bc <HAL_RCC_OscConfig+0x2c>
 80072b6:	68a3      	ldr	r3, [r4, #8]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d000      	beq.n	80072be <HAL_RCC_OscConfig+0x22e>
 80072bc:	e6fe      	b.n	80070bc <HAL_RCC_OscConfig+0x2c>
 80072be:	e6ec      	b.n	800709a <HAL_RCC_OscConfig+0xa>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80072c0:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 80072c2:	2100      	movs	r1, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80072c4:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 80072c6:	0552      	lsls	r2, r2, #21
    FlagStatus       pwrclkchanged = RESET;
 80072c8:	9100      	str	r1, [sp, #0]
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80072ca:	4213      	tst	r3, r2
 80072cc:	d108      	bne.n	80072e0 <HAL_RCC_OscConfig+0x250>
        __HAL_RCC_PWR_CLK_ENABLE();
 80072ce:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 80072d0:	4313      	orrs	r3, r2
 80072d2:	63eb      	str	r3, [r5, #60]	@ 0x3c
 80072d4:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 80072d6:	4013      	ands	r3, r2
 80072d8:	9303      	str	r3, [sp, #12]
 80072da:	9b03      	ldr	r3, [sp, #12]
        pwrclkchanged = SET;
 80072dc:	2301      	movs	r3, #1
 80072de:	9300      	str	r3, [sp, #0]
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072e0:	2780      	movs	r7, #128	@ 0x80
 80072e2:	4e32      	ldr	r6, [pc, #200]	@ (80073ac <HAL_RCC_OscConfig+0x31c>)
 80072e4:	007f      	lsls	r7, r7, #1
 80072e6:	6833      	ldr	r3, [r6, #0]
 80072e8:	423b      	tst	r3, r7
 80072ea:	d015      	beq.n	8007318 <HAL_RCC_OscConfig+0x288>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072ec:	68a3      	ldr	r3, [r4, #8]
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d122      	bne.n	8007338 <HAL_RCC_OscConfig+0x2a8>
 80072f2:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 80072f4:	4313      	orrs	r3, r2
 80072f6:	65eb      	str	r3, [r5, #92]	@ 0x5c
        tickstart = HAL_GetTick();
 80072f8:	f7fe fd56 	bl	8005da8 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80072fc:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 80072fe:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007300:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8007302:	423b      	tst	r3, r7
 8007304:	d038      	beq.n	8007378 <HAL_RCC_OscConfig+0x2e8>
      if (pwrclkchanged == SET)
 8007306:	9b00      	ldr	r3, [sp, #0]
 8007308:	2b01      	cmp	r3, #1
 800730a:	d000      	beq.n	800730e <HAL_RCC_OscConfig+0x27e>
 800730c:	e6d6      	b.n	80070bc <HAL_RCC_OscConfig+0x2c>
        __HAL_RCC_PWR_CLK_DISABLE();
 800730e:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8007310:	4a27      	ldr	r2, [pc, #156]	@ (80073b0 <HAL_RCC_OscConfig+0x320>)
 8007312:	4013      	ands	r3, r2
 8007314:	63eb      	str	r3, [r5, #60]	@ 0x3c
 8007316:	e6d1      	b.n	80070bc <HAL_RCC_OscConfig+0x2c>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007318:	6833      	ldr	r3, [r6, #0]
 800731a:	433b      	orrs	r3, r7
 800731c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800731e:	f7fe fd43 	bl	8005da8 <HAL_GetTick>
 8007322:	9001      	str	r0, [sp, #4]
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007324:	6833      	ldr	r3, [r6, #0]
 8007326:	423b      	tst	r3, r7
 8007328:	d1e0      	bne.n	80072ec <HAL_RCC_OscConfig+0x25c>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800732a:	f7fe fd3d 	bl	8005da8 <HAL_GetTick>
 800732e:	9b01      	ldr	r3, [sp, #4]
 8007330:	1ac0      	subs	r0, r0, r3
 8007332:	2802      	cmp	r0, #2
 8007334:	d9f6      	bls.n	8007324 <HAL_RCC_OscConfig+0x294>
 8007336:	e6ef      	b.n	8007118 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007338:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 800733a:	2b05      	cmp	r3, #5
 800733c:	d105      	bne.n	800734a <HAL_RCC_OscConfig+0x2ba>
 800733e:	3b01      	subs	r3, #1
 8007340:	4313      	orrs	r3, r2
 8007342:	65eb      	str	r3, [r5, #92]	@ 0x5c
 8007344:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8007346:	2301      	movs	r3, #1
 8007348:	e7d4      	b.n	80072f4 <HAL_RCC_OscConfig+0x264>
 800734a:	2101      	movs	r1, #1
 800734c:	438a      	bics	r2, r1
 800734e:	65ea      	str	r2, [r5, #92]	@ 0x5c
 8007350:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8007352:	3103      	adds	r1, #3
 8007354:	438a      	bics	r2, r1
 8007356:	65ea      	str	r2, [r5, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007358:	2b00      	cmp	r3, #0
 800735a:	d1cd      	bne.n	80072f8 <HAL_RCC_OscConfig+0x268>
        tickstart = HAL_GetTick();
 800735c:	f7fe fd24 	bl	8005da8 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007360:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8007362:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007364:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8007366:	423b      	tst	r3, r7
 8007368:	d0cd      	beq.n	8007306 <HAL_RCC_OscConfig+0x276>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800736a:	f7fe fd1d 	bl	8005da8 <HAL_GetTick>
 800736e:	4b11      	ldr	r3, [pc, #68]	@ (80073b4 <HAL_RCC_OscConfig+0x324>)
 8007370:	1b80      	subs	r0, r0, r6
 8007372:	4298      	cmp	r0, r3
 8007374:	d9f6      	bls.n	8007364 <HAL_RCC_OscConfig+0x2d4>
 8007376:	e6cf      	b.n	8007118 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007378:	f7fe fd16 	bl	8005da8 <HAL_GetTick>
 800737c:	4b0d      	ldr	r3, [pc, #52]	@ (80073b4 <HAL_RCC_OscConfig+0x324>)
 800737e:	1b80      	subs	r0, r0, r6
 8007380:	4298      	cmp	r0, r3
 8007382:	d9bd      	bls.n	8007300 <HAL_RCC_OscConfig+0x270>
 8007384:	e6c8      	b.n	8007118 <HAL_RCC_OscConfig+0x88>
 8007386:	46c0      	nop			@ (mov r8, r8)
 8007388:	40021000 	.word	0x40021000
 800738c:	fffeffff 	.word	0xfffeffff
 8007390:	fffbffff 	.word	0xfffbffff
 8007394:	ffff80ff 	.word	0xffff80ff
 8007398:	ffffc7ff 	.word	0xffffc7ff
 800739c:	20000028 	.word	0x20000028
 80073a0:	00f42400 	.word	0x00f42400
 80073a4:	20000030 	.word	0x20000030
 80073a8:	fffffeff 	.word	0xfffffeff
 80073ac:	40007000 	.word	0x40007000
 80073b0:	efffffff 	.word	0xefffffff
 80073b4:	00001388 	.word	0x00001388
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80073b8:	2138      	movs	r1, #56	@ 0x38
 80073ba:	4d3f      	ldr	r5, [pc, #252]	@ (80074b8 <HAL_RCC_OscConfig+0x428>)
 80073bc:	68aa      	ldr	r2, [r5, #8]
 80073be:	400a      	ands	r2, r1
 80073c0:	2a10      	cmp	r2, #16
 80073c2:	d051      	beq.n	8007468 <HAL_RCC_OscConfig+0x3d8>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80073c4:	4a3d      	ldr	r2, [pc, #244]	@ (80074bc <HAL_RCC_OscConfig+0x42c>)
 80073c6:	2b02      	cmp	r3, #2
 80073c8:	d138      	bne.n	800743c <HAL_RCC_OscConfig+0x3ac>
        __HAL_RCC_PLL_DISABLE();
 80073ca:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80073cc:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 80073ce:	4013      	ands	r3, r2
 80073d0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80073d2:	f7fe fce9 	bl	8005da8 <HAL_GetTick>
 80073d6:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80073d8:	04bf      	lsls	r7, r7, #18
 80073da:	682b      	ldr	r3, [r5, #0]
 80073dc:	423b      	tst	r3, r7
 80073de:	d127      	bne.n	8007430 <HAL_RCC_OscConfig+0x3a0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80073e0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80073e2:	6a23      	ldr	r3, [r4, #32]
 80073e4:	68ea      	ldr	r2, [r5, #12]
 80073e6:	430b      	orrs	r3, r1
 80073e8:	4935      	ldr	r1, [pc, #212]	@ (80074c0 <HAL_RCC_OscConfig+0x430>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80073ea:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80073ec:	400a      	ands	r2, r1
 80073ee:	4313      	orrs	r3, r2
 80073f0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80073f2:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80073f4:	4313      	orrs	r3, r2
 80073f6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80073f8:	4313      	orrs	r3, r2
 80073fa:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80073fc:	0212      	lsls	r2, r2, #8
 80073fe:	4313      	orrs	r3, r2
 8007400:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8007402:	2380      	movs	r3, #128	@ 0x80
 8007404:	682a      	ldr	r2, [r5, #0]
 8007406:	045b      	lsls	r3, r3, #17
 8007408:	4313      	orrs	r3, r2
 800740a:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800740c:	2380      	movs	r3, #128	@ 0x80
 800740e:	68ea      	ldr	r2, [r5, #12]
 8007410:	055b      	lsls	r3, r3, #21
 8007412:	4313      	orrs	r3, r2
 8007414:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8007416:	f7fe fcc7 	bl	8005da8 <HAL_GetTick>
 800741a:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800741c:	682b      	ldr	r3, [r5, #0]
 800741e:	4233      	tst	r3, r6
 8007420:	d000      	beq.n	8007424 <HAL_RCC_OscConfig+0x394>
 8007422:	e64f      	b.n	80070c4 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007424:	f7fe fcc0 	bl	8005da8 <HAL_GetTick>
 8007428:	1b00      	subs	r0, r0, r4
 800742a:	2802      	cmp	r0, #2
 800742c:	d9f6      	bls.n	800741c <HAL_RCC_OscConfig+0x38c>
 800742e:	e673      	b.n	8007118 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007430:	f7fe fcba 	bl	8005da8 <HAL_GetTick>
 8007434:	1b80      	subs	r0, r0, r6
 8007436:	2802      	cmp	r0, #2
 8007438:	d9cf      	bls.n	80073da <HAL_RCC_OscConfig+0x34a>
 800743a:	e66d      	b.n	8007118 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_PLL_DISABLE();
 800743c:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800743e:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8007440:	4013      	ands	r3, r2
 8007442:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007444:	f7fe fcb0 	bl	8005da8 <HAL_GetTick>
 8007448:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800744a:	04b6      	lsls	r6, r6, #18
 800744c:	682b      	ldr	r3, [r5, #0]
 800744e:	4233      	tst	r3, r6
 8007450:	d104      	bne.n	800745c <HAL_RCC_OscConfig+0x3cc>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8007452:	68eb      	ldr	r3, [r5, #12]
 8007454:	4a1b      	ldr	r2, [pc, #108]	@ (80074c4 <HAL_RCC_OscConfig+0x434>)
 8007456:	4013      	ands	r3, r2
 8007458:	60eb      	str	r3, [r5, #12]
 800745a:	e633      	b.n	80070c4 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800745c:	f7fe fca4 	bl	8005da8 <HAL_GetTick>
 8007460:	1b00      	subs	r0, r0, r4
 8007462:	2802      	cmp	r0, #2
 8007464:	d9f2      	bls.n	800744c <HAL_RCC_OscConfig+0x3bc>
 8007466:	e657      	b.n	8007118 <HAL_RCC_OscConfig+0x88>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007468:	2b01      	cmp	r3, #1
 800746a:	d100      	bne.n	800746e <HAL_RCC_OscConfig+0x3de>
 800746c:	e615      	b.n	800709a <HAL_RCC_OscConfig+0xa>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800746e:	2203      	movs	r2, #3
        temp_pllckcfg = RCC->PLLCFGR;
 8007470:	68e8      	ldr	r0, [r5, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007472:	6a21      	ldr	r1, [r4, #32]
 8007474:	4002      	ands	r2, r0
 8007476:	428a      	cmp	r2, r1
 8007478:	d000      	beq.n	800747c <HAL_RCC_OscConfig+0x3ec>
 800747a:	e60e      	b.n	800709a <HAL_RCC_OscConfig+0xa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800747c:	2270      	movs	r2, #112	@ 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800747e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007480:	4002      	ands	r2, r0
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007482:	428a      	cmp	r2, r1
 8007484:	d000      	beq.n	8007488 <HAL_RCC_OscConfig+0x3f8>
 8007486:	e608      	b.n	800709a <HAL_RCC_OscConfig+0xa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007488:	21fe      	movs	r1, #254	@ 0xfe
 800748a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800748c:	01c9      	lsls	r1, r1, #7
 800748e:	4001      	ands	r1, r0
 8007490:	0212      	lsls	r2, r2, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007492:	4291      	cmp	r1, r2
 8007494:	d000      	beq.n	8007498 <HAL_RCC_OscConfig+0x408>
 8007496:	e600      	b.n	800709a <HAL_RCC_OscConfig+0xa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007498:	22f8      	movs	r2, #248	@ 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800749a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800749c:	0392      	lsls	r2, r2, #14
 800749e:	4002      	ands	r2, r0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80074a0:	428a      	cmp	r2, r1
 80074a2:	d000      	beq.n	80074a6 <HAL_RCC_OscConfig+0x416>
 80074a4:	e5f9      	b.n	800709a <HAL_RCC_OscConfig+0xa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80074a6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80074a8:	0f40      	lsrs	r0, r0, #29
 80074aa:	0740      	lsls	r0, r0, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80074ac:	1ac0      	subs	r0, r0, r3
 80074ae:	1e43      	subs	r3, r0, #1
 80074b0:	4198      	sbcs	r0, r3
 80074b2:	b2c0      	uxtb	r0, r0
 80074b4:	e5f2      	b.n	800709c <HAL_RCC_OscConfig+0xc>
 80074b6:	46c0      	nop			@ (mov r8, r8)
 80074b8:	40021000 	.word	0x40021000
 80074bc:	feffffff 	.word	0xfeffffff
 80074c0:	1fc1808c 	.word	0x1fc1808c
 80074c4:	effefffc 	.word	0xeffefffc

080074c8 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80074c8:	2338      	movs	r3, #56	@ 0x38
{
 80074ca:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80074cc:	4c1d      	ldr	r4, [pc, #116]	@ (8007544 <HAL_RCC_GetSysClockFreq+0x7c>)
 80074ce:	68a2      	ldr	r2, [r4, #8]
 80074d0:	421a      	tst	r2, r3
 80074d2:	d105      	bne.n	80074e0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80074d4:	6823      	ldr	r3, [r4, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80074d6:	481c      	ldr	r0, [pc, #112]	@ (8007548 <HAL_RCC_GetSysClockFreq+0x80>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80074d8:	049b      	lsls	r3, r3, #18
 80074da:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 80074dc:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 80074de:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80074e0:	68a2      	ldr	r2, [r4, #8]
 80074e2:	401a      	ands	r2, r3
 80074e4:	2a08      	cmp	r2, #8
 80074e6:	d027      	beq.n	8007538 <HAL_RCC_GetSysClockFreq+0x70>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80074e8:	68a2      	ldr	r2, [r4, #8]
 80074ea:	401a      	ands	r2, r3
 80074ec:	2a10      	cmp	r2, #16
 80074ee:	d117      	bne.n	8007520 <HAL_RCC_GetSysClockFreq+0x58>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80074f0:	68e3      	ldr	r3, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80074f2:	68e1      	ldr	r1, [r4, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80074f4:	43db      	mvns	r3, r3
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80074f6:	68e5      	ldr	r5, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80074f8:	0649      	lsls	r1, r1, #25
 80074fa:	0f49      	lsrs	r1, r1, #29
 80074fc:	326f      	adds	r2, #111	@ 0x6f
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80074fe:	0a2d      	lsrs	r5, r5, #8
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007500:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8007502:	4015      	ands	r5, r2
    switch (pllsource)
 8007504:	079b      	lsls	r3, r3, #30
 8007506:	d109      	bne.n	800751c <HAL_RCC_GetSysClockFreq+0x54>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007508:	4810      	ldr	r0, [pc, #64]	@ (800754c <HAL_RCC_GetSysClockFreq+0x84>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800750a:	f7f8 fe1f 	bl	800014c <__udivsi3>
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800750e:	68e1      	ldr	r1, [r4, #12]
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8007510:	4368      	muls	r0, r5
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8007512:	0f49      	lsrs	r1, r1, #29
 8007514:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8007516:	f7f8 fe19 	bl	800014c <__udivsi3>
 800751a:	e7e0      	b.n	80074de <HAL_RCC_GetSysClockFreq+0x16>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800751c:	480a      	ldr	r0, [pc, #40]	@ (8007548 <HAL_RCC_GetSysClockFreq+0x80>)
 800751e:	e7f4      	b.n	800750a <HAL_RCC_GetSysClockFreq+0x42>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8007520:	68a2      	ldr	r2, [r4, #8]
 8007522:	401a      	ands	r2, r3
 8007524:	2a20      	cmp	r2, #32
 8007526:	d009      	beq.n	800753c <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8007528:	68a2      	ldr	r2, [r4, #8]
    sysclockfreq = 0U;
 800752a:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800752c:	4013      	ands	r3, r2
 800752e:	2b18      	cmp	r3, #24
 8007530:	d1d5      	bne.n	80074de <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSI_VALUE;
 8007532:	20fa      	movs	r0, #250	@ 0xfa
 8007534:	01c0      	lsls	r0, r0, #7
 8007536:	e7d2      	b.n	80074de <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = HSE_VALUE;
 8007538:	4804      	ldr	r0, [pc, #16]	@ (800754c <HAL_RCC_GetSysClockFreq+0x84>)
 800753a:	e7d0      	b.n	80074de <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSE_VALUE;
 800753c:	2080      	movs	r0, #128	@ 0x80
 800753e:	0200      	lsls	r0, r0, #8
 8007540:	e7cd      	b.n	80074de <HAL_RCC_GetSysClockFreq+0x16>
 8007542:	46c0      	nop			@ (mov r8, r8)
 8007544:	40021000 	.word	0x40021000
 8007548:	00f42400 	.word	0x00f42400
 800754c:	007a1200 	.word	0x007a1200

08007550 <HAL_RCC_ClockConfig>:
{
 8007550:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007552:	0004      	movs	r4, r0
 8007554:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8007556:	2800      	cmp	r0, #0
 8007558:	d101      	bne.n	800755e <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 800755a:	2001      	movs	r0, #1
}
 800755c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800755e:	2707      	movs	r7, #7
 8007560:	4e48      	ldr	r6, [pc, #288]	@ (8007684 <HAL_RCC_ClockConfig+0x134>)
 8007562:	6833      	ldr	r3, [r6, #0]
 8007564:	403b      	ands	r3, r7
 8007566:	428b      	cmp	r3, r1
 8007568:	d32a      	bcc.n	80075c0 <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800756a:	6822      	ldr	r2, [r4, #0]
 800756c:	0793      	lsls	r3, r2, #30
 800756e:	d43b      	bmi.n	80075e8 <HAL_RCC_ClockConfig+0x98>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007570:	07d2      	lsls	r2, r2, #31
 8007572:	d448      	bmi.n	8007606 <HAL_RCC_ClockConfig+0xb6>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007574:	2707      	movs	r7, #7
 8007576:	6833      	ldr	r3, [r6, #0]
 8007578:	403b      	ands	r3, r7
 800757a:	42ab      	cmp	r3, r5
 800757c:	d90a      	bls.n	8007594 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800757e:	6833      	ldr	r3, [r6, #0]
 8007580:	43bb      	bics	r3, r7
 8007582:	432b      	orrs	r3, r5
 8007584:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8007586:	f7fe fc0f 	bl	8005da8 <HAL_GetTick>
 800758a:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800758c:	6833      	ldr	r3, [r6, #0]
 800758e:	403b      	ands	r3, r7
 8007590:	42ab      	cmp	r3, r5
 8007592:	d168      	bne.n	8007666 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007594:	6823      	ldr	r3, [r4, #0]
 8007596:	4d3c      	ldr	r5, [pc, #240]	@ (8007688 <HAL_RCC_ClockConfig+0x138>)
 8007598:	075b      	lsls	r3, r3, #29
 800759a:	d46c      	bmi.n	8007676 <HAL_RCC_ClockConfig+0x126>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800759c:	f7ff ff94 	bl	80074c8 <HAL_RCC_GetSysClockFreq>
 80075a0:	68ab      	ldr	r3, [r5, #8]
 80075a2:	493a      	ldr	r1, [pc, #232]	@ (800768c <HAL_RCC_ClockConfig+0x13c>)
 80075a4:	051b      	lsls	r3, r3, #20
 80075a6:	0f1b      	lsrs	r3, r3, #28
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	585b      	ldr	r3, [r3, r1]
 80075ac:	211f      	movs	r1, #31
 80075ae:	400b      	ands	r3, r1
 80075b0:	40d8      	lsrs	r0, r3
 80075b2:	4a37      	ldr	r2, [pc, #220]	@ (8007690 <HAL_RCC_ClockConfig+0x140>)
  return HAL_InitTick(uwTickPrio);
 80075b4:	4b37      	ldr	r3, [pc, #220]	@ (8007694 <HAL_RCC_ClockConfig+0x144>)
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80075b6:	6010      	str	r0, [r2, #0]
  return HAL_InitTick(uwTickPrio);
 80075b8:	6818      	ldr	r0, [r3, #0]
 80075ba:	f7fe fbad 	bl	8005d18 <HAL_InitTick>
 80075be:	e7cd      	b.n	800755c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075c0:	6833      	ldr	r3, [r6, #0]
 80075c2:	43bb      	bics	r3, r7
 80075c4:	430b      	orrs	r3, r1
 80075c6:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80075c8:	f7fe fbee 	bl	8005da8 <HAL_GetTick>
 80075cc:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80075ce:	6833      	ldr	r3, [r6, #0]
 80075d0:	403b      	ands	r3, r7
 80075d2:	42ab      	cmp	r3, r5
 80075d4:	d0c9      	beq.n	800756a <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075d6:	f7fe fbe7 	bl	8005da8 <HAL_GetTick>
 80075da:	9b01      	ldr	r3, [sp, #4]
 80075dc:	1ac0      	subs	r0, r0, r3
 80075de:	4b2e      	ldr	r3, [pc, #184]	@ (8007698 <HAL_RCC_ClockConfig+0x148>)
 80075e0:	4298      	cmp	r0, r3
 80075e2:	d9f4      	bls.n	80075ce <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 80075e4:	2003      	movs	r0, #3
 80075e6:	e7b9      	b.n	800755c <HAL_RCC_ClockConfig+0xc>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075e8:	4927      	ldr	r1, [pc, #156]	@ (8007688 <HAL_RCC_ClockConfig+0x138>)
 80075ea:	0753      	lsls	r3, r2, #29
 80075ec:	d504      	bpl.n	80075f8 <HAL_RCC_ClockConfig+0xa8>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80075ee:	23e0      	movs	r3, #224	@ 0xe0
 80075f0:	6888      	ldr	r0, [r1, #8]
 80075f2:	01db      	lsls	r3, r3, #7
 80075f4:	4303      	orrs	r3, r0
 80075f6:	608b      	str	r3, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075f8:	688b      	ldr	r3, [r1, #8]
 80075fa:	4828      	ldr	r0, [pc, #160]	@ (800769c <HAL_RCC_ClockConfig+0x14c>)
 80075fc:	4003      	ands	r3, r0
 80075fe:	68a0      	ldr	r0, [r4, #8]
 8007600:	4303      	orrs	r3, r0
 8007602:	608b      	str	r3, [r1, #8]
 8007604:	e7b4      	b.n	8007570 <HAL_RCC_ClockConfig+0x20>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007606:	6860      	ldr	r0, [r4, #4]
 8007608:	4f1f      	ldr	r7, [pc, #124]	@ (8007688 <HAL_RCC_ClockConfig+0x138>)
 800760a:	2803      	cmp	r0, #3
 800760c:	d829      	bhi.n	8007662 <HAL_RCC_ClockConfig+0x112>
 800760e:	f7f8 fd7f 	bl	8000110 <__gnu_thumb1_case_uqi>
 8007612:	0220      	.short	0x0220
 8007614:	241c      	.short	0x241c
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	039b      	lsls	r3, r3, #14
 800761a:	d59e      	bpl.n	800755a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800761c:	2207      	movs	r2, #7
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	4393      	bics	r3, r2
 8007622:	4303      	orrs	r3, r0
 8007624:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 8007626:	f7fe fbbf 	bl	8005da8 <HAL_GetTick>
 800762a:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800762c:	2338      	movs	r3, #56	@ 0x38
 800762e:	68ba      	ldr	r2, [r7, #8]
 8007630:	401a      	ands	r2, r3
 8007632:	6863      	ldr	r3, [r4, #4]
 8007634:	00db      	lsls	r3, r3, #3
 8007636:	429a      	cmp	r2, r3
 8007638:	d09c      	beq.n	8007574 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800763a:	f7fe fbb5 	bl	8005da8 <HAL_GetTick>
 800763e:	9b01      	ldr	r3, [sp, #4]
 8007640:	1ac0      	subs	r0, r0, r3
 8007642:	4b15      	ldr	r3, [pc, #84]	@ (8007698 <HAL_RCC_ClockConfig+0x148>)
 8007644:	4298      	cmp	r0, r3
 8007646:	d9f1      	bls.n	800762c <HAL_RCC_ClockConfig+0xdc>
 8007648:	e7cc      	b.n	80075e4 <HAL_RCC_ClockConfig+0x94>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	019b      	lsls	r3, r3, #6
 800764e:	d4e5      	bmi.n	800761c <HAL_RCC_ClockConfig+0xcc>
 8007650:	e783      	b.n	800755a <HAL_RCC_ClockConfig+0xa>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	055b      	lsls	r3, r3, #21
 8007656:	d4e1      	bmi.n	800761c <HAL_RCC_ClockConfig+0xcc>
 8007658:	e77f      	b.n	800755a <HAL_RCC_ClockConfig+0xa>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800765a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800765c:	079b      	lsls	r3, r3, #30
 800765e:	d4dd      	bmi.n	800761c <HAL_RCC_ClockConfig+0xcc>
 8007660:	e77b      	b.n	800755a <HAL_RCC_ClockConfig+0xa>
 8007662:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007664:	e7fa      	b.n	800765c <HAL_RCC_ClockConfig+0x10c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007666:	f7fe fb9f 	bl	8005da8 <HAL_GetTick>
 800766a:	9b01      	ldr	r3, [sp, #4]
 800766c:	1ac0      	subs	r0, r0, r3
 800766e:	4b0a      	ldr	r3, [pc, #40]	@ (8007698 <HAL_RCC_ClockConfig+0x148>)
 8007670:	4298      	cmp	r0, r3
 8007672:	d98b      	bls.n	800758c <HAL_RCC_ClockConfig+0x3c>
 8007674:	e7b6      	b.n	80075e4 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8007676:	68ab      	ldr	r3, [r5, #8]
 8007678:	4a09      	ldr	r2, [pc, #36]	@ (80076a0 <HAL_RCC_ClockConfig+0x150>)
 800767a:	4013      	ands	r3, r2
 800767c:	68e2      	ldr	r2, [r4, #12]
 800767e:	4313      	orrs	r3, r2
 8007680:	60ab      	str	r3, [r5, #8]
 8007682:	e78b      	b.n	800759c <HAL_RCC_ClockConfig+0x4c>
 8007684:	40022000 	.word	0x40022000
 8007688:	40021000 	.word	0x40021000
 800768c:	0800dbfc 	.word	0x0800dbfc
 8007690:	20000028 	.word	0x20000028
 8007694:	20000030 	.word	0x20000030
 8007698:	00001388 	.word	0x00001388
 800769c:	fffff0ff 	.word	0xfffff0ff
 80076a0:	ffff8fff 	.word	0xffff8fff

080076a4 <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80076a4:	4b06      	ldr	r3, [pc, #24]	@ (80076c0 <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80076a6:	4907      	ldr	r1, [pc, #28]	@ (80076c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80076a8:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80076aa:	4a07      	ldr	r2, [pc, #28]	@ (80076c8 <HAL_RCC_GetPCLK1Freq+0x24>)
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80076ac:	045b      	lsls	r3, r3, #17
 80076ae:	0f5b      	lsrs	r3, r3, #29
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	585b      	ldr	r3, [r3, r1]
 80076b4:	211f      	movs	r1, #31
 80076b6:	6810      	ldr	r0, [r2, #0]
 80076b8:	400b      	ands	r3, r1
 80076ba:	40d8      	lsrs	r0, r3
}
 80076bc:	4770      	bx	lr
 80076be:	46c0      	nop			@ (mov r8, r8)
 80076c0:	40021000 	.word	0x40021000
 80076c4:	0800dbdc 	.word	0x0800dbdc
 80076c8:	20000028 	.word	0x20000028

080076cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80076cc:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80076ce:	6803      	ldr	r3, [r0, #0]
{
 80076d0:	0005      	movs	r5, r0
 80076d2:	b085      	sub	sp, #20
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80076d4:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80076d6:	039b      	lsls	r3, r3, #14
 80076d8:	d551      	bpl.n	800777e <HAL_RCCEx_PeriphCLKConfig+0xb2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80076da:	2280      	movs	r2, #128	@ 0x80
 80076dc:	4c48      	ldr	r4, [pc, #288]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80076de:	0552      	lsls	r2, r2, #21
 80076e0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
    FlagStatus       pwrclkchanged = RESET;
 80076e2:	9000      	str	r0, [sp, #0]
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80076e4:	4213      	tst	r3, r2
 80076e6:	d108      	bne.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80076e8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80076ea:	4313      	orrs	r3, r2
 80076ec:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80076ee:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80076f0:	4013      	ands	r3, r2
 80076f2:	9303      	str	r3, [sp, #12]
 80076f4:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80076f6:	2301      	movs	r3, #1
 80076f8:	9300      	str	r3, [sp, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80076fa:	2780      	movs	r7, #128	@ 0x80
 80076fc:	4e41      	ldr	r6, [pc, #260]	@ (8007804 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 80076fe:	007f      	lsls	r7, r7, #1
 8007700:	6833      	ldr	r3, [r6, #0]
 8007702:	433b      	orrs	r3, r7
 8007704:	6033      	str	r3, [r6, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007706:	f7fe fb4f 	bl	8005da8 <HAL_GetTick>
 800770a:	9001      	str	r0, [sp, #4]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800770c:	6833      	ldr	r3, [r6, #0]
 800770e:	423b      	tst	r3, r7
 8007710:	d027      	beq.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x96>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007712:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8007714:	23c0      	movs	r3, #192	@ 0xc0
 8007716:	0010      	movs	r0, r2
 8007718:	009b      	lsls	r3, r3, #2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800771a:	6969      	ldr	r1, [r5, #20]
 800771c:	4e3a      	ldr	r6, [pc, #232]	@ (8007808 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800771e:	4018      	ands	r0, r3
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007720:	421a      	tst	r2, r3
 8007722:	d017      	beq.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8007724:	4281      	cmp	r1, r0
 8007726:	d015      	beq.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007728:	2280      	movs	r2, #128	@ 0x80
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800772a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_FORCE();
 800772c:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800772e:	0019      	movs	r1, r3
        __HAL_RCC_BACKUPRESET_FORCE();
 8007730:	0252      	lsls	r2, r2, #9
 8007732:	4302      	orrs	r2, r0
 8007734:	65e2      	str	r2, [r4, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007736:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8007738:	4834      	ldr	r0, [pc, #208]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x140>)
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800773a:	4031      	ands	r1, r6
        __HAL_RCC_BACKUPRESET_RELEASE();
 800773c:	4002      	ands	r2, r0
 800773e:	65e2      	str	r2, [r4, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007740:	65e1      	str	r1, [r4, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007742:	07db      	lsls	r3, r3, #31
 8007744:	d506      	bpl.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007746:	f7fe fb2f 	bl	8005da8 <HAL_GetTick>
 800774a:	0007      	movs	r7, r0

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800774c:	2202      	movs	r2, #2
 800774e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8007750:	4213      	tst	r3, r2
 8007752:	d04d      	beq.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x124>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007754:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8007756:	696a      	ldr	r2, [r5, #20]
 8007758:	4033      	ands	r3, r6
 800775a:	4313      	orrs	r3, r2
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800775c:	2000      	movs	r0, #0
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800775e:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8007760:	e006      	b.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007762:	f7fe fb21 	bl	8005da8 <HAL_GetTick>
 8007766:	9b01      	ldr	r3, [sp, #4]
 8007768:	1ac0      	subs	r0, r0, r3
 800776a:	2802      	cmp	r0, #2
 800776c:	d9ce      	bls.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x40>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800776e:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007770:	9b00      	ldr	r3, [sp, #0]
 8007772:	2b01      	cmp	r3, #1
 8007774:	d103      	bne.n	800777e <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007776:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007778:	4a25      	ldr	r2, [pc, #148]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 800777a:	4013      	ands	r3, r2
 800777c:	63e3      	str	r3, [r4, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800777e:	682a      	ldr	r2, [r5, #0]
 8007780:	07d3      	lsls	r3, r2, #31
 8007782:	d506      	bpl.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007784:	2403      	movs	r4, #3
 8007786:	491e      	ldr	r1, [pc, #120]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007788:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 800778a:	43a3      	bics	r3, r4
 800778c:	686c      	ldr	r4, [r5, #4]
 800778e:	4323      	orrs	r3, r4
 8007790:	654b      	str	r3, [r1, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007792:	0693      	lsls	r3, r2, #26
 8007794:	d506      	bpl.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007796:	491a      	ldr	r1, [pc, #104]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007798:	4c1e      	ldr	r4, [pc, #120]	@ (8007814 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800779a:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 800779c:	4023      	ands	r3, r4
 800779e:	68ac      	ldr	r4, [r5, #8]
 80077a0:	4323      	orrs	r3, r4
 80077a2:	654b      	str	r3, [r1, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80077a4:	0453      	lsls	r3, r2, #17
 80077a6:	d50f      	bpl.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80077a8:	4915      	ldr	r1, [pc, #84]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80077aa:	692c      	ldr	r4, [r5, #16]
 80077ac:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	089b      	lsrs	r3, r3, #2
 80077b2:	4323      	orrs	r3, r4
 80077b4:	654b      	str	r3, [r1, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80077b6:	2380      	movs	r3, #128	@ 0x80
 80077b8:	05db      	lsls	r3, r3, #23
 80077ba:	429c      	cmp	r4, r3
 80077bc:	d104      	bne.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80077be:	2380      	movs	r3, #128	@ 0x80
 80077c0:	68cc      	ldr	r4, [r1, #12]
 80077c2:	025b      	lsls	r3, r3, #9
 80077c4:	4323      	orrs	r3, r4
 80077c6:	60cb      	str	r3, [r1, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80077c8:	0512      	lsls	r2, r2, #20
 80077ca:	d50f      	bpl.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80077cc:	4a0c      	ldr	r2, [pc, #48]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80077ce:	4c12      	ldr	r4, [pc, #72]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80077d0:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80077d2:	68e9      	ldr	r1, [r5, #12]
 80077d4:	4023      	ands	r3, r4
 80077d6:	430b      	orrs	r3, r1
 80077d8:	6553      	str	r3, [r2, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80077da:	2380      	movs	r3, #128	@ 0x80
 80077dc:	01db      	lsls	r3, r3, #7
 80077de:	4299      	cmp	r1, r3
 80077e0:	d104      	bne.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80077e2:	2380      	movs	r3, #128	@ 0x80
 80077e4:	68d1      	ldr	r1, [r2, #12]
 80077e6:	025b      	lsls	r3, r3, #9
 80077e8:	430b      	orrs	r3, r1
 80077ea:	60d3      	str	r3, [r2, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 80077ec:	b005      	add	sp, #20
 80077ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077f0:	f7fe fada 	bl	8005da8 <HAL_GetTick>
 80077f4:	4b09      	ldr	r3, [pc, #36]	@ (800781c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80077f6:	1bc0      	subs	r0, r0, r7
 80077f8:	4298      	cmp	r0, r3
 80077fa:	d9a7      	bls.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x80>
 80077fc:	e7b7      	b.n	800776e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80077fe:	46c0      	nop			@ (mov r8, r8)
 8007800:	40021000 	.word	0x40021000
 8007804:	40007000 	.word	0x40007000
 8007808:	fffffcff 	.word	0xfffffcff
 800780c:	fffeffff 	.word	0xfffeffff
 8007810:	efffffff 	.word	0xefffffff
 8007814:	ffffcfff 	.word	0xffffcfff
 8007818:	ffff3fff 	.word	0xffff3fff
 800781c:	00001388 	.word	0x00001388

08007820 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007820:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007822:	2401      	movs	r4, #1
  tmpccer = TIMx->CCER;
 8007824:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007826:	6a02      	ldr	r2, [r0, #32]
 8007828:	43a2      	bics	r2, r4
 800782a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800782c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800782e:	4a12      	ldr	r2, [pc, #72]	@ (8007878 <TIM_OC1_SetConfig+0x58>)
  tmpccmrx = TIMx->CCMR1;
 8007830:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007832:	4015      	ands	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007834:	680a      	ldr	r2, [r1, #0]
 8007836:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007838:	2202      	movs	r2, #2
 800783a:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800783c:	688a      	ldr	r2, [r1, #8]
 800783e:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007840:	4a0e      	ldr	r2, [pc, #56]	@ (800787c <TIM_OC1_SetConfig+0x5c>)
 8007842:	4290      	cmp	r0, r2
 8007844:	d005      	beq.n	8007852 <TIM_OC1_SetConfig+0x32>
 8007846:	4a0e      	ldr	r2, [pc, #56]	@ (8007880 <TIM_OC1_SetConfig+0x60>)
 8007848:	4290      	cmp	r0, r2
 800784a:	d002      	beq.n	8007852 <TIM_OC1_SetConfig+0x32>
 800784c:	4a0d      	ldr	r2, [pc, #52]	@ (8007884 <TIM_OC1_SetConfig+0x64>)
 800784e:	4290      	cmp	r0, r2
 8007850:	d10b      	bne.n	800786a <TIM_OC1_SetConfig+0x4a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007852:	2208      	movs	r2, #8
 8007854:	4393      	bics	r3, r2
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007856:	68ca      	ldr	r2, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007858:	698e      	ldr	r6, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 800785a:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC1NE;
 800785c:	2204      	movs	r2, #4
 800785e:	4393      	bics	r3, r2
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007860:	4a09      	ldr	r2, [pc, #36]	@ (8007888 <TIM_OC1_SetConfig+0x68>)
 8007862:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8007864:	694c      	ldr	r4, [r1, #20]
 8007866:	4334      	orrs	r4, r6
 8007868:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800786a:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800786c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800786e:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8007870:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007872:	6203      	str	r3, [r0, #32]
}
 8007874:	bd70      	pop	{r4, r5, r6, pc}
 8007876:	46c0      	nop			@ (mov r8, r8)
 8007878:	fffeff8c 	.word	0xfffeff8c
 800787c:	40012c00 	.word	0x40012c00
 8007880:	40014400 	.word	0x40014400
 8007884:	40014800 	.word	0x40014800
 8007888:	fffffcff 	.word	0xfffffcff

0800788c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800788c:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800788e:	4a17      	ldr	r2, [pc, #92]	@ (80078ec <TIM_OC3_SetConfig+0x60>)
  tmpccer = TIMx->CCER;
 8007890:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007892:	6a03      	ldr	r3, [r0, #32]
 8007894:	4013      	ands	r3, r2
 8007896:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007898:	6842      	ldr	r2, [r0, #4]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800789a:	4b15      	ldr	r3, [pc, #84]	@ (80078f0 <TIM_OC3_SetConfig+0x64>)
  tmpccmrx = TIMx->CCMR2;
 800789c:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800789e:	401c      	ands	r4, r3
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078a0:	680b      	ldr	r3, [r1, #0]
 80078a2:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80078a4:	4b13      	ldr	r3, [pc, #76]	@ (80078f4 <TIM_OC3_SetConfig+0x68>)
 80078a6:	401d      	ands	r5, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80078a8:	688b      	ldr	r3, [r1, #8]
 80078aa:	021b      	lsls	r3, r3, #8
 80078ac:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80078ae:	4d12      	ldr	r5, [pc, #72]	@ (80078f8 <TIM_OC3_SetConfig+0x6c>)
 80078b0:	42a8      	cmp	r0, r5
 80078b2:	d10e      	bne.n	80078d2 <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80078b4:	4d11      	ldr	r5, [pc, #68]	@ (80078fc <TIM_OC3_SetConfig+0x70>)
 80078b6:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80078b8:	68cb      	ldr	r3, [r1, #12]
 80078ba:	021b      	lsls	r3, r3, #8
 80078bc:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80078be:	4d10      	ldr	r5, [pc, #64]	@ (8007900 <TIM_OC3_SetConfig+0x74>)
 80078c0:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80078c2:	4d10      	ldr	r5, [pc, #64]	@ (8007904 <TIM_OC3_SetConfig+0x78>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80078c4:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80078c6:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80078c8:	694a      	ldr	r2, [r1, #20]
 80078ca:	4332      	orrs	r2, r6
 80078cc:	0112      	lsls	r2, r2, #4
 80078ce:	432a      	orrs	r2, r5
 80078d0:	e005      	b.n	80078de <TIM_OC3_SetConfig+0x52>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078d2:	4d0d      	ldr	r5, [pc, #52]	@ (8007908 <TIM_OC3_SetConfig+0x7c>)
 80078d4:	42a8      	cmp	r0, r5
 80078d6:	d0f4      	beq.n	80078c2 <TIM_OC3_SetConfig+0x36>
 80078d8:	4d0c      	ldr	r5, [pc, #48]	@ (800790c <TIM_OC3_SetConfig+0x80>)
 80078da:	42a8      	cmp	r0, r5
 80078dc:	d0f1      	beq.n	80078c2 <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078de:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80078e0:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80078e2:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80078e4:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078e6:	6203      	str	r3, [r0, #32]
}
 80078e8:	bd70      	pop	{r4, r5, r6, pc}
 80078ea:	46c0      	nop			@ (mov r8, r8)
 80078ec:	fffffeff 	.word	0xfffffeff
 80078f0:	fffeff8c 	.word	0xfffeff8c
 80078f4:	fffffdff 	.word	0xfffffdff
 80078f8:	40012c00 	.word	0x40012c00
 80078fc:	fffff7ff 	.word	0xfffff7ff
 8007900:	fffffbff 	.word	0xfffffbff
 8007904:	ffffcfff 	.word	0xffffcfff
 8007908:	40014400 	.word	0x40014400
 800790c:	40014800 	.word	0x40014800

08007910 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007910:	b530      	push	{r4, r5, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007912:	4a12      	ldr	r2, [pc, #72]	@ (800795c <TIM_OC4_SetConfig+0x4c>)
  tmpccer = TIMx->CCER;
 8007914:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007916:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007918:	4d11      	ldr	r5, [pc, #68]	@ (8007960 <TIM_OC4_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800791a:	4013      	ands	r3, r2
 800791c:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800791e:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8007920:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007922:	402a      	ands	r2, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007924:	680d      	ldr	r5, [r1, #0]
 8007926:	022d      	lsls	r5, r5, #8
 8007928:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800792a:	4a0e      	ldr	r2, [pc, #56]	@ (8007964 <TIM_OC4_SetConfig+0x54>)
 800792c:	4014      	ands	r4, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800792e:	688a      	ldr	r2, [r1, #8]
 8007930:	0312      	lsls	r2, r2, #12
 8007932:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007934:	4c0c      	ldr	r4, [pc, #48]	@ (8007968 <TIM_OC4_SetConfig+0x58>)
 8007936:	42a0      	cmp	r0, r4
 8007938:	d005      	beq.n	8007946 <TIM_OC4_SetConfig+0x36>
 800793a:	4c0c      	ldr	r4, [pc, #48]	@ (800796c <TIM_OC4_SetConfig+0x5c>)
 800793c:	42a0      	cmp	r0, r4
 800793e:	d002      	beq.n	8007946 <TIM_OC4_SetConfig+0x36>
 8007940:	4c0b      	ldr	r4, [pc, #44]	@ (8007970 <TIM_OC4_SetConfig+0x60>)
 8007942:	42a0      	cmp	r0, r4
 8007944:	d104      	bne.n	8007950 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007946:	4c0b      	ldr	r4, [pc, #44]	@ (8007974 <TIM_OC4_SetConfig+0x64>)
 8007948:	401c      	ands	r4, r3

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800794a:	694b      	ldr	r3, [r1, #20]
 800794c:	019b      	lsls	r3, r3, #6
 800794e:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007950:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007952:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8007954:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8007956:	6403      	str	r3, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007958:	6202      	str	r2, [r0, #32]
}
 800795a:	bd30      	pop	{r4, r5, pc}
 800795c:	ffffefff 	.word	0xffffefff
 8007960:	feff8cff 	.word	0xfeff8cff
 8007964:	ffffdfff 	.word	0xffffdfff
 8007968:	40012c00 	.word	0x40012c00
 800796c:	40014400 	.word	0x40014400
 8007970:	40014800 	.word	0x40014800
 8007974:	ffffbfff 	.word	0xffffbfff

08007978 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007978:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800797a:	6a06      	ldr	r6, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800797c:	4c10      	ldr	r4, [pc, #64]	@ (80079c0 <TIM_OC5_SetConfig+0x48>)
 800797e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007980:	4a10      	ldr	r2, [pc, #64]	@ (80079c4 <TIM_OC5_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007982:	4023      	ands	r3, r4
 8007984:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8007986:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 8007988:	6d45      	ldr	r5, [r0, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800798a:	4015      	ands	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800798c:	680a      	ldr	r2, [r1, #0]
 800798e:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007990:	4a0d      	ldr	r2, [pc, #52]	@ (80079c8 <TIM_OC5_SetConfig+0x50>)
 8007992:	4016      	ands	r6, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007994:	688a      	ldr	r2, [r1, #8]
 8007996:	0412      	lsls	r2, r2, #16
 8007998:	4332      	orrs	r2, r6

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800799a:	4e0c      	ldr	r6, [pc, #48]	@ (80079cc <TIM_OC5_SetConfig+0x54>)
 800799c:	42b0      	cmp	r0, r6
 800799e:	d005      	beq.n	80079ac <TIM_OC5_SetConfig+0x34>
 80079a0:	4e0b      	ldr	r6, [pc, #44]	@ (80079d0 <TIM_OC5_SetConfig+0x58>)
 80079a2:	42b0      	cmp	r0, r6
 80079a4:	d002      	beq.n	80079ac <TIM_OC5_SetConfig+0x34>
 80079a6:	4e0b      	ldr	r6, [pc, #44]	@ (80079d4 <TIM_OC5_SetConfig+0x5c>)
 80079a8:	42b0      	cmp	r0, r6
 80079aa:	d103      	bne.n	80079b4 <TIM_OC5_SetConfig+0x3c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80079ac:	401c      	ands	r4, r3
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80079ae:	694b      	ldr	r3, [r1, #20]
 80079b0:	021b      	lsls	r3, r3, #8
 80079b2:	4323      	orrs	r3, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079b4:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80079b6:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR3 = tmpccmrx;
 80079b8:	6545      	str	r5, [r0, #84]	@ 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 80079ba:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079bc:	6202      	str	r2, [r0, #32]
}
 80079be:	bd70      	pop	{r4, r5, r6, pc}
 80079c0:	fffeffff 	.word	0xfffeffff
 80079c4:	fffeff8f 	.word	0xfffeff8f
 80079c8:	fffdffff 	.word	0xfffdffff
 80079cc:	40012c00 	.word	0x40012c00
 80079d0:	40014400 	.word	0x40014400
 80079d4:	40014800 	.word	0x40014800

080079d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80079d8:	b530      	push	{r4, r5, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80079da:	4a12      	ldr	r2, [pc, #72]	@ (8007a24 <TIM_OC6_SetConfig+0x4c>)
  tmpccer = TIMx->CCER;
 80079dc:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80079de:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80079e0:	4d11      	ldr	r5, [pc, #68]	@ (8007a28 <TIM_OC6_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80079e2:	4013      	ands	r3, r2
 80079e4:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80079e6:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 80079e8:	6d42      	ldr	r2, [r0, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80079ea:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079ec:	680d      	ldr	r5, [r1, #0]
 80079ee:	022d      	lsls	r5, r5, #8
 80079f0:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80079f2:	4a0e      	ldr	r2, [pc, #56]	@ (8007a2c <TIM_OC6_SetConfig+0x54>)
 80079f4:	4014      	ands	r4, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80079f6:	688a      	ldr	r2, [r1, #8]
 80079f8:	0512      	lsls	r2, r2, #20
 80079fa:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079fc:	4c0c      	ldr	r4, [pc, #48]	@ (8007a30 <TIM_OC6_SetConfig+0x58>)
 80079fe:	42a0      	cmp	r0, r4
 8007a00:	d005      	beq.n	8007a0e <TIM_OC6_SetConfig+0x36>
 8007a02:	4c0c      	ldr	r4, [pc, #48]	@ (8007a34 <TIM_OC6_SetConfig+0x5c>)
 8007a04:	42a0      	cmp	r0, r4
 8007a06:	d002      	beq.n	8007a0e <TIM_OC6_SetConfig+0x36>
 8007a08:	4c0b      	ldr	r4, [pc, #44]	@ (8007a38 <TIM_OC6_SetConfig+0x60>)
 8007a0a:	42a0      	cmp	r0, r4
 8007a0c:	d104      	bne.n	8007a18 <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007a0e:	4c0b      	ldr	r4, [pc, #44]	@ (8007a3c <TIM_OC6_SetConfig+0x64>)
 8007a10:	401c      	ands	r4, r3
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007a12:	694b      	ldr	r3, [r1, #20]
 8007a14:	029b      	lsls	r3, r3, #10
 8007a16:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a18:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007a1a:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR3 = tmpccmrx;
 8007a1c:	6545      	str	r5, [r0, #84]	@ 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8007a1e:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a20:	6202      	str	r2, [r0, #32]
}
 8007a22:	bd30      	pop	{r4, r5, pc}
 8007a24:	ffefffff 	.word	0xffefffff
 8007a28:	feff8fff 	.word	0xfeff8fff
 8007a2c:	ffdfffff 	.word	0xffdfffff
 8007a30:	40012c00 	.word	0x40012c00
 8007a34:	40014400 	.word	0x40014400
 8007a38:	40014800 	.word	0x40014800
 8007a3c:	fffbffff 	.word	0xfffbffff

08007a40 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8007a40:	0001      	movs	r1, r0
{
 8007a42:	0003      	movs	r3, r0
    return HAL_ERROR;
 8007a44:	2001      	movs	r0, #1
{
 8007a46:	b510      	push	{r4, lr}
  if (htim->State != HAL_TIM_STATE_READY)
 8007a48:	313d      	adds	r1, #61	@ 0x3d
 8007a4a:	780c      	ldrb	r4, [r1, #0]
 8007a4c:	b2e2      	uxtb	r2, r4
 8007a4e:	4284      	cmp	r4, r0
 8007a50:	d118      	bne.n	8007a84 <HAL_TIM_Base_Start_IT+0x44>
  htim->State = HAL_TIM_STATE_BUSY;
 8007a52:	1800      	adds	r0, r0, r0
 8007a54:	7008      	strb	r0, [r1, #0]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	68d9      	ldr	r1, [r3, #12]
 8007a5a:	4311      	orrs	r1, r2
 8007a5c:	60d9      	str	r1, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a5e:	490b      	ldr	r1, [pc, #44]	@ (8007a8c <HAL_TIM_Base_Start_IT+0x4c>)
 8007a60:	428b      	cmp	r3, r1
 8007a62:	d002      	beq.n	8007a6a <HAL_TIM_Base_Start_IT+0x2a>
 8007a64:	490a      	ldr	r1, [pc, #40]	@ (8007a90 <HAL_TIM_Base_Start_IT+0x50>)
 8007a66:	428b      	cmp	r3, r1
 8007a68:	d10d      	bne.n	8007a86 <HAL_TIM_Base_Start_IT+0x46>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a6a:	689a      	ldr	r2, [r3, #8]
 8007a6c:	4909      	ldr	r1, [pc, #36]	@ (8007a94 <HAL_TIM_Base_Start_IT+0x54>)
 8007a6e:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a70:	2a06      	cmp	r2, #6
 8007a72:	d006      	beq.n	8007a82 <HAL_TIM_Base_Start_IT+0x42>
 8007a74:	3907      	subs	r1, #7
 8007a76:	428a      	cmp	r2, r1
 8007a78:	d003      	beq.n	8007a82 <HAL_TIM_Base_Start_IT+0x42>
      __HAL_TIM_ENABLE(htim);
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	6819      	ldr	r1, [r3, #0]
 8007a7e:	430a      	orrs	r2, r1
 8007a80:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007a82:	2000      	movs	r0, #0
}
 8007a84:	bd10      	pop	{r4, pc}
    __HAL_TIM_ENABLE(htim);
 8007a86:	6819      	ldr	r1, [r3, #0]
 8007a88:	e7f9      	b.n	8007a7e <HAL_TIM_Base_Start_IT+0x3e>
 8007a8a:	46c0      	nop			@ (mov r8, r8)
 8007a8c:	40012c00 	.word	0x40012c00
 8007a90:	40000400 	.word	0x40000400
 8007a94:	00010007 	.word	0x00010007

08007a98 <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 8007a98:	4770      	bx	lr

08007a9a <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8007a9a:	4770      	bx	lr

08007a9c <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8007a9c:	4770      	bx	lr

08007a9e <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8007a9e:	4770      	bx	lr

08007aa0 <HAL_TIM_IRQHandler>:
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007aa0:	2202      	movs	r2, #2
  uint32_t itsource = htim->Instance->DIER;
 8007aa2:	6803      	ldr	r3, [r0, #0]
{
 8007aa4:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8007aa6:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007aa8:	691e      	ldr	r6, [r3, #16]
{
 8007aaa:	0004      	movs	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007aac:	4216      	tst	r6, r2
 8007aae:	d00d      	beq.n	8007acc <HAL_TIM_IRQHandler+0x2c>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007ab0:	4215      	tst	r5, r2
 8007ab2:	d00b      	beq.n	8007acc <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007ab4:	3a05      	subs	r2, #5
 8007ab6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ab8:	3204      	adds	r2, #4
 8007aba:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007abc:	699b      	ldr	r3, [r3, #24]
 8007abe:	079b      	lsls	r3, r3, #30
 8007ac0:	d100      	bne.n	8007ac4 <HAL_TIM_IRQHandler+0x24>
 8007ac2:	e07c      	b.n	8007bbe <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8007ac4:	f7ff ffea 	bl	8007a9c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007acc:	2304      	movs	r3, #4
 8007ace:	421e      	tst	r6, r3
 8007ad0:	d012      	beq.n	8007af8 <HAL_TIM_IRQHandler+0x58>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007ad2:	421d      	tst	r5, r3
 8007ad4:	d010      	beq.n	8007af8 <HAL_TIM_IRQHandler+0x58>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007ad6:	2205      	movs	r2, #5
 8007ad8:	6823      	ldr	r3, [r4, #0]
 8007ada:	4252      	negs	r2, r2
 8007adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ade:	3207      	adds	r2, #7
 8007ae0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ae2:	699a      	ldr	r2, [r3, #24]
 8007ae4:	23c0      	movs	r3, #192	@ 0xc0
 8007ae6:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8007ae8:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007aea:	421a      	tst	r2, r3
 8007aec:	d100      	bne.n	8007af0 <HAL_TIM_IRQHandler+0x50>
 8007aee:	e06c      	b.n	8007bca <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8007af0:	f7ff ffd4 	bl	8007a9c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007af4:	2300      	movs	r3, #0
 8007af6:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007af8:	2308      	movs	r3, #8
 8007afa:	421e      	tst	r6, r3
 8007afc:	d00f      	beq.n	8007b1e <HAL_TIM_IRQHandler+0x7e>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007afe:	421d      	tst	r5, r3
 8007b00:	d00d      	beq.n	8007b1e <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007b02:	2209      	movs	r2, #9
 8007b04:	6823      	ldr	r3, [r4, #0]
 8007b06:	4252      	negs	r2, r2
 8007b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b0a:	320d      	adds	r2, #13
 8007b0c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b0e:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8007b10:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b12:	079b      	lsls	r3, r3, #30
 8007b14:	d05f      	beq.n	8007bd6 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8007b16:	f7ff ffc1 	bl	8007a9c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007b1e:	2310      	movs	r3, #16
 8007b20:	421e      	tst	r6, r3
 8007b22:	d011      	beq.n	8007b48 <HAL_TIM_IRQHandler+0xa8>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007b24:	421d      	tst	r5, r3
 8007b26:	d00f      	beq.n	8007b48 <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007b28:	2211      	movs	r2, #17
 8007b2a:	6823      	ldr	r3, [r4, #0]
 8007b2c:	4252      	negs	r2, r2
 8007b2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b30:	3219      	adds	r2, #25
 8007b32:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b34:	69da      	ldr	r2, [r3, #28]
 8007b36:	23c0      	movs	r3, #192	@ 0xc0
 8007b38:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8007b3a:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b3c:	421a      	tst	r2, r3
 8007b3e:	d050      	beq.n	8007be2 <HAL_TIM_IRQHandler+0x142>
        HAL_TIM_IC_CaptureCallback(htim);
 8007b40:	f7ff ffac 	bl	8007a9c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b44:	2300      	movs	r3, #0
 8007b46:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007b48:	2301      	movs	r3, #1
 8007b4a:	421e      	tst	r6, r3
 8007b4c:	d008      	beq.n	8007b60 <HAL_TIM_IRQHandler+0xc0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007b4e:	421d      	tst	r5, r3
 8007b50:	d006      	beq.n	8007b60 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007b52:	2202      	movs	r2, #2
 8007b54:	6823      	ldr	r3, [r4, #0]
 8007b56:	4252      	negs	r2, r2
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b58:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007b5a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b5c:	f7fd fc56 	bl	800540c <HAL_TIM_PeriodElapsedCallback>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007b60:	2382      	movs	r3, #130	@ 0x82
 8007b62:	019b      	lsls	r3, r3, #6
 8007b64:	421e      	tst	r6, r3
 8007b66:	d007      	beq.n	8007b78 <HAL_TIM_IRQHandler+0xd8>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007b68:	062b      	lsls	r3, r5, #24
 8007b6a:	d505      	bpl.n	8007b78 <HAL_TIM_IRQHandler+0xd8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007b6c:	6823      	ldr	r3, [r4, #0]
 8007b6e:	4a20      	ldr	r2, [pc, #128]	@ (8007bf0 <HAL_TIM_IRQHandler+0x150>)
      HAL_TIMEx_BreakCallback(htim);
 8007b70:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007b72:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8007b74:	f000 fbdf 	bl	8008336 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007b78:	05f3      	lsls	r3, r6, #23
 8007b7a:	d507      	bpl.n	8007b8c <HAL_TIM_IRQHandler+0xec>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007b7c:	062b      	lsls	r3, r5, #24
 8007b7e:	d505      	bpl.n	8007b8c <HAL_TIM_IRQHandler+0xec>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007b80:	6823      	ldr	r3, [r4, #0]
 8007b82:	4a1c      	ldr	r2, [pc, #112]	@ (8007bf4 <HAL_TIM_IRQHandler+0x154>)
      HAL_TIMEx_Break2Callback(htim);
 8007b84:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007b86:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8007b88:	f000 fbd6 	bl	8008338 <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007b8c:	2340      	movs	r3, #64	@ 0x40
 8007b8e:	421e      	tst	r6, r3
 8007b90:	d008      	beq.n	8007ba4 <HAL_TIM_IRQHandler+0x104>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007b92:	421d      	tst	r5, r3
 8007b94:	d006      	beq.n	8007ba4 <HAL_TIM_IRQHandler+0x104>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007b96:	2241      	movs	r2, #65	@ 0x41
 8007b98:	6823      	ldr	r3, [r4, #0]
 8007b9a:	4252      	negs	r2, r2
      HAL_TIM_TriggerCallback(htim);
 8007b9c:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007b9e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007ba0:	f7ff ff7d 	bl	8007a9e <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007ba4:	2320      	movs	r3, #32
 8007ba6:	421e      	tst	r6, r3
 8007ba8:	d008      	beq.n	8007bbc <HAL_TIM_IRQHandler+0x11c>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007baa:	421d      	tst	r5, r3
 8007bac:	d006      	beq.n	8007bbc <HAL_TIM_IRQHandler+0x11c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007bae:	2221      	movs	r2, #33	@ 0x21
 8007bb0:	6823      	ldr	r3, [r4, #0]
 8007bb2:	4252      	negs	r2, r2
      HAL_TIMEx_CommutCallback(htim);
 8007bb4:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007bb6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8007bb8:	f000 fbbc 	bl	8008334 <HAL_TIMEx_CommutCallback>
}
 8007bbc:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bbe:	f7ff ff6c 	bl	8007a9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bc2:	0020      	movs	r0, r4
 8007bc4:	f7fd fc46 	bl	8005454 <HAL_TIM_PWM_PulseFinishedCallback>
 8007bc8:	e77e      	b.n	8007ac8 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bca:	f7ff ff66 	bl	8007a9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bce:	0020      	movs	r0, r4
 8007bd0:	f7fd fc40 	bl	8005454 <HAL_TIM_PWM_PulseFinishedCallback>
 8007bd4:	e78e      	b.n	8007af4 <HAL_TIM_IRQHandler+0x54>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bd6:	f7ff ff60 	bl	8007a9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bda:	0020      	movs	r0, r4
 8007bdc:	f7fd fc3a 	bl	8005454 <HAL_TIM_PWM_PulseFinishedCallback>
 8007be0:	e79b      	b.n	8007b1a <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007be2:	f7ff ff5a 	bl	8007a9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007be6:	0020      	movs	r0, r4
 8007be8:	f7fd fc34 	bl	8005454 <HAL_TIM_PWM_PulseFinishedCallback>
 8007bec:	e7aa      	b.n	8007b44 <HAL_TIM_IRQHandler+0xa4>
 8007bee:	46c0      	nop			@ (mov r8, r8)
 8007bf0:	ffffdf7f 	.word	0xffffdf7f
 8007bf4:	fffffeff 	.word	0xfffffeff

08007bf8 <TIM_Base_SetConfig>:
{
 8007bf8:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bfa:	4c1b      	ldr	r4, [pc, #108]	@ (8007c68 <TIM_Base_SetConfig+0x70>)
  tmpcr1 = TIMx->CR1;
 8007bfc:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bfe:	42a0      	cmp	r0, r4
 8007c00:	d00a      	beq.n	8007c18 <TIM_Base_SetConfig+0x20>
 8007c02:	4a1a      	ldr	r2, [pc, #104]	@ (8007c6c <TIM_Base_SetConfig+0x74>)
 8007c04:	4290      	cmp	r0, r2
 8007c06:	d007      	beq.n	8007c18 <TIM_Base_SetConfig+0x20>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c08:	4a19      	ldr	r2, [pc, #100]	@ (8007c70 <TIM_Base_SetConfig+0x78>)
 8007c0a:	4290      	cmp	r0, r2
 8007c0c:	d109      	bne.n	8007c22 <TIM_Base_SetConfig+0x2a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c0e:	4a19      	ldr	r2, [pc, #100]	@ (8007c74 <TIM_Base_SetConfig+0x7c>)
 8007c10:	401a      	ands	r2, r3
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c12:	68cb      	ldr	r3, [r1, #12]
 8007c14:	4313      	orrs	r3, r2
 8007c16:	e00a      	b.n	8007c2e <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c18:	2270      	movs	r2, #112	@ 0x70
 8007c1a:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8007c1c:	684a      	ldr	r2, [r1, #4]
 8007c1e:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c20:	e7f5      	b.n	8007c0e <TIM_Base_SetConfig+0x16>
 8007c22:	4a15      	ldr	r2, [pc, #84]	@ (8007c78 <TIM_Base_SetConfig+0x80>)
 8007c24:	4290      	cmp	r0, r2
 8007c26:	d0f2      	beq.n	8007c0e <TIM_Base_SetConfig+0x16>
 8007c28:	4a14      	ldr	r2, [pc, #80]	@ (8007c7c <TIM_Base_SetConfig+0x84>)
 8007c2a:	4290      	cmp	r0, r2
 8007c2c:	d0ef      	beq.n	8007c0e <TIM_Base_SetConfig+0x16>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c2e:	2280      	movs	r2, #128	@ 0x80
 8007c30:	4393      	bics	r3, r2
 8007c32:	694a      	ldr	r2, [r1, #20]
 8007c34:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8007c36:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c38:	688b      	ldr	r3, [r1, #8]
 8007c3a:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007c3c:	680b      	ldr	r3, [r1, #0]
 8007c3e:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c40:	42a0      	cmp	r0, r4
 8007c42:	d005      	beq.n	8007c50 <TIM_Base_SetConfig+0x58>
 8007c44:	4b0c      	ldr	r3, [pc, #48]	@ (8007c78 <TIM_Base_SetConfig+0x80>)
 8007c46:	4298      	cmp	r0, r3
 8007c48:	d002      	beq.n	8007c50 <TIM_Base_SetConfig+0x58>
 8007c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8007c7c <TIM_Base_SetConfig+0x84>)
 8007c4c:	4298      	cmp	r0, r3
 8007c4e:	d101      	bne.n	8007c54 <TIM_Base_SetConfig+0x5c>
    TIMx->RCR = Structure->RepetitionCounter;
 8007c50:	690b      	ldr	r3, [r1, #16]
 8007c52:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8007c54:	2201      	movs	r2, #1
 8007c56:	6142      	str	r2, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007c58:	6903      	ldr	r3, [r0, #16]
 8007c5a:	4213      	tst	r3, r2
 8007c5c:	d002      	beq.n	8007c64 <TIM_Base_SetConfig+0x6c>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007c5e:	6903      	ldr	r3, [r0, #16]
 8007c60:	4393      	bics	r3, r2
 8007c62:	6103      	str	r3, [r0, #16]
}
 8007c64:	bd10      	pop	{r4, pc}
 8007c66:	46c0      	nop			@ (mov r8, r8)
 8007c68:	40012c00 	.word	0x40012c00
 8007c6c:	40000400 	.word	0x40000400
 8007c70:	40002000 	.word	0x40002000
 8007c74:	fffffcff 	.word	0xfffffcff
 8007c78:	40014400 	.word	0x40014400
 8007c7c:	40014800 	.word	0x40014800

08007c80 <HAL_TIM_Base_Init>:
{
 8007c80:	b570      	push	{r4, r5, r6, lr}
 8007c82:	0004      	movs	r4, r0
    return HAL_ERROR;
 8007c84:	2001      	movs	r0, #1
  if (htim == NULL)
 8007c86:	2c00      	cmp	r4, #0
 8007c88:	d023      	beq.n	8007cd2 <HAL_TIM_Base_Init+0x52>
  if (htim->State == HAL_TIM_STATE_RESET)
 8007c8a:	0025      	movs	r5, r4
 8007c8c:	353d      	adds	r5, #61	@ 0x3d
 8007c8e:	782b      	ldrb	r3, [r5, #0]
 8007c90:	b2da      	uxtb	r2, r3
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d105      	bne.n	8007ca2 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8007c96:	0023      	movs	r3, r4
 8007c98:	333c      	adds	r3, #60	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007c9a:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8007c9c:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 8007c9e:	f7fd fe99 	bl	80059d4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8007ca2:	2302      	movs	r3, #2
 8007ca4:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ca6:	6820      	ldr	r0, [r4, #0]
 8007ca8:	1d21      	adds	r1, r4, #4
 8007caa:	f7ff ffa5 	bl	8007bf8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cae:	0022      	movs	r2, r4
 8007cb0:	2301      	movs	r3, #1
  return HAL_OK;
 8007cb2:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cb4:	3248      	adds	r2, #72	@ 0x48
 8007cb6:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cb8:	3447      	adds	r4, #71	@ 0x47
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cba:	3a0a      	subs	r2, #10
 8007cbc:	7013      	strb	r3, [r2, #0]
 8007cbe:	7053      	strb	r3, [r2, #1]
 8007cc0:	7093      	strb	r3, [r2, #2]
 8007cc2:	70d3      	strb	r3, [r2, #3]
 8007cc4:	7113      	strb	r3, [r2, #4]
 8007cc6:	7153      	strb	r3, [r2, #5]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cc8:	7193      	strb	r3, [r2, #6]
 8007cca:	71d3      	strb	r3, [r2, #7]
 8007ccc:	7213      	strb	r3, [r2, #8]
 8007cce:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8007cd0:	702b      	strb	r3, [r5, #0]
}
 8007cd2:	bd70      	pop	{r4, r5, r6, pc}

08007cd4 <HAL_TIM_PWM_Init>:
{
 8007cd4:	b570      	push	{r4, r5, r6, lr}
 8007cd6:	0004      	movs	r4, r0
    return HAL_ERROR;
 8007cd8:	2001      	movs	r0, #1
  if (htim == NULL)
 8007cda:	2c00      	cmp	r4, #0
 8007cdc:	d023      	beq.n	8007d26 <HAL_TIM_PWM_Init+0x52>
  if (htim->State == HAL_TIM_STATE_RESET)
 8007cde:	0025      	movs	r5, r4
 8007ce0:	353d      	adds	r5, #61	@ 0x3d
 8007ce2:	782b      	ldrb	r3, [r5, #0]
 8007ce4:	b2da      	uxtb	r2, r3
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d105      	bne.n	8007cf6 <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8007cea:	0023      	movs	r3, r4
 8007cec:	333c      	adds	r3, #60	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8007cee:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8007cf0:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_MspInit(htim);
 8007cf2:	f7ff fed1 	bl	8007a98 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8007cf6:	2302      	movs	r3, #2
 8007cf8:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cfa:	6820      	ldr	r0, [r4, #0]
 8007cfc:	1d21      	adds	r1, r4, #4
 8007cfe:	f7ff ff7b 	bl	8007bf8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d02:	0022      	movs	r2, r4
 8007d04:	2301      	movs	r3, #1
  return HAL_OK;
 8007d06:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d08:	3248      	adds	r2, #72	@ 0x48
 8007d0a:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d0c:	3447      	adds	r4, #71	@ 0x47
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d0e:	3a0a      	subs	r2, #10
 8007d10:	7013      	strb	r3, [r2, #0]
 8007d12:	7053      	strb	r3, [r2, #1]
 8007d14:	7093      	strb	r3, [r2, #2]
 8007d16:	70d3      	strb	r3, [r2, #3]
 8007d18:	7113      	strb	r3, [r2, #4]
 8007d1a:	7153      	strb	r3, [r2, #5]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d1c:	7193      	strb	r3, [r2, #6]
 8007d1e:	71d3      	strb	r3, [r2, #7]
 8007d20:	7213      	strb	r3, [r2, #8]
 8007d22:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8007d24:	702b      	strb	r3, [r5, #0]
}
 8007d26:	bd70      	pop	{r4, r5, r6, pc}

08007d28 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d28:	2210      	movs	r2, #16
{
 8007d2a:	b570      	push	{r4, r5, r6, lr}
  tmpccer = TIMx->CCER;
 8007d2c:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d2e:	6a03      	ldr	r3, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d30:	4c16      	ldr	r4, [pc, #88]	@ (8007d8c <TIM_OC2_SetConfig+0x64>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d32:	4393      	bics	r3, r2
 8007d34:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8007d36:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8007d38:	6983      	ldr	r3, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d3a:	4023      	ands	r3, r4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d3c:	680c      	ldr	r4, [r1, #0]
 8007d3e:	0224      	lsls	r4, r4, #8
 8007d40:	431c      	orrs	r4, r3
  tmpccer &= ~TIM_CCER_CC2P;
 8007d42:	2320      	movs	r3, #32
 8007d44:	439d      	bics	r5, r3
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d46:	688b      	ldr	r3, [r1, #8]
 8007d48:	011b      	lsls	r3, r3, #4
 8007d4a:	432b      	orrs	r3, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d4c:	4d10      	ldr	r5, [pc, #64]	@ (8007d90 <TIM_OC2_SetConfig+0x68>)
 8007d4e:	42a8      	cmp	r0, r5
 8007d50:	d10f      	bne.n	8007d72 <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 8007d52:	2580      	movs	r5, #128	@ 0x80
 8007d54:	43ab      	bics	r3, r5
 8007d56:	001e      	movs	r6, r3
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d58:	68cb      	ldr	r3, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d5a:	3d40      	subs	r5, #64	@ 0x40
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d5c:	011b      	lsls	r3, r3, #4
 8007d5e:	4333      	orrs	r3, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d60:	43ab      	bics	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d62:	4d0c      	ldr	r5, [pc, #48]	@ (8007d94 <TIM_OC2_SetConfig+0x6c>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d64:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d66:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d68:	694a      	ldr	r2, [r1, #20]
 8007d6a:	4332      	orrs	r2, r6
 8007d6c:	0092      	lsls	r2, r2, #2
 8007d6e:	432a      	orrs	r2, r5
 8007d70:	e005      	b.n	8007d7e <TIM_OC2_SetConfig+0x56>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d72:	4d09      	ldr	r5, [pc, #36]	@ (8007d98 <TIM_OC2_SetConfig+0x70>)
 8007d74:	42a8      	cmp	r0, r5
 8007d76:	d0f4      	beq.n	8007d62 <TIM_OC2_SetConfig+0x3a>
 8007d78:	4d08      	ldr	r5, [pc, #32]	@ (8007d9c <TIM_OC2_SetConfig+0x74>)
 8007d7a:	42a8      	cmp	r0, r5
 8007d7c:	d0f1      	beq.n	8007d62 <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 8007d7e:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8007d80:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8007d82:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8007d84:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8007d86:	6203      	str	r3, [r0, #32]
}
 8007d88:	bd70      	pop	{r4, r5, r6, pc}
 8007d8a:	46c0      	nop			@ (mov r8, r8)
 8007d8c:	feff8cff 	.word	0xfeff8cff
 8007d90:	40012c00 	.word	0x40012c00
 8007d94:	fffff3ff 	.word	0xfffff3ff
 8007d98:	40014400 	.word	0x40014400
 8007d9c:	40014800 	.word	0x40014800

08007da0 <HAL_TIM_PWM_ConfigChannel>:
{
 8007da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8007da2:	0007      	movs	r7, r0
 8007da4:	373c      	adds	r7, #60	@ 0x3c
{
 8007da6:	0015      	movs	r5, r2
  __HAL_LOCK(htim);
 8007da8:	783a      	ldrb	r2, [r7, #0]
{
 8007daa:	0003      	movs	r3, r0
 8007dac:	000c      	movs	r4, r1
  __HAL_LOCK(htim);
 8007dae:	2002      	movs	r0, #2
 8007db0:	2a01      	cmp	r2, #1
 8007db2:	d00c      	beq.n	8007dce <HAL_TIM_PWM_ConfigChannel+0x2e>
 8007db4:	3801      	subs	r0, #1
 8007db6:	7038      	strb	r0, [r7, #0]
  switch (Channel)
 8007db8:	2d0c      	cmp	r5, #12
 8007dba:	d051      	beq.n	8007e60 <HAL_TIM_PWM_ConfigChannel+0xc0>
 8007dbc:	d808      	bhi.n	8007dd0 <HAL_TIM_PWM_ConfigChannel+0x30>
 8007dbe:	2d04      	cmp	r5, #4
 8007dc0:	d02d      	beq.n	8007e1e <HAL_TIM_PWM_ConfigChannel+0x7e>
 8007dc2:	2d08      	cmp	r5, #8
 8007dc4:	d03c      	beq.n	8007e40 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8007dc6:	2d00      	cmp	r5, #0
 8007dc8:	d017      	beq.n	8007dfa <HAL_TIM_PWM_ConfigChannel+0x5a>
  __HAL_UNLOCK(htim);
 8007dca:	2300      	movs	r3, #0
 8007dcc:	703b      	strb	r3, [r7, #0]
}
 8007dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (Channel)
 8007dd0:	2d10      	cmp	r5, #16
 8007dd2:	d058      	beq.n	8007e86 <HAL_TIM_PWM_ConfigChannel+0xe6>
 8007dd4:	2d14      	cmp	r5, #20
 8007dd6:	d1f8      	bne.n	8007dca <HAL_TIM_PWM_ConfigChannel+0x2a>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007dd8:	681d      	ldr	r5, [r3, #0]
 8007dda:	0028      	movs	r0, r5
 8007ddc:	f7ff fdfc 	bl	80079d8 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007de0:	2380      	movs	r3, #128	@ 0x80
 8007de2:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 8007de4:	011b      	lsls	r3, r3, #4
 8007de6:	4313      	orrs	r3, r2
 8007de8:	656b      	str	r3, [r5, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007dea:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8007dec:	4a2e      	ldr	r2, [pc, #184]	@ (8007ea8 <HAL_TIM_PWM_ConfigChannel+0x108>)
 8007dee:	4013      	ands	r3, r2
 8007df0:	656b      	str	r3, [r5, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007df2:	6923      	ldr	r3, [r4, #16]
 8007df4:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 8007df6:	021b      	lsls	r3, r3, #8
 8007df8:	e053      	b.n	8007ea2 <HAL_TIM_PWM_ConfigChannel+0x102>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007dfa:	681d      	ldr	r5, [r3, #0]
 8007dfc:	0028      	movs	r0, r5
 8007dfe:	f7ff fd0f 	bl	8007820 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e02:	2308      	movs	r3, #8
 8007e04:	69aa      	ldr	r2, [r5, #24]
 8007e06:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e08:	2204      	movs	r2, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e0a:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e0c:	69ab      	ldr	r3, [r5, #24]
 8007e0e:	4393      	bics	r3, r2
 8007e10:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e12:	69ab      	ldr	r3, [r5, #24]
 8007e14:	6922      	ldr	r2, [r4, #16]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007e16:	4313      	orrs	r3, r2
 8007e18:	61ab      	str	r3, [r5, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8007e1a:	2000      	movs	r0, #0
 8007e1c:	e7d5      	b.n	8007dca <HAL_TIM_PWM_ConfigChannel+0x2a>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e1e:	681d      	ldr	r5, [r3, #0]
 8007e20:	0028      	movs	r0, r5
 8007e22:	f7ff ff81 	bl	8007d28 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007e26:	2380      	movs	r3, #128	@ 0x80
 8007e28:	69aa      	ldr	r2, [r5, #24]
 8007e2a:	011b      	lsls	r3, r3, #4
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007e30:	69ab      	ldr	r3, [r5, #24]
 8007e32:	4a1d      	ldr	r2, [pc, #116]	@ (8007ea8 <HAL_TIM_PWM_ConfigChannel+0x108>)
 8007e34:	4013      	ands	r3, r2
 8007e36:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007e38:	6923      	ldr	r3, [r4, #16]
 8007e3a:	69aa      	ldr	r2, [r5, #24]
 8007e3c:	021b      	lsls	r3, r3, #8
 8007e3e:	e7ea      	b.n	8007e16 <HAL_TIM_PWM_ConfigChannel+0x76>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e40:	681e      	ldr	r6, [r3, #0]
 8007e42:	0030      	movs	r0, r6
 8007e44:	f7ff fd22 	bl	800788c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007e48:	2204      	movs	r2, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007e4a:	69f3      	ldr	r3, [r6, #28]
 8007e4c:	431d      	orrs	r5, r3
 8007e4e:	61f5      	str	r5, [r6, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007e50:	69f3      	ldr	r3, [r6, #28]
 8007e52:	4393      	bics	r3, r2
 8007e54:	61f3      	str	r3, [r6, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007e56:	69f3      	ldr	r3, [r6, #28]
 8007e58:	6922      	ldr	r2, [r4, #16]
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	61f3      	str	r3, [r6, #28]
      break;
 8007e5e:	e7dc      	b.n	8007e1a <HAL_TIM_PWM_ConfigChannel+0x7a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e60:	681d      	ldr	r5, [r3, #0]
 8007e62:	0028      	movs	r0, r5
 8007e64:	f7ff fd54 	bl	8007910 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007e68:	2380      	movs	r3, #128	@ 0x80
 8007e6a:	69ea      	ldr	r2, [r5, #28]
 8007e6c:	011b      	lsls	r3, r3, #4
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	61eb      	str	r3, [r5, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007e72:	69eb      	ldr	r3, [r5, #28]
 8007e74:	4a0c      	ldr	r2, [pc, #48]	@ (8007ea8 <HAL_TIM_PWM_ConfigChannel+0x108>)
 8007e76:	4013      	ands	r3, r2
 8007e78:	61eb      	str	r3, [r5, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007e7a:	6923      	ldr	r3, [r4, #16]
 8007e7c:	69ea      	ldr	r2, [r5, #28]
 8007e7e:	021b      	lsls	r3, r3, #8
 8007e80:	4313      	orrs	r3, r2
 8007e82:	61eb      	str	r3, [r5, #28]
      break;
 8007e84:	e7c9      	b.n	8007e1a <HAL_TIM_PWM_ConfigChannel+0x7a>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007e86:	681d      	ldr	r5, [r3, #0]
 8007e88:	0028      	movs	r0, r5
 8007e8a:	f7ff fd75 	bl	8007978 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007e8e:	2308      	movs	r3, #8
 8007e90:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 8007e92:	4313      	orrs	r3, r2
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007e94:	2204      	movs	r2, #4
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007e96:	656b      	str	r3, [r5, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007e98:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8007e9a:	4393      	bics	r3, r2
 8007e9c:	656b      	str	r3, [r5, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007e9e:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8007ea0:	6922      	ldr	r2, [r4, #16]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	656b      	str	r3, [r5, #84]	@ 0x54
      break;
 8007ea6:	e7b8      	b.n	8007e1a <HAL_TIM_PWM_ConfigChannel+0x7a>
 8007ea8:	fffffbff 	.word	0xfffffbff

08007eac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007eac:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007eae:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007eb0:	4d03      	ldr	r5, [pc, #12]	@ (8007ec0 <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007eb2:	430a      	orrs	r2, r1
 8007eb4:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007eb6:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ebc:	6083      	str	r3, [r0, #8]
}
 8007ebe:	bd30      	pop	{r4, r5, pc}
 8007ec0:	ffff00ff 	.word	0xffff00ff

08007ec4 <HAL_TIM_ConfigClockSource>:
{
 8007ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8007ec6:	0005      	movs	r5, r0
 8007ec8:	2202      	movs	r2, #2
 8007eca:	353c      	adds	r5, #60	@ 0x3c
 8007ecc:	782c      	ldrb	r4, [r5, #0]
{
 8007ece:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8007ed0:	0010      	movs	r0, r2
 8007ed2:	2c01      	cmp	r4, #1
 8007ed4:	d01b      	beq.n	8007f0e <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8007ed6:	001e      	movs	r6, r3
  __HAL_LOCK(htim);
 8007ed8:	3801      	subs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8007eda:	363d      	adds	r6, #61	@ 0x3d
  __HAL_LOCK(htim);
 8007edc:	7028      	strb	r0, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8007ede:	7032      	strb	r2, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 8007ee0:	681c      	ldr	r4, [r3, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ee2:	4a41      	ldr	r2, [pc, #260]	@ (8007fe8 <HAL_TIM_ConfigClockSource+0x124>)
  tmpsmcr = htim->Instance->SMCR;
 8007ee4:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ee6:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8007ee8:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8007eea:	680b      	ldr	r3, [r1, #0]
 8007eec:	2b60      	cmp	r3, #96	@ 0x60
 8007eee:	d04e      	beq.n	8007f8e <HAL_TIM_ConfigClockSource+0xca>
 8007ef0:	d82d      	bhi.n	8007f4e <HAL_TIM_ConfigClockSource+0x8a>
 8007ef2:	2b40      	cmp	r3, #64	@ 0x40
 8007ef4:	d062      	beq.n	8007fbc <HAL_TIM_ConfigClockSource+0xf8>
 8007ef6:	d813      	bhi.n	8007f20 <HAL_TIM_ConfigClockSource+0x5c>
 8007ef8:	2b20      	cmp	r3, #32
 8007efa:	d00b      	beq.n	8007f14 <HAL_TIM_ConfigClockSource+0x50>
 8007efc:	d808      	bhi.n	8007f10 <HAL_TIM_ConfigClockSource+0x4c>
 8007efe:	2210      	movs	r2, #16
 8007f00:	0019      	movs	r1, r3
 8007f02:	4391      	bics	r1, r2
 8007f04:	d006      	beq.n	8007f14 <HAL_TIM_ConfigClockSource+0x50>
  htim->State = HAL_TIM_STATE_READY;
 8007f06:	2301      	movs	r3, #1
 8007f08:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	702b      	strb	r3, [r5, #0]
}
 8007f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 8007f10:	2b30      	cmp	r3, #48	@ 0x30
 8007f12:	d1f8      	bne.n	8007f06 <HAL_TIM_ConfigClockSource+0x42>
  tmpsmcr = TIMx->SMCR;
 8007f14:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f16:	4935      	ldr	r1, [pc, #212]	@ (8007fec <HAL_TIM_ConfigClockSource+0x128>)
 8007f18:	400a      	ands	r2, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	2207      	movs	r2, #7
 8007f1e:	e028      	b.n	8007f72 <HAL_TIM_ConfigClockSource+0xae>
  switch (sClockSourceConfig->ClockSource)
 8007f20:	2b50      	cmp	r3, #80	@ 0x50
 8007f22:	d1f0      	bne.n	8007f06 <HAL_TIM_ConfigClockSource+0x42>
                               sClockSourceConfig->ClockPolarity,
 8007f24:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8007f26:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8007f28:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f2a:	6a27      	ldr	r7, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007f2c:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f2e:	4387      	bics	r7, r0
 8007f30:	6227      	str	r7, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f32:	27f0      	movs	r7, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8007f34:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f36:	43b8      	bics	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007f38:	4303      	orrs	r3, r0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f3a:	200a      	movs	r0, #10
 8007f3c:	4381      	bics	r1, r0
  tmpccer |= TIM_ICPolarity;
 8007f3e:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8007f40:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8007f42:	6222      	str	r2, [r4, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f44:	4b29      	ldr	r3, [pc, #164]	@ (8007fec <HAL_TIM_ConfigClockSource+0x128>)
  tmpsmcr = TIMx->SMCR;
 8007f46:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f48:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f4a:	2357      	movs	r3, #87	@ 0x57
 8007f4c:	e011      	b.n	8007f72 <HAL_TIM_ConfigClockSource+0xae>
  switch (sClockSourceConfig->ClockSource)
 8007f4e:	2280      	movs	r2, #128	@ 0x80
 8007f50:	0152      	lsls	r2, r2, #5
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d00f      	beq.n	8007f76 <HAL_TIM_ConfigClockSource+0xb2>
 8007f56:	2280      	movs	r2, #128	@ 0x80
 8007f58:	0192      	lsls	r2, r2, #6
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d00d      	beq.n	8007f7a <HAL_TIM_ConfigClockSource+0xb6>
 8007f5e:	2b70      	cmp	r3, #112	@ 0x70
 8007f60:	d1d1      	bne.n	8007f06 <HAL_TIM_ConfigClockSource+0x42>
      TIM_ETR_SetConfig(htim->Instance,
 8007f62:	68cb      	ldr	r3, [r1, #12]
 8007f64:	684a      	ldr	r2, [r1, #4]
 8007f66:	0020      	movs	r0, r4
 8007f68:	6889      	ldr	r1, [r1, #8]
 8007f6a:	f7ff ff9f 	bl	8007eac <TIM_ETR_SetConfig>
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f6e:	2377      	movs	r3, #119	@ 0x77
      tmpsmcr = htim->Instance->SMCR;
 8007f70:	68a2      	ldr	r2, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f72:	4313      	orrs	r3, r2
      htim->Instance->SMCR = tmpsmcr;
 8007f74:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007f76:	2000      	movs	r0, #0
 8007f78:	e7c5      	b.n	8007f06 <HAL_TIM_ConfigClockSource+0x42>
      TIM_ETR_SetConfig(htim->Instance,
 8007f7a:	68cb      	ldr	r3, [r1, #12]
 8007f7c:	684a      	ldr	r2, [r1, #4]
 8007f7e:	0020      	movs	r0, r4
 8007f80:	6889      	ldr	r1, [r1, #8]
 8007f82:	f7ff ff93 	bl	8007eac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f86:	2380      	movs	r3, #128	@ 0x80
 8007f88:	68a2      	ldr	r2, [r4, #8]
 8007f8a:	01db      	lsls	r3, r3, #7
 8007f8c:	e7f1      	b.n	8007f72 <HAL_TIM_ConfigClockSource+0xae>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f8e:	2710      	movs	r7, #16
                               sClockSourceConfig->ClockPolarity,
 8007f90:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8007f92:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 8007f94:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f96:	6a20      	ldr	r0, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f98:	0312      	lsls	r2, r2, #12
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f9a:	43b8      	bics	r0, r7
 8007f9c:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f9e:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007fa0:	4f13      	ldr	r7, [pc, #76]	@ (8007ff0 <HAL_TIM_ConfigClockSource+0x12c>)
  tmpccer |= (TIM_ICPolarity << 4U);
 8007fa2:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007fa4:	4038      	ands	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007fa6:	4302      	orrs	r2, r0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007fa8:	20a0      	movs	r0, #160	@ 0xa0
 8007faa:	4381      	bics	r1, r0
  tmpccer |= (TIM_ICPolarity << 4U);
 8007fac:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1 ;
 8007fae:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 8007fb0:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8007fb2:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007fb4:	4b0d      	ldr	r3, [pc, #52]	@ (8007fec <HAL_TIM_ConfigClockSource+0x128>)
 8007fb6:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007fb8:	2367      	movs	r3, #103	@ 0x67
 8007fba:	e7da      	b.n	8007f72 <HAL_TIM_ConfigClockSource+0xae>
                               sClockSourceConfig->ClockPolarity,
 8007fbc:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8007fbe:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8007fc0:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fc2:	6a27      	ldr	r7, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007fc4:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fc6:	4387      	bics	r7, r0
 8007fc8:	6227      	str	r7, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007fca:	27f0      	movs	r7, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8007fcc:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007fce:	43b8      	bics	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007fd0:	4303      	orrs	r3, r0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007fd2:	200a      	movs	r0, #10
 8007fd4:	4381      	bics	r1, r0
  tmpccer |= TIM_ICPolarity;
 8007fd6:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8007fd8:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8007fda:	6222      	str	r2, [r4, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007fdc:	4b03      	ldr	r3, [pc, #12]	@ (8007fec <HAL_TIM_ConfigClockSource+0x128>)
  tmpsmcr = TIMx->SMCR;
 8007fde:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007fe0:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007fe2:	2347      	movs	r3, #71	@ 0x47
 8007fe4:	e7c5      	b.n	8007f72 <HAL_TIM_ConfigClockSource+0xae>
 8007fe6:	46c0      	nop			@ (mov r8, r8)
 8007fe8:	ffce0088 	.word	0xffce0088
 8007fec:	ffcfff8f 	.word	0xffcfff8f
 8007ff0:	ffff0fff 	.word	0xffff0fff

08007ff4 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ff4:	231f      	movs	r3, #31
{
 8007ff6:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ff8:	2401      	movs	r4, #1
 8007ffa:	4019      	ands	r1, r3
 8007ffc:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ffe:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8008000:	6a03      	ldr	r3, [r0, #32]
 8008002:	43a3      	bics	r3, r4
 8008004:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008006:	6a03      	ldr	r3, [r0, #32]
 8008008:	431a      	orrs	r2, r3
 800800a:	6202      	str	r2, [r0, #32]
}
 800800c:	bd10      	pop	{r4, pc}
	...

08008010 <HAL_TIM_OC_Start>:
{
 8008010:	0002      	movs	r2, r0
 8008012:	b510      	push	{r4, lr}
 8008014:	2908      	cmp	r1, #8
 8008016:	d01c      	beq.n	8008052 <HAL_TIM_OC_Start+0x42>
 8008018:	d806      	bhi.n	8008028 <HAL_TIM_OC_Start+0x18>
 800801a:	2900      	cmp	r1, #0
 800801c:	d00b      	beq.n	8008036 <HAL_TIM_OC_Start+0x26>
 800801e:	2904      	cmp	r1, #4
 8008020:	d014      	beq.n	800804c <HAL_TIM_OC_Start+0x3c>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008022:	0013      	movs	r3, r2
 8008024:	3343      	adds	r3, #67	@ 0x43
 8008026:	e008      	b.n	800803a <HAL_TIM_OC_Start+0x2a>
 8008028:	290c      	cmp	r1, #12
 800802a:	d015      	beq.n	8008058 <HAL_TIM_OC_Start+0x48>
 800802c:	2910      	cmp	r1, #16
 800802e:	d1f8      	bne.n	8008022 <HAL_TIM_OC_Start+0x12>
 8008030:	0003      	movs	r3, r0
 8008032:	3342      	adds	r3, #66	@ 0x42
 8008034:	e001      	b.n	800803a <HAL_TIM_OC_Start+0x2a>
 8008036:	0003      	movs	r3, r0
 8008038:	333e      	adds	r3, #62	@ 0x3e
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	3b01      	subs	r3, #1
 800803e:	1e58      	subs	r0, r3, #1
 8008040:	4183      	sbcs	r3, r0
 8008042:	b2db      	uxtb	r3, r3
    return HAL_ERROR;
 8008044:	2001      	movs	r0, #1
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008046:	2b00      	cmp	r3, #0
 8008048:	d009      	beq.n	800805e <HAL_TIM_OC_Start+0x4e>
}
 800804a:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800804c:	0003      	movs	r3, r0
 800804e:	333f      	adds	r3, #63	@ 0x3f
 8008050:	e7f3      	b.n	800803a <HAL_TIM_OC_Start+0x2a>
 8008052:	0003      	movs	r3, r0
 8008054:	3340      	adds	r3, #64	@ 0x40
 8008056:	e7f0      	b.n	800803a <HAL_TIM_OC_Start+0x2a>
 8008058:	0003      	movs	r3, r0
 800805a:	3341      	adds	r3, #65	@ 0x41
 800805c:	e7ed      	b.n	800803a <HAL_TIM_OC_Start+0x2a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800805e:	2302      	movs	r3, #2
 8008060:	2908      	cmp	r1, #8
 8008062:	d030      	beq.n	80080c6 <HAL_TIM_OC_Start+0xb6>
 8008064:	d806      	bhi.n	8008074 <HAL_TIM_OC_Start+0x64>
 8008066:	2900      	cmp	r1, #0
 8008068:	d00b      	beq.n	8008082 <HAL_TIM_OC_Start+0x72>
 800806a:	2904      	cmp	r1, #4
 800806c:	d028      	beq.n	80080c0 <HAL_TIM_OC_Start+0xb0>
 800806e:	0010      	movs	r0, r2
 8008070:	3043      	adds	r0, #67	@ 0x43
 8008072:	e008      	b.n	8008086 <HAL_TIM_OC_Start+0x76>
 8008074:	290c      	cmp	r1, #12
 8008076:	d029      	beq.n	80080cc <HAL_TIM_OC_Start+0xbc>
 8008078:	2910      	cmp	r1, #16
 800807a:	d1f8      	bne.n	800806e <HAL_TIM_OC_Start+0x5e>
 800807c:	0010      	movs	r0, r2
 800807e:	3042      	adds	r0, #66	@ 0x42
 8008080:	e001      	b.n	8008086 <HAL_TIM_OC_Start+0x76>
 8008082:	0010      	movs	r0, r2
 8008084:	303e      	adds	r0, #62	@ 0x3e
 8008086:	7003      	strb	r3, [r0, #0]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008088:	6814      	ldr	r4, [r2, #0]
 800808a:	2201      	movs	r2, #1
 800808c:	0020      	movs	r0, r4
 800808e:	f7ff ffb1 	bl	8007ff4 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008092:	4a16      	ldr	r2, [pc, #88]	@ (80080ec <HAL_TIM_OC_Start+0xdc>)
 8008094:	4294      	cmp	r4, r2
 8008096:	d005      	beq.n	80080a4 <HAL_TIM_OC_Start+0x94>
 8008098:	4b15      	ldr	r3, [pc, #84]	@ (80080f0 <HAL_TIM_OC_Start+0xe0>)
 800809a:	429c      	cmp	r4, r3
 800809c:	d002      	beq.n	80080a4 <HAL_TIM_OC_Start+0x94>
 800809e:	4b15      	ldr	r3, [pc, #84]	@ (80080f4 <HAL_TIM_OC_Start+0xe4>)
 80080a0:	429c      	cmp	r4, r3
 80080a2:	d116      	bne.n	80080d2 <HAL_TIM_OC_Start+0xc2>
    __HAL_TIM_MOE_ENABLE(htim);
 80080a4:	2380      	movs	r3, #128	@ 0x80
 80080a6:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80080a8:	021b      	lsls	r3, r3, #8
 80080aa:	430b      	orrs	r3, r1
 80080ac:	6463      	str	r3, [r4, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080ae:	4294      	cmp	r4, r2
 80080b0:	d112      	bne.n	80080d8 <HAL_TIM_OC_Start+0xc8>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080b2:	68a3      	ldr	r3, [r4, #8]
 80080b4:	4a10      	ldr	r2, [pc, #64]	@ (80080f8 <HAL_TIM_OC_Start+0xe8>)
 80080b6:	4013      	ands	r3, r2
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080b8:	2b06      	cmp	r3, #6
 80080ba:	d112      	bne.n	80080e2 <HAL_TIM_OC_Start+0xd2>
  return HAL_OK;
 80080bc:	2000      	movs	r0, #0
 80080be:	e7c4      	b.n	800804a <HAL_TIM_OC_Start+0x3a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80080c0:	0010      	movs	r0, r2
 80080c2:	303f      	adds	r0, #63	@ 0x3f
 80080c4:	e7df      	b.n	8008086 <HAL_TIM_OC_Start+0x76>
 80080c6:	0010      	movs	r0, r2
 80080c8:	3040      	adds	r0, #64	@ 0x40
 80080ca:	e7dc      	b.n	8008086 <HAL_TIM_OC_Start+0x76>
 80080cc:	0010      	movs	r0, r2
 80080ce:	3041      	adds	r0, #65	@ 0x41
 80080d0:	e7d9      	b.n	8008086 <HAL_TIM_OC_Start+0x76>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080d2:	4b0a      	ldr	r3, [pc, #40]	@ (80080fc <HAL_TIM_OC_Start+0xec>)
 80080d4:	429c      	cmp	r4, r3
 80080d6:	d0ec      	beq.n	80080b2 <HAL_TIM_OC_Start+0xa2>
      __HAL_TIM_ENABLE(htim);
 80080d8:	2301      	movs	r3, #1
 80080da:	6822      	ldr	r2, [r4, #0]
 80080dc:	4313      	orrs	r3, r2
 80080de:	6023      	str	r3, [r4, #0]
 80080e0:	e7ec      	b.n	80080bc <HAL_TIM_OC_Start+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080e2:	2280      	movs	r2, #128	@ 0x80
 80080e4:	0252      	lsls	r2, r2, #9
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d1f6      	bne.n	80080d8 <HAL_TIM_OC_Start+0xc8>
 80080ea:	e7e7      	b.n	80080bc <HAL_TIM_OC_Start+0xac>
 80080ec:	40012c00 	.word	0x40012c00
 80080f0:	40014400 	.word	0x40014400
 80080f4:	40014800 	.word	0x40014800
 80080f8:	00010007 	.word	0x00010007
 80080fc:	40000400 	.word	0x40000400

08008100 <HAL_TIM_PWM_Start>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 8008100:	b510      	push	{r4, lr}
 8008102:	f7ff ff85 	bl	8008010 <HAL_TIM_OC_Start>
 8008106:	bd10      	pop	{r4, pc}

08008108 <HAL_TIM_OC_Start_IT>:
{
 8008108:	b510      	push	{r4, lr}
 800810a:	2908      	cmp	r1, #8
 800810c:	d01c      	beq.n	8008148 <HAL_TIM_OC_Start_IT+0x40>
 800810e:	d806      	bhi.n	800811e <HAL_TIM_OC_Start_IT+0x16>
 8008110:	2900      	cmp	r1, #0
 8008112:	d00b      	beq.n	800812c <HAL_TIM_OC_Start_IT+0x24>
 8008114:	2904      	cmp	r1, #4
 8008116:	d014      	beq.n	8008142 <HAL_TIM_OC_Start_IT+0x3a>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008118:	0003      	movs	r3, r0
 800811a:	3343      	adds	r3, #67	@ 0x43
 800811c:	e008      	b.n	8008130 <HAL_TIM_OC_Start_IT+0x28>
 800811e:	290c      	cmp	r1, #12
 8008120:	d015      	beq.n	800814e <HAL_TIM_OC_Start_IT+0x46>
 8008122:	2910      	cmp	r1, #16
 8008124:	d1f8      	bne.n	8008118 <HAL_TIM_OC_Start_IT+0x10>
 8008126:	0003      	movs	r3, r0
 8008128:	3342      	adds	r3, #66	@ 0x42
 800812a:	e001      	b.n	8008130 <HAL_TIM_OC_Start_IT+0x28>
 800812c:	0003      	movs	r3, r0
 800812e:	333e      	adds	r3, #62	@ 0x3e
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	3b01      	subs	r3, #1
 8008134:	1e5a      	subs	r2, r3, #1
 8008136:	4193      	sbcs	r3, r2
 8008138:	b2db      	uxtb	r3, r3
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00a      	beq.n	8008154 <HAL_TIM_OC_Start_IT+0x4c>
    return HAL_ERROR;
 800813e:	2001      	movs	r0, #1
 8008140:	e03b      	b.n	80081ba <HAL_TIM_OC_Start_IT+0xb2>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008142:	0003      	movs	r3, r0
 8008144:	333f      	adds	r3, #63	@ 0x3f
 8008146:	e7f3      	b.n	8008130 <HAL_TIM_OC_Start_IT+0x28>
 8008148:	0003      	movs	r3, r0
 800814a:	3340      	adds	r3, #64	@ 0x40
 800814c:	e7f0      	b.n	8008130 <HAL_TIM_OC_Start_IT+0x28>
 800814e:	0003      	movs	r3, r0
 8008150:	3341      	adds	r3, #65	@ 0x41
 8008152:	e7ed      	b.n	8008130 <HAL_TIM_OC_Start_IT+0x28>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008154:	2302      	movs	r3, #2
 8008156:	2908      	cmp	r1, #8
 8008158:	d038      	beq.n	80081cc <HAL_TIM_OC_Start_IT+0xc4>
 800815a:	d805      	bhi.n	8008168 <HAL_TIM_OC_Start_IT+0x60>
 800815c:	2900      	cmp	r1, #0
 800815e:	d00a      	beq.n	8008176 <HAL_TIM_OC_Start_IT+0x6e>
 8008160:	2904      	cmp	r1, #4
 8008162:	d02b      	beq.n	80081bc <HAL_TIM_OC_Start_IT+0xb4>
 8008164:	3043      	adds	r0, #67	@ 0x43
 8008166:	e004      	b.n	8008172 <HAL_TIM_OC_Start_IT+0x6a>
 8008168:	290c      	cmp	r1, #12
 800816a:	d032      	beq.n	80081d2 <HAL_TIM_OC_Start_IT+0xca>
 800816c:	2910      	cmp	r1, #16
 800816e:	d1f9      	bne.n	8008164 <HAL_TIM_OC_Start_IT+0x5c>
 8008170:	3042      	adds	r0, #66	@ 0x42
 8008172:	7003      	strb	r3, [r0, #0]
  switch (Channel)
 8008174:	e7e3      	b.n	800813e <HAL_TIM_OC_Start_IT+0x36>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008176:	0002      	movs	r2, r0
 8008178:	323e      	adds	r2, #62	@ 0x3e
 800817a:	7013      	strb	r3, [r2, #0]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800817c:	6804      	ldr	r4, [r0, #0]
 800817e:	68e2      	ldr	r2, [r4, #12]
 8008180:	4313      	orrs	r3, r2
 8008182:	60e3      	str	r3, [r4, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008184:	6804      	ldr	r4, [r0, #0]
 8008186:	2201      	movs	r2, #1
 8008188:	0020      	movs	r0, r4
 800818a:	f7ff ff33 	bl	8007ff4 <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800818e:	4a1b      	ldr	r2, [pc, #108]	@ (80081fc <HAL_TIM_OC_Start_IT+0xf4>)
 8008190:	4294      	cmp	r4, r2
 8008192:	d005      	beq.n	80081a0 <HAL_TIM_OC_Start_IT+0x98>
 8008194:	4b1a      	ldr	r3, [pc, #104]	@ (8008200 <HAL_TIM_OC_Start_IT+0xf8>)
 8008196:	429c      	cmp	r4, r3
 8008198:	d002      	beq.n	80081a0 <HAL_TIM_OC_Start_IT+0x98>
 800819a:	4b1a      	ldr	r3, [pc, #104]	@ (8008204 <HAL_TIM_OC_Start_IT+0xfc>)
 800819c:	429c      	cmp	r4, r3
 800819e:	d120      	bne.n	80081e2 <HAL_TIM_OC_Start_IT+0xda>
      __HAL_TIM_MOE_ENABLE(htim);
 80081a0:	2380      	movs	r3, #128	@ 0x80
 80081a2:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80081a4:	021b      	lsls	r3, r3, #8
 80081a6:	430b      	orrs	r3, r1
 80081a8:	6463      	str	r3, [r4, #68]	@ 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081aa:	4294      	cmp	r4, r2
 80081ac:	d11c      	bne.n	80081e8 <HAL_TIM_OC_Start_IT+0xe0>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081ae:	68a3      	ldr	r3, [r4, #8]
 80081b0:	4a15      	ldr	r2, [pc, #84]	@ (8008208 <HAL_TIM_OC_Start_IT+0x100>)
 80081b2:	4013      	ands	r3, r2
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081b4:	2b06      	cmp	r3, #6
 80081b6:	d11c      	bne.n	80081f2 <HAL_TIM_OC_Start_IT+0xea>
    return HAL_ERROR;
 80081b8:	2000      	movs	r0, #0
}
 80081ba:	bd10      	pop	{r4, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80081bc:	0002      	movs	r2, r0
 80081be:	323f      	adds	r2, #63	@ 0x3f
 80081c0:	7013      	strb	r3, [r2, #0]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80081c2:	6802      	ldr	r2, [r0, #0]
 80081c4:	68d3      	ldr	r3, [r2, #12]
 80081c6:	430b      	orrs	r3, r1
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80081c8:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 80081ca:	e7db      	b.n	8008184 <HAL_TIM_OC_Start_IT+0x7c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80081cc:	0002      	movs	r2, r0
 80081ce:	3240      	adds	r2, #64	@ 0x40
 80081d0:	e7f6      	b.n	80081c0 <HAL_TIM_OC_Start_IT+0xb8>
 80081d2:	0002      	movs	r2, r0
 80081d4:	3241      	adds	r2, #65	@ 0x41
 80081d6:	7013      	strb	r3, [r2, #0]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80081d8:	2310      	movs	r3, #16
 80081da:	6802      	ldr	r2, [r0, #0]
 80081dc:	68d4      	ldr	r4, [r2, #12]
 80081de:	4323      	orrs	r3, r4
 80081e0:	e7f2      	b.n	80081c8 <HAL_TIM_OC_Start_IT+0xc0>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081e2:	4b0a      	ldr	r3, [pc, #40]	@ (800820c <HAL_TIM_OC_Start_IT+0x104>)
 80081e4:	429c      	cmp	r4, r3
 80081e6:	d0e2      	beq.n	80081ae <HAL_TIM_OC_Start_IT+0xa6>
        __HAL_TIM_ENABLE(htim);
 80081e8:	2301      	movs	r3, #1
 80081ea:	6822      	ldr	r2, [r4, #0]
 80081ec:	4313      	orrs	r3, r2
 80081ee:	6023      	str	r3, [r4, #0]
 80081f0:	e7e2      	b.n	80081b8 <HAL_TIM_OC_Start_IT+0xb0>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081f2:	2280      	movs	r2, #128	@ 0x80
 80081f4:	0252      	lsls	r2, r2, #9
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d1f6      	bne.n	80081e8 <HAL_TIM_OC_Start_IT+0xe0>
 80081fa:	e7dd      	b.n	80081b8 <HAL_TIM_OC_Start_IT+0xb0>
 80081fc:	40012c00 	.word	0x40012c00
 8008200:	40014400 	.word	0x40014400
 8008204:	40014800 	.word	0x40014800
 8008208:	00010007 	.word	0x00010007
 800820c:	40000400 	.word	0x40000400

08008210 <HAL_TIM_PWM_Start_IT>:
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
 8008210:	b510      	push	{r4, lr}
 8008212:	f7ff ff79 	bl	8008108 <HAL_TIM_OC_Start_IT>
 8008216:	bd10      	pop	{r4, pc}

08008218 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008218:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800821a:	0004      	movs	r4, r0
 800821c:	2202      	movs	r2, #2
 800821e:	343c      	adds	r4, #60	@ 0x3c
 8008220:	7825      	ldrb	r5, [r4, #0]
{
 8008222:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8008224:	0010      	movs	r0, r2
 8008226:	2d01      	cmp	r5, #1
 8008228:	d01f      	beq.n	800826a <HAL_TIMEx_MasterConfigSynchronization+0x52>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800822a:	001d      	movs	r5, r3
 800822c:	353d      	adds	r5, #61	@ 0x3d
 800822e:	702a      	strb	r2, [r5, #0]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008230:	681a      	ldr	r2, [r3, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008232:	4e0e      	ldr	r6, [pc, #56]	@ (800826c <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  tmpcr2 = htim->Instance->CR2;
 8008234:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8008236:	6890      	ldr	r0, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008238:	42b2      	cmp	r2, r6
 800823a:	d103      	bne.n	8008244 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800823c:	4f0c      	ldr	r7, [pc, #48]	@ (8008270 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 800823e:	403b      	ands	r3, r7
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008240:	684f      	ldr	r7, [r1, #4]
 8008242:	433b      	orrs	r3, r7
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008244:	2770      	movs	r7, #112	@ 0x70
 8008246:	43bb      	bics	r3, r7
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008248:	680f      	ldr	r7, [r1, #0]
 800824a:	433b      	orrs	r3, r7

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800824c:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800824e:	42b2      	cmp	r2, r6
 8008250:	d002      	beq.n	8008258 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8008252:	4b08      	ldr	r3, [pc, #32]	@ (8008274 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
 8008254:	429a      	cmp	r2, r3
 8008256:	d104      	bne.n	8008262 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008258:	2380      	movs	r3, #128	@ 0x80
 800825a:	4398      	bics	r0, r3
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800825c:	688b      	ldr	r3, [r1, #8]
 800825e:	4318      	orrs	r0, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008260:	6090      	str	r0, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008262:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8008264:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8008266:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8008268:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 800826a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800826c:	40012c00 	.word	0x40012c00
 8008270:	ff0fffff 	.word	0xff0fffff
 8008274:	40000400 	.word	0x40000400

08008278 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008278:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800827a:	0004      	movs	r4, r0
 800827c:	343c      	adds	r4, #60	@ 0x3c
 800827e:	7823      	ldrb	r3, [r4, #0]
{
 8008280:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 8008282:	2002      	movs	r0, #2
 8008284:	2b01      	cmp	r3, #1
 8008286:	d039      	beq.n	80082fc <HAL_TIMEx_ConfigBreakDeadTime+0x84>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008288:	481d      	ldr	r0, [pc, #116]	@ (8008300 <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
 800828a:	68cb      	ldr	r3, [r1, #12]
 800828c:	4003      	ands	r3, r0
 800828e:	6888      	ldr	r0, [r1, #8]
 8008290:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008292:	481c      	ldr	r0, [pc, #112]	@ (8008304 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 8008294:	4003      	ands	r3, r0
 8008296:	6848      	ldr	r0, [r1, #4]
 8008298:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800829a:	481b      	ldr	r0, [pc, #108]	@ (8008308 <HAL_TIMEx_ConfigBreakDeadTime+0x90>)
 800829c:	4003      	ands	r3, r0
 800829e:	6808      	ldr	r0, [r1, #0]
 80082a0:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80082a2:	481a      	ldr	r0, [pc, #104]	@ (800830c <HAL_TIMEx_ConfigBreakDeadTime+0x94>)
 80082a4:	4003      	ands	r3, r0
 80082a6:	6908      	ldr	r0, [r1, #16]
 80082a8:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80082aa:	4819      	ldr	r0, [pc, #100]	@ (8008310 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 80082ac:	4003      	ands	r3, r0
 80082ae:	6948      	ldr	r0, [r1, #20]
 80082b0:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80082b2:	4818      	ldr	r0, [pc, #96]	@ (8008314 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 80082b4:	4003      	ands	r3, r0
 80082b6:	6b08      	ldr	r0, [r1, #48]	@ 0x30
 80082b8:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80082ba:	4817      	ldr	r0, [pc, #92]	@ (8008318 <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
 80082bc:	4003      	ands	r3, r0
 80082be:	6988      	ldr	r0, [r1, #24]
 80082c0:	0400      	lsls	r0, r0, #16
 80082c2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80082c4:	4815      	ldr	r0, [pc, #84]	@ (800831c <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80082c6:	4003      	ands	r3, r0
 80082c8:	69c8      	ldr	r0, [r1, #28]
 80082ca:	4303      	orrs	r3, r0

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80082cc:	6810      	ldr	r0, [r2, #0]
 80082ce:	4a14      	ldr	r2, [pc, #80]	@ (8008320 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80082d0:	4290      	cmp	r0, r2
 80082d2:	d110      	bne.n	80082f6 <HAL_TIMEx_ConfigBreakDeadTime+0x7e>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80082d4:	4a13      	ldr	r2, [pc, #76]	@ (8008324 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80082d6:	4013      	ands	r3, r2
 80082d8:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 80082da:	0512      	lsls	r2, r2, #20
 80082dc:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80082de:	4b12      	ldr	r3, [pc, #72]	@ (8008328 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80082e0:	401a      	ands	r2, r3
 80082e2:	6a0b      	ldr	r3, [r1, #32]
 80082e4:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80082e6:	4b11      	ldr	r3, [pc, #68]	@ (800832c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80082e8:	401a      	ands	r2, r3
 80082ea:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 80082ec:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80082ee:	4b10      	ldr	r3, [pc, #64]	@ (8008330 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80082f0:	401a      	ands	r2, r3
 80082f2:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 80082f4:	4313      	orrs	r3, r2
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80082f6:	6443      	str	r3, [r0, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80082f8:	2000      	movs	r0, #0
 80082fa:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 80082fc:	bd10      	pop	{r4, pc}
 80082fe:	46c0      	nop			@ (mov r8, r8)
 8008300:	fffffcff 	.word	0xfffffcff
 8008304:	fffffbff 	.word	0xfffffbff
 8008308:	fffff7ff 	.word	0xfffff7ff
 800830c:	ffffefff 	.word	0xffffefff
 8008310:	ffffdfff 	.word	0xffffdfff
 8008314:	ffffbfff 	.word	0xffffbfff
 8008318:	fff0ffff 	.word	0xfff0ffff
 800831c:	efffffff 	.word	0xefffffff
 8008320:	40012c00 	.word	0x40012c00
 8008324:	ff0fffff 	.word	0xff0fffff
 8008328:	feffffff 	.word	0xfeffffff
 800832c:	fdffffff 	.word	0xfdffffff
 8008330:	dfffffff 	.word	0xdfffffff

08008334 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8008334:	4770      	bx	lr

08008336 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8008336:	4770      	bx	lr

08008338 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8008338:	4770      	bx	lr
	...

0800833c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800833c:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800833e:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008342:	2201      	movs	r2, #1
 8008344:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008348:	6801      	ldr	r1, [r0, #0]
 800834a:	4d13      	ldr	r5, [pc, #76]	@ (8008398 <UART_EndRxTransfer+0x5c>)
 800834c:	680b      	ldr	r3, [r1, #0]
 800834e:	402b      	ands	r3, r5
 8008350:	600b      	str	r3, [r1, #0]
 8008352:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008356:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800835a:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800835e:	6802      	ldr	r2, [r0, #0]
 8008360:	4c0e      	ldr	r4, [pc, #56]	@ (800839c <UART_EndRxTransfer+0x60>)
 8008362:	6893      	ldr	r3, [r2, #8]
 8008364:	4023      	ands	r3, r4
 8008366:	6093      	str	r3, [r2, #8]
 8008368:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800836c:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800836e:	2b01      	cmp	r3, #1
 8008370:	d10a      	bne.n	8008388 <UART_EndRxTransfer+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008372:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008376:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800837a:	2410      	movs	r4, #16
 800837c:	6802      	ldr	r2, [r0, #0]
 800837e:	6813      	ldr	r3, [r2, #0]
 8008380:	43a3      	bics	r3, r4
 8008382:	6013      	str	r3, [r2, #0]
 8008384:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008388:	0003      	movs	r3, r0
 800838a:	2220      	movs	r2, #32
 800838c:	338c      	adds	r3, #140	@ 0x8c
 800838e:	601a      	str	r2, [r3, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008390:	2300      	movs	r3, #0
 8008392:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008394:	6743      	str	r3, [r0, #116]	@ 0x74
}
 8008396:	bd30      	pop	{r4, r5, pc}
 8008398:	fffffedf 	.word	0xfffffedf
 800839c:	effffffe 	.word	0xeffffffe

080083a0 <UART_SetConfig>:
{
 80083a0:	b570      	push	{r4, r5, r6, lr}
 80083a2:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80083a4:	6925      	ldr	r5, [r4, #16]
 80083a6:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80083a8:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80083aa:	4329      	orrs	r1, r5
 80083ac:	6965      	ldr	r5, [r4, #20]
 80083ae:	69c2      	ldr	r2, [r0, #28]
 80083b0:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80083b2:	6818      	ldr	r0, [r3, #0]
 80083b4:	4d49      	ldr	r5, [pc, #292]	@ (80084dc <UART_SetConfig+0x13c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80083b6:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80083b8:	4028      	ands	r0, r5
 80083ba:	4301      	orrs	r1, r0
 80083bc:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80083be:	6859      	ldr	r1, [r3, #4]
 80083c0:	4847      	ldr	r0, [pc, #284]	@ (80084e0 <UART_SetConfig+0x140>)
    tmpreg |= huart->Init.OneBitSampling;
 80083c2:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80083c4:	4001      	ands	r1, r0
 80083c6:	68e0      	ldr	r0, [r4, #12]
 80083c8:	4301      	orrs	r1, r0
 80083ca:	6059      	str	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80083cc:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80083ce:	6898      	ldr	r0, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 80083d0:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80083d2:	4d44      	ldr	r5, [pc, #272]	@ (80084e4 <UART_SetConfig+0x144>)
 80083d4:	4028      	ands	r0, r5
 80083d6:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80083d8:	200f      	movs	r0, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80083da:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80083dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80083de:	4381      	bics	r1, r0
 80083e0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80083e2:	4301      	orrs	r1, r0
 80083e4:	62d9      	str	r1, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80083e6:	4940      	ldr	r1, [pc, #256]	@ (80084e8 <UART_SetConfig+0x148>)
 80083e8:	428b      	cmp	r3, r1
 80083ea:	d115      	bne.n	8008418 <UART_SetConfig+0x78>
 80083ec:	2103      	movs	r1, #3
 80083ee:	4b3f      	ldr	r3, [pc, #252]	@ (80084ec <UART_SetConfig+0x14c>)
 80083f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083f2:	400b      	ands	r3, r1
 80083f4:	3b01      	subs	r3, #1
 80083f6:	2b02      	cmp	r3, #2
 80083f8:	d860      	bhi.n	80084bc <UART_SetConfig+0x11c>
 80083fa:	493d      	ldr	r1, [pc, #244]	@ (80084f0 <UART_SetConfig+0x150>)
 80083fc:	5cc8      	ldrb	r0, [r1, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083fe:	2380      	movs	r3, #128	@ 0x80
 8008400:	021b      	lsls	r3, r3, #8
 8008402:	429a      	cmp	r2, r3
 8008404:	d12f      	bne.n	8008466 <UART_SetConfig+0xc6>
    switch (clocksource)
 8008406:	2808      	cmp	r0, #8
 8008408:	d856      	bhi.n	80084b8 <UART_SetConfig+0x118>
 800840a:	f7f7 fe81 	bl	8000110 <__gnu_thumb1_case_uqi>
 800840e:	555b      	.short	0x555b
 8008410:	550b550e 	.word	0x550b550e
 8008414:	5555      	.short	0x5555
 8008416:	0f          	.byte	0x0f
 8008417:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008418:	4936      	ldr	r1, [pc, #216]	@ (80084f4 <UART_SetConfig+0x154>)
 800841a:	185b      	adds	r3, r3, r1
 800841c:	1e59      	subs	r1, r3, #1
 800841e:	418b      	sbcs	r3, r1
 8008420:	0118      	lsls	r0, r3, #4
 8008422:	e7ec      	b.n	80083fe <UART_SetConfig+0x5e>
        pclk = HAL_RCC_GetSysClockFreq();
 8008424:	f7ff f850 	bl	80074c8 <HAL_RCC_GetSysClockFreq>
 8008428:	e04e      	b.n	80084c8 <UART_SetConfig+0x128>
    switch (clocksource)
 800842a:	4a33      	ldr	r2, [pc, #204]	@ (80084f8 <UART_SetConfig+0x158>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800842c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800842e:	4b33      	ldr	r3, [pc, #204]	@ (80084fc <UART_SetConfig+0x15c>)
 8008430:	0049      	lsls	r1, r1, #1
 8008432:	0010      	movs	r0, r2
 8008434:	5ac9      	ldrh	r1, [r1, r3]
 8008436:	f7f7 fe89 	bl	800014c <__udivsi3>
 800843a:	6865      	ldr	r5, [r4, #4]
 800843c:	0040      	lsls	r0, r0, #1
 800843e:	086b      	lsrs	r3, r5, #1
 8008440:	18c0      	adds	r0, r0, r3
 8008442:	0029      	movs	r1, r5
 8008444:	f7f7 fe82 	bl	800014c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008448:	0002      	movs	r2, r0
 800844a:	4b2d      	ldr	r3, [pc, #180]	@ (8008500 <UART_SetConfig+0x160>)
 800844c:	3a10      	subs	r2, #16
 800844e:	429a      	cmp	r2, r3
 8008450:	d832      	bhi.n	80084b8 <UART_SetConfig+0x118>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008452:	230f      	movs	r3, #15
 8008454:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008456:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008458:	439a      	bics	r2, r3
 800845a:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800845c:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 800845e:	6822      	ldr	r2, [r4, #0]
 8008460:	4303      	orrs	r3, r0
 8008462:	60d3      	str	r3, [r2, #12]
 8008464:	e032      	b.n	80084cc <UART_SetConfig+0x12c>
    switch (clocksource)
 8008466:	2808      	cmp	r0, #8
 8008468:	d826      	bhi.n	80084b8 <UART_SetConfig+0x118>
 800846a:	f7f7 fe51 	bl	8000110 <__gnu_thumb1_case_uqi>
 800846e:	251a      	.short	0x251a
 8008470:	251f2505 	.word	0x251f2505
 8008474:	2525      	.short	0x2525
 8008476:	22          	.byte	0x22
 8008477:	00          	.byte	0x00
        pclk = (uint32_t) HSI_VALUE;
 8008478:	481f      	ldr	r0, [pc, #124]	@ (80084f8 <UART_SetConfig+0x158>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800847a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800847c:	4b1f      	ldr	r3, [pc, #124]	@ (80084fc <UART_SetConfig+0x15c>)
 800847e:	0052      	lsls	r2, r2, #1
 8008480:	5ad1      	ldrh	r1, [r2, r3]
 8008482:	f7f7 fe63 	bl	800014c <__udivsi3>
 8008486:	6865      	ldr	r5, [r4, #4]
 8008488:	086b      	lsrs	r3, r5, #1
 800848a:	18c0      	adds	r0, r0, r3
 800848c:	0029      	movs	r1, r5
 800848e:	f7f7 fe5d 	bl	800014c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008492:	0002      	movs	r2, r0
 8008494:	4b1a      	ldr	r3, [pc, #104]	@ (8008500 <UART_SetConfig+0x160>)
 8008496:	3a10      	subs	r2, #16
 8008498:	429a      	cmp	r2, r3
 800849a:	d80d      	bhi.n	80084b8 <UART_SetConfig+0x118>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800849c:	6823      	ldr	r3, [r4, #0]
 800849e:	60d8      	str	r0, [r3, #12]
 80084a0:	e014      	b.n	80084cc <UART_SetConfig+0x12c>
        pclk = HAL_RCC_GetPCLK1Freq();
 80084a2:	f7ff f8ff 	bl	80076a4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80084a6:	2800      	cmp	r0, #0
 80084a8:	d010      	beq.n	80084cc <UART_SetConfig+0x12c>
 80084aa:	e7e6      	b.n	800847a <UART_SetConfig+0xda>
        pclk = HAL_RCC_GetSysClockFreq();
 80084ac:	f7ff f80c 	bl	80074c8 <HAL_RCC_GetSysClockFreq>
        break;
 80084b0:	e7f9      	b.n	80084a6 <UART_SetConfig+0x106>
    switch (clocksource)
 80084b2:	2080      	movs	r0, #128	@ 0x80
 80084b4:	0200      	lsls	r0, r0, #8
 80084b6:	e7e0      	b.n	800847a <UART_SetConfig+0xda>
        ret = HAL_ERROR;
 80084b8:	2001      	movs	r0, #1
 80084ba:	e008      	b.n	80084ce <UART_SetConfig+0x12e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084bc:	2380      	movs	r3, #128	@ 0x80
 80084be:	021b      	lsls	r3, r3, #8
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d1ee      	bne.n	80084a2 <UART_SetConfig+0x102>
        pclk = HAL_RCC_GetPCLK1Freq();
 80084c4:	f7ff f8ee 	bl	80076a4 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 80084c8:	1e02      	subs	r2, r0, #0
    if (pclk != 0U)
 80084ca:	d1af      	bne.n	800842c <UART_SetConfig+0x8c>
        ret = HAL_ERROR;
 80084cc:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 80084ce:	4b0d      	ldr	r3, [pc, #52]	@ (8008504 <UART_SetConfig+0x164>)
 80084d0:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 80084d2:	2300      	movs	r3, #0
 80084d4:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 80084d6:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 80084d8:	bd70      	pop	{r4, r5, r6, pc}
 80084da:	46c0      	nop			@ (mov r8, r8)
 80084dc:	cfff69f3 	.word	0xcfff69f3
 80084e0:	ffffcfff 	.word	0xffffcfff
 80084e4:	11fff4ff 	.word	0x11fff4ff
 80084e8:	40013800 	.word	0x40013800
 80084ec:	40021000 	.word	0x40021000
 80084f0:	0800dc3c 	.word	0x0800dc3c
 80084f4:	bfffbc00 	.word	0xbfffbc00
 80084f8:	00f42400 	.word	0x00f42400
 80084fc:	0800dc40 	.word	0x0800dc40
 8008500:	0000ffef 	.word	0x0000ffef
 8008504:	00010001 	.word	0x00010001

08008508 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008508:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
 800850a:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800850c:	071a      	lsls	r2, r3, #28
 800850e:	d506      	bpl.n	800851e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008510:	6801      	ldr	r1, [r0, #0]
 8008512:	4c28      	ldr	r4, [pc, #160]	@ (80085b4 <UART_AdvFeatureConfig+0xac>)
 8008514:	684a      	ldr	r2, [r1, #4]
 8008516:	4022      	ands	r2, r4
 8008518:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800851a:	4322      	orrs	r2, r4
 800851c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800851e:	07da      	lsls	r2, r3, #31
 8008520:	d506      	bpl.n	8008530 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008522:	6801      	ldr	r1, [r0, #0]
 8008524:	4c24      	ldr	r4, [pc, #144]	@ (80085b8 <UART_AdvFeatureConfig+0xb0>)
 8008526:	684a      	ldr	r2, [r1, #4]
 8008528:	4022      	ands	r2, r4
 800852a:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 800852c:	4322      	orrs	r2, r4
 800852e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008530:	079a      	lsls	r2, r3, #30
 8008532:	d506      	bpl.n	8008542 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008534:	6801      	ldr	r1, [r0, #0]
 8008536:	4c21      	ldr	r4, [pc, #132]	@ (80085bc <UART_AdvFeatureConfig+0xb4>)
 8008538:	684a      	ldr	r2, [r1, #4]
 800853a:	4022      	ands	r2, r4
 800853c:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800853e:	4322      	orrs	r2, r4
 8008540:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008542:	075a      	lsls	r2, r3, #29
 8008544:	d506      	bpl.n	8008554 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008546:	6801      	ldr	r1, [r0, #0]
 8008548:	4c1d      	ldr	r4, [pc, #116]	@ (80085c0 <UART_AdvFeatureConfig+0xb8>)
 800854a:	684a      	ldr	r2, [r1, #4]
 800854c:	4022      	ands	r2, r4
 800854e:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8008550:	4322      	orrs	r2, r4
 8008552:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008554:	06da      	lsls	r2, r3, #27
 8008556:	d506      	bpl.n	8008566 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008558:	6801      	ldr	r1, [r0, #0]
 800855a:	4c1a      	ldr	r4, [pc, #104]	@ (80085c4 <UART_AdvFeatureConfig+0xbc>)
 800855c:	688a      	ldr	r2, [r1, #8]
 800855e:	4022      	ands	r2, r4
 8008560:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8008562:	4322      	orrs	r2, r4
 8008564:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008566:	069a      	lsls	r2, r3, #26
 8008568:	d506      	bpl.n	8008578 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800856a:	6801      	ldr	r1, [r0, #0]
 800856c:	4c16      	ldr	r4, [pc, #88]	@ (80085c8 <UART_AdvFeatureConfig+0xc0>)
 800856e:	688a      	ldr	r2, [r1, #8]
 8008570:	4022      	ands	r2, r4
 8008572:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8008574:	4322      	orrs	r2, r4
 8008576:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008578:	065a      	lsls	r2, r3, #25
 800857a:	d510      	bpl.n	800859e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800857c:	6801      	ldr	r1, [r0, #0]
 800857e:	4d13      	ldr	r5, [pc, #76]	@ (80085cc <UART_AdvFeatureConfig+0xc4>)
 8008580:	684a      	ldr	r2, [r1, #4]
 8008582:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8008584:	402a      	ands	r2, r5
 8008586:	4322      	orrs	r2, r4
 8008588:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800858a:	2280      	movs	r2, #128	@ 0x80
 800858c:	0352      	lsls	r2, r2, #13
 800858e:	4294      	cmp	r4, r2
 8008590:	d105      	bne.n	800859e <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008592:	684a      	ldr	r2, [r1, #4]
 8008594:	4c0e      	ldr	r4, [pc, #56]	@ (80085d0 <UART_AdvFeatureConfig+0xc8>)
 8008596:	4022      	ands	r2, r4
 8008598:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 800859a:	4322      	orrs	r2, r4
 800859c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800859e:	061b      	lsls	r3, r3, #24
 80085a0:	d506      	bpl.n	80085b0 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80085a2:	6802      	ldr	r2, [r0, #0]
 80085a4:	490b      	ldr	r1, [pc, #44]	@ (80085d4 <UART_AdvFeatureConfig+0xcc>)
 80085a6:	6853      	ldr	r3, [r2, #4]
 80085a8:	400b      	ands	r3, r1
 80085aa:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 80085ac:	430b      	orrs	r3, r1
 80085ae:	6053      	str	r3, [r2, #4]
}
 80085b0:	bd30      	pop	{r4, r5, pc}
 80085b2:	46c0      	nop			@ (mov r8, r8)
 80085b4:	ffff7fff 	.word	0xffff7fff
 80085b8:	fffdffff 	.word	0xfffdffff
 80085bc:	fffeffff 	.word	0xfffeffff
 80085c0:	fffbffff 	.word	0xfffbffff
 80085c4:	ffffefff 	.word	0xffffefff
 80085c8:	ffffdfff 	.word	0xffffdfff
 80085cc:	ffefffff 	.word	0xffefffff
 80085d0:	ff9fffff 	.word	0xff9fffff
 80085d4:	fff7ffff 	.word	0xfff7ffff

080085d8 <UART_WaitOnFlagUntilTimeout>:
{
 80085d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085da:	0004      	movs	r4, r0
 80085dc:	000d      	movs	r5, r1
 80085de:	0017      	movs	r7, r2
 80085e0:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085e2:	6822      	ldr	r2, [r4, #0]
 80085e4:	69d3      	ldr	r3, [r2, #28]
 80085e6:	402b      	ands	r3, r5
 80085e8:	1b5b      	subs	r3, r3, r5
 80085ea:	4259      	negs	r1, r3
 80085ec:	414b      	adcs	r3, r1
 80085ee:	42bb      	cmp	r3, r7
 80085f0:	d001      	beq.n	80085f6 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 80085f2:	2000      	movs	r0, #0
 80085f4:	e026      	b.n	8008644 <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 80085f6:	9b08      	ldr	r3, [sp, #32]
 80085f8:	3301      	adds	r3, #1
 80085fa:	d0f3      	beq.n	80085e4 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085fc:	f7fd fbd4 	bl	8005da8 <HAL_GetTick>
 8008600:	9b00      	ldr	r3, [sp, #0]
 8008602:	1ac0      	subs	r0, r0, r3
 8008604:	9b08      	ldr	r3, [sp, #32]
 8008606:	4298      	cmp	r0, r3
 8008608:	d82d      	bhi.n	8008666 <UART_WaitOnFlagUntilTimeout+0x8e>
 800860a:	2b00      	cmp	r3, #0
 800860c:	d02b      	beq.n	8008666 <UART_WaitOnFlagUntilTimeout+0x8e>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800860e:	6823      	ldr	r3, [r4, #0]
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	0752      	lsls	r2, r2, #29
 8008614:	d5e5      	bpl.n	80085e2 <UART_WaitOnFlagUntilTimeout+0xa>
 8008616:	002a      	movs	r2, r5
 8008618:	2140      	movs	r1, #64	@ 0x40
 800861a:	3a40      	subs	r2, #64	@ 0x40
 800861c:	438a      	bics	r2, r1
 800861e:	d0e0      	beq.n	80085e2 <UART_WaitOnFlagUntilTimeout+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008620:	69da      	ldr	r2, [r3, #28]
 8008622:	2608      	movs	r6, #8
 8008624:	0011      	movs	r1, r2
 8008626:	4031      	ands	r1, r6
 8008628:	9101      	str	r1, [sp, #4]
 800862a:	4232      	tst	r2, r6
 800862c:	d00b      	beq.n	8008646 <UART_WaitOnFlagUntilTimeout+0x6e>
          UART_EndRxTransfer(huart);
 800862e:	0020      	movs	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008630:	621e      	str	r6, [r3, #32]
          UART_EndRxTransfer(huart);
 8008632:	f7ff fe83 	bl	800833c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008636:	0023      	movs	r3, r4
 8008638:	3390      	adds	r3, #144	@ 0x90
 800863a:	601e      	str	r6, [r3, #0]
          __HAL_UNLOCK(huart);
 800863c:	2300      	movs	r3, #0
          return HAL_ERROR;
 800863e:	2001      	movs	r0, #1
          __HAL_UNLOCK(huart);
 8008640:	3484      	adds	r4, #132	@ 0x84
 8008642:	7023      	strb	r3, [r4, #0]
}
 8008644:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008646:	2280      	movs	r2, #128	@ 0x80
 8008648:	69d9      	ldr	r1, [r3, #28]
 800864a:	0112      	lsls	r2, r2, #4
 800864c:	4211      	tst	r1, r2
 800864e:	d0c8      	beq.n	80085e2 <UART_WaitOnFlagUntilTimeout+0xa>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008650:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8008652:	0020      	movs	r0, r4
 8008654:	f7ff fe72 	bl	800833c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008658:	0023      	movs	r3, r4
 800865a:	2220      	movs	r2, #32
 800865c:	3390      	adds	r3, #144	@ 0x90
 800865e:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(huart);
 8008660:	9b01      	ldr	r3, [sp, #4]
 8008662:	3484      	adds	r4, #132	@ 0x84
 8008664:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8008666:	2003      	movs	r0, #3
 8008668:	e7ec      	b.n	8008644 <UART_WaitOnFlagUntilTimeout+0x6c>

0800866a <HAL_UART_Transmit>:
{
 800866a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800866c:	0017      	movs	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800866e:	0002      	movs	r2, r0
{
 8008670:	b087      	sub	sp, #28
  if (huart->gState == HAL_UART_STATE_READY)
 8008672:	3288      	adds	r2, #136	@ 0x88
{
 8008674:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 8008676:	6813      	ldr	r3, [r2, #0]
{
 8008678:	0004      	movs	r4, r0
 800867a:	000d      	movs	r5, r1
    return HAL_BUSY;
 800867c:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 800867e:	2b20      	cmp	r3, #32
 8008680:	d139      	bne.n	80086f6 <HAL_UART_Transmit+0x8c>
      return  HAL_ERROR;
 8008682:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8008684:	2900      	cmp	r1, #0
 8008686:	d036      	beq.n	80086f6 <HAL_UART_Transmit+0x8c>
 8008688:	2f00      	cmp	r7, #0
 800868a:	d034      	beq.n	80086f6 <HAL_UART_Transmit+0x8c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800868c:	2380      	movs	r3, #128	@ 0x80
 800868e:	68a1      	ldr	r1, [r4, #8]
 8008690:	015b      	lsls	r3, r3, #5
 8008692:	4299      	cmp	r1, r3
 8008694:	d104      	bne.n	80086a0 <HAL_UART_Transmit+0x36>
 8008696:	6923      	ldr	r3, [r4, #16]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d101      	bne.n	80086a0 <HAL_UART_Transmit+0x36>
      if ((((uint32_t)pData) & 1U) != 0U)
 800869c:	4205      	tst	r5, r0
 800869e:	d12a      	bne.n	80086f6 <HAL_UART_Transmit+0x8c>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086a0:	0023      	movs	r3, r4
 80086a2:	2600      	movs	r6, #0
 80086a4:	3390      	adds	r3, #144	@ 0x90
 80086a6:	601e      	str	r6, [r3, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80086a8:	2321      	movs	r3, #33	@ 0x21
 80086aa:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80086ac:	f7fd fb7c 	bl	8005da8 <HAL_GetTick>
    huart->TxXferSize  = Size;
 80086b0:	0023      	movs	r3, r4
 80086b2:	3354      	adds	r3, #84	@ 0x54
 80086b4:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 80086b6:	3302      	adds	r3, #2
 80086b8:	9303      	str	r3, [sp, #12]
 80086ba:	801f      	strh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086bc:	2380      	movs	r3, #128	@ 0x80
 80086be:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 80086c0:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086c2:	015b      	lsls	r3, r3, #5
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d104      	bne.n	80086d2 <HAL_UART_Transmit+0x68>
 80086c8:	6923      	ldr	r3, [r4, #16]
 80086ca:	42b3      	cmp	r3, r6
 80086cc:	d101      	bne.n	80086d2 <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 80086ce:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 80086d0:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 80086d2:	0023      	movs	r3, r4
 80086d4:	3356      	adds	r3, #86	@ 0x56
 80086d6:	881b      	ldrh	r3, [r3, #0]
 80086d8:	b29a      	uxth	r2, r3
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d10d      	bne.n	80086fa <HAL_UART_Transmit+0x90>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80086de:	9b05      	ldr	r3, [sp, #20]
 80086e0:	0020      	movs	r0, r4
 80086e2:	9300      	str	r3, [sp, #0]
 80086e4:	2140      	movs	r1, #64	@ 0x40
 80086e6:	9b04      	ldr	r3, [sp, #16]
 80086e8:	f7ff ff76 	bl	80085d8 <UART_WaitOnFlagUntilTimeout>
 80086ec:	2320      	movs	r3, #32
 80086ee:	3488      	adds	r4, #136	@ 0x88
      huart->gState = HAL_UART_STATE_READY;
 80086f0:	6023      	str	r3, [r4, #0]
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80086f2:	2800      	cmp	r0, #0
 80086f4:	d10e      	bne.n	8008714 <HAL_UART_Transmit+0xaa>
}
 80086f6:	b007      	add	sp, #28
 80086f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80086fa:	9b05      	ldr	r3, [sp, #20]
 80086fc:	2200      	movs	r2, #0
 80086fe:	9300      	str	r3, [sp, #0]
 8008700:	2180      	movs	r1, #128	@ 0x80
 8008702:	0020      	movs	r0, r4
 8008704:	9b04      	ldr	r3, [sp, #16]
 8008706:	f7ff ff67 	bl	80085d8 <UART_WaitOnFlagUntilTimeout>
 800870a:	2800      	cmp	r0, #0
 800870c:	d004      	beq.n	8008718 <HAL_UART_Transmit+0xae>
        huart->gState = HAL_UART_STATE_READY;
 800870e:	2320      	movs	r3, #32
 8008710:	3488      	adds	r4, #136	@ 0x88
 8008712:	6023      	str	r3, [r4, #0]
        return HAL_TIMEOUT;
 8008714:	2003      	movs	r0, #3
 8008716:	e7ee      	b.n	80086f6 <HAL_UART_Transmit+0x8c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008718:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800871a:	2d00      	cmp	r5, #0
 800871c:	d10b      	bne.n	8008736 <HAL_UART_Transmit+0xcc>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800871e:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 8008720:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008722:	05db      	lsls	r3, r3, #23
 8008724:	0ddb      	lsrs	r3, r3, #23
 8008726:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8008728:	9b03      	ldr	r3, [sp, #12]
 800872a:	9a03      	ldr	r2, [sp, #12]
 800872c:	881b      	ldrh	r3, [r3, #0]
 800872e:	3b01      	subs	r3, #1
 8008730:	b29b      	uxth	r3, r3
 8008732:	8013      	strh	r3, [r2, #0]
 8008734:	e7cd      	b.n	80086d2 <HAL_UART_Transmit+0x68>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008736:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8008738:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800873a:	6293      	str	r3, [r2, #40]	@ 0x28
        pdata8bits++;
 800873c:	e7f4      	b.n	8008728 <HAL_UART_Transmit+0xbe>
	...

08008740 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008740:	0003      	movs	r3, r0
{
 8008742:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008744:	2600      	movs	r6, #0
{
 8008746:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008748:	3390      	adds	r3, #144	@ 0x90
 800874a:	601e      	str	r6, [r3, #0]
  tickstart = HAL_GetTick();
 800874c:	f7fd fb2c 	bl	8005da8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008750:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8008752:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	071b      	lsls	r3, r3, #28
 8008758:	d51f      	bpl.n	800879a <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800875a:	2180      	movs	r1, #128	@ 0x80
 800875c:	4b28      	ldr	r3, [pc, #160]	@ (8008800 <UART_CheckIdleState+0xc0>)
 800875e:	0032      	movs	r2, r6
 8008760:	9300      	str	r3, [sp, #0]
 8008762:	0389      	lsls	r1, r1, #14
 8008764:	0003      	movs	r3, r0
 8008766:	0020      	movs	r0, r4
 8008768:	f7ff ff36 	bl	80085d8 <UART_WaitOnFlagUntilTimeout>
 800876c:	42b0      	cmp	r0, r6
 800876e:	d014      	beq.n	800879a <UART_CheckIdleState+0x5a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008770:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008774:	2301      	movs	r3, #1
 8008776:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800877a:	2080      	movs	r0, #128	@ 0x80
 800877c:	6822      	ldr	r2, [r4, #0]
 800877e:	6813      	ldr	r3, [r2, #0]
 8008780:	4383      	bics	r3, r0
 8008782:	6013      	str	r3, [r2, #0]
 8008784:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8008788:	0023      	movs	r3, r4
 800878a:	2220      	movs	r2, #32
 800878c:	3388      	adds	r3, #136	@ 0x88
 800878e:	601a      	str	r2, [r3, #0]
      return HAL_TIMEOUT;
 8008790:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8008792:	2300      	movs	r3, #0
 8008794:	3484      	adds	r4, #132	@ 0x84
 8008796:	7023      	strb	r3, [r4, #0]
}
 8008798:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800879a:	0026      	movs	r6, r4
 800879c:	6823      	ldr	r3, [r4, #0]
 800879e:	368c      	adds	r6, #140	@ 0x8c
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	075b      	lsls	r3, r3, #29
 80087a4:	d523      	bpl.n	80087ee <UART_CheckIdleState+0xae>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087a6:	2180      	movs	r1, #128	@ 0x80
 80087a8:	4b15      	ldr	r3, [pc, #84]	@ (8008800 <UART_CheckIdleState+0xc0>)
 80087aa:	2200      	movs	r2, #0
 80087ac:	9300      	str	r3, [sp, #0]
 80087ae:	0020      	movs	r0, r4
 80087b0:	002b      	movs	r3, r5
 80087b2:	03c9      	lsls	r1, r1, #15
 80087b4:	f7ff ff10 	bl	80085d8 <UART_WaitOnFlagUntilTimeout>
 80087b8:	2800      	cmp	r0, #0
 80087ba:	d018      	beq.n	80087ee <UART_CheckIdleState+0xae>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087bc:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087c0:	2201      	movs	r2, #1
 80087c2:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80087c6:	6821      	ldr	r1, [r4, #0]
 80087c8:	4d0e      	ldr	r5, [pc, #56]	@ (8008804 <UART_CheckIdleState+0xc4>)
 80087ca:	680b      	ldr	r3, [r1, #0]
 80087cc:	402b      	ands	r3, r5
 80087ce:	600b      	str	r3, [r1, #0]
 80087d0:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087d4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087d8:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087dc:	6821      	ldr	r1, [r4, #0]
 80087de:	688b      	ldr	r3, [r1, #8]
 80087e0:	4393      	bics	r3, r2
 80087e2:	608b      	str	r3, [r1, #8]
 80087e4:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 80087e8:	2320      	movs	r3, #32
 80087ea:	6033      	str	r3, [r6, #0]
      return HAL_TIMEOUT;
 80087ec:	e7d0      	b.n	8008790 <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 80087ee:	0023      	movs	r3, r4
 80087f0:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087f2:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80087f4:	3388      	adds	r3, #136	@ 0x88
 80087f6:	601a      	str	r2, [r3, #0]
  huart->RxState = HAL_UART_STATE_READY;
 80087f8:	6032      	str	r2, [r6, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087fa:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087fc:	6720      	str	r0, [r4, #112]	@ 0x70
  return HAL_OK;
 80087fe:	e7c8      	b.n	8008792 <UART_CheckIdleState+0x52>
 8008800:	01ffffff 	.word	0x01ffffff
 8008804:	fffffedf 	.word	0xfffffedf

08008808 <HAL_UART_Init>:
{
 8008808:	b570      	push	{r4, r5, r6, lr}
 800880a:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 800880c:	d101      	bne.n	8008812 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 800880e:	2001      	movs	r0, #1
}
 8008810:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8008812:	0005      	movs	r5, r0
 8008814:	3588      	adds	r5, #136	@ 0x88
 8008816:	682b      	ldr	r3, [r5, #0]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d104      	bne.n	8008826 <HAL_UART_Init+0x1e>
    huart->Lock = HAL_UNLOCKED;
 800881c:	0002      	movs	r2, r0
 800881e:	3284      	adds	r2, #132	@ 0x84
 8008820:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8008822:	f7fd fa21 	bl	8005c68 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8008826:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8008828:	2101      	movs	r1, #1
 800882a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800882c:	602b      	str	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 800882e:	6813      	ldr	r3, [r2, #0]
 8008830:	438b      	bics	r3, r1
 8008832:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008834:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008836:	2b00      	cmp	r3, #0
 8008838:	d002      	beq.n	8008840 <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 800883a:	0020      	movs	r0, r4
 800883c:	f7ff fe64 	bl	8008508 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008840:	0020      	movs	r0, r4
 8008842:	f7ff fdad 	bl	80083a0 <UART_SetConfig>
 8008846:	2801      	cmp	r0, #1
 8008848:	d0e1      	beq.n	800880e <HAL_UART_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800884a:	6823      	ldr	r3, [r4, #0]
 800884c:	4907      	ldr	r1, [pc, #28]	@ (800886c <HAL_UART_Init+0x64>)
 800884e:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8008850:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008852:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008854:	212a      	movs	r1, #42	@ 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008856:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008858:	689a      	ldr	r2, [r3, #8]
 800885a:	438a      	bics	r2, r1
 800885c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800885e:	2201      	movs	r2, #1
 8008860:	6819      	ldr	r1, [r3, #0]
 8008862:	430a      	orrs	r2, r1
 8008864:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8008866:	f7ff ff6b 	bl	8008740 <UART_CheckIdleState>
 800886a:	e7d1      	b.n	8008810 <HAL_UART_Init+0x8>
 800886c:	ffffb7ff 	.word	0xffffb7ff

08008870 <__cvt>:
 8008870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008872:	001f      	movs	r7, r3
 8008874:	2300      	movs	r3, #0
 8008876:	0016      	movs	r6, r2
 8008878:	b08b      	sub	sp, #44	@ 0x2c
 800887a:	429f      	cmp	r7, r3
 800887c:	da04      	bge.n	8008888 <__cvt+0x18>
 800887e:	2180      	movs	r1, #128	@ 0x80
 8008880:	0609      	lsls	r1, r1, #24
 8008882:	187b      	adds	r3, r7, r1
 8008884:	001f      	movs	r7, r3
 8008886:	232d      	movs	r3, #45	@ 0x2d
 8008888:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800888a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800888c:	7013      	strb	r3, [r2, #0]
 800888e:	2320      	movs	r3, #32
 8008890:	2203      	movs	r2, #3
 8008892:	439d      	bics	r5, r3
 8008894:	2d46      	cmp	r5, #70	@ 0x46
 8008896:	d007      	beq.n	80088a8 <__cvt+0x38>
 8008898:	002b      	movs	r3, r5
 800889a:	3b45      	subs	r3, #69	@ 0x45
 800889c:	4259      	negs	r1, r3
 800889e:	414b      	adcs	r3, r1
 80088a0:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80088a2:	3a01      	subs	r2, #1
 80088a4:	18cb      	adds	r3, r1, r3
 80088a6:	9310      	str	r3, [sp, #64]	@ 0x40
 80088a8:	ab09      	add	r3, sp, #36	@ 0x24
 80088aa:	9304      	str	r3, [sp, #16]
 80088ac:	ab08      	add	r3, sp, #32
 80088ae:	9303      	str	r3, [sp, #12]
 80088b0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80088b2:	9200      	str	r2, [sp, #0]
 80088b4:	9302      	str	r3, [sp, #8]
 80088b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80088b8:	0032      	movs	r2, r6
 80088ba:	9301      	str	r3, [sp, #4]
 80088bc:	003b      	movs	r3, r7
 80088be:	f000 fe91 	bl	80095e4 <_dtoa_r>
 80088c2:	0004      	movs	r4, r0
 80088c4:	2d47      	cmp	r5, #71	@ 0x47
 80088c6:	d11b      	bne.n	8008900 <__cvt+0x90>
 80088c8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80088ca:	07db      	lsls	r3, r3, #31
 80088cc:	d511      	bpl.n	80088f2 <__cvt+0x82>
 80088ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80088d0:	18c3      	adds	r3, r0, r3
 80088d2:	9307      	str	r3, [sp, #28]
 80088d4:	2200      	movs	r2, #0
 80088d6:	2300      	movs	r3, #0
 80088d8:	0030      	movs	r0, r6
 80088da:	0039      	movs	r1, r7
 80088dc:	f7f7 fdbc 	bl	8000458 <__aeabi_dcmpeq>
 80088e0:	2800      	cmp	r0, #0
 80088e2:	d001      	beq.n	80088e8 <__cvt+0x78>
 80088e4:	9b07      	ldr	r3, [sp, #28]
 80088e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80088e8:	2230      	movs	r2, #48	@ 0x30
 80088ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088ec:	9907      	ldr	r1, [sp, #28]
 80088ee:	428b      	cmp	r3, r1
 80088f0:	d320      	bcc.n	8008934 <__cvt+0xc4>
 80088f2:	0020      	movs	r0, r4
 80088f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088f6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80088f8:	1b1b      	subs	r3, r3, r4
 80088fa:	6013      	str	r3, [r2, #0]
 80088fc:	b00b      	add	sp, #44	@ 0x2c
 80088fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008900:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008902:	18c3      	adds	r3, r0, r3
 8008904:	9307      	str	r3, [sp, #28]
 8008906:	2d46      	cmp	r5, #70	@ 0x46
 8008908:	d1e4      	bne.n	80088d4 <__cvt+0x64>
 800890a:	7803      	ldrb	r3, [r0, #0]
 800890c:	2b30      	cmp	r3, #48	@ 0x30
 800890e:	d10c      	bne.n	800892a <__cvt+0xba>
 8008910:	2200      	movs	r2, #0
 8008912:	2300      	movs	r3, #0
 8008914:	0030      	movs	r0, r6
 8008916:	0039      	movs	r1, r7
 8008918:	f7f7 fd9e 	bl	8000458 <__aeabi_dcmpeq>
 800891c:	2800      	cmp	r0, #0
 800891e:	d104      	bne.n	800892a <__cvt+0xba>
 8008920:	2301      	movs	r3, #1
 8008922:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8008924:	1a9b      	subs	r3, r3, r2
 8008926:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008928:	6013      	str	r3, [r2, #0]
 800892a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800892c:	9a07      	ldr	r2, [sp, #28]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	18d3      	adds	r3, r2, r3
 8008932:	e7ce      	b.n	80088d2 <__cvt+0x62>
 8008934:	1c59      	adds	r1, r3, #1
 8008936:	9109      	str	r1, [sp, #36]	@ 0x24
 8008938:	701a      	strb	r2, [r3, #0]
 800893a:	e7d6      	b.n	80088ea <__cvt+0x7a>

0800893c <__exponent>:
 800893c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800893e:	232b      	movs	r3, #43	@ 0x2b
 8008940:	b085      	sub	sp, #20
 8008942:	0005      	movs	r5, r0
 8008944:	1e0c      	subs	r4, r1, #0
 8008946:	7002      	strb	r2, [r0, #0]
 8008948:	da01      	bge.n	800894e <__exponent+0x12>
 800894a:	424c      	negs	r4, r1
 800894c:	3302      	adds	r3, #2
 800894e:	706b      	strb	r3, [r5, #1]
 8008950:	2c09      	cmp	r4, #9
 8008952:	dd2c      	ble.n	80089ae <__exponent+0x72>
 8008954:	ab02      	add	r3, sp, #8
 8008956:	1dde      	adds	r6, r3, #7
 8008958:	0020      	movs	r0, r4
 800895a:	210a      	movs	r1, #10
 800895c:	f7f7 fd66 	bl	800042c <__aeabi_idivmod>
 8008960:	0037      	movs	r7, r6
 8008962:	3130      	adds	r1, #48	@ 0x30
 8008964:	3e01      	subs	r6, #1
 8008966:	0020      	movs	r0, r4
 8008968:	7031      	strb	r1, [r6, #0]
 800896a:	210a      	movs	r1, #10
 800896c:	9401      	str	r4, [sp, #4]
 800896e:	f7f7 fc77 	bl	8000260 <__divsi3>
 8008972:	9b01      	ldr	r3, [sp, #4]
 8008974:	0004      	movs	r4, r0
 8008976:	2b63      	cmp	r3, #99	@ 0x63
 8008978:	dcee      	bgt.n	8008958 <__exponent+0x1c>
 800897a:	1eba      	subs	r2, r7, #2
 800897c:	1ca8      	adds	r0, r5, #2
 800897e:	0001      	movs	r1, r0
 8008980:	0013      	movs	r3, r2
 8008982:	3430      	adds	r4, #48	@ 0x30
 8008984:	7014      	strb	r4, [r2, #0]
 8008986:	ac02      	add	r4, sp, #8
 8008988:	3407      	adds	r4, #7
 800898a:	429c      	cmp	r4, r3
 800898c:	d80a      	bhi.n	80089a4 <__exponent+0x68>
 800898e:	2300      	movs	r3, #0
 8008990:	4294      	cmp	r4, r2
 8008992:	d303      	bcc.n	800899c <__exponent+0x60>
 8008994:	3309      	adds	r3, #9
 8008996:	aa02      	add	r2, sp, #8
 8008998:	189b      	adds	r3, r3, r2
 800899a:	1bdb      	subs	r3, r3, r7
 800899c:	18c0      	adds	r0, r0, r3
 800899e:	1b40      	subs	r0, r0, r5
 80089a0:	b005      	add	sp, #20
 80089a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089a4:	781c      	ldrb	r4, [r3, #0]
 80089a6:	3301      	adds	r3, #1
 80089a8:	700c      	strb	r4, [r1, #0]
 80089aa:	3101      	adds	r1, #1
 80089ac:	e7eb      	b.n	8008986 <__exponent+0x4a>
 80089ae:	2330      	movs	r3, #48	@ 0x30
 80089b0:	18e4      	adds	r4, r4, r3
 80089b2:	70ab      	strb	r3, [r5, #2]
 80089b4:	1d28      	adds	r0, r5, #4
 80089b6:	70ec      	strb	r4, [r5, #3]
 80089b8:	e7f1      	b.n	800899e <__exponent+0x62>
	...

080089bc <_printf_float>:
 80089bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089be:	b097      	sub	sp, #92	@ 0x5c
 80089c0:	000d      	movs	r5, r1
 80089c2:	920a      	str	r2, [sp, #40]	@ 0x28
 80089c4:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 80089c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80089c8:	9009      	str	r0, [sp, #36]	@ 0x24
 80089ca:	f000 fceb 	bl	80093a4 <_localeconv_r>
 80089ce:	6803      	ldr	r3, [r0, #0]
 80089d0:	0018      	movs	r0, r3
 80089d2:	930d      	str	r3, [sp, #52]	@ 0x34
 80089d4:	f7f7 fb94 	bl	8000100 <strlen>
 80089d8:	2300      	movs	r3, #0
 80089da:	900f      	str	r0, [sp, #60]	@ 0x3c
 80089dc:	9314      	str	r3, [sp, #80]	@ 0x50
 80089de:	7e2b      	ldrb	r3, [r5, #24]
 80089e0:	2207      	movs	r2, #7
 80089e2:	930c      	str	r3, [sp, #48]	@ 0x30
 80089e4:	682b      	ldr	r3, [r5, #0]
 80089e6:	930e      	str	r3, [sp, #56]	@ 0x38
 80089e8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80089ea:	6823      	ldr	r3, [r4, #0]
 80089ec:	05c9      	lsls	r1, r1, #23
 80089ee:	d545      	bpl.n	8008a7c <_printf_float+0xc0>
 80089f0:	189b      	adds	r3, r3, r2
 80089f2:	4393      	bics	r3, r2
 80089f4:	001a      	movs	r2, r3
 80089f6:	3208      	adds	r2, #8
 80089f8:	6022      	str	r2, [r4, #0]
 80089fa:	2201      	movs	r2, #1
 80089fc:	681e      	ldr	r6, [r3, #0]
 80089fe:	685f      	ldr	r7, [r3, #4]
 8008a00:	007b      	lsls	r3, r7, #1
 8008a02:	085b      	lsrs	r3, r3, #1
 8008a04:	9311      	str	r3, [sp, #68]	@ 0x44
 8008a06:	9610      	str	r6, [sp, #64]	@ 0x40
 8008a08:	64ae      	str	r6, [r5, #72]	@ 0x48
 8008a0a:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8008a0c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8008a0e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8008a10:	4ba7      	ldr	r3, [pc, #668]	@ (8008cb0 <_printf_float+0x2f4>)
 8008a12:	4252      	negs	r2, r2
 8008a14:	f7fa fce2 	bl	80033dc <__aeabi_dcmpun>
 8008a18:	2800      	cmp	r0, #0
 8008a1a:	d131      	bne.n	8008a80 <_printf_float+0xc4>
 8008a1c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8008a1e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8008a20:	2201      	movs	r2, #1
 8008a22:	4ba3      	ldr	r3, [pc, #652]	@ (8008cb0 <_printf_float+0x2f4>)
 8008a24:	4252      	negs	r2, r2
 8008a26:	f7f7 fd27 	bl	8000478 <__aeabi_dcmple>
 8008a2a:	2800      	cmp	r0, #0
 8008a2c:	d128      	bne.n	8008a80 <_printf_float+0xc4>
 8008a2e:	2200      	movs	r2, #0
 8008a30:	2300      	movs	r3, #0
 8008a32:	0030      	movs	r0, r6
 8008a34:	0039      	movs	r1, r7
 8008a36:	f7f7 fd15 	bl	8000464 <__aeabi_dcmplt>
 8008a3a:	2800      	cmp	r0, #0
 8008a3c:	d003      	beq.n	8008a46 <_printf_float+0x8a>
 8008a3e:	002b      	movs	r3, r5
 8008a40:	222d      	movs	r2, #45	@ 0x2d
 8008a42:	3343      	adds	r3, #67	@ 0x43
 8008a44:	701a      	strb	r2, [r3, #0]
 8008a46:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008a48:	4f9a      	ldr	r7, [pc, #616]	@ (8008cb4 <_printf_float+0x2f8>)
 8008a4a:	2b47      	cmp	r3, #71	@ 0x47
 8008a4c:	d800      	bhi.n	8008a50 <_printf_float+0x94>
 8008a4e:	4f9a      	ldr	r7, [pc, #616]	@ (8008cb8 <_printf_float+0x2fc>)
 8008a50:	2303      	movs	r3, #3
 8008a52:	2400      	movs	r4, #0
 8008a54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a56:	612b      	str	r3, [r5, #16]
 8008a58:	3301      	adds	r3, #1
 8008a5a:	439a      	bics	r2, r3
 8008a5c:	602a      	str	r2, [r5, #0]
 8008a5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a60:	0029      	movs	r1, r5
 8008a62:	9300      	str	r3, [sp, #0]
 8008a64:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a68:	aa15      	add	r2, sp, #84	@ 0x54
 8008a6a:	f000 f9e5 	bl	8008e38 <_printf_common>
 8008a6e:	3001      	adds	r0, #1
 8008a70:	d000      	beq.n	8008a74 <_printf_float+0xb8>
 8008a72:	e09e      	b.n	8008bb2 <_printf_float+0x1f6>
 8008a74:	2001      	movs	r0, #1
 8008a76:	4240      	negs	r0, r0
 8008a78:	b017      	add	sp, #92	@ 0x5c
 8008a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a7c:	3307      	adds	r3, #7
 8008a7e:	e7b8      	b.n	80089f2 <_printf_float+0x36>
 8008a80:	0032      	movs	r2, r6
 8008a82:	003b      	movs	r3, r7
 8008a84:	0030      	movs	r0, r6
 8008a86:	0039      	movs	r1, r7
 8008a88:	f7fa fca8 	bl	80033dc <__aeabi_dcmpun>
 8008a8c:	2800      	cmp	r0, #0
 8008a8e:	d00b      	beq.n	8008aa8 <_printf_float+0xec>
 8008a90:	2f00      	cmp	r7, #0
 8008a92:	da03      	bge.n	8008a9c <_printf_float+0xe0>
 8008a94:	002b      	movs	r3, r5
 8008a96:	222d      	movs	r2, #45	@ 0x2d
 8008a98:	3343      	adds	r3, #67	@ 0x43
 8008a9a:	701a      	strb	r2, [r3, #0]
 8008a9c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008a9e:	4f87      	ldr	r7, [pc, #540]	@ (8008cbc <_printf_float+0x300>)
 8008aa0:	2b47      	cmp	r3, #71	@ 0x47
 8008aa2:	d8d5      	bhi.n	8008a50 <_printf_float+0x94>
 8008aa4:	4f86      	ldr	r7, [pc, #536]	@ (8008cc0 <_printf_float+0x304>)
 8008aa6:	e7d3      	b.n	8008a50 <_printf_float+0x94>
 8008aa8:	2220      	movs	r2, #32
 8008aaa:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8008aac:	686b      	ldr	r3, [r5, #4]
 8008aae:	4394      	bics	r4, r2
 8008ab0:	1c5a      	adds	r2, r3, #1
 8008ab2:	d146      	bne.n	8008b42 <_printf_float+0x186>
 8008ab4:	3307      	adds	r3, #7
 8008ab6:	606b      	str	r3, [r5, #4]
 8008ab8:	2380      	movs	r3, #128	@ 0x80
 8008aba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008abc:	00db      	lsls	r3, r3, #3
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	602b      	str	r3, [r5, #0]
 8008ac4:	9206      	str	r2, [sp, #24]
 8008ac6:	aa14      	add	r2, sp, #80	@ 0x50
 8008ac8:	9205      	str	r2, [sp, #20]
 8008aca:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008acc:	a90a      	add	r1, sp, #40	@ 0x28
 8008ace:	9204      	str	r2, [sp, #16]
 8008ad0:	aa13      	add	r2, sp, #76	@ 0x4c
 8008ad2:	9203      	str	r2, [sp, #12]
 8008ad4:	2223      	movs	r2, #35	@ 0x23
 8008ad6:	1852      	adds	r2, r2, r1
 8008ad8:	9202      	str	r2, [sp, #8]
 8008ada:	9301      	str	r3, [sp, #4]
 8008adc:	686b      	ldr	r3, [r5, #4]
 8008ade:	0032      	movs	r2, r6
 8008ae0:	9300      	str	r3, [sp, #0]
 8008ae2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ae4:	003b      	movs	r3, r7
 8008ae6:	f7ff fec3 	bl	8008870 <__cvt>
 8008aea:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008aec:	0007      	movs	r7, r0
 8008aee:	2c47      	cmp	r4, #71	@ 0x47
 8008af0:	d12d      	bne.n	8008b4e <_printf_float+0x192>
 8008af2:	1cd3      	adds	r3, r2, #3
 8008af4:	db02      	blt.n	8008afc <_printf_float+0x140>
 8008af6:	686b      	ldr	r3, [r5, #4]
 8008af8:	429a      	cmp	r2, r3
 8008afa:	dd47      	ble.n	8008b8c <_printf_float+0x1d0>
 8008afc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008afe:	3b02      	subs	r3, #2
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	930c      	str	r3, [sp, #48]	@ 0x30
 8008b04:	0028      	movs	r0, r5
 8008b06:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008b08:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008b0a:	3901      	subs	r1, #1
 8008b0c:	3050      	adds	r0, #80	@ 0x50
 8008b0e:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008b10:	f7ff ff14 	bl	800893c <__exponent>
 8008b14:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008b16:	0004      	movs	r4, r0
 8008b18:	1813      	adds	r3, r2, r0
 8008b1a:	612b      	str	r3, [r5, #16]
 8008b1c:	2a01      	cmp	r2, #1
 8008b1e:	dc02      	bgt.n	8008b26 <_printf_float+0x16a>
 8008b20:	682a      	ldr	r2, [r5, #0]
 8008b22:	07d2      	lsls	r2, r2, #31
 8008b24:	d501      	bpl.n	8008b2a <_printf_float+0x16e>
 8008b26:	3301      	adds	r3, #1
 8008b28:	612b      	str	r3, [r5, #16]
 8008b2a:	2323      	movs	r3, #35	@ 0x23
 8008b2c:	aa0a      	add	r2, sp, #40	@ 0x28
 8008b2e:	189b      	adds	r3, r3, r2
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d100      	bne.n	8008b38 <_printf_float+0x17c>
 8008b36:	e792      	b.n	8008a5e <_printf_float+0xa2>
 8008b38:	002b      	movs	r3, r5
 8008b3a:	222d      	movs	r2, #45	@ 0x2d
 8008b3c:	3343      	adds	r3, #67	@ 0x43
 8008b3e:	701a      	strb	r2, [r3, #0]
 8008b40:	e78d      	b.n	8008a5e <_printf_float+0xa2>
 8008b42:	2c47      	cmp	r4, #71	@ 0x47
 8008b44:	d1b8      	bne.n	8008ab8 <_printf_float+0xfc>
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d1b6      	bne.n	8008ab8 <_printf_float+0xfc>
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	e7b3      	b.n	8008ab6 <_printf_float+0xfa>
 8008b4e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008b50:	2b65      	cmp	r3, #101	@ 0x65
 8008b52:	d9d7      	bls.n	8008b04 <_printf_float+0x148>
 8008b54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008b56:	2b66      	cmp	r3, #102	@ 0x66
 8008b58:	d11a      	bne.n	8008b90 <_printf_float+0x1d4>
 8008b5a:	686b      	ldr	r3, [r5, #4]
 8008b5c:	2a00      	cmp	r2, #0
 8008b5e:	dd09      	ble.n	8008b74 <_printf_float+0x1b8>
 8008b60:	612a      	str	r2, [r5, #16]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d102      	bne.n	8008b6c <_printf_float+0x1b0>
 8008b66:	6829      	ldr	r1, [r5, #0]
 8008b68:	07c9      	lsls	r1, r1, #31
 8008b6a:	d50b      	bpl.n	8008b84 <_printf_float+0x1c8>
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	189b      	adds	r3, r3, r2
 8008b70:	612b      	str	r3, [r5, #16]
 8008b72:	e007      	b.n	8008b84 <_printf_float+0x1c8>
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d103      	bne.n	8008b80 <_printf_float+0x1c4>
 8008b78:	2201      	movs	r2, #1
 8008b7a:	6829      	ldr	r1, [r5, #0]
 8008b7c:	4211      	tst	r1, r2
 8008b7e:	d000      	beq.n	8008b82 <_printf_float+0x1c6>
 8008b80:	1c9a      	adds	r2, r3, #2
 8008b82:	612a      	str	r2, [r5, #16]
 8008b84:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008b86:	2400      	movs	r4, #0
 8008b88:	65ab      	str	r3, [r5, #88]	@ 0x58
 8008b8a:	e7ce      	b.n	8008b2a <_printf_float+0x16e>
 8008b8c:	2367      	movs	r3, #103	@ 0x67
 8008b8e:	930c      	str	r3, [sp, #48]	@ 0x30
 8008b90:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008b92:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008b94:	4299      	cmp	r1, r3
 8008b96:	db06      	blt.n	8008ba6 <_printf_float+0x1ea>
 8008b98:	682b      	ldr	r3, [r5, #0]
 8008b9a:	6129      	str	r1, [r5, #16]
 8008b9c:	07db      	lsls	r3, r3, #31
 8008b9e:	d5f1      	bpl.n	8008b84 <_printf_float+0x1c8>
 8008ba0:	3101      	adds	r1, #1
 8008ba2:	6129      	str	r1, [r5, #16]
 8008ba4:	e7ee      	b.n	8008b84 <_printf_float+0x1c8>
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	2900      	cmp	r1, #0
 8008baa:	dce0      	bgt.n	8008b6e <_printf_float+0x1b2>
 8008bac:	1892      	adds	r2, r2, r2
 8008bae:	1a52      	subs	r2, r2, r1
 8008bb0:	e7dd      	b.n	8008b6e <_printf_float+0x1b2>
 8008bb2:	682a      	ldr	r2, [r5, #0]
 8008bb4:	0553      	lsls	r3, r2, #21
 8008bb6:	d408      	bmi.n	8008bca <_printf_float+0x20e>
 8008bb8:	692b      	ldr	r3, [r5, #16]
 8008bba:	003a      	movs	r2, r7
 8008bbc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008bbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008bc0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008bc2:	47a0      	blx	r4
 8008bc4:	3001      	adds	r0, #1
 8008bc6:	d129      	bne.n	8008c1c <_printf_float+0x260>
 8008bc8:	e754      	b.n	8008a74 <_printf_float+0xb8>
 8008bca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008bcc:	2b65      	cmp	r3, #101	@ 0x65
 8008bce:	d800      	bhi.n	8008bd2 <_printf_float+0x216>
 8008bd0:	e0db      	b.n	8008d8a <_printf_float+0x3ce>
 8008bd2:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8008bd4:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	2300      	movs	r3, #0
 8008bda:	f7f7 fc3d 	bl	8000458 <__aeabi_dcmpeq>
 8008bde:	2800      	cmp	r0, #0
 8008be0:	d033      	beq.n	8008c4a <_printf_float+0x28e>
 8008be2:	2301      	movs	r3, #1
 8008be4:	4a37      	ldr	r2, [pc, #220]	@ (8008cc4 <_printf_float+0x308>)
 8008be6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008be8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008bea:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008bec:	47a0      	blx	r4
 8008bee:	3001      	adds	r0, #1
 8008bf0:	d100      	bne.n	8008bf4 <_printf_float+0x238>
 8008bf2:	e73f      	b.n	8008a74 <_printf_float+0xb8>
 8008bf4:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8008bf6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008bf8:	42b3      	cmp	r3, r6
 8008bfa:	db02      	blt.n	8008c02 <_printf_float+0x246>
 8008bfc:	682b      	ldr	r3, [r5, #0]
 8008bfe:	07db      	lsls	r3, r3, #31
 8008c00:	d50c      	bpl.n	8008c1c <_printf_float+0x260>
 8008c02:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008c04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c06:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008c08:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008c0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c0c:	47a0      	blx	r4
 8008c0e:	2400      	movs	r4, #0
 8008c10:	3001      	adds	r0, #1
 8008c12:	d100      	bne.n	8008c16 <_printf_float+0x25a>
 8008c14:	e72e      	b.n	8008a74 <_printf_float+0xb8>
 8008c16:	1e73      	subs	r3, r6, #1
 8008c18:	42a3      	cmp	r3, r4
 8008c1a:	dc0a      	bgt.n	8008c32 <_printf_float+0x276>
 8008c1c:	682b      	ldr	r3, [r5, #0]
 8008c1e:	079b      	lsls	r3, r3, #30
 8008c20:	d500      	bpl.n	8008c24 <_printf_float+0x268>
 8008c22:	e106      	b.n	8008e32 <_printf_float+0x476>
 8008c24:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008c26:	68e8      	ldr	r0, [r5, #12]
 8008c28:	4298      	cmp	r0, r3
 8008c2a:	db00      	blt.n	8008c2e <_printf_float+0x272>
 8008c2c:	e724      	b.n	8008a78 <_printf_float+0xbc>
 8008c2e:	0018      	movs	r0, r3
 8008c30:	e722      	b.n	8008a78 <_printf_float+0xbc>
 8008c32:	002a      	movs	r2, r5
 8008c34:	2301      	movs	r3, #1
 8008c36:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008c38:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c3a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008c3c:	321a      	adds	r2, #26
 8008c3e:	47b8      	blx	r7
 8008c40:	3001      	adds	r0, #1
 8008c42:	d100      	bne.n	8008c46 <_printf_float+0x28a>
 8008c44:	e716      	b.n	8008a74 <_printf_float+0xb8>
 8008c46:	3401      	adds	r4, #1
 8008c48:	e7e5      	b.n	8008c16 <_printf_float+0x25a>
 8008c4a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	dc3b      	bgt.n	8008cc8 <_printf_float+0x30c>
 8008c50:	2301      	movs	r3, #1
 8008c52:	4a1c      	ldr	r2, [pc, #112]	@ (8008cc4 <_printf_float+0x308>)
 8008c54:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008c56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c58:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008c5a:	47a0      	blx	r4
 8008c5c:	3001      	adds	r0, #1
 8008c5e:	d100      	bne.n	8008c62 <_printf_float+0x2a6>
 8008c60:	e708      	b.n	8008a74 <_printf_float+0xb8>
 8008c62:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8008c64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008c66:	4333      	orrs	r3, r6
 8008c68:	d102      	bne.n	8008c70 <_printf_float+0x2b4>
 8008c6a:	682b      	ldr	r3, [r5, #0]
 8008c6c:	07db      	lsls	r3, r3, #31
 8008c6e:	d5d5      	bpl.n	8008c1c <_printf_float+0x260>
 8008c70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c72:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008c74:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008c76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c78:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008c7a:	47a0      	blx	r4
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	3001      	adds	r0, #1
 8008c80:	d100      	bne.n	8008c84 <_printf_float+0x2c8>
 8008c82:	e6f7      	b.n	8008a74 <_printf_float+0xb8>
 8008c84:	930c      	str	r3, [sp, #48]	@ 0x30
 8008c86:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008c88:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008c8a:	425b      	negs	r3, r3
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	dc01      	bgt.n	8008c94 <_printf_float+0x2d8>
 8008c90:	0033      	movs	r3, r6
 8008c92:	e792      	b.n	8008bba <_printf_float+0x1fe>
 8008c94:	002a      	movs	r2, r5
 8008c96:	2301      	movs	r3, #1
 8008c98:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008c9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c9c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008c9e:	321a      	adds	r2, #26
 8008ca0:	47a0      	blx	r4
 8008ca2:	3001      	adds	r0, #1
 8008ca4:	d100      	bne.n	8008ca8 <_printf_float+0x2ec>
 8008ca6:	e6e5      	b.n	8008a74 <_printf_float+0xb8>
 8008ca8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008caa:	3301      	adds	r3, #1
 8008cac:	e7ea      	b.n	8008c84 <_printf_float+0x2c8>
 8008cae:	46c0      	nop			@ (mov r8, r8)
 8008cb0:	7fefffff 	.word	0x7fefffff
 8008cb4:	0800da6f 	.word	0x0800da6f
 8008cb8:	0800da6b 	.word	0x0800da6b
 8008cbc:	0800da77 	.word	0x0800da77
 8008cc0:	0800da73 	.word	0x0800da73
 8008cc4:	0800da7b 	.word	0x0800da7b
 8008cc8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008cca:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8008ccc:	930c      	str	r3, [sp, #48]	@ 0x30
 8008cce:	429e      	cmp	r6, r3
 8008cd0:	dd00      	ble.n	8008cd4 <_printf_float+0x318>
 8008cd2:	001e      	movs	r6, r3
 8008cd4:	2e00      	cmp	r6, #0
 8008cd6:	dc31      	bgt.n	8008d3c <_printf_float+0x380>
 8008cd8:	43f3      	mvns	r3, r6
 8008cda:	2400      	movs	r4, #0
 8008cdc:	17db      	asrs	r3, r3, #31
 8008cde:	4033      	ands	r3, r6
 8008ce0:	930e      	str	r3, [sp, #56]	@ 0x38
 8008ce2:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8008ce4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ce6:	1af3      	subs	r3, r6, r3
 8008ce8:	42a3      	cmp	r3, r4
 8008cea:	dc30      	bgt.n	8008d4e <_printf_float+0x392>
 8008cec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008cee:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	dc38      	bgt.n	8008d66 <_printf_float+0x3aa>
 8008cf4:	682b      	ldr	r3, [r5, #0]
 8008cf6:	07db      	lsls	r3, r3, #31
 8008cf8:	d435      	bmi.n	8008d66 <_printf_float+0x3aa>
 8008cfa:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8008cfc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008cfe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008d00:	1b9b      	subs	r3, r3, r6
 8008d02:	1b14      	subs	r4, r2, r4
 8008d04:	429c      	cmp	r4, r3
 8008d06:	dd00      	ble.n	8008d0a <_printf_float+0x34e>
 8008d08:	001c      	movs	r4, r3
 8008d0a:	2c00      	cmp	r4, #0
 8008d0c:	dc34      	bgt.n	8008d78 <_printf_float+0x3bc>
 8008d0e:	43e3      	mvns	r3, r4
 8008d10:	2600      	movs	r6, #0
 8008d12:	17db      	asrs	r3, r3, #31
 8008d14:	401c      	ands	r4, r3
 8008d16:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008d18:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008d1a:	1ad3      	subs	r3, r2, r3
 8008d1c:	1b1b      	subs	r3, r3, r4
 8008d1e:	42b3      	cmp	r3, r6
 8008d20:	dc00      	bgt.n	8008d24 <_printf_float+0x368>
 8008d22:	e77b      	b.n	8008c1c <_printf_float+0x260>
 8008d24:	002a      	movs	r2, r5
 8008d26:	2301      	movs	r3, #1
 8008d28:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008d2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008d2c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008d2e:	321a      	adds	r2, #26
 8008d30:	47b8      	blx	r7
 8008d32:	3001      	adds	r0, #1
 8008d34:	d100      	bne.n	8008d38 <_printf_float+0x37c>
 8008d36:	e69d      	b.n	8008a74 <_printf_float+0xb8>
 8008d38:	3601      	adds	r6, #1
 8008d3a:	e7ec      	b.n	8008d16 <_printf_float+0x35a>
 8008d3c:	0033      	movs	r3, r6
 8008d3e:	003a      	movs	r2, r7
 8008d40:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008d42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008d44:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008d46:	47a0      	blx	r4
 8008d48:	3001      	adds	r0, #1
 8008d4a:	d1c5      	bne.n	8008cd8 <_printf_float+0x31c>
 8008d4c:	e692      	b.n	8008a74 <_printf_float+0xb8>
 8008d4e:	002a      	movs	r2, r5
 8008d50:	2301      	movs	r3, #1
 8008d52:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008d54:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008d56:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008d58:	321a      	adds	r2, #26
 8008d5a:	47b0      	blx	r6
 8008d5c:	3001      	adds	r0, #1
 8008d5e:	d100      	bne.n	8008d62 <_printf_float+0x3a6>
 8008d60:	e688      	b.n	8008a74 <_printf_float+0xb8>
 8008d62:	3401      	adds	r4, #1
 8008d64:	e7bd      	b.n	8008ce2 <_printf_float+0x326>
 8008d66:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d68:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008d6a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008d6c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008d6e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008d70:	47a0      	blx	r4
 8008d72:	3001      	adds	r0, #1
 8008d74:	d1c1      	bne.n	8008cfa <_printf_float+0x33e>
 8008d76:	e67d      	b.n	8008a74 <_printf_float+0xb8>
 8008d78:	19ba      	adds	r2, r7, r6
 8008d7a:	0023      	movs	r3, r4
 8008d7c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008d7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008d80:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008d82:	47b0      	blx	r6
 8008d84:	3001      	adds	r0, #1
 8008d86:	d1c2      	bne.n	8008d0e <_printf_float+0x352>
 8008d88:	e674      	b.n	8008a74 <_printf_float+0xb8>
 8008d8a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008d8c:	930c      	str	r3, [sp, #48]	@ 0x30
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	dc02      	bgt.n	8008d98 <_printf_float+0x3dc>
 8008d92:	2301      	movs	r3, #1
 8008d94:	421a      	tst	r2, r3
 8008d96:	d039      	beq.n	8008e0c <_printf_float+0x450>
 8008d98:	2301      	movs	r3, #1
 8008d9a:	003a      	movs	r2, r7
 8008d9c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008d9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008da0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008da2:	47b0      	blx	r6
 8008da4:	3001      	adds	r0, #1
 8008da6:	d100      	bne.n	8008daa <_printf_float+0x3ee>
 8008da8:	e664      	b.n	8008a74 <_printf_float+0xb8>
 8008daa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008dac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008dae:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008db0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008db2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008db4:	47b0      	blx	r6
 8008db6:	3001      	adds	r0, #1
 8008db8:	d100      	bne.n	8008dbc <_printf_float+0x400>
 8008dba:	e65b      	b.n	8008a74 <_printf_float+0xb8>
 8008dbc:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8008dbe:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8008dc0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	3b01      	subs	r3, #1
 8008dc6:	930c      	str	r3, [sp, #48]	@ 0x30
 8008dc8:	2300      	movs	r3, #0
 8008dca:	f7f7 fb45 	bl	8000458 <__aeabi_dcmpeq>
 8008dce:	2800      	cmp	r0, #0
 8008dd0:	d11a      	bne.n	8008e08 <_printf_float+0x44c>
 8008dd2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008dd4:	1c7a      	adds	r2, r7, #1
 8008dd6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008dd8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008dda:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008ddc:	47b0      	blx	r6
 8008dde:	3001      	adds	r0, #1
 8008de0:	d10e      	bne.n	8008e00 <_printf_float+0x444>
 8008de2:	e647      	b.n	8008a74 <_printf_float+0xb8>
 8008de4:	002a      	movs	r2, r5
 8008de6:	2301      	movs	r3, #1
 8008de8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008dea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008dec:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008dee:	321a      	adds	r2, #26
 8008df0:	47b8      	blx	r7
 8008df2:	3001      	adds	r0, #1
 8008df4:	d100      	bne.n	8008df8 <_printf_float+0x43c>
 8008df6:	e63d      	b.n	8008a74 <_printf_float+0xb8>
 8008df8:	3601      	adds	r6, #1
 8008dfa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008dfc:	429e      	cmp	r6, r3
 8008dfe:	dbf1      	blt.n	8008de4 <_printf_float+0x428>
 8008e00:	002a      	movs	r2, r5
 8008e02:	0023      	movs	r3, r4
 8008e04:	3250      	adds	r2, #80	@ 0x50
 8008e06:	e6d9      	b.n	8008bbc <_printf_float+0x200>
 8008e08:	2600      	movs	r6, #0
 8008e0a:	e7f6      	b.n	8008dfa <_printf_float+0x43e>
 8008e0c:	003a      	movs	r2, r7
 8008e0e:	e7e2      	b.n	8008dd6 <_printf_float+0x41a>
 8008e10:	002a      	movs	r2, r5
 8008e12:	2301      	movs	r3, #1
 8008e14:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008e16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e18:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008e1a:	3219      	adds	r2, #25
 8008e1c:	47b0      	blx	r6
 8008e1e:	3001      	adds	r0, #1
 8008e20:	d100      	bne.n	8008e24 <_printf_float+0x468>
 8008e22:	e627      	b.n	8008a74 <_printf_float+0xb8>
 8008e24:	3401      	adds	r4, #1
 8008e26:	68eb      	ldr	r3, [r5, #12]
 8008e28:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008e2a:	1a9b      	subs	r3, r3, r2
 8008e2c:	42a3      	cmp	r3, r4
 8008e2e:	dcef      	bgt.n	8008e10 <_printf_float+0x454>
 8008e30:	e6f8      	b.n	8008c24 <_printf_float+0x268>
 8008e32:	2400      	movs	r4, #0
 8008e34:	e7f7      	b.n	8008e26 <_printf_float+0x46a>
 8008e36:	46c0      	nop			@ (mov r8, r8)

08008e38 <_printf_common>:
 8008e38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e3a:	0016      	movs	r6, r2
 8008e3c:	9301      	str	r3, [sp, #4]
 8008e3e:	688a      	ldr	r2, [r1, #8]
 8008e40:	690b      	ldr	r3, [r1, #16]
 8008e42:	000c      	movs	r4, r1
 8008e44:	9000      	str	r0, [sp, #0]
 8008e46:	4293      	cmp	r3, r2
 8008e48:	da00      	bge.n	8008e4c <_printf_common+0x14>
 8008e4a:	0013      	movs	r3, r2
 8008e4c:	0022      	movs	r2, r4
 8008e4e:	6033      	str	r3, [r6, #0]
 8008e50:	3243      	adds	r2, #67	@ 0x43
 8008e52:	7812      	ldrb	r2, [r2, #0]
 8008e54:	2a00      	cmp	r2, #0
 8008e56:	d001      	beq.n	8008e5c <_printf_common+0x24>
 8008e58:	3301      	adds	r3, #1
 8008e5a:	6033      	str	r3, [r6, #0]
 8008e5c:	6823      	ldr	r3, [r4, #0]
 8008e5e:	069b      	lsls	r3, r3, #26
 8008e60:	d502      	bpl.n	8008e68 <_printf_common+0x30>
 8008e62:	6833      	ldr	r3, [r6, #0]
 8008e64:	3302      	adds	r3, #2
 8008e66:	6033      	str	r3, [r6, #0]
 8008e68:	6822      	ldr	r2, [r4, #0]
 8008e6a:	2306      	movs	r3, #6
 8008e6c:	0015      	movs	r5, r2
 8008e6e:	401d      	ands	r5, r3
 8008e70:	421a      	tst	r2, r3
 8008e72:	d027      	beq.n	8008ec4 <_printf_common+0x8c>
 8008e74:	0023      	movs	r3, r4
 8008e76:	3343      	adds	r3, #67	@ 0x43
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	1e5a      	subs	r2, r3, #1
 8008e7c:	4193      	sbcs	r3, r2
 8008e7e:	6822      	ldr	r2, [r4, #0]
 8008e80:	0692      	lsls	r2, r2, #26
 8008e82:	d430      	bmi.n	8008ee6 <_printf_common+0xae>
 8008e84:	0022      	movs	r2, r4
 8008e86:	9901      	ldr	r1, [sp, #4]
 8008e88:	9800      	ldr	r0, [sp, #0]
 8008e8a:	9d08      	ldr	r5, [sp, #32]
 8008e8c:	3243      	adds	r2, #67	@ 0x43
 8008e8e:	47a8      	blx	r5
 8008e90:	3001      	adds	r0, #1
 8008e92:	d025      	beq.n	8008ee0 <_printf_common+0xa8>
 8008e94:	2206      	movs	r2, #6
 8008e96:	6823      	ldr	r3, [r4, #0]
 8008e98:	2500      	movs	r5, #0
 8008e9a:	4013      	ands	r3, r2
 8008e9c:	2b04      	cmp	r3, #4
 8008e9e:	d105      	bne.n	8008eac <_printf_common+0x74>
 8008ea0:	6833      	ldr	r3, [r6, #0]
 8008ea2:	68e5      	ldr	r5, [r4, #12]
 8008ea4:	1aed      	subs	r5, r5, r3
 8008ea6:	43eb      	mvns	r3, r5
 8008ea8:	17db      	asrs	r3, r3, #31
 8008eaa:	401d      	ands	r5, r3
 8008eac:	68a3      	ldr	r3, [r4, #8]
 8008eae:	6922      	ldr	r2, [r4, #16]
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	dd01      	ble.n	8008eb8 <_printf_common+0x80>
 8008eb4:	1a9b      	subs	r3, r3, r2
 8008eb6:	18ed      	adds	r5, r5, r3
 8008eb8:	2600      	movs	r6, #0
 8008eba:	42b5      	cmp	r5, r6
 8008ebc:	d120      	bne.n	8008f00 <_printf_common+0xc8>
 8008ebe:	2000      	movs	r0, #0
 8008ec0:	e010      	b.n	8008ee4 <_printf_common+0xac>
 8008ec2:	3501      	adds	r5, #1
 8008ec4:	68e3      	ldr	r3, [r4, #12]
 8008ec6:	6832      	ldr	r2, [r6, #0]
 8008ec8:	1a9b      	subs	r3, r3, r2
 8008eca:	42ab      	cmp	r3, r5
 8008ecc:	ddd2      	ble.n	8008e74 <_printf_common+0x3c>
 8008ece:	0022      	movs	r2, r4
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	9901      	ldr	r1, [sp, #4]
 8008ed4:	9800      	ldr	r0, [sp, #0]
 8008ed6:	9f08      	ldr	r7, [sp, #32]
 8008ed8:	3219      	adds	r2, #25
 8008eda:	47b8      	blx	r7
 8008edc:	3001      	adds	r0, #1
 8008ede:	d1f0      	bne.n	8008ec2 <_printf_common+0x8a>
 8008ee0:	2001      	movs	r0, #1
 8008ee2:	4240      	negs	r0, r0
 8008ee4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008ee6:	2030      	movs	r0, #48	@ 0x30
 8008ee8:	18e1      	adds	r1, r4, r3
 8008eea:	3143      	adds	r1, #67	@ 0x43
 8008eec:	7008      	strb	r0, [r1, #0]
 8008eee:	0021      	movs	r1, r4
 8008ef0:	1c5a      	adds	r2, r3, #1
 8008ef2:	3145      	adds	r1, #69	@ 0x45
 8008ef4:	7809      	ldrb	r1, [r1, #0]
 8008ef6:	18a2      	adds	r2, r4, r2
 8008ef8:	3243      	adds	r2, #67	@ 0x43
 8008efa:	3302      	adds	r3, #2
 8008efc:	7011      	strb	r1, [r2, #0]
 8008efe:	e7c1      	b.n	8008e84 <_printf_common+0x4c>
 8008f00:	0022      	movs	r2, r4
 8008f02:	2301      	movs	r3, #1
 8008f04:	9901      	ldr	r1, [sp, #4]
 8008f06:	9800      	ldr	r0, [sp, #0]
 8008f08:	9f08      	ldr	r7, [sp, #32]
 8008f0a:	321a      	adds	r2, #26
 8008f0c:	47b8      	blx	r7
 8008f0e:	3001      	adds	r0, #1
 8008f10:	d0e6      	beq.n	8008ee0 <_printf_common+0xa8>
 8008f12:	3601      	adds	r6, #1
 8008f14:	e7d1      	b.n	8008eba <_printf_common+0x82>
	...

08008f18 <_printf_i>:
 8008f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f1a:	b08b      	sub	sp, #44	@ 0x2c
 8008f1c:	9206      	str	r2, [sp, #24]
 8008f1e:	000a      	movs	r2, r1
 8008f20:	3243      	adds	r2, #67	@ 0x43
 8008f22:	9307      	str	r3, [sp, #28]
 8008f24:	9005      	str	r0, [sp, #20]
 8008f26:	9203      	str	r2, [sp, #12]
 8008f28:	7e0a      	ldrb	r2, [r1, #24]
 8008f2a:	000c      	movs	r4, r1
 8008f2c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008f2e:	2a78      	cmp	r2, #120	@ 0x78
 8008f30:	d809      	bhi.n	8008f46 <_printf_i+0x2e>
 8008f32:	2a62      	cmp	r2, #98	@ 0x62
 8008f34:	d80b      	bhi.n	8008f4e <_printf_i+0x36>
 8008f36:	2a00      	cmp	r2, #0
 8008f38:	d100      	bne.n	8008f3c <_printf_i+0x24>
 8008f3a:	e0ba      	b.n	80090b2 <_printf_i+0x19a>
 8008f3c:	497a      	ldr	r1, [pc, #488]	@ (8009128 <_printf_i+0x210>)
 8008f3e:	9104      	str	r1, [sp, #16]
 8008f40:	2a58      	cmp	r2, #88	@ 0x58
 8008f42:	d100      	bne.n	8008f46 <_printf_i+0x2e>
 8008f44:	e08e      	b.n	8009064 <_printf_i+0x14c>
 8008f46:	0025      	movs	r5, r4
 8008f48:	3542      	adds	r5, #66	@ 0x42
 8008f4a:	702a      	strb	r2, [r5, #0]
 8008f4c:	e022      	b.n	8008f94 <_printf_i+0x7c>
 8008f4e:	0010      	movs	r0, r2
 8008f50:	3863      	subs	r0, #99	@ 0x63
 8008f52:	2815      	cmp	r0, #21
 8008f54:	d8f7      	bhi.n	8008f46 <_printf_i+0x2e>
 8008f56:	f7f7 f8e5 	bl	8000124 <__gnu_thumb1_case_shi>
 8008f5a:	0016      	.short	0x0016
 8008f5c:	fff6001f 	.word	0xfff6001f
 8008f60:	fff6fff6 	.word	0xfff6fff6
 8008f64:	001ffff6 	.word	0x001ffff6
 8008f68:	fff6fff6 	.word	0xfff6fff6
 8008f6c:	fff6fff6 	.word	0xfff6fff6
 8008f70:	0036009f 	.word	0x0036009f
 8008f74:	fff6007e 	.word	0xfff6007e
 8008f78:	00b0fff6 	.word	0x00b0fff6
 8008f7c:	0036fff6 	.word	0x0036fff6
 8008f80:	fff6fff6 	.word	0xfff6fff6
 8008f84:	0082      	.short	0x0082
 8008f86:	0025      	movs	r5, r4
 8008f88:	681a      	ldr	r2, [r3, #0]
 8008f8a:	3542      	adds	r5, #66	@ 0x42
 8008f8c:	1d11      	adds	r1, r2, #4
 8008f8e:	6019      	str	r1, [r3, #0]
 8008f90:	6813      	ldr	r3, [r2, #0]
 8008f92:	702b      	strb	r3, [r5, #0]
 8008f94:	2301      	movs	r3, #1
 8008f96:	e09e      	b.n	80090d6 <_printf_i+0x1be>
 8008f98:	6818      	ldr	r0, [r3, #0]
 8008f9a:	6809      	ldr	r1, [r1, #0]
 8008f9c:	1d02      	adds	r2, r0, #4
 8008f9e:	060d      	lsls	r5, r1, #24
 8008fa0:	d50b      	bpl.n	8008fba <_printf_i+0xa2>
 8008fa2:	6806      	ldr	r6, [r0, #0]
 8008fa4:	601a      	str	r2, [r3, #0]
 8008fa6:	2e00      	cmp	r6, #0
 8008fa8:	da03      	bge.n	8008fb2 <_printf_i+0x9a>
 8008faa:	232d      	movs	r3, #45	@ 0x2d
 8008fac:	9a03      	ldr	r2, [sp, #12]
 8008fae:	4276      	negs	r6, r6
 8008fb0:	7013      	strb	r3, [r2, #0]
 8008fb2:	4b5d      	ldr	r3, [pc, #372]	@ (8009128 <_printf_i+0x210>)
 8008fb4:	270a      	movs	r7, #10
 8008fb6:	9304      	str	r3, [sp, #16]
 8008fb8:	e018      	b.n	8008fec <_printf_i+0xd4>
 8008fba:	6806      	ldr	r6, [r0, #0]
 8008fbc:	601a      	str	r2, [r3, #0]
 8008fbe:	0649      	lsls	r1, r1, #25
 8008fc0:	d5f1      	bpl.n	8008fa6 <_printf_i+0x8e>
 8008fc2:	b236      	sxth	r6, r6
 8008fc4:	e7ef      	b.n	8008fa6 <_printf_i+0x8e>
 8008fc6:	6808      	ldr	r0, [r1, #0]
 8008fc8:	6819      	ldr	r1, [r3, #0]
 8008fca:	c940      	ldmia	r1!, {r6}
 8008fcc:	0605      	lsls	r5, r0, #24
 8008fce:	d402      	bmi.n	8008fd6 <_printf_i+0xbe>
 8008fd0:	0640      	lsls	r0, r0, #25
 8008fd2:	d500      	bpl.n	8008fd6 <_printf_i+0xbe>
 8008fd4:	b2b6      	uxth	r6, r6
 8008fd6:	6019      	str	r1, [r3, #0]
 8008fd8:	4b53      	ldr	r3, [pc, #332]	@ (8009128 <_printf_i+0x210>)
 8008fda:	270a      	movs	r7, #10
 8008fdc:	9304      	str	r3, [sp, #16]
 8008fde:	2a6f      	cmp	r2, #111	@ 0x6f
 8008fe0:	d100      	bne.n	8008fe4 <_printf_i+0xcc>
 8008fe2:	3f02      	subs	r7, #2
 8008fe4:	0023      	movs	r3, r4
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	3343      	adds	r3, #67	@ 0x43
 8008fea:	701a      	strb	r2, [r3, #0]
 8008fec:	6863      	ldr	r3, [r4, #4]
 8008fee:	60a3      	str	r3, [r4, #8]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	db06      	blt.n	8009002 <_printf_i+0xea>
 8008ff4:	2104      	movs	r1, #4
 8008ff6:	6822      	ldr	r2, [r4, #0]
 8008ff8:	9d03      	ldr	r5, [sp, #12]
 8008ffa:	438a      	bics	r2, r1
 8008ffc:	6022      	str	r2, [r4, #0]
 8008ffe:	4333      	orrs	r3, r6
 8009000:	d00c      	beq.n	800901c <_printf_i+0x104>
 8009002:	9d03      	ldr	r5, [sp, #12]
 8009004:	0030      	movs	r0, r6
 8009006:	0039      	movs	r1, r7
 8009008:	f7f7 f926 	bl	8000258 <__aeabi_uidivmod>
 800900c:	9b04      	ldr	r3, [sp, #16]
 800900e:	3d01      	subs	r5, #1
 8009010:	5c5b      	ldrb	r3, [r3, r1]
 8009012:	702b      	strb	r3, [r5, #0]
 8009014:	0033      	movs	r3, r6
 8009016:	0006      	movs	r6, r0
 8009018:	429f      	cmp	r7, r3
 800901a:	d9f3      	bls.n	8009004 <_printf_i+0xec>
 800901c:	2f08      	cmp	r7, #8
 800901e:	d109      	bne.n	8009034 <_printf_i+0x11c>
 8009020:	6823      	ldr	r3, [r4, #0]
 8009022:	07db      	lsls	r3, r3, #31
 8009024:	d506      	bpl.n	8009034 <_printf_i+0x11c>
 8009026:	6862      	ldr	r2, [r4, #4]
 8009028:	6923      	ldr	r3, [r4, #16]
 800902a:	429a      	cmp	r2, r3
 800902c:	dc02      	bgt.n	8009034 <_printf_i+0x11c>
 800902e:	2330      	movs	r3, #48	@ 0x30
 8009030:	3d01      	subs	r5, #1
 8009032:	702b      	strb	r3, [r5, #0]
 8009034:	9b03      	ldr	r3, [sp, #12]
 8009036:	1b5b      	subs	r3, r3, r5
 8009038:	6123      	str	r3, [r4, #16]
 800903a:	9b07      	ldr	r3, [sp, #28]
 800903c:	0021      	movs	r1, r4
 800903e:	9300      	str	r3, [sp, #0]
 8009040:	9805      	ldr	r0, [sp, #20]
 8009042:	9b06      	ldr	r3, [sp, #24]
 8009044:	aa09      	add	r2, sp, #36	@ 0x24
 8009046:	f7ff fef7 	bl	8008e38 <_printf_common>
 800904a:	3001      	adds	r0, #1
 800904c:	d148      	bne.n	80090e0 <_printf_i+0x1c8>
 800904e:	2001      	movs	r0, #1
 8009050:	4240      	negs	r0, r0
 8009052:	b00b      	add	sp, #44	@ 0x2c
 8009054:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009056:	2220      	movs	r2, #32
 8009058:	6809      	ldr	r1, [r1, #0]
 800905a:	430a      	orrs	r2, r1
 800905c:	6022      	str	r2, [r4, #0]
 800905e:	2278      	movs	r2, #120	@ 0x78
 8009060:	4932      	ldr	r1, [pc, #200]	@ (800912c <_printf_i+0x214>)
 8009062:	9104      	str	r1, [sp, #16]
 8009064:	0021      	movs	r1, r4
 8009066:	3145      	adds	r1, #69	@ 0x45
 8009068:	700a      	strb	r2, [r1, #0]
 800906a:	6819      	ldr	r1, [r3, #0]
 800906c:	6822      	ldr	r2, [r4, #0]
 800906e:	c940      	ldmia	r1!, {r6}
 8009070:	0610      	lsls	r0, r2, #24
 8009072:	d402      	bmi.n	800907a <_printf_i+0x162>
 8009074:	0650      	lsls	r0, r2, #25
 8009076:	d500      	bpl.n	800907a <_printf_i+0x162>
 8009078:	b2b6      	uxth	r6, r6
 800907a:	6019      	str	r1, [r3, #0]
 800907c:	07d3      	lsls	r3, r2, #31
 800907e:	d502      	bpl.n	8009086 <_printf_i+0x16e>
 8009080:	2320      	movs	r3, #32
 8009082:	4313      	orrs	r3, r2
 8009084:	6023      	str	r3, [r4, #0]
 8009086:	2e00      	cmp	r6, #0
 8009088:	d001      	beq.n	800908e <_printf_i+0x176>
 800908a:	2710      	movs	r7, #16
 800908c:	e7aa      	b.n	8008fe4 <_printf_i+0xcc>
 800908e:	2220      	movs	r2, #32
 8009090:	6823      	ldr	r3, [r4, #0]
 8009092:	4393      	bics	r3, r2
 8009094:	6023      	str	r3, [r4, #0]
 8009096:	e7f8      	b.n	800908a <_printf_i+0x172>
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	680d      	ldr	r5, [r1, #0]
 800909c:	1d10      	adds	r0, r2, #4
 800909e:	6949      	ldr	r1, [r1, #20]
 80090a0:	6018      	str	r0, [r3, #0]
 80090a2:	6813      	ldr	r3, [r2, #0]
 80090a4:	062e      	lsls	r6, r5, #24
 80090a6:	d501      	bpl.n	80090ac <_printf_i+0x194>
 80090a8:	6019      	str	r1, [r3, #0]
 80090aa:	e002      	b.n	80090b2 <_printf_i+0x19a>
 80090ac:	066d      	lsls	r5, r5, #25
 80090ae:	d5fb      	bpl.n	80090a8 <_printf_i+0x190>
 80090b0:	8019      	strh	r1, [r3, #0]
 80090b2:	2300      	movs	r3, #0
 80090b4:	9d03      	ldr	r5, [sp, #12]
 80090b6:	6123      	str	r3, [r4, #16]
 80090b8:	e7bf      	b.n	800903a <_printf_i+0x122>
 80090ba:	681a      	ldr	r2, [r3, #0]
 80090bc:	1d11      	adds	r1, r2, #4
 80090be:	6019      	str	r1, [r3, #0]
 80090c0:	6815      	ldr	r5, [r2, #0]
 80090c2:	2100      	movs	r1, #0
 80090c4:	0028      	movs	r0, r5
 80090c6:	6862      	ldr	r2, [r4, #4]
 80090c8:	f000 f9f3 	bl	80094b2 <memchr>
 80090cc:	2800      	cmp	r0, #0
 80090ce:	d001      	beq.n	80090d4 <_printf_i+0x1bc>
 80090d0:	1b40      	subs	r0, r0, r5
 80090d2:	6060      	str	r0, [r4, #4]
 80090d4:	6863      	ldr	r3, [r4, #4]
 80090d6:	6123      	str	r3, [r4, #16]
 80090d8:	2300      	movs	r3, #0
 80090da:	9a03      	ldr	r2, [sp, #12]
 80090dc:	7013      	strb	r3, [r2, #0]
 80090de:	e7ac      	b.n	800903a <_printf_i+0x122>
 80090e0:	002a      	movs	r2, r5
 80090e2:	6923      	ldr	r3, [r4, #16]
 80090e4:	9906      	ldr	r1, [sp, #24]
 80090e6:	9805      	ldr	r0, [sp, #20]
 80090e8:	9d07      	ldr	r5, [sp, #28]
 80090ea:	47a8      	blx	r5
 80090ec:	3001      	adds	r0, #1
 80090ee:	d0ae      	beq.n	800904e <_printf_i+0x136>
 80090f0:	6823      	ldr	r3, [r4, #0]
 80090f2:	079b      	lsls	r3, r3, #30
 80090f4:	d415      	bmi.n	8009122 <_printf_i+0x20a>
 80090f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090f8:	68e0      	ldr	r0, [r4, #12]
 80090fa:	4298      	cmp	r0, r3
 80090fc:	daa9      	bge.n	8009052 <_printf_i+0x13a>
 80090fe:	0018      	movs	r0, r3
 8009100:	e7a7      	b.n	8009052 <_printf_i+0x13a>
 8009102:	0022      	movs	r2, r4
 8009104:	2301      	movs	r3, #1
 8009106:	9906      	ldr	r1, [sp, #24]
 8009108:	9805      	ldr	r0, [sp, #20]
 800910a:	9e07      	ldr	r6, [sp, #28]
 800910c:	3219      	adds	r2, #25
 800910e:	47b0      	blx	r6
 8009110:	3001      	adds	r0, #1
 8009112:	d09c      	beq.n	800904e <_printf_i+0x136>
 8009114:	3501      	adds	r5, #1
 8009116:	68e3      	ldr	r3, [r4, #12]
 8009118:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800911a:	1a9b      	subs	r3, r3, r2
 800911c:	42ab      	cmp	r3, r5
 800911e:	dcf0      	bgt.n	8009102 <_printf_i+0x1ea>
 8009120:	e7e9      	b.n	80090f6 <_printf_i+0x1de>
 8009122:	2500      	movs	r5, #0
 8009124:	e7f7      	b.n	8009116 <_printf_i+0x1fe>
 8009126:	46c0      	nop			@ (mov r8, r8)
 8009128:	0800da7d 	.word	0x0800da7d
 800912c:	0800da8e 	.word	0x0800da8e

08009130 <std>:
 8009130:	2300      	movs	r3, #0
 8009132:	b510      	push	{r4, lr}
 8009134:	0004      	movs	r4, r0
 8009136:	6003      	str	r3, [r0, #0]
 8009138:	6043      	str	r3, [r0, #4]
 800913a:	6083      	str	r3, [r0, #8]
 800913c:	8181      	strh	r1, [r0, #12]
 800913e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009140:	81c2      	strh	r2, [r0, #14]
 8009142:	6103      	str	r3, [r0, #16]
 8009144:	6143      	str	r3, [r0, #20]
 8009146:	6183      	str	r3, [r0, #24]
 8009148:	0019      	movs	r1, r3
 800914a:	2208      	movs	r2, #8
 800914c:	305c      	adds	r0, #92	@ 0x5c
 800914e:	f000 f921 	bl	8009394 <memset>
 8009152:	4b0b      	ldr	r3, [pc, #44]	@ (8009180 <std+0x50>)
 8009154:	6224      	str	r4, [r4, #32]
 8009156:	6263      	str	r3, [r4, #36]	@ 0x24
 8009158:	4b0a      	ldr	r3, [pc, #40]	@ (8009184 <std+0x54>)
 800915a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800915c:	4b0a      	ldr	r3, [pc, #40]	@ (8009188 <std+0x58>)
 800915e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009160:	4b0a      	ldr	r3, [pc, #40]	@ (800918c <std+0x5c>)
 8009162:	6323      	str	r3, [r4, #48]	@ 0x30
 8009164:	4b0a      	ldr	r3, [pc, #40]	@ (8009190 <std+0x60>)
 8009166:	429c      	cmp	r4, r3
 8009168:	d005      	beq.n	8009176 <std+0x46>
 800916a:	4b0a      	ldr	r3, [pc, #40]	@ (8009194 <std+0x64>)
 800916c:	429c      	cmp	r4, r3
 800916e:	d002      	beq.n	8009176 <std+0x46>
 8009170:	4b09      	ldr	r3, [pc, #36]	@ (8009198 <std+0x68>)
 8009172:	429c      	cmp	r4, r3
 8009174:	d103      	bne.n	800917e <std+0x4e>
 8009176:	0020      	movs	r0, r4
 8009178:	3058      	adds	r0, #88	@ 0x58
 800917a:	f000 f98f 	bl	800949c <__retarget_lock_init_recursive>
 800917e:	bd10      	pop	{r4, pc}
 8009180:	080092fd 	.word	0x080092fd
 8009184:	08009325 	.word	0x08009325
 8009188:	0800935d 	.word	0x0800935d
 800918c:	08009389 	.word	0x08009389
 8009190:	20000710 	.word	0x20000710
 8009194:	20000778 	.word	0x20000778
 8009198:	200007e0 	.word	0x200007e0

0800919c <stdio_exit_handler>:
 800919c:	b510      	push	{r4, lr}
 800919e:	4a03      	ldr	r2, [pc, #12]	@ (80091ac <stdio_exit_handler+0x10>)
 80091a0:	4903      	ldr	r1, [pc, #12]	@ (80091b0 <stdio_exit_handler+0x14>)
 80091a2:	4804      	ldr	r0, [pc, #16]	@ (80091b4 <stdio_exit_handler+0x18>)
 80091a4:	f000 f86c 	bl	8009280 <_fwalk_sglue>
 80091a8:	bd10      	pop	{r4, pc}
 80091aa:	46c0      	nop			@ (mov r8, r8)
 80091ac:	20000034 	.word	0x20000034
 80091b0:	0800aed1 	.word	0x0800aed1
 80091b4:	20000044 	.word	0x20000044

080091b8 <cleanup_stdio>:
 80091b8:	6841      	ldr	r1, [r0, #4]
 80091ba:	4b0b      	ldr	r3, [pc, #44]	@ (80091e8 <cleanup_stdio+0x30>)
 80091bc:	b510      	push	{r4, lr}
 80091be:	0004      	movs	r4, r0
 80091c0:	4299      	cmp	r1, r3
 80091c2:	d001      	beq.n	80091c8 <cleanup_stdio+0x10>
 80091c4:	f001 fe84 	bl	800aed0 <_fflush_r>
 80091c8:	68a1      	ldr	r1, [r4, #8]
 80091ca:	4b08      	ldr	r3, [pc, #32]	@ (80091ec <cleanup_stdio+0x34>)
 80091cc:	4299      	cmp	r1, r3
 80091ce:	d002      	beq.n	80091d6 <cleanup_stdio+0x1e>
 80091d0:	0020      	movs	r0, r4
 80091d2:	f001 fe7d 	bl	800aed0 <_fflush_r>
 80091d6:	68e1      	ldr	r1, [r4, #12]
 80091d8:	4b05      	ldr	r3, [pc, #20]	@ (80091f0 <cleanup_stdio+0x38>)
 80091da:	4299      	cmp	r1, r3
 80091dc:	d002      	beq.n	80091e4 <cleanup_stdio+0x2c>
 80091de:	0020      	movs	r0, r4
 80091e0:	f001 fe76 	bl	800aed0 <_fflush_r>
 80091e4:	bd10      	pop	{r4, pc}
 80091e6:	46c0      	nop			@ (mov r8, r8)
 80091e8:	20000710 	.word	0x20000710
 80091ec:	20000778 	.word	0x20000778
 80091f0:	200007e0 	.word	0x200007e0

080091f4 <global_stdio_init.part.0>:
 80091f4:	b510      	push	{r4, lr}
 80091f6:	4b09      	ldr	r3, [pc, #36]	@ (800921c <global_stdio_init.part.0+0x28>)
 80091f8:	4a09      	ldr	r2, [pc, #36]	@ (8009220 <global_stdio_init.part.0+0x2c>)
 80091fa:	2104      	movs	r1, #4
 80091fc:	601a      	str	r2, [r3, #0]
 80091fe:	4809      	ldr	r0, [pc, #36]	@ (8009224 <global_stdio_init.part.0+0x30>)
 8009200:	2200      	movs	r2, #0
 8009202:	f7ff ff95 	bl	8009130 <std>
 8009206:	2201      	movs	r2, #1
 8009208:	2109      	movs	r1, #9
 800920a:	4807      	ldr	r0, [pc, #28]	@ (8009228 <global_stdio_init.part.0+0x34>)
 800920c:	f7ff ff90 	bl	8009130 <std>
 8009210:	2202      	movs	r2, #2
 8009212:	2112      	movs	r1, #18
 8009214:	4805      	ldr	r0, [pc, #20]	@ (800922c <global_stdio_init.part.0+0x38>)
 8009216:	f7ff ff8b 	bl	8009130 <std>
 800921a:	bd10      	pop	{r4, pc}
 800921c:	20000848 	.word	0x20000848
 8009220:	0800919d 	.word	0x0800919d
 8009224:	20000710 	.word	0x20000710
 8009228:	20000778 	.word	0x20000778
 800922c:	200007e0 	.word	0x200007e0

08009230 <__sfp_lock_acquire>:
 8009230:	b510      	push	{r4, lr}
 8009232:	4802      	ldr	r0, [pc, #8]	@ (800923c <__sfp_lock_acquire+0xc>)
 8009234:	f000 f933 	bl	800949e <__retarget_lock_acquire_recursive>
 8009238:	bd10      	pop	{r4, pc}
 800923a:	46c0      	nop			@ (mov r8, r8)
 800923c:	20000851 	.word	0x20000851

08009240 <__sfp_lock_release>:
 8009240:	b510      	push	{r4, lr}
 8009242:	4802      	ldr	r0, [pc, #8]	@ (800924c <__sfp_lock_release+0xc>)
 8009244:	f000 f92c 	bl	80094a0 <__retarget_lock_release_recursive>
 8009248:	bd10      	pop	{r4, pc}
 800924a:	46c0      	nop			@ (mov r8, r8)
 800924c:	20000851 	.word	0x20000851

08009250 <__sinit>:
 8009250:	b510      	push	{r4, lr}
 8009252:	0004      	movs	r4, r0
 8009254:	f7ff ffec 	bl	8009230 <__sfp_lock_acquire>
 8009258:	6a23      	ldr	r3, [r4, #32]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d002      	beq.n	8009264 <__sinit+0x14>
 800925e:	f7ff ffef 	bl	8009240 <__sfp_lock_release>
 8009262:	bd10      	pop	{r4, pc}
 8009264:	4b04      	ldr	r3, [pc, #16]	@ (8009278 <__sinit+0x28>)
 8009266:	6223      	str	r3, [r4, #32]
 8009268:	4b04      	ldr	r3, [pc, #16]	@ (800927c <__sinit+0x2c>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d1f6      	bne.n	800925e <__sinit+0xe>
 8009270:	f7ff ffc0 	bl	80091f4 <global_stdio_init.part.0>
 8009274:	e7f3      	b.n	800925e <__sinit+0xe>
 8009276:	46c0      	nop			@ (mov r8, r8)
 8009278:	080091b9 	.word	0x080091b9
 800927c:	20000848 	.word	0x20000848

08009280 <_fwalk_sglue>:
 8009280:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009282:	0014      	movs	r4, r2
 8009284:	2600      	movs	r6, #0
 8009286:	9000      	str	r0, [sp, #0]
 8009288:	9101      	str	r1, [sp, #4]
 800928a:	68a5      	ldr	r5, [r4, #8]
 800928c:	6867      	ldr	r7, [r4, #4]
 800928e:	3f01      	subs	r7, #1
 8009290:	d504      	bpl.n	800929c <_fwalk_sglue+0x1c>
 8009292:	6824      	ldr	r4, [r4, #0]
 8009294:	2c00      	cmp	r4, #0
 8009296:	d1f8      	bne.n	800928a <_fwalk_sglue+0xa>
 8009298:	0030      	movs	r0, r6
 800929a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800929c:	89ab      	ldrh	r3, [r5, #12]
 800929e:	2b01      	cmp	r3, #1
 80092a0:	d908      	bls.n	80092b4 <_fwalk_sglue+0x34>
 80092a2:	220e      	movs	r2, #14
 80092a4:	5eab      	ldrsh	r3, [r5, r2]
 80092a6:	3301      	adds	r3, #1
 80092a8:	d004      	beq.n	80092b4 <_fwalk_sglue+0x34>
 80092aa:	0029      	movs	r1, r5
 80092ac:	9800      	ldr	r0, [sp, #0]
 80092ae:	9b01      	ldr	r3, [sp, #4]
 80092b0:	4798      	blx	r3
 80092b2:	4306      	orrs	r6, r0
 80092b4:	3568      	adds	r5, #104	@ 0x68
 80092b6:	e7ea      	b.n	800928e <_fwalk_sglue+0xe>

080092b8 <siprintf>:
 80092b8:	b40e      	push	{r1, r2, r3}
 80092ba:	b510      	push	{r4, lr}
 80092bc:	2400      	movs	r4, #0
 80092be:	490c      	ldr	r1, [pc, #48]	@ (80092f0 <siprintf+0x38>)
 80092c0:	b09d      	sub	sp, #116	@ 0x74
 80092c2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80092c4:	9002      	str	r0, [sp, #8]
 80092c6:	9006      	str	r0, [sp, #24]
 80092c8:	9107      	str	r1, [sp, #28]
 80092ca:	9104      	str	r1, [sp, #16]
 80092cc:	4809      	ldr	r0, [pc, #36]	@ (80092f4 <siprintf+0x3c>)
 80092ce:	490a      	ldr	r1, [pc, #40]	@ (80092f8 <siprintf+0x40>)
 80092d0:	cb04      	ldmia	r3!, {r2}
 80092d2:	9105      	str	r1, [sp, #20]
 80092d4:	6800      	ldr	r0, [r0, #0]
 80092d6:	a902      	add	r1, sp, #8
 80092d8:	9301      	str	r3, [sp, #4]
 80092da:	941b      	str	r4, [sp, #108]	@ 0x6c
 80092dc:	f001 fc74 	bl	800abc8 <_svfiprintf_r>
 80092e0:	9b02      	ldr	r3, [sp, #8]
 80092e2:	701c      	strb	r4, [r3, #0]
 80092e4:	b01d      	add	sp, #116	@ 0x74
 80092e6:	bc10      	pop	{r4}
 80092e8:	bc08      	pop	{r3}
 80092ea:	b003      	add	sp, #12
 80092ec:	4718      	bx	r3
 80092ee:	46c0      	nop			@ (mov r8, r8)
 80092f0:	7fffffff 	.word	0x7fffffff
 80092f4:	20000040 	.word	0x20000040
 80092f8:	ffff0208 	.word	0xffff0208

080092fc <__sread>:
 80092fc:	b570      	push	{r4, r5, r6, lr}
 80092fe:	000c      	movs	r4, r1
 8009300:	250e      	movs	r5, #14
 8009302:	5f49      	ldrsh	r1, [r1, r5]
 8009304:	f000 f878 	bl	80093f8 <_read_r>
 8009308:	2800      	cmp	r0, #0
 800930a:	db03      	blt.n	8009314 <__sread+0x18>
 800930c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800930e:	181b      	adds	r3, r3, r0
 8009310:	6563      	str	r3, [r4, #84]	@ 0x54
 8009312:	bd70      	pop	{r4, r5, r6, pc}
 8009314:	89a3      	ldrh	r3, [r4, #12]
 8009316:	4a02      	ldr	r2, [pc, #8]	@ (8009320 <__sread+0x24>)
 8009318:	4013      	ands	r3, r2
 800931a:	81a3      	strh	r3, [r4, #12]
 800931c:	e7f9      	b.n	8009312 <__sread+0x16>
 800931e:	46c0      	nop			@ (mov r8, r8)
 8009320:	ffffefff 	.word	0xffffefff

08009324 <__swrite>:
 8009324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009326:	001f      	movs	r7, r3
 8009328:	898b      	ldrh	r3, [r1, #12]
 800932a:	0005      	movs	r5, r0
 800932c:	000c      	movs	r4, r1
 800932e:	0016      	movs	r6, r2
 8009330:	05db      	lsls	r3, r3, #23
 8009332:	d505      	bpl.n	8009340 <__swrite+0x1c>
 8009334:	230e      	movs	r3, #14
 8009336:	5ec9      	ldrsh	r1, [r1, r3]
 8009338:	2200      	movs	r2, #0
 800933a:	2302      	movs	r3, #2
 800933c:	f000 f848 	bl	80093d0 <_lseek_r>
 8009340:	89a3      	ldrh	r3, [r4, #12]
 8009342:	4a05      	ldr	r2, [pc, #20]	@ (8009358 <__swrite+0x34>)
 8009344:	0028      	movs	r0, r5
 8009346:	4013      	ands	r3, r2
 8009348:	81a3      	strh	r3, [r4, #12]
 800934a:	0032      	movs	r2, r6
 800934c:	230e      	movs	r3, #14
 800934e:	5ee1      	ldrsh	r1, [r4, r3]
 8009350:	003b      	movs	r3, r7
 8009352:	f000 f865 	bl	8009420 <_write_r>
 8009356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009358:	ffffefff 	.word	0xffffefff

0800935c <__sseek>:
 800935c:	b570      	push	{r4, r5, r6, lr}
 800935e:	000c      	movs	r4, r1
 8009360:	250e      	movs	r5, #14
 8009362:	5f49      	ldrsh	r1, [r1, r5]
 8009364:	f000 f834 	bl	80093d0 <_lseek_r>
 8009368:	89a3      	ldrh	r3, [r4, #12]
 800936a:	1c42      	adds	r2, r0, #1
 800936c:	d103      	bne.n	8009376 <__sseek+0x1a>
 800936e:	4a05      	ldr	r2, [pc, #20]	@ (8009384 <__sseek+0x28>)
 8009370:	4013      	ands	r3, r2
 8009372:	81a3      	strh	r3, [r4, #12]
 8009374:	bd70      	pop	{r4, r5, r6, pc}
 8009376:	2280      	movs	r2, #128	@ 0x80
 8009378:	0152      	lsls	r2, r2, #5
 800937a:	4313      	orrs	r3, r2
 800937c:	81a3      	strh	r3, [r4, #12]
 800937e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009380:	e7f8      	b.n	8009374 <__sseek+0x18>
 8009382:	46c0      	nop			@ (mov r8, r8)
 8009384:	ffffefff 	.word	0xffffefff

08009388 <__sclose>:
 8009388:	b510      	push	{r4, lr}
 800938a:	230e      	movs	r3, #14
 800938c:	5ec9      	ldrsh	r1, [r1, r3]
 800938e:	f000 f80d 	bl	80093ac <_close_r>
 8009392:	bd10      	pop	{r4, pc}

08009394 <memset>:
 8009394:	0003      	movs	r3, r0
 8009396:	1882      	adds	r2, r0, r2
 8009398:	4293      	cmp	r3, r2
 800939a:	d100      	bne.n	800939e <memset+0xa>
 800939c:	4770      	bx	lr
 800939e:	7019      	strb	r1, [r3, #0]
 80093a0:	3301      	adds	r3, #1
 80093a2:	e7f9      	b.n	8009398 <memset+0x4>

080093a4 <_localeconv_r>:
 80093a4:	4800      	ldr	r0, [pc, #0]	@ (80093a8 <_localeconv_r+0x4>)
 80093a6:	4770      	bx	lr
 80093a8:	20000180 	.word	0x20000180

080093ac <_close_r>:
 80093ac:	2300      	movs	r3, #0
 80093ae:	b570      	push	{r4, r5, r6, lr}
 80093b0:	4d06      	ldr	r5, [pc, #24]	@ (80093cc <_close_r+0x20>)
 80093b2:	0004      	movs	r4, r0
 80093b4:	0008      	movs	r0, r1
 80093b6:	602b      	str	r3, [r5, #0]
 80093b8:	f7fc faa0 	bl	80058fc <_close>
 80093bc:	1c43      	adds	r3, r0, #1
 80093be:	d103      	bne.n	80093c8 <_close_r+0x1c>
 80093c0:	682b      	ldr	r3, [r5, #0]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d000      	beq.n	80093c8 <_close_r+0x1c>
 80093c6:	6023      	str	r3, [r4, #0]
 80093c8:	bd70      	pop	{r4, r5, r6, pc}
 80093ca:	46c0      	nop			@ (mov r8, r8)
 80093cc:	2000084c 	.word	0x2000084c

080093d0 <_lseek_r>:
 80093d0:	b570      	push	{r4, r5, r6, lr}
 80093d2:	0004      	movs	r4, r0
 80093d4:	0008      	movs	r0, r1
 80093d6:	0011      	movs	r1, r2
 80093d8:	001a      	movs	r2, r3
 80093da:	2300      	movs	r3, #0
 80093dc:	4d05      	ldr	r5, [pc, #20]	@ (80093f4 <_lseek_r+0x24>)
 80093de:	602b      	str	r3, [r5, #0]
 80093e0:	f7fc fa96 	bl	8005910 <_lseek>
 80093e4:	1c43      	adds	r3, r0, #1
 80093e6:	d103      	bne.n	80093f0 <_lseek_r+0x20>
 80093e8:	682b      	ldr	r3, [r5, #0]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d000      	beq.n	80093f0 <_lseek_r+0x20>
 80093ee:	6023      	str	r3, [r4, #0]
 80093f0:	bd70      	pop	{r4, r5, r6, pc}
 80093f2:	46c0      	nop			@ (mov r8, r8)
 80093f4:	2000084c 	.word	0x2000084c

080093f8 <_read_r>:
 80093f8:	b570      	push	{r4, r5, r6, lr}
 80093fa:	0004      	movs	r4, r0
 80093fc:	0008      	movs	r0, r1
 80093fe:	0011      	movs	r1, r2
 8009400:	001a      	movs	r2, r3
 8009402:	2300      	movs	r3, #0
 8009404:	4d05      	ldr	r5, [pc, #20]	@ (800941c <_read_r+0x24>)
 8009406:	602b      	str	r3, [r5, #0]
 8009408:	f7fc fa5e 	bl	80058c8 <_read>
 800940c:	1c43      	adds	r3, r0, #1
 800940e:	d103      	bne.n	8009418 <_read_r+0x20>
 8009410:	682b      	ldr	r3, [r5, #0]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d000      	beq.n	8009418 <_read_r+0x20>
 8009416:	6023      	str	r3, [r4, #0]
 8009418:	bd70      	pop	{r4, r5, r6, pc}
 800941a:	46c0      	nop			@ (mov r8, r8)
 800941c:	2000084c 	.word	0x2000084c

08009420 <_write_r>:
 8009420:	b570      	push	{r4, r5, r6, lr}
 8009422:	0004      	movs	r4, r0
 8009424:	0008      	movs	r0, r1
 8009426:	0011      	movs	r1, r2
 8009428:	001a      	movs	r2, r3
 800942a:	2300      	movs	r3, #0
 800942c:	4d05      	ldr	r5, [pc, #20]	@ (8009444 <_write_r+0x24>)
 800942e:	602b      	str	r3, [r5, #0]
 8009430:	f7fc fa57 	bl	80058e2 <_write>
 8009434:	1c43      	adds	r3, r0, #1
 8009436:	d103      	bne.n	8009440 <_write_r+0x20>
 8009438:	682b      	ldr	r3, [r5, #0]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d000      	beq.n	8009440 <_write_r+0x20>
 800943e:	6023      	str	r3, [r4, #0]
 8009440:	bd70      	pop	{r4, r5, r6, pc}
 8009442:	46c0      	nop			@ (mov r8, r8)
 8009444:	2000084c 	.word	0x2000084c

08009448 <__errno>:
 8009448:	4b01      	ldr	r3, [pc, #4]	@ (8009450 <__errno+0x8>)
 800944a:	6818      	ldr	r0, [r3, #0]
 800944c:	4770      	bx	lr
 800944e:	46c0      	nop			@ (mov r8, r8)
 8009450:	20000040 	.word	0x20000040

08009454 <__libc_init_array>:
 8009454:	b570      	push	{r4, r5, r6, lr}
 8009456:	2600      	movs	r6, #0
 8009458:	4c0c      	ldr	r4, [pc, #48]	@ (800948c <__libc_init_array+0x38>)
 800945a:	4d0d      	ldr	r5, [pc, #52]	@ (8009490 <__libc_init_array+0x3c>)
 800945c:	1b64      	subs	r4, r4, r5
 800945e:	10a4      	asrs	r4, r4, #2
 8009460:	42a6      	cmp	r6, r4
 8009462:	d109      	bne.n	8009478 <__libc_init_array+0x24>
 8009464:	2600      	movs	r6, #0
 8009466:	f002 fae7 	bl	800ba38 <_init>
 800946a:	4c0a      	ldr	r4, [pc, #40]	@ (8009494 <__libc_init_array+0x40>)
 800946c:	4d0a      	ldr	r5, [pc, #40]	@ (8009498 <__libc_init_array+0x44>)
 800946e:	1b64      	subs	r4, r4, r5
 8009470:	10a4      	asrs	r4, r4, #2
 8009472:	42a6      	cmp	r6, r4
 8009474:	d105      	bne.n	8009482 <__libc_init_array+0x2e>
 8009476:	bd70      	pop	{r4, r5, r6, pc}
 8009478:	00b3      	lsls	r3, r6, #2
 800947a:	58eb      	ldr	r3, [r5, r3]
 800947c:	4798      	blx	r3
 800947e:	3601      	adds	r6, #1
 8009480:	e7ee      	b.n	8009460 <__libc_init_array+0xc>
 8009482:	00b3      	lsls	r3, r6, #2
 8009484:	58eb      	ldr	r3, [r5, r3]
 8009486:	4798      	blx	r3
 8009488:	3601      	adds	r6, #1
 800948a:	e7f2      	b.n	8009472 <__libc_init_array+0x1e>
 800948c:	0800de5c 	.word	0x0800de5c
 8009490:	0800de5c 	.word	0x0800de5c
 8009494:	0800de60 	.word	0x0800de60
 8009498:	0800de5c 	.word	0x0800de5c

0800949c <__retarget_lock_init_recursive>:
 800949c:	4770      	bx	lr

0800949e <__retarget_lock_acquire_recursive>:
 800949e:	4770      	bx	lr

080094a0 <__retarget_lock_release_recursive>:
 80094a0:	4770      	bx	lr

080094a2 <strcpy>:
 80094a2:	0003      	movs	r3, r0
 80094a4:	780a      	ldrb	r2, [r1, #0]
 80094a6:	3101      	adds	r1, #1
 80094a8:	701a      	strb	r2, [r3, #0]
 80094aa:	3301      	adds	r3, #1
 80094ac:	2a00      	cmp	r2, #0
 80094ae:	d1f9      	bne.n	80094a4 <strcpy+0x2>
 80094b0:	4770      	bx	lr

080094b2 <memchr>:
 80094b2:	b2c9      	uxtb	r1, r1
 80094b4:	1882      	adds	r2, r0, r2
 80094b6:	4290      	cmp	r0, r2
 80094b8:	d101      	bne.n	80094be <memchr+0xc>
 80094ba:	2000      	movs	r0, #0
 80094bc:	4770      	bx	lr
 80094be:	7803      	ldrb	r3, [r0, #0]
 80094c0:	428b      	cmp	r3, r1
 80094c2:	d0fb      	beq.n	80094bc <memchr+0xa>
 80094c4:	3001      	adds	r0, #1
 80094c6:	e7f6      	b.n	80094b6 <memchr+0x4>

080094c8 <memcpy>:
 80094c8:	2300      	movs	r3, #0
 80094ca:	b510      	push	{r4, lr}
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d100      	bne.n	80094d2 <memcpy+0xa>
 80094d0:	bd10      	pop	{r4, pc}
 80094d2:	5ccc      	ldrb	r4, [r1, r3]
 80094d4:	54c4      	strb	r4, [r0, r3]
 80094d6:	3301      	adds	r3, #1
 80094d8:	e7f8      	b.n	80094cc <memcpy+0x4>

080094da <quorem>:
 80094da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094dc:	6903      	ldr	r3, [r0, #16]
 80094de:	690c      	ldr	r4, [r1, #16]
 80094e0:	b089      	sub	sp, #36	@ 0x24
 80094e2:	9003      	str	r0, [sp, #12]
 80094e4:	9106      	str	r1, [sp, #24]
 80094e6:	2000      	movs	r0, #0
 80094e8:	42a3      	cmp	r3, r4
 80094ea:	db63      	blt.n	80095b4 <quorem+0xda>
 80094ec:	000b      	movs	r3, r1
 80094ee:	3c01      	subs	r4, #1
 80094f0:	3314      	adds	r3, #20
 80094f2:	00a5      	lsls	r5, r4, #2
 80094f4:	9304      	str	r3, [sp, #16]
 80094f6:	195b      	adds	r3, r3, r5
 80094f8:	9305      	str	r3, [sp, #20]
 80094fa:	9b03      	ldr	r3, [sp, #12]
 80094fc:	3314      	adds	r3, #20
 80094fe:	9301      	str	r3, [sp, #4]
 8009500:	195d      	adds	r5, r3, r5
 8009502:	9b05      	ldr	r3, [sp, #20]
 8009504:	682f      	ldr	r7, [r5, #0]
 8009506:	681e      	ldr	r6, [r3, #0]
 8009508:	0038      	movs	r0, r7
 800950a:	3601      	adds	r6, #1
 800950c:	0031      	movs	r1, r6
 800950e:	f7f6 fe1d 	bl	800014c <__udivsi3>
 8009512:	9002      	str	r0, [sp, #8]
 8009514:	42b7      	cmp	r7, r6
 8009516:	d327      	bcc.n	8009568 <quorem+0x8e>
 8009518:	9b04      	ldr	r3, [sp, #16]
 800951a:	2700      	movs	r7, #0
 800951c:	469c      	mov	ip, r3
 800951e:	9e01      	ldr	r6, [sp, #4]
 8009520:	9707      	str	r7, [sp, #28]
 8009522:	4662      	mov	r2, ip
 8009524:	ca08      	ldmia	r2!, {r3}
 8009526:	6830      	ldr	r0, [r6, #0]
 8009528:	4694      	mov	ip, r2
 800952a:	9a02      	ldr	r2, [sp, #8]
 800952c:	b299      	uxth	r1, r3
 800952e:	4351      	muls	r1, r2
 8009530:	0c1b      	lsrs	r3, r3, #16
 8009532:	4353      	muls	r3, r2
 8009534:	19c9      	adds	r1, r1, r7
 8009536:	0c0a      	lsrs	r2, r1, #16
 8009538:	189b      	adds	r3, r3, r2
 800953a:	b289      	uxth	r1, r1
 800953c:	b282      	uxth	r2, r0
 800953e:	1a52      	subs	r2, r2, r1
 8009540:	9907      	ldr	r1, [sp, #28]
 8009542:	0c1f      	lsrs	r7, r3, #16
 8009544:	1852      	adds	r2, r2, r1
 8009546:	0c00      	lsrs	r0, r0, #16
 8009548:	b29b      	uxth	r3, r3
 800954a:	1411      	asrs	r1, r2, #16
 800954c:	1ac3      	subs	r3, r0, r3
 800954e:	185b      	adds	r3, r3, r1
 8009550:	1419      	asrs	r1, r3, #16
 8009552:	b292      	uxth	r2, r2
 8009554:	041b      	lsls	r3, r3, #16
 8009556:	431a      	orrs	r2, r3
 8009558:	9b05      	ldr	r3, [sp, #20]
 800955a:	9107      	str	r1, [sp, #28]
 800955c:	c604      	stmia	r6!, {r2}
 800955e:	4563      	cmp	r3, ip
 8009560:	d2df      	bcs.n	8009522 <quorem+0x48>
 8009562:	682b      	ldr	r3, [r5, #0]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d02b      	beq.n	80095c0 <quorem+0xe6>
 8009568:	9906      	ldr	r1, [sp, #24]
 800956a:	9803      	ldr	r0, [sp, #12]
 800956c:	f001 f9b6 	bl	800a8dc <__mcmp>
 8009570:	2800      	cmp	r0, #0
 8009572:	db1e      	blt.n	80095b2 <quorem+0xd8>
 8009574:	2600      	movs	r6, #0
 8009576:	9d01      	ldr	r5, [sp, #4]
 8009578:	9904      	ldr	r1, [sp, #16]
 800957a:	c901      	ldmia	r1!, {r0}
 800957c:	682b      	ldr	r3, [r5, #0]
 800957e:	b287      	uxth	r7, r0
 8009580:	b29a      	uxth	r2, r3
 8009582:	1bd2      	subs	r2, r2, r7
 8009584:	1992      	adds	r2, r2, r6
 8009586:	0c00      	lsrs	r0, r0, #16
 8009588:	0c1b      	lsrs	r3, r3, #16
 800958a:	1a1b      	subs	r3, r3, r0
 800958c:	1410      	asrs	r0, r2, #16
 800958e:	181b      	adds	r3, r3, r0
 8009590:	141e      	asrs	r6, r3, #16
 8009592:	b292      	uxth	r2, r2
 8009594:	041b      	lsls	r3, r3, #16
 8009596:	431a      	orrs	r2, r3
 8009598:	9b05      	ldr	r3, [sp, #20]
 800959a:	c504      	stmia	r5!, {r2}
 800959c:	428b      	cmp	r3, r1
 800959e:	d2ec      	bcs.n	800957a <quorem+0xa0>
 80095a0:	9a01      	ldr	r2, [sp, #4]
 80095a2:	00a3      	lsls	r3, r4, #2
 80095a4:	18d3      	adds	r3, r2, r3
 80095a6:	681a      	ldr	r2, [r3, #0]
 80095a8:	2a00      	cmp	r2, #0
 80095aa:	d014      	beq.n	80095d6 <quorem+0xfc>
 80095ac:	9b02      	ldr	r3, [sp, #8]
 80095ae:	3301      	adds	r3, #1
 80095b0:	9302      	str	r3, [sp, #8]
 80095b2:	9802      	ldr	r0, [sp, #8]
 80095b4:	b009      	add	sp, #36	@ 0x24
 80095b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095b8:	682b      	ldr	r3, [r5, #0]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d104      	bne.n	80095c8 <quorem+0xee>
 80095be:	3c01      	subs	r4, #1
 80095c0:	9b01      	ldr	r3, [sp, #4]
 80095c2:	3d04      	subs	r5, #4
 80095c4:	42ab      	cmp	r3, r5
 80095c6:	d3f7      	bcc.n	80095b8 <quorem+0xde>
 80095c8:	9b03      	ldr	r3, [sp, #12]
 80095ca:	611c      	str	r4, [r3, #16]
 80095cc:	e7cc      	b.n	8009568 <quorem+0x8e>
 80095ce:	681a      	ldr	r2, [r3, #0]
 80095d0:	2a00      	cmp	r2, #0
 80095d2:	d104      	bne.n	80095de <quorem+0x104>
 80095d4:	3c01      	subs	r4, #1
 80095d6:	9a01      	ldr	r2, [sp, #4]
 80095d8:	3b04      	subs	r3, #4
 80095da:	429a      	cmp	r2, r3
 80095dc:	d3f7      	bcc.n	80095ce <quorem+0xf4>
 80095de:	9b03      	ldr	r3, [sp, #12]
 80095e0:	611c      	str	r4, [r3, #16]
 80095e2:	e7e3      	b.n	80095ac <quorem+0xd2>

080095e4 <_dtoa_r>:
 80095e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095e6:	0014      	movs	r4, r2
 80095e8:	001d      	movs	r5, r3
 80095ea:	69c6      	ldr	r6, [r0, #28]
 80095ec:	b09d      	sub	sp, #116	@ 0x74
 80095ee:	940a      	str	r4, [sp, #40]	@ 0x28
 80095f0:	950b      	str	r5, [sp, #44]	@ 0x2c
 80095f2:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 80095f4:	9003      	str	r0, [sp, #12]
 80095f6:	2e00      	cmp	r6, #0
 80095f8:	d10f      	bne.n	800961a <_dtoa_r+0x36>
 80095fa:	2010      	movs	r0, #16
 80095fc:	f000 fe2c 	bl	800a258 <malloc>
 8009600:	9b03      	ldr	r3, [sp, #12]
 8009602:	1e02      	subs	r2, r0, #0
 8009604:	61d8      	str	r0, [r3, #28]
 8009606:	d104      	bne.n	8009612 <_dtoa_r+0x2e>
 8009608:	21ef      	movs	r1, #239	@ 0xef
 800960a:	4bc7      	ldr	r3, [pc, #796]	@ (8009928 <_dtoa_r+0x344>)
 800960c:	48c7      	ldr	r0, [pc, #796]	@ (800992c <_dtoa_r+0x348>)
 800960e:	f001 fcaf 	bl	800af70 <__assert_func>
 8009612:	6046      	str	r6, [r0, #4]
 8009614:	6086      	str	r6, [r0, #8]
 8009616:	6006      	str	r6, [r0, #0]
 8009618:	60c6      	str	r6, [r0, #12]
 800961a:	9b03      	ldr	r3, [sp, #12]
 800961c:	69db      	ldr	r3, [r3, #28]
 800961e:	6819      	ldr	r1, [r3, #0]
 8009620:	2900      	cmp	r1, #0
 8009622:	d00b      	beq.n	800963c <_dtoa_r+0x58>
 8009624:	685a      	ldr	r2, [r3, #4]
 8009626:	2301      	movs	r3, #1
 8009628:	4093      	lsls	r3, r2
 800962a:	604a      	str	r2, [r1, #4]
 800962c:	608b      	str	r3, [r1, #8]
 800962e:	9803      	ldr	r0, [sp, #12]
 8009630:	f000 ff12 	bl	800a458 <_Bfree>
 8009634:	2200      	movs	r2, #0
 8009636:	9b03      	ldr	r3, [sp, #12]
 8009638:	69db      	ldr	r3, [r3, #28]
 800963a:	601a      	str	r2, [r3, #0]
 800963c:	2d00      	cmp	r5, #0
 800963e:	da1e      	bge.n	800967e <_dtoa_r+0x9a>
 8009640:	2301      	movs	r3, #1
 8009642:	603b      	str	r3, [r7, #0]
 8009644:	006b      	lsls	r3, r5, #1
 8009646:	085b      	lsrs	r3, r3, #1
 8009648:	930b      	str	r3, [sp, #44]	@ 0x2c
 800964a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800964c:	4bb8      	ldr	r3, [pc, #736]	@ (8009930 <_dtoa_r+0x34c>)
 800964e:	4ab8      	ldr	r2, [pc, #736]	@ (8009930 <_dtoa_r+0x34c>)
 8009650:	403b      	ands	r3, r7
 8009652:	4293      	cmp	r3, r2
 8009654:	d116      	bne.n	8009684 <_dtoa_r+0xa0>
 8009656:	4bb7      	ldr	r3, [pc, #732]	@ (8009934 <_dtoa_r+0x350>)
 8009658:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800965a:	6013      	str	r3, [r2, #0]
 800965c:	033b      	lsls	r3, r7, #12
 800965e:	0b1b      	lsrs	r3, r3, #12
 8009660:	4323      	orrs	r3, r4
 8009662:	d101      	bne.n	8009668 <_dtoa_r+0x84>
 8009664:	f000 fd80 	bl	800a168 <_dtoa_r+0xb84>
 8009668:	4bb3      	ldr	r3, [pc, #716]	@ (8009938 <_dtoa_r+0x354>)
 800966a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800966c:	9308      	str	r3, [sp, #32]
 800966e:	2a00      	cmp	r2, #0
 8009670:	d002      	beq.n	8009678 <_dtoa_r+0x94>
 8009672:	4bb2      	ldr	r3, [pc, #712]	@ (800993c <_dtoa_r+0x358>)
 8009674:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8009676:	6013      	str	r3, [r2, #0]
 8009678:	9808      	ldr	r0, [sp, #32]
 800967a:	b01d      	add	sp, #116	@ 0x74
 800967c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800967e:	2300      	movs	r3, #0
 8009680:	603b      	str	r3, [r7, #0]
 8009682:	e7e2      	b.n	800964a <_dtoa_r+0x66>
 8009684:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009686:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009688:	9212      	str	r2, [sp, #72]	@ 0x48
 800968a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800968c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800968e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009690:	2200      	movs	r2, #0
 8009692:	2300      	movs	r3, #0
 8009694:	f7f6 fee0 	bl	8000458 <__aeabi_dcmpeq>
 8009698:	1e06      	subs	r6, r0, #0
 800969a:	d00b      	beq.n	80096b4 <_dtoa_r+0xd0>
 800969c:	2301      	movs	r3, #1
 800969e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80096a0:	6013      	str	r3, [r2, #0]
 80096a2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d002      	beq.n	80096ae <_dtoa_r+0xca>
 80096a8:	4ba5      	ldr	r3, [pc, #660]	@ (8009940 <_dtoa_r+0x35c>)
 80096aa:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80096ac:	6013      	str	r3, [r2, #0]
 80096ae:	4ba5      	ldr	r3, [pc, #660]	@ (8009944 <_dtoa_r+0x360>)
 80096b0:	9308      	str	r3, [sp, #32]
 80096b2:	e7e1      	b.n	8009678 <_dtoa_r+0x94>
 80096b4:	ab1a      	add	r3, sp, #104	@ 0x68
 80096b6:	9301      	str	r3, [sp, #4]
 80096b8:	ab1b      	add	r3, sp, #108	@ 0x6c
 80096ba:	9300      	str	r3, [sp, #0]
 80096bc:	9803      	ldr	r0, [sp, #12]
 80096be:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80096c0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80096c2:	f001 f9c1 	bl	800aa48 <__d2b>
 80096c6:	007a      	lsls	r2, r7, #1
 80096c8:	9005      	str	r0, [sp, #20]
 80096ca:	0d52      	lsrs	r2, r2, #21
 80096cc:	d100      	bne.n	80096d0 <_dtoa_r+0xec>
 80096ce:	e07b      	b.n	80097c8 <_dtoa_r+0x1e4>
 80096d0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80096d2:	9618      	str	r6, [sp, #96]	@ 0x60
 80096d4:	0319      	lsls	r1, r3, #12
 80096d6:	4b9c      	ldr	r3, [pc, #624]	@ (8009948 <_dtoa_r+0x364>)
 80096d8:	0b09      	lsrs	r1, r1, #12
 80096da:	430b      	orrs	r3, r1
 80096dc:	499b      	ldr	r1, [pc, #620]	@ (800994c <_dtoa_r+0x368>)
 80096de:	1857      	adds	r7, r2, r1
 80096e0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80096e2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80096e4:	0019      	movs	r1, r3
 80096e6:	2200      	movs	r2, #0
 80096e8:	4b99      	ldr	r3, [pc, #612]	@ (8009950 <_dtoa_r+0x36c>)
 80096ea:	f7f9 fa6d 	bl	8002bc8 <__aeabi_dsub>
 80096ee:	4a99      	ldr	r2, [pc, #612]	@ (8009954 <_dtoa_r+0x370>)
 80096f0:	4b99      	ldr	r3, [pc, #612]	@ (8009958 <_dtoa_r+0x374>)
 80096f2:	f7f8 ff83 	bl	80025fc <__aeabi_dmul>
 80096f6:	4a99      	ldr	r2, [pc, #612]	@ (800995c <_dtoa_r+0x378>)
 80096f8:	4b99      	ldr	r3, [pc, #612]	@ (8009960 <_dtoa_r+0x37c>)
 80096fa:	f7f7 ff7f 	bl	80015fc <__aeabi_dadd>
 80096fe:	0004      	movs	r4, r0
 8009700:	0038      	movs	r0, r7
 8009702:	000d      	movs	r5, r1
 8009704:	f7f9 fec8 	bl	8003498 <__aeabi_i2d>
 8009708:	4a96      	ldr	r2, [pc, #600]	@ (8009964 <_dtoa_r+0x380>)
 800970a:	4b97      	ldr	r3, [pc, #604]	@ (8009968 <_dtoa_r+0x384>)
 800970c:	f7f8 ff76 	bl	80025fc <__aeabi_dmul>
 8009710:	0002      	movs	r2, r0
 8009712:	000b      	movs	r3, r1
 8009714:	0020      	movs	r0, r4
 8009716:	0029      	movs	r1, r5
 8009718:	f7f7 ff70 	bl	80015fc <__aeabi_dadd>
 800971c:	0004      	movs	r4, r0
 800971e:	000d      	movs	r5, r1
 8009720:	f7f9 fe7e 	bl	8003420 <__aeabi_d2iz>
 8009724:	2200      	movs	r2, #0
 8009726:	9004      	str	r0, [sp, #16]
 8009728:	2300      	movs	r3, #0
 800972a:	0020      	movs	r0, r4
 800972c:	0029      	movs	r1, r5
 800972e:	f7f6 fe99 	bl	8000464 <__aeabi_dcmplt>
 8009732:	2800      	cmp	r0, #0
 8009734:	d00b      	beq.n	800974e <_dtoa_r+0x16a>
 8009736:	9804      	ldr	r0, [sp, #16]
 8009738:	f7f9 feae 	bl	8003498 <__aeabi_i2d>
 800973c:	002b      	movs	r3, r5
 800973e:	0022      	movs	r2, r4
 8009740:	f7f6 fe8a 	bl	8000458 <__aeabi_dcmpeq>
 8009744:	4243      	negs	r3, r0
 8009746:	4158      	adcs	r0, r3
 8009748:	9b04      	ldr	r3, [sp, #16]
 800974a:	1a1b      	subs	r3, r3, r0
 800974c:	9304      	str	r3, [sp, #16]
 800974e:	2301      	movs	r3, #1
 8009750:	9315      	str	r3, [sp, #84]	@ 0x54
 8009752:	9b04      	ldr	r3, [sp, #16]
 8009754:	2b16      	cmp	r3, #22
 8009756:	d810      	bhi.n	800977a <_dtoa_r+0x196>
 8009758:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800975a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800975c:	9a04      	ldr	r2, [sp, #16]
 800975e:	4b83      	ldr	r3, [pc, #524]	@ (800996c <_dtoa_r+0x388>)
 8009760:	00d2      	lsls	r2, r2, #3
 8009762:	189b      	adds	r3, r3, r2
 8009764:	681a      	ldr	r2, [r3, #0]
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	f7f6 fe7c 	bl	8000464 <__aeabi_dcmplt>
 800976c:	2800      	cmp	r0, #0
 800976e:	d047      	beq.n	8009800 <_dtoa_r+0x21c>
 8009770:	9b04      	ldr	r3, [sp, #16]
 8009772:	3b01      	subs	r3, #1
 8009774:	9304      	str	r3, [sp, #16]
 8009776:	2300      	movs	r3, #0
 8009778:	9315      	str	r3, [sp, #84]	@ 0x54
 800977a:	2200      	movs	r2, #0
 800977c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800977e:	9206      	str	r2, [sp, #24]
 8009780:	1bdb      	subs	r3, r3, r7
 8009782:	1e5a      	subs	r2, r3, #1
 8009784:	d53e      	bpl.n	8009804 <_dtoa_r+0x220>
 8009786:	2201      	movs	r2, #1
 8009788:	1ad3      	subs	r3, r2, r3
 800978a:	9306      	str	r3, [sp, #24]
 800978c:	2300      	movs	r3, #0
 800978e:	930d      	str	r3, [sp, #52]	@ 0x34
 8009790:	9b04      	ldr	r3, [sp, #16]
 8009792:	2b00      	cmp	r3, #0
 8009794:	db38      	blt.n	8009808 <_dtoa_r+0x224>
 8009796:	9a04      	ldr	r2, [sp, #16]
 8009798:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800979a:	4694      	mov	ip, r2
 800979c:	4463      	add	r3, ip
 800979e:	930d      	str	r3, [sp, #52]	@ 0x34
 80097a0:	2300      	movs	r3, #0
 80097a2:	9214      	str	r2, [sp, #80]	@ 0x50
 80097a4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80097a6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80097a8:	2401      	movs	r4, #1
 80097aa:	2b09      	cmp	r3, #9
 80097ac:	d862      	bhi.n	8009874 <_dtoa_r+0x290>
 80097ae:	2b05      	cmp	r3, #5
 80097b0:	dd02      	ble.n	80097b8 <_dtoa_r+0x1d4>
 80097b2:	2400      	movs	r4, #0
 80097b4:	3b04      	subs	r3, #4
 80097b6:	9322      	str	r3, [sp, #136]	@ 0x88
 80097b8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80097ba:	1e98      	subs	r0, r3, #2
 80097bc:	2803      	cmp	r0, #3
 80097be:	d863      	bhi.n	8009888 <_dtoa_r+0x2a4>
 80097c0:	f7f6 fca6 	bl	8000110 <__gnu_thumb1_case_uqi>
 80097c4:	2b385654 	.word	0x2b385654
 80097c8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80097ca:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80097cc:	18f6      	adds	r6, r6, r3
 80097ce:	4b68      	ldr	r3, [pc, #416]	@ (8009970 <_dtoa_r+0x38c>)
 80097d0:	18f2      	adds	r2, r6, r3
 80097d2:	2a20      	cmp	r2, #32
 80097d4:	dd0f      	ble.n	80097f6 <_dtoa_r+0x212>
 80097d6:	2340      	movs	r3, #64	@ 0x40
 80097d8:	1a9b      	subs	r3, r3, r2
 80097da:	409f      	lsls	r7, r3
 80097dc:	4b65      	ldr	r3, [pc, #404]	@ (8009974 <_dtoa_r+0x390>)
 80097de:	0038      	movs	r0, r7
 80097e0:	18f3      	adds	r3, r6, r3
 80097e2:	40dc      	lsrs	r4, r3
 80097e4:	4320      	orrs	r0, r4
 80097e6:	f7f9 fe85 	bl	80034f4 <__aeabi_ui2d>
 80097ea:	2201      	movs	r2, #1
 80097ec:	4b62      	ldr	r3, [pc, #392]	@ (8009978 <_dtoa_r+0x394>)
 80097ee:	1e77      	subs	r7, r6, #1
 80097f0:	18cb      	adds	r3, r1, r3
 80097f2:	9218      	str	r2, [sp, #96]	@ 0x60
 80097f4:	e776      	b.n	80096e4 <_dtoa_r+0x100>
 80097f6:	2320      	movs	r3, #32
 80097f8:	0020      	movs	r0, r4
 80097fa:	1a9b      	subs	r3, r3, r2
 80097fc:	4098      	lsls	r0, r3
 80097fe:	e7f2      	b.n	80097e6 <_dtoa_r+0x202>
 8009800:	9015      	str	r0, [sp, #84]	@ 0x54
 8009802:	e7ba      	b.n	800977a <_dtoa_r+0x196>
 8009804:	920d      	str	r2, [sp, #52]	@ 0x34
 8009806:	e7c3      	b.n	8009790 <_dtoa_r+0x1ac>
 8009808:	9b06      	ldr	r3, [sp, #24]
 800980a:	9a04      	ldr	r2, [sp, #16]
 800980c:	1a9b      	subs	r3, r3, r2
 800980e:	9306      	str	r3, [sp, #24]
 8009810:	4253      	negs	r3, r2
 8009812:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009814:	2300      	movs	r3, #0
 8009816:	9314      	str	r3, [sp, #80]	@ 0x50
 8009818:	e7c5      	b.n	80097a6 <_dtoa_r+0x1c2>
 800981a:	2301      	movs	r3, #1
 800981c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800981e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009820:	4694      	mov	ip, r2
 8009822:	9b04      	ldr	r3, [sp, #16]
 8009824:	4463      	add	r3, ip
 8009826:	930e      	str	r3, [sp, #56]	@ 0x38
 8009828:	3301      	adds	r3, #1
 800982a:	9309      	str	r3, [sp, #36]	@ 0x24
 800982c:	2b00      	cmp	r3, #0
 800982e:	dc08      	bgt.n	8009842 <_dtoa_r+0x25e>
 8009830:	2301      	movs	r3, #1
 8009832:	e006      	b.n	8009842 <_dtoa_r+0x25e>
 8009834:	2301      	movs	r3, #1
 8009836:	9310      	str	r3, [sp, #64]	@ 0x40
 8009838:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800983a:	2b00      	cmp	r3, #0
 800983c:	dd28      	ble.n	8009890 <_dtoa_r+0x2ac>
 800983e:	930e      	str	r3, [sp, #56]	@ 0x38
 8009840:	9309      	str	r3, [sp, #36]	@ 0x24
 8009842:	9a03      	ldr	r2, [sp, #12]
 8009844:	2100      	movs	r1, #0
 8009846:	69d0      	ldr	r0, [r2, #28]
 8009848:	2204      	movs	r2, #4
 800984a:	0015      	movs	r5, r2
 800984c:	3514      	adds	r5, #20
 800984e:	429d      	cmp	r5, r3
 8009850:	d923      	bls.n	800989a <_dtoa_r+0x2b6>
 8009852:	6041      	str	r1, [r0, #4]
 8009854:	9803      	ldr	r0, [sp, #12]
 8009856:	f000 fdbb 	bl	800a3d0 <_Balloc>
 800985a:	9008      	str	r0, [sp, #32]
 800985c:	2800      	cmp	r0, #0
 800985e:	d11f      	bne.n	80098a0 <_dtoa_r+0x2bc>
 8009860:	21b0      	movs	r1, #176	@ 0xb0
 8009862:	4b46      	ldr	r3, [pc, #280]	@ (800997c <_dtoa_r+0x398>)
 8009864:	4831      	ldr	r0, [pc, #196]	@ (800992c <_dtoa_r+0x348>)
 8009866:	9a08      	ldr	r2, [sp, #32]
 8009868:	31ff      	adds	r1, #255	@ 0xff
 800986a:	e6d0      	b.n	800960e <_dtoa_r+0x2a>
 800986c:	2300      	movs	r3, #0
 800986e:	e7e2      	b.n	8009836 <_dtoa_r+0x252>
 8009870:	2300      	movs	r3, #0
 8009872:	e7d3      	b.n	800981c <_dtoa_r+0x238>
 8009874:	2300      	movs	r3, #0
 8009876:	9410      	str	r4, [sp, #64]	@ 0x40
 8009878:	9322      	str	r3, [sp, #136]	@ 0x88
 800987a:	3b01      	subs	r3, #1
 800987c:	2200      	movs	r2, #0
 800987e:	930e      	str	r3, [sp, #56]	@ 0x38
 8009880:	9309      	str	r3, [sp, #36]	@ 0x24
 8009882:	3313      	adds	r3, #19
 8009884:	9223      	str	r2, [sp, #140]	@ 0x8c
 8009886:	e7dc      	b.n	8009842 <_dtoa_r+0x25e>
 8009888:	2301      	movs	r3, #1
 800988a:	9310      	str	r3, [sp, #64]	@ 0x40
 800988c:	3b02      	subs	r3, #2
 800988e:	e7f5      	b.n	800987c <_dtoa_r+0x298>
 8009890:	2301      	movs	r3, #1
 8009892:	001a      	movs	r2, r3
 8009894:	930e      	str	r3, [sp, #56]	@ 0x38
 8009896:	9309      	str	r3, [sp, #36]	@ 0x24
 8009898:	e7f4      	b.n	8009884 <_dtoa_r+0x2a0>
 800989a:	3101      	adds	r1, #1
 800989c:	0052      	lsls	r2, r2, #1
 800989e:	e7d4      	b.n	800984a <_dtoa_r+0x266>
 80098a0:	9b03      	ldr	r3, [sp, #12]
 80098a2:	9a08      	ldr	r2, [sp, #32]
 80098a4:	69db      	ldr	r3, [r3, #28]
 80098a6:	601a      	str	r2, [r3, #0]
 80098a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098aa:	2b0e      	cmp	r3, #14
 80098ac:	d900      	bls.n	80098b0 <_dtoa_r+0x2cc>
 80098ae:	e0d6      	b.n	8009a5e <_dtoa_r+0x47a>
 80098b0:	2c00      	cmp	r4, #0
 80098b2:	d100      	bne.n	80098b6 <_dtoa_r+0x2d2>
 80098b4:	e0d3      	b.n	8009a5e <_dtoa_r+0x47a>
 80098b6:	9b04      	ldr	r3, [sp, #16]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	dd63      	ble.n	8009984 <_dtoa_r+0x3a0>
 80098bc:	210f      	movs	r1, #15
 80098be:	9a04      	ldr	r2, [sp, #16]
 80098c0:	4b2a      	ldr	r3, [pc, #168]	@ (800996c <_dtoa_r+0x388>)
 80098c2:	400a      	ands	r2, r1
 80098c4:	00d2      	lsls	r2, r2, #3
 80098c6:	189b      	adds	r3, r3, r2
 80098c8:	681e      	ldr	r6, [r3, #0]
 80098ca:	685f      	ldr	r7, [r3, #4]
 80098cc:	9b04      	ldr	r3, [sp, #16]
 80098ce:	2402      	movs	r4, #2
 80098d0:	111d      	asrs	r5, r3, #4
 80098d2:	05db      	lsls	r3, r3, #23
 80098d4:	d50a      	bpl.n	80098ec <_dtoa_r+0x308>
 80098d6:	4b2a      	ldr	r3, [pc, #168]	@ (8009980 <_dtoa_r+0x39c>)
 80098d8:	400d      	ands	r5, r1
 80098da:	6a1a      	ldr	r2, [r3, #32]
 80098dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098de:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80098e0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80098e2:	f7f8 fa51 	bl	8001d88 <__aeabi_ddiv>
 80098e6:	900a      	str	r0, [sp, #40]	@ 0x28
 80098e8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80098ea:	3401      	adds	r4, #1
 80098ec:	4b24      	ldr	r3, [pc, #144]	@ (8009980 <_dtoa_r+0x39c>)
 80098ee:	930c      	str	r3, [sp, #48]	@ 0x30
 80098f0:	2d00      	cmp	r5, #0
 80098f2:	d108      	bne.n	8009906 <_dtoa_r+0x322>
 80098f4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80098f6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80098f8:	0032      	movs	r2, r6
 80098fa:	003b      	movs	r3, r7
 80098fc:	f7f8 fa44 	bl	8001d88 <__aeabi_ddiv>
 8009900:	900a      	str	r0, [sp, #40]	@ 0x28
 8009902:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009904:	e059      	b.n	80099ba <_dtoa_r+0x3d6>
 8009906:	2301      	movs	r3, #1
 8009908:	421d      	tst	r5, r3
 800990a:	d009      	beq.n	8009920 <_dtoa_r+0x33c>
 800990c:	18e4      	adds	r4, r4, r3
 800990e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009910:	0030      	movs	r0, r6
 8009912:	681a      	ldr	r2, [r3, #0]
 8009914:	685b      	ldr	r3, [r3, #4]
 8009916:	0039      	movs	r1, r7
 8009918:	f7f8 fe70 	bl	80025fc <__aeabi_dmul>
 800991c:	0006      	movs	r6, r0
 800991e:	000f      	movs	r7, r1
 8009920:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009922:	106d      	asrs	r5, r5, #1
 8009924:	3308      	adds	r3, #8
 8009926:	e7e2      	b.n	80098ee <_dtoa_r+0x30a>
 8009928:	0800daac 	.word	0x0800daac
 800992c:	0800dac3 	.word	0x0800dac3
 8009930:	7ff00000 	.word	0x7ff00000
 8009934:	0000270f 	.word	0x0000270f
 8009938:	0800daa8 	.word	0x0800daa8
 800993c:	0800daab 	.word	0x0800daab
 8009940:	0800da7c 	.word	0x0800da7c
 8009944:	0800da7b 	.word	0x0800da7b
 8009948:	3ff00000 	.word	0x3ff00000
 800994c:	fffffc01 	.word	0xfffffc01
 8009950:	3ff80000 	.word	0x3ff80000
 8009954:	636f4361 	.word	0x636f4361
 8009958:	3fd287a7 	.word	0x3fd287a7
 800995c:	8b60c8b3 	.word	0x8b60c8b3
 8009960:	3fc68a28 	.word	0x3fc68a28
 8009964:	509f79fb 	.word	0x509f79fb
 8009968:	3fd34413 	.word	0x3fd34413
 800996c:	0800dc90 	.word	0x0800dc90
 8009970:	00000432 	.word	0x00000432
 8009974:	00000412 	.word	0x00000412
 8009978:	fe100000 	.word	0xfe100000
 800997c:	0800db1b 	.word	0x0800db1b
 8009980:	0800dc68 	.word	0x0800dc68
 8009984:	9b04      	ldr	r3, [sp, #16]
 8009986:	2402      	movs	r4, #2
 8009988:	2b00      	cmp	r3, #0
 800998a:	d016      	beq.n	80099ba <_dtoa_r+0x3d6>
 800998c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800998e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009990:	220f      	movs	r2, #15
 8009992:	425d      	negs	r5, r3
 8009994:	402a      	ands	r2, r5
 8009996:	4bd5      	ldr	r3, [pc, #852]	@ (8009cec <_dtoa_r+0x708>)
 8009998:	00d2      	lsls	r2, r2, #3
 800999a:	189b      	adds	r3, r3, r2
 800999c:	681a      	ldr	r2, [r3, #0]
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	f7f8 fe2c 	bl	80025fc <__aeabi_dmul>
 80099a4:	2701      	movs	r7, #1
 80099a6:	2300      	movs	r3, #0
 80099a8:	900a      	str	r0, [sp, #40]	@ 0x28
 80099aa:	910b      	str	r1, [sp, #44]	@ 0x2c
 80099ac:	4ed0      	ldr	r6, [pc, #832]	@ (8009cf0 <_dtoa_r+0x70c>)
 80099ae:	112d      	asrs	r5, r5, #4
 80099b0:	2d00      	cmp	r5, #0
 80099b2:	d000      	beq.n	80099b6 <_dtoa_r+0x3d2>
 80099b4:	e095      	b.n	8009ae2 <_dtoa_r+0x4fe>
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d1a2      	bne.n	8009900 <_dtoa_r+0x31c>
 80099ba:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80099bc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80099be:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d100      	bne.n	80099c6 <_dtoa_r+0x3e2>
 80099c4:	e098      	b.n	8009af8 <_dtoa_r+0x514>
 80099c6:	2200      	movs	r2, #0
 80099c8:	0030      	movs	r0, r6
 80099ca:	0039      	movs	r1, r7
 80099cc:	4bc9      	ldr	r3, [pc, #804]	@ (8009cf4 <_dtoa_r+0x710>)
 80099ce:	f7f6 fd49 	bl	8000464 <__aeabi_dcmplt>
 80099d2:	2800      	cmp	r0, #0
 80099d4:	d100      	bne.n	80099d8 <_dtoa_r+0x3f4>
 80099d6:	e08f      	b.n	8009af8 <_dtoa_r+0x514>
 80099d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d100      	bne.n	80099e0 <_dtoa_r+0x3fc>
 80099de:	e08b      	b.n	8009af8 <_dtoa_r+0x514>
 80099e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	dd37      	ble.n	8009a56 <_dtoa_r+0x472>
 80099e6:	9b04      	ldr	r3, [sp, #16]
 80099e8:	2200      	movs	r2, #0
 80099ea:	3b01      	subs	r3, #1
 80099ec:	930c      	str	r3, [sp, #48]	@ 0x30
 80099ee:	0030      	movs	r0, r6
 80099f0:	4bc1      	ldr	r3, [pc, #772]	@ (8009cf8 <_dtoa_r+0x714>)
 80099f2:	0039      	movs	r1, r7
 80099f4:	f7f8 fe02 	bl	80025fc <__aeabi_dmul>
 80099f8:	900a      	str	r0, [sp, #40]	@ 0x28
 80099fa:	910b      	str	r1, [sp, #44]	@ 0x2c
 80099fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80099fe:	3401      	adds	r4, #1
 8009a00:	0020      	movs	r0, r4
 8009a02:	9311      	str	r3, [sp, #68]	@ 0x44
 8009a04:	f7f9 fd48 	bl	8003498 <__aeabi_i2d>
 8009a08:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009a0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a0c:	f7f8 fdf6 	bl	80025fc <__aeabi_dmul>
 8009a10:	4bba      	ldr	r3, [pc, #744]	@ (8009cfc <_dtoa_r+0x718>)
 8009a12:	2200      	movs	r2, #0
 8009a14:	f7f7 fdf2 	bl	80015fc <__aeabi_dadd>
 8009a18:	4bb9      	ldr	r3, [pc, #740]	@ (8009d00 <_dtoa_r+0x71c>)
 8009a1a:	0006      	movs	r6, r0
 8009a1c:	18cf      	adds	r7, r1, r3
 8009a1e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d16d      	bne.n	8009b00 <_dtoa_r+0x51c>
 8009a24:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009a26:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009a28:	2200      	movs	r2, #0
 8009a2a:	4bb6      	ldr	r3, [pc, #728]	@ (8009d04 <_dtoa_r+0x720>)
 8009a2c:	f7f9 f8cc 	bl	8002bc8 <__aeabi_dsub>
 8009a30:	0032      	movs	r2, r6
 8009a32:	003b      	movs	r3, r7
 8009a34:	0004      	movs	r4, r0
 8009a36:	000d      	movs	r5, r1
 8009a38:	f7f6 fd28 	bl	800048c <__aeabi_dcmpgt>
 8009a3c:	2800      	cmp	r0, #0
 8009a3e:	d000      	beq.n	8009a42 <_dtoa_r+0x45e>
 8009a40:	e2b6      	b.n	8009fb0 <_dtoa_r+0x9cc>
 8009a42:	2180      	movs	r1, #128	@ 0x80
 8009a44:	0609      	lsls	r1, r1, #24
 8009a46:	187b      	adds	r3, r7, r1
 8009a48:	0032      	movs	r2, r6
 8009a4a:	0020      	movs	r0, r4
 8009a4c:	0029      	movs	r1, r5
 8009a4e:	f7f6 fd09 	bl	8000464 <__aeabi_dcmplt>
 8009a52:	2800      	cmp	r0, #0
 8009a54:	d128      	bne.n	8009aa8 <_dtoa_r+0x4c4>
 8009a56:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009a58:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8009a5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a5c:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009a5e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	da00      	bge.n	8009a66 <_dtoa_r+0x482>
 8009a64:	e174      	b.n	8009d50 <_dtoa_r+0x76c>
 8009a66:	9a04      	ldr	r2, [sp, #16]
 8009a68:	2a0e      	cmp	r2, #14
 8009a6a:	dd00      	ble.n	8009a6e <_dtoa_r+0x48a>
 8009a6c:	e170      	b.n	8009d50 <_dtoa_r+0x76c>
 8009a6e:	4b9f      	ldr	r3, [pc, #636]	@ (8009cec <_dtoa_r+0x708>)
 8009a70:	00d2      	lsls	r2, r2, #3
 8009a72:	189b      	adds	r3, r3, r2
 8009a74:	685c      	ldr	r4, [r3, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	9306      	str	r3, [sp, #24]
 8009a7a:	9407      	str	r4, [sp, #28]
 8009a7c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	db00      	blt.n	8009a84 <_dtoa_r+0x4a0>
 8009a82:	e0e7      	b.n	8009c54 <_dtoa_r+0x670>
 8009a84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	dd00      	ble.n	8009a8c <_dtoa_r+0x4a8>
 8009a8a:	e0e3      	b.n	8009c54 <_dtoa_r+0x670>
 8009a8c:	d10c      	bne.n	8009aa8 <_dtoa_r+0x4c4>
 8009a8e:	9806      	ldr	r0, [sp, #24]
 8009a90:	9907      	ldr	r1, [sp, #28]
 8009a92:	2200      	movs	r2, #0
 8009a94:	4b9b      	ldr	r3, [pc, #620]	@ (8009d04 <_dtoa_r+0x720>)
 8009a96:	f7f8 fdb1 	bl	80025fc <__aeabi_dmul>
 8009a9a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009a9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a9e:	f7f6 fcff 	bl	80004a0 <__aeabi_dcmpge>
 8009aa2:	2800      	cmp	r0, #0
 8009aa4:	d100      	bne.n	8009aa8 <_dtoa_r+0x4c4>
 8009aa6:	e286      	b.n	8009fb6 <_dtoa_r+0x9d2>
 8009aa8:	2600      	movs	r6, #0
 8009aaa:	0037      	movs	r7, r6
 8009aac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009aae:	9c08      	ldr	r4, [sp, #32]
 8009ab0:	43db      	mvns	r3, r3
 8009ab2:	930c      	str	r3, [sp, #48]	@ 0x30
 8009ab4:	9704      	str	r7, [sp, #16]
 8009ab6:	2700      	movs	r7, #0
 8009ab8:	0031      	movs	r1, r6
 8009aba:	9803      	ldr	r0, [sp, #12]
 8009abc:	f000 fccc 	bl	800a458 <_Bfree>
 8009ac0:	9b04      	ldr	r3, [sp, #16]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d100      	bne.n	8009ac8 <_dtoa_r+0x4e4>
 8009ac6:	e0bb      	b.n	8009c40 <_dtoa_r+0x65c>
 8009ac8:	2f00      	cmp	r7, #0
 8009aca:	d005      	beq.n	8009ad8 <_dtoa_r+0x4f4>
 8009acc:	429f      	cmp	r7, r3
 8009ace:	d003      	beq.n	8009ad8 <_dtoa_r+0x4f4>
 8009ad0:	0039      	movs	r1, r7
 8009ad2:	9803      	ldr	r0, [sp, #12]
 8009ad4:	f000 fcc0 	bl	800a458 <_Bfree>
 8009ad8:	9904      	ldr	r1, [sp, #16]
 8009ada:	9803      	ldr	r0, [sp, #12]
 8009adc:	f000 fcbc 	bl	800a458 <_Bfree>
 8009ae0:	e0ae      	b.n	8009c40 <_dtoa_r+0x65c>
 8009ae2:	423d      	tst	r5, r7
 8009ae4:	d005      	beq.n	8009af2 <_dtoa_r+0x50e>
 8009ae6:	6832      	ldr	r2, [r6, #0]
 8009ae8:	6873      	ldr	r3, [r6, #4]
 8009aea:	f7f8 fd87 	bl	80025fc <__aeabi_dmul>
 8009aee:	003b      	movs	r3, r7
 8009af0:	3401      	adds	r4, #1
 8009af2:	106d      	asrs	r5, r5, #1
 8009af4:	3608      	adds	r6, #8
 8009af6:	e75b      	b.n	80099b0 <_dtoa_r+0x3cc>
 8009af8:	9b04      	ldr	r3, [sp, #16]
 8009afa:	930c      	str	r3, [sp, #48]	@ 0x30
 8009afc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009afe:	e77f      	b.n	8009a00 <_dtoa_r+0x41c>
 8009b00:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009b02:	4b7a      	ldr	r3, [pc, #488]	@ (8009cec <_dtoa_r+0x708>)
 8009b04:	3a01      	subs	r2, #1
 8009b06:	00d2      	lsls	r2, r2, #3
 8009b08:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8009b0a:	189b      	adds	r3, r3, r2
 8009b0c:	681a      	ldr	r2, [r3, #0]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	2900      	cmp	r1, #0
 8009b12:	d04c      	beq.n	8009bae <_dtoa_r+0x5ca>
 8009b14:	2000      	movs	r0, #0
 8009b16:	497c      	ldr	r1, [pc, #496]	@ (8009d08 <_dtoa_r+0x724>)
 8009b18:	f7f8 f936 	bl	8001d88 <__aeabi_ddiv>
 8009b1c:	0032      	movs	r2, r6
 8009b1e:	003b      	movs	r3, r7
 8009b20:	f7f9 f852 	bl	8002bc8 <__aeabi_dsub>
 8009b24:	9a08      	ldr	r2, [sp, #32]
 8009b26:	0006      	movs	r6, r0
 8009b28:	4694      	mov	ip, r2
 8009b2a:	000f      	movs	r7, r1
 8009b2c:	9b08      	ldr	r3, [sp, #32]
 8009b2e:	9316      	str	r3, [sp, #88]	@ 0x58
 8009b30:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009b32:	4463      	add	r3, ip
 8009b34:	9311      	str	r3, [sp, #68]	@ 0x44
 8009b36:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009b38:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009b3a:	f7f9 fc71 	bl	8003420 <__aeabi_d2iz>
 8009b3e:	0005      	movs	r5, r0
 8009b40:	f7f9 fcaa 	bl	8003498 <__aeabi_i2d>
 8009b44:	0002      	movs	r2, r0
 8009b46:	000b      	movs	r3, r1
 8009b48:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009b4a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009b4c:	f7f9 f83c 	bl	8002bc8 <__aeabi_dsub>
 8009b50:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009b52:	3530      	adds	r5, #48	@ 0x30
 8009b54:	1c5c      	adds	r4, r3, #1
 8009b56:	701d      	strb	r5, [r3, #0]
 8009b58:	0032      	movs	r2, r6
 8009b5a:	003b      	movs	r3, r7
 8009b5c:	900a      	str	r0, [sp, #40]	@ 0x28
 8009b5e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009b60:	f7f6 fc80 	bl	8000464 <__aeabi_dcmplt>
 8009b64:	2800      	cmp	r0, #0
 8009b66:	d16b      	bne.n	8009c40 <_dtoa_r+0x65c>
 8009b68:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009b6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b6c:	2000      	movs	r0, #0
 8009b6e:	4961      	ldr	r1, [pc, #388]	@ (8009cf4 <_dtoa_r+0x710>)
 8009b70:	f7f9 f82a 	bl	8002bc8 <__aeabi_dsub>
 8009b74:	0032      	movs	r2, r6
 8009b76:	003b      	movs	r3, r7
 8009b78:	f7f6 fc74 	bl	8000464 <__aeabi_dcmplt>
 8009b7c:	2800      	cmp	r0, #0
 8009b7e:	d000      	beq.n	8009b82 <_dtoa_r+0x59e>
 8009b80:	e0c6      	b.n	8009d10 <_dtoa_r+0x72c>
 8009b82:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009b84:	42a3      	cmp	r3, r4
 8009b86:	d100      	bne.n	8009b8a <_dtoa_r+0x5a6>
 8009b88:	e765      	b.n	8009a56 <_dtoa_r+0x472>
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	0030      	movs	r0, r6
 8009b8e:	0039      	movs	r1, r7
 8009b90:	4b59      	ldr	r3, [pc, #356]	@ (8009cf8 <_dtoa_r+0x714>)
 8009b92:	f7f8 fd33 	bl	80025fc <__aeabi_dmul>
 8009b96:	2200      	movs	r2, #0
 8009b98:	0006      	movs	r6, r0
 8009b9a:	000f      	movs	r7, r1
 8009b9c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009b9e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009ba0:	4b55      	ldr	r3, [pc, #340]	@ (8009cf8 <_dtoa_r+0x714>)
 8009ba2:	f7f8 fd2b 	bl	80025fc <__aeabi_dmul>
 8009ba6:	9416      	str	r4, [sp, #88]	@ 0x58
 8009ba8:	900a      	str	r0, [sp, #40]	@ 0x28
 8009baa:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009bac:	e7c3      	b.n	8009b36 <_dtoa_r+0x552>
 8009bae:	0030      	movs	r0, r6
 8009bb0:	0039      	movs	r1, r7
 8009bb2:	f7f8 fd23 	bl	80025fc <__aeabi_dmul>
 8009bb6:	9d08      	ldr	r5, [sp, #32]
 8009bb8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009bba:	002b      	movs	r3, r5
 8009bbc:	4694      	mov	ip, r2
 8009bbe:	9016      	str	r0, [sp, #88]	@ 0x58
 8009bc0:	9117      	str	r1, [sp, #92]	@ 0x5c
 8009bc2:	4463      	add	r3, ip
 8009bc4:	9319      	str	r3, [sp, #100]	@ 0x64
 8009bc6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009bc8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009bca:	f7f9 fc29 	bl	8003420 <__aeabi_d2iz>
 8009bce:	0004      	movs	r4, r0
 8009bd0:	f7f9 fc62 	bl	8003498 <__aeabi_i2d>
 8009bd4:	000b      	movs	r3, r1
 8009bd6:	0002      	movs	r2, r0
 8009bd8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009bda:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009bdc:	f7f8 fff4 	bl	8002bc8 <__aeabi_dsub>
 8009be0:	3430      	adds	r4, #48	@ 0x30
 8009be2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009be4:	702c      	strb	r4, [r5, #0]
 8009be6:	3501      	adds	r5, #1
 8009be8:	0006      	movs	r6, r0
 8009bea:	000f      	movs	r7, r1
 8009bec:	42ab      	cmp	r3, r5
 8009bee:	d12a      	bne.n	8009c46 <_dtoa_r+0x662>
 8009bf0:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8009bf2:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8009bf4:	9b08      	ldr	r3, [sp, #32]
 8009bf6:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8009bf8:	469c      	mov	ip, r3
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	4b42      	ldr	r3, [pc, #264]	@ (8009d08 <_dtoa_r+0x724>)
 8009bfe:	4464      	add	r4, ip
 8009c00:	f7f7 fcfc 	bl	80015fc <__aeabi_dadd>
 8009c04:	0002      	movs	r2, r0
 8009c06:	000b      	movs	r3, r1
 8009c08:	0030      	movs	r0, r6
 8009c0a:	0039      	movs	r1, r7
 8009c0c:	f7f6 fc3e 	bl	800048c <__aeabi_dcmpgt>
 8009c10:	2800      	cmp	r0, #0
 8009c12:	d000      	beq.n	8009c16 <_dtoa_r+0x632>
 8009c14:	e07c      	b.n	8009d10 <_dtoa_r+0x72c>
 8009c16:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009c18:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009c1a:	2000      	movs	r0, #0
 8009c1c:	493a      	ldr	r1, [pc, #232]	@ (8009d08 <_dtoa_r+0x724>)
 8009c1e:	f7f8 ffd3 	bl	8002bc8 <__aeabi_dsub>
 8009c22:	0002      	movs	r2, r0
 8009c24:	000b      	movs	r3, r1
 8009c26:	0030      	movs	r0, r6
 8009c28:	0039      	movs	r1, r7
 8009c2a:	f7f6 fc1b 	bl	8000464 <__aeabi_dcmplt>
 8009c2e:	2800      	cmp	r0, #0
 8009c30:	d100      	bne.n	8009c34 <_dtoa_r+0x650>
 8009c32:	e710      	b.n	8009a56 <_dtoa_r+0x472>
 8009c34:	0023      	movs	r3, r4
 8009c36:	3c01      	subs	r4, #1
 8009c38:	7822      	ldrb	r2, [r4, #0]
 8009c3a:	2a30      	cmp	r2, #48	@ 0x30
 8009c3c:	d0fa      	beq.n	8009c34 <_dtoa_r+0x650>
 8009c3e:	001c      	movs	r4, r3
 8009c40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009c42:	9304      	str	r3, [sp, #16]
 8009c44:	e042      	b.n	8009ccc <_dtoa_r+0x6e8>
 8009c46:	2200      	movs	r2, #0
 8009c48:	4b2b      	ldr	r3, [pc, #172]	@ (8009cf8 <_dtoa_r+0x714>)
 8009c4a:	f7f8 fcd7 	bl	80025fc <__aeabi_dmul>
 8009c4e:	900a      	str	r0, [sp, #40]	@ 0x28
 8009c50:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009c52:	e7b8      	b.n	8009bc6 <_dtoa_r+0x5e2>
 8009c54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c56:	9d08      	ldr	r5, [sp, #32]
 8009c58:	3b01      	subs	r3, #1
 8009c5a:	195b      	adds	r3, r3, r5
 8009c5c:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009c5e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8009c60:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c62:	9a06      	ldr	r2, [sp, #24]
 8009c64:	9b07      	ldr	r3, [sp, #28]
 8009c66:	0030      	movs	r0, r6
 8009c68:	0039      	movs	r1, r7
 8009c6a:	f7f8 f88d 	bl	8001d88 <__aeabi_ddiv>
 8009c6e:	f7f9 fbd7 	bl	8003420 <__aeabi_d2iz>
 8009c72:	9009      	str	r0, [sp, #36]	@ 0x24
 8009c74:	f7f9 fc10 	bl	8003498 <__aeabi_i2d>
 8009c78:	9a06      	ldr	r2, [sp, #24]
 8009c7a:	9b07      	ldr	r3, [sp, #28]
 8009c7c:	f7f8 fcbe 	bl	80025fc <__aeabi_dmul>
 8009c80:	0002      	movs	r2, r0
 8009c82:	000b      	movs	r3, r1
 8009c84:	0030      	movs	r0, r6
 8009c86:	0039      	movs	r1, r7
 8009c88:	f7f8 ff9e 	bl	8002bc8 <__aeabi_dsub>
 8009c8c:	002b      	movs	r3, r5
 8009c8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c90:	3501      	adds	r5, #1
 8009c92:	3230      	adds	r2, #48	@ 0x30
 8009c94:	701a      	strb	r2, [r3, #0]
 8009c96:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009c98:	002c      	movs	r4, r5
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d14b      	bne.n	8009d36 <_dtoa_r+0x752>
 8009c9e:	0002      	movs	r2, r0
 8009ca0:	000b      	movs	r3, r1
 8009ca2:	f7f7 fcab 	bl	80015fc <__aeabi_dadd>
 8009ca6:	9a06      	ldr	r2, [sp, #24]
 8009ca8:	9b07      	ldr	r3, [sp, #28]
 8009caa:	0006      	movs	r6, r0
 8009cac:	000f      	movs	r7, r1
 8009cae:	f7f6 fbed 	bl	800048c <__aeabi_dcmpgt>
 8009cb2:	2800      	cmp	r0, #0
 8009cb4:	d12a      	bne.n	8009d0c <_dtoa_r+0x728>
 8009cb6:	9a06      	ldr	r2, [sp, #24]
 8009cb8:	9b07      	ldr	r3, [sp, #28]
 8009cba:	0030      	movs	r0, r6
 8009cbc:	0039      	movs	r1, r7
 8009cbe:	f7f6 fbcb 	bl	8000458 <__aeabi_dcmpeq>
 8009cc2:	2800      	cmp	r0, #0
 8009cc4:	d002      	beq.n	8009ccc <_dtoa_r+0x6e8>
 8009cc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cc8:	07dd      	lsls	r5, r3, #31
 8009cca:	d41f      	bmi.n	8009d0c <_dtoa_r+0x728>
 8009ccc:	9905      	ldr	r1, [sp, #20]
 8009cce:	9803      	ldr	r0, [sp, #12]
 8009cd0:	f000 fbc2 	bl	800a458 <_Bfree>
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	7023      	strb	r3, [r4, #0]
 8009cd8:	9b04      	ldr	r3, [sp, #16]
 8009cda:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009cdc:	3301      	adds	r3, #1
 8009cde:	6013      	str	r3, [r2, #0]
 8009ce0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d100      	bne.n	8009ce8 <_dtoa_r+0x704>
 8009ce6:	e4c7      	b.n	8009678 <_dtoa_r+0x94>
 8009ce8:	601c      	str	r4, [r3, #0]
 8009cea:	e4c5      	b.n	8009678 <_dtoa_r+0x94>
 8009cec:	0800dc90 	.word	0x0800dc90
 8009cf0:	0800dc68 	.word	0x0800dc68
 8009cf4:	3ff00000 	.word	0x3ff00000
 8009cf8:	40240000 	.word	0x40240000
 8009cfc:	401c0000 	.word	0x401c0000
 8009d00:	fcc00000 	.word	0xfcc00000
 8009d04:	40140000 	.word	0x40140000
 8009d08:	3fe00000 	.word	0x3fe00000
 8009d0c:	9b04      	ldr	r3, [sp, #16]
 8009d0e:	930c      	str	r3, [sp, #48]	@ 0x30
 8009d10:	0023      	movs	r3, r4
 8009d12:	001c      	movs	r4, r3
 8009d14:	3b01      	subs	r3, #1
 8009d16:	781a      	ldrb	r2, [r3, #0]
 8009d18:	2a39      	cmp	r2, #57	@ 0x39
 8009d1a:	d108      	bne.n	8009d2e <_dtoa_r+0x74a>
 8009d1c:	9a08      	ldr	r2, [sp, #32]
 8009d1e:	429a      	cmp	r2, r3
 8009d20:	d1f7      	bne.n	8009d12 <_dtoa_r+0x72e>
 8009d22:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009d24:	9908      	ldr	r1, [sp, #32]
 8009d26:	3201      	adds	r2, #1
 8009d28:	920c      	str	r2, [sp, #48]	@ 0x30
 8009d2a:	2230      	movs	r2, #48	@ 0x30
 8009d2c:	700a      	strb	r2, [r1, #0]
 8009d2e:	781a      	ldrb	r2, [r3, #0]
 8009d30:	3201      	adds	r2, #1
 8009d32:	701a      	strb	r2, [r3, #0]
 8009d34:	e784      	b.n	8009c40 <_dtoa_r+0x65c>
 8009d36:	2200      	movs	r2, #0
 8009d38:	4bc6      	ldr	r3, [pc, #792]	@ (800a054 <_dtoa_r+0xa70>)
 8009d3a:	f7f8 fc5f 	bl	80025fc <__aeabi_dmul>
 8009d3e:	2200      	movs	r2, #0
 8009d40:	2300      	movs	r3, #0
 8009d42:	0006      	movs	r6, r0
 8009d44:	000f      	movs	r7, r1
 8009d46:	f7f6 fb87 	bl	8000458 <__aeabi_dcmpeq>
 8009d4a:	2800      	cmp	r0, #0
 8009d4c:	d089      	beq.n	8009c62 <_dtoa_r+0x67e>
 8009d4e:	e7bd      	b.n	8009ccc <_dtoa_r+0x6e8>
 8009d50:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8009d52:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8009d54:	9c06      	ldr	r4, [sp, #24]
 8009d56:	2f00      	cmp	r7, #0
 8009d58:	d014      	beq.n	8009d84 <_dtoa_r+0x7a0>
 8009d5a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009d5c:	2a01      	cmp	r2, #1
 8009d5e:	dd00      	ble.n	8009d62 <_dtoa_r+0x77e>
 8009d60:	e0e4      	b.n	8009f2c <_dtoa_r+0x948>
 8009d62:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8009d64:	2a00      	cmp	r2, #0
 8009d66:	d100      	bne.n	8009d6a <_dtoa_r+0x786>
 8009d68:	e0da      	b.n	8009f20 <_dtoa_r+0x93c>
 8009d6a:	4abb      	ldr	r2, [pc, #748]	@ (800a058 <_dtoa_r+0xa74>)
 8009d6c:	189b      	adds	r3, r3, r2
 8009d6e:	9a06      	ldr	r2, [sp, #24]
 8009d70:	2101      	movs	r1, #1
 8009d72:	18d2      	adds	r2, r2, r3
 8009d74:	9206      	str	r2, [sp, #24]
 8009d76:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009d78:	9803      	ldr	r0, [sp, #12]
 8009d7a:	18d3      	adds	r3, r2, r3
 8009d7c:	930d      	str	r3, [sp, #52]	@ 0x34
 8009d7e:	f000 fc23 	bl	800a5c8 <__i2b>
 8009d82:	0007      	movs	r7, r0
 8009d84:	2c00      	cmp	r4, #0
 8009d86:	d00e      	beq.n	8009da6 <_dtoa_r+0x7c2>
 8009d88:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	dd0b      	ble.n	8009da6 <_dtoa_r+0x7c2>
 8009d8e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009d90:	0023      	movs	r3, r4
 8009d92:	4294      	cmp	r4, r2
 8009d94:	dd00      	ble.n	8009d98 <_dtoa_r+0x7b4>
 8009d96:	0013      	movs	r3, r2
 8009d98:	9a06      	ldr	r2, [sp, #24]
 8009d9a:	1ae4      	subs	r4, r4, r3
 8009d9c:	1ad2      	subs	r2, r2, r3
 8009d9e:	9206      	str	r2, [sp, #24]
 8009da0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009da2:	1ad3      	subs	r3, r2, r3
 8009da4:	930d      	str	r3, [sp, #52]	@ 0x34
 8009da6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d021      	beq.n	8009df0 <_dtoa_r+0x80c>
 8009dac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d100      	bne.n	8009db4 <_dtoa_r+0x7d0>
 8009db2:	e0d3      	b.n	8009f5c <_dtoa_r+0x978>
 8009db4:	9e05      	ldr	r6, [sp, #20]
 8009db6:	2d00      	cmp	r5, #0
 8009db8:	d014      	beq.n	8009de4 <_dtoa_r+0x800>
 8009dba:	0039      	movs	r1, r7
 8009dbc:	002a      	movs	r2, r5
 8009dbe:	9803      	ldr	r0, [sp, #12]
 8009dc0:	f000 fcc4 	bl	800a74c <__pow5mult>
 8009dc4:	9a05      	ldr	r2, [sp, #20]
 8009dc6:	0001      	movs	r1, r0
 8009dc8:	0007      	movs	r7, r0
 8009dca:	9803      	ldr	r0, [sp, #12]
 8009dcc:	f000 fc14 	bl	800a5f8 <__multiply>
 8009dd0:	0006      	movs	r6, r0
 8009dd2:	9905      	ldr	r1, [sp, #20]
 8009dd4:	9803      	ldr	r0, [sp, #12]
 8009dd6:	f000 fb3f 	bl	800a458 <_Bfree>
 8009dda:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ddc:	9605      	str	r6, [sp, #20]
 8009dde:	1b5b      	subs	r3, r3, r5
 8009de0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009de2:	d005      	beq.n	8009df0 <_dtoa_r+0x80c>
 8009de4:	0031      	movs	r1, r6
 8009de6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009de8:	9803      	ldr	r0, [sp, #12]
 8009dea:	f000 fcaf 	bl	800a74c <__pow5mult>
 8009dee:	9005      	str	r0, [sp, #20]
 8009df0:	2101      	movs	r1, #1
 8009df2:	9803      	ldr	r0, [sp, #12]
 8009df4:	f000 fbe8 	bl	800a5c8 <__i2b>
 8009df8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009dfa:	0006      	movs	r6, r0
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d100      	bne.n	8009e02 <_dtoa_r+0x81e>
 8009e00:	e1bc      	b.n	800a17c <_dtoa_r+0xb98>
 8009e02:	001a      	movs	r2, r3
 8009e04:	0001      	movs	r1, r0
 8009e06:	9803      	ldr	r0, [sp, #12]
 8009e08:	f000 fca0 	bl	800a74c <__pow5mult>
 8009e0c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009e0e:	0006      	movs	r6, r0
 8009e10:	2500      	movs	r5, #0
 8009e12:	2b01      	cmp	r3, #1
 8009e14:	dc16      	bgt.n	8009e44 <_dtoa_r+0x860>
 8009e16:	2500      	movs	r5, #0
 8009e18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e1a:	42ab      	cmp	r3, r5
 8009e1c:	d10e      	bne.n	8009e3c <_dtoa_r+0x858>
 8009e1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e20:	031b      	lsls	r3, r3, #12
 8009e22:	42ab      	cmp	r3, r5
 8009e24:	d10a      	bne.n	8009e3c <_dtoa_r+0x858>
 8009e26:	4b8d      	ldr	r3, [pc, #564]	@ (800a05c <_dtoa_r+0xa78>)
 8009e28:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009e2a:	4213      	tst	r3, r2
 8009e2c:	d006      	beq.n	8009e3c <_dtoa_r+0x858>
 8009e2e:	9b06      	ldr	r3, [sp, #24]
 8009e30:	3501      	adds	r5, #1
 8009e32:	3301      	adds	r3, #1
 8009e34:	9306      	str	r3, [sp, #24]
 8009e36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009e38:	3301      	adds	r3, #1
 8009e3a:	930d      	str	r3, [sp, #52]	@ 0x34
 8009e3c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009e3e:	2001      	movs	r0, #1
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d008      	beq.n	8009e56 <_dtoa_r+0x872>
 8009e44:	6933      	ldr	r3, [r6, #16]
 8009e46:	3303      	adds	r3, #3
 8009e48:	009b      	lsls	r3, r3, #2
 8009e4a:	18f3      	adds	r3, r6, r3
 8009e4c:	6858      	ldr	r0, [r3, #4]
 8009e4e:	f000 fb6b 	bl	800a528 <__hi0bits>
 8009e52:	2320      	movs	r3, #32
 8009e54:	1a18      	subs	r0, r3, r0
 8009e56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009e58:	1818      	adds	r0, r3, r0
 8009e5a:	0002      	movs	r2, r0
 8009e5c:	231f      	movs	r3, #31
 8009e5e:	401a      	ands	r2, r3
 8009e60:	4218      	tst	r0, r3
 8009e62:	d100      	bne.n	8009e66 <_dtoa_r+0x882>
 8009e64:	e081      	b.n	8009f6a <_dtoa_r+0x986>
 8009e66:	3301      	adds	r3, #1
 8009e68:	1a9b      	subs	r3, r3, r2
 8009e6a:	2b04      	cmp	r3, #4
 8009e6c:	dd79      	ble.n	8009f62 <_dtoa_r+0x97e>
 8009e6e:	231c      	movs	r3, #28
 8009e70:	1a9b      	subs	r3, r3, r2
 8009e72:	9a06      	ldr	r2, [sp, #24]
 8009e74:	18e4      	adds	r4, r4, r3
 8009e76:	18d2      	adds	r2, r2, r3
 8009e78:	9206      	str	r2, [sp, #24]
 8009e7a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009e7c:	18d3      	adds	r3, r2, r3
 8009e7e:	930d      	str	r3, [sp, #52]	@ 0x34
 8009e80:	9b06      	ldr	r3, [sp, #24]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	dd05      	ble.n	8009e92 <_dtoa_r+0x8ae>
 8009e86:	001a      	movs	r2, r3
 8009e88:	9905      	ldr	r1, [sp, #20]
 8009e8a:	9803      	ldr	r0, [sp, #12]
 8009e8c:	f000 fcba 	bl	800a804 <__lshift>
 8009e90:	9005      	str	r0, [sp, #20]
 8009e92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	dd05      	ble.n	8009ea4 <_dtoa_r+0x8c0>
 8009e98:	0031      	movs	r1, r6
 8009e9a:	001a      	movs	r2, r3
 8009e9c:	9803      	ldr	r0, [sp, #12]
 8009e9e:	f000 fcb1 	bl	800a804 <__lshift>
 8009ea2:	0006      	movs	r6, r0
 8009ea4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d061      	beq.n	8009f6e <_dtoa_r+0x98a>
 8009eaa:	0031      	movs	r1, r6
 8009eac:	9805      	ldr	r0, [sp, #20]
 8009eae:	f000 fd15 	bl	800a8dc <__mcmp>
 8009eb2:	2800      	cmp	r0, #0
 8009eb4:	da5b      	bge.n	8009f6e <_dtoa_r+0x98a>
 8009eb6:	9b04      	ldr	r3, [sp, #16]
 8009eb8:	220a      	movs	r2, #10
 8009eba:	3b01      	subs	r3, #1
 8009ebc:	930c      	str	r3, [sp, #48]	@ 0x30
 8009ebe:	9905      	ldr	r1, [sp, #20]
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	9803      	ldr	r0, [sp, #12]
 8009ec4:	f000 faec 	bl	800a4a0 <__multadd>
 8009ec8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009eca:	9005      	str	r0, [sp, #20]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d100      	bne.n	8009ed2 <_dtoa_r+0x8ee>
 8009ed0:	e15b      	b.n	800a18a <_dtoa_r+0xba6>
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	0039      	movs	r1, r7
 8009ed6:	220a      	movs	r2, #10
 8009ed8:	9803      	ldr	r0, [sp, #12]
 8009eda:	f000 fae1 	bl	800a4a0 <__multadd>
 8009ede:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ee0:	0007      	movs	r7, r0
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	dc4d      	bgt.n	8009f82 <_dtoa_r+0x99e>
 8009ee6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009ee8:	2b02      	cmp	r3, #2
 8009eea:	dd46      	ble.n	8009f7a <_dtoa_r+0x996>
 8009eec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d000      	beq.n	8009ef4 <_dtoa_r+0x910>
 8009ef2:	e5db      	b.n	8009aac <_dtoa_r+0x4c8>
 8009ef4:	0031      	movs	r1, r6
 8009ef6:	2205      	movs	r2, #5
 8009ef8:	9803      	ldr	r0, [sp, #12]
 8009efa:	f000 fad1 	bl	800a4a0 <__multadd>
 8009efe:	0006      	movs	r6, r0
 8009f00:	0001      	movs	r1, r0
 8009f02:	9805      	ldr	r0, [sp, #20]
 8009f04:	f000 fcea 	bl	800a8dc <__mcmp>
 8009f08:	2800      	cmp	r0, #0
 8009f0a:	dc00      	bgt.n	8009f0e <_dtoa_r+0x92a>
 8009f0c:	e5ce      	b.n	8009aac <_dtoa_r+0x4c8>
 8009f0e:	9b08      	ldr	r3, [sp, #32]
 8009f10:	9a08      	ldr	r2, [sp, #32]
 8009f12:	1c5c      	adds	r4, r3, #1
 8009f14:	2331      	movs	r3, #49	@ 0x31
 8009f16:	7013      	strb	r3, [r2, #0]
 8009f18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009f1a:	3301      	adds	r3, #1
 8009f1c:	930c      	str	r3, [sp, #48]	@ 0x30
 8009f1e:	e5c9      	b.n	8009ab4 <_dtoa_r+0x4d0>
 8009f20:	2336      	movs	r3, #54	@ 0x36
 8009f22:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009f24:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8009f26:	1a9b      	subs	r3, r3, r2
 8009f28:	9c06      	ldr	r4, [sp, #24]
 8009f2a:	e720      	b.n	8009d6e <_dtoa_r+0x78a>
 8009f2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f2e:	1e5d      	subs	r5, r3, #1
 8009f30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f32:	42ab      	cmp	r3, r5
 8009f34:	db08      	blt.n	8009f48 <_dtoa_r+0x964>
 8009f36:	1b5d      	subs	r5, r3, r5
 8009f38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	daf4      	bge.n	8009f28 <_dtoa_r+0x944>
 8009f3e:	9b06      	ldr	r3, [sp, #24]
 8009f40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f42:	1a9c      	subs	r4, r3, r2
 8009f44:	2300      	movs	r3, #0
 8009f46:	e712      	b.n	8009d6e <_dtoa_r+0x78a>
 8009f48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f4a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009f4c:	1aeb      	subs	r3, r5, r3
 8009f4e:	18d3      	adds	r3, r2, r3
 8009f50:	9314      	str	r3, [sp, #80]	@ 0x50
 8009f52:	950f      	str	r5, [sp, #60]	@ 0x3c
 8009f54:	9c06      	ldr	r4, [sp, #24]
 8009f56:	2500      	movs	r5, #0
 8009f58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f5a:	e708      	b.n	8009d6e <_dtoa_r+0x78a>
 8009f5c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009f5e:	9905      	ldr	r1, [sp, #20]
 8009f60:	e742      	b.n	8009de8 <_dtoa_r+0x804>
 8009f62:	2b04      	cmp	r3, #4
 8009f64:	d08c      	beq.n	8009e80 <_dtoa_r+0x89c>
 8009f66:	331c      	adds	r3, #28
 8009f68:	e783      	b.n	8009e72 <_dtoa_r+0x88e>
 8009f6a:	0013      	movs	r3, r2
 8009f6c:	e7fb      	b.n	8009f66 <_dtoa_r+0x982>
 8009f6e:	9b04      	ldr	r3, [sp, #16]
 8009f70:	930c      	str	r3, [sp, #48]	@ 0x30
 8009f72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f74:	930e      	str	r3, [sp, #56]	@ 0x38
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	ddb5      	ble.n	8009ee6 <_dtoa_r+0x902>
 8009f7a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d100      	bne.n	8009f82 <_dtoa_r+0x99e>
 8009f80:	e107      	b.n	800a192 <_dtoa_r+0xbae>
 8009f82:	2c00      	cmp	r4, #0
 8009f84:	dd05      	ble.n	8009f92 <_dtoa_r+0x9ae>
 8009f86:	0039      	movs	r1, r7
 8009f88:	0022      	movs	r2, r4
 8009f8a:	9803      	ldr	r0, [sp, #12]
 8009f8c:	f000 fc3a 	bl	800a804 <__lshift>
 8009f90:	0007      	movs	r7, r0
 8009f92:	9704      	str	r7, [sp, #16]
 8009f94:	2d00      	cmp	r5, #0
 8009f96:	d020      	beq.n	8009fda <_dtoa_r+0x9f6>
 8009f98:	6879      	ldr	r1, [r7, #4]
 8009f9a:	9803      	ldr	r0, [sp, #12]
 8009f9c:	f000 fa18 	bl	800a3d0 <_Balloc>
 8009fa0:	1e04      	subs	r4, r0, #0
 8009fa2:	d10c      	bne.n	8009fbe <_dtoa_r+0x9da>
 8009fa4:	0022      	movs	r2, r4
 8009fa6:	4b2e      	ldr	r3, [pc, #184]	@ (800a060 <_dtoa_r+0xa7c>)
 8009fa8:	482e      	ldr	r0, [pc, #184]	@ (800a064 <_dtoa_r+0xa80>)
 8009faa:	492f      	ldr	r1, [pc, #188]	@ (800a068 <_dtoa_r+0xa84>)
 8009fac:	f7ff fb2f 	bl	800960e <_dtoa_r+0x2a>
 8009fb0:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8009fb2:	0037      	movs	r7, r6
 8009fb4:	e7ab      	b.n	8009f0e <_dtoa_r+0x92a>
 8009fb6:	9b04      	ldr	r3, [sp, #16]
 8009fb8:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8009fba:	930c      	str	r3, [sp, #48]	@ 0x30
 8009fbc:	e7f9      	b.n	8009fb2 <_dtoa_r+0x9ce>
 8009fbe:	0039      	movs	r1, r7
 8009fc0:	693a      	ldr	r2, [r7, #16]
 8009fc2:	310c      	adds	r1, #12
 8009fc4:	3202      	adds	r2, #2
 8009fc6:	0092      	lsls	r2, r2, #2
 8009fc8:	300c      	adds	r0, #12
 8009fca:	f7ff fa7d 	bl	80094c8 <memcpy>
 8009fce:	2201      	movs	r2, #1
 8009fd0:	0021      	movs	r1, r4
 8009fd2:	9803      	ldr	r0, [sp, #12]
 8009fd4:	f000 fc16 	bl	800a804 <__lshift>
 8009fd8:	9004      	str	r0, [sp, #16]
 8009fda:	9b08      	ldr	r3, [sp, #32]
 8009fdc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009fde:	9306      	str	r3, [sp, #24]
 8009fe0:	3b01      	subs	r3, #1
 8009fe2:	189b      	adds	r3, r3, r2
 8009fe4:	2201      	movs	r2, #1
 8009fe6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009fe8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009fea:	4013      	ands	r3, r2
 8009fec:	930e      	str	r3, [sp, #56]	@ 0x38
 8009fee:	0031      	movs	r1, r6
 8009ff0:	9805      	ldr	r0, [sp, #20]
 8009ff2:	f7ff fa72 	bl	80094da <quorem>
 8009ff6:	0039      	movs	r1, r7
 8009ff8:	0005      	movs	r5, r0
 8009ffa:	900a      	str	r0, [sp, #40]	@ 0x28
 8009ffc:	9805      	ldr	r0, [sp, #20]
 8009ffe:	f000 fc6d 	bl	800a8dc <__mcmp>
 800a002:	9a04      	ldr	r2, [sp, #16]
 800a004:	900d      	str	r0, [sp, #52]	@ 0x34
 800a006:	0031      	movs	r1, r6
 800a008:	9803      	ldr	r0, [sp, #12]
 800a00a:	f000 fc83 	bl	800a914 <__mdiff>
 800a00e:	2201      	movs	r2, #1
 800a010:	68c3      	ldr	r3, [r0, #12]
 800a012:	0004      	movs	r4, r0
 800a014:	3530      	adds	r5, #48	@ 0x30
 800a016:	9209      	str	r2, [sp, #36]	@ 0x24
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d104      	bne.n	800a026 <_dtoa_r+0xa42>
 800a01c:	0001      	movs	r1, r0
 800a01e:	9805      	ldr	r0, [sp, #20]
 800a020:	f000 fc5c 	bl	800a8dc <__mcmp>
 800a024:	9009      	str	r0, [sp, #36]	@ 0x24
 800a026:	0021      	movs	r1, r4
 800a028:	9803      	ldr	r0, [sp, #12]
 800a02a:	f000 fa15 	bl	800a458 <_Bfree>
 800a02e:	9b06      	ldr	r3, [sp, #24]
 800a030:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a032:	1c5c      	adds	r4, r3, #1
 800a034:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a036:	4313      	orrs	r3, r2
 800a038:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a03a:	4313      	orrs	r3, r2
 800a03c:	d116      	bne.n	800a06c <_dtoa_r+0xa88>
 800a03e:	2d39      	cmp	r5, #57	@ 0x39
 800a040:	d02f      	beq.n	800a0a2 <_dtoa_r+0xabe>
 800a042:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a044:	2b00      	cmp	r3, #0
 800a046:	dd01      	ble.n	800a04c <_dtoa_r+0xa68>
 800a048:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800a04a:	3531      	adds	r5, #49	@ 0x31
 800a04c:	9b06      	ldr	r3, [sp, #24]
 800a04e:	701d      	strb	r5, [r3, #0]
 800a050:	e532      	b.n	8009ab8 <_dtoa_r+0x4d4>
 800a052:	46c0      	nop			@ (mov r8, r8)
 800a054:	40240000 	.word	0x40240000
 800a058:	00000433 	.word	0x00000433
 800a05c:	7ff00000 	.word	0x7ff00000
 800a060:	0800db1b 	.word	0x0800db1b
 800a064:	0800dac3 	.word	0x0800dac3
 800a068:	000002ef 	.word	0x000002ef
 800a06c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a06e:	2b00      	cmp	r3, #0
 800a070:	db04      	blt.n	800a07c <_dtoa_r+0xa98>
 800a072:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a074:	4313      	orrs	r3, r2
 800a076:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a078:	4313      	orrs	r3, r2
 800a07a:	d11e      	bne.n	800a0ba <_dtoa_r+0xad6>
 800a07c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a07e:	2b00      	cmp	r3, #0
 800a080:	dde4      	ble.n	800a04c <_dtoa_r+0xa68>
 800a082:	9905      	ldr	r1, [sp, #20]
 800a084:	2201      	movs	r2, #1
 800a086:	9803      	ldr	r0, [sp, #12]
 800a088:	f000 fbbc 	bl	800a804 <__lshift>
 800a08c:	0031      	movs	r1, r6
 800a08e:	9005      	str	r0, [sp, #20]
 800a090:	f000 fc24 	bl	800a8dc <__mcmp>
 800a094:	2800      	cmp	r0, #0
 800a096:	dc02      	bgt.n	800a09e <_dtoa_r+0xaba>
 800a098:	d1d8      	bne.n	800a04c <_dtoa_r+0xa68>
 800a09a:	07eb      	lsls	r3, r5, #31
 800a09c:	d5d6      	bpl.n	800a04c <_dtoa_r+0xa68>
 800a09e:	2d39      	cmp	r5, #57	@ 0x39
 800a0a0:	d1d2      	bne.n	800a048 <_dtoa_r+0xa64>
 800a0a2:	2339      	movs	r3, #57	@ 0x39
 800a0a4:	9a06      	ldr	r2, [sp, #24]
 800a0a6:	7013      	strb	r3, [r2, #0]
 800a0a8:	0023      	movs	r3, r4
 800a0aa:	001c      	movs	r4, r3
 800a0ac:	3b01      	subs	r3, #1
 800a0ae:	781a      	ldrb	r2, [r3, #0]
 800a0b0:	2a39      	cmp	r2, #57	@ 0x39
 800a0b2:	d050      	beq.n	800a156 <_dtoa_r+0xb72>
 800a0b4:	3201      	adds	r2, #1
 800a0b6:	701a      	strb	r2, [r3, #0]
 800a0b8:	e4fe      	b.n	8009ab8 <_dtoa_r+0x4d4>
 800a0ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	dd03      	ble.n	800a0c8 <_dtoa_r+0xae4>
 800a0c0:	2d39      	cmp	r5, #57	@ 0x39
 800a0c2:	d0ee      	beq.n	800a0a2 <_dtoa_r+0xabe>
 800a0c4:	3501      	adds	r5, #1
 800a0c6:	e7c1      	b.n	800a04c <_dtoa_r+0xa68>
 800a0c8:	9b06      	ldr	r3, [sp, #24]
 800a0ca:	9a06      	ldr	r2, [sp, #24]
 800a0cc:	701d      	strb	r5, [r3, #0]
 800a0ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d02b      	beq.n	800a12c <_dtoa_r+0xb48>
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	220a      	movs	r2, #10
 800a0d8:	9905      	ldr	r1, [sp, #20]
 800a0da:	9803      	ldr	r0, [sp, #12]
 800a0dc:	f000 f9e0 	bl	800a4a0 <__multadd>
 800a0e0:	9b04      	ldr	r3, [sp, #16]
 800a0e2:	9005      	str	r0, [sp, #20]
 800a0e4:	429f      	cmp	r7, r3
 800a0e6:	d109      	bne.n	800a0fc <_dtoa_r+0xb18>
 800a0e8:	0039      	movs	r1, r7
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	220a      	movs	r2, #10
 800a0ee:	9803      	ldr	r0, [sp, #12]
 800a0f0:	f000 f9d6 	bl	800a4a0 <__multadd>
 800a0f4:	0007      	movs	r7, r0
 800a0f6:	9004      	str	r0, [sp, #16]
 800a0f8:	9406      	str	r4, [sp, #24]
 800a0fa:	e778      	b.n	8009fee <_dtoa_r+0xa0a>
 800a0fc:	0039      	movs	r1, r7
 800a0fe:	2300      	movs	r3, #0
 800a100:	220a      	movs	r2, #10
 800a102:	9803      	ldr	r0, [sp, #12]
 800a104:	f000 f9cc 	bl	800a4a0 <__multadd>
 800a108:	2300      	movs	r3, #0
 800a10a:	0007      	movs	r7, r0
 800a10c:	220a      	movs	r2, #10
 800a10e:	9904      	ldr	r1, [sp, #16]
 800a110:	9803      	ldr	r0, [sp, #12]
 800a112:	f000 f9c5 	bl	800a4a0 <__multadd>
 800a116:	9004      	str	r0, [sp, #16]
 800a118:	e7ee      	b.n	800a0f8 <_dtoa_r+0xb14>
 800a11a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a11c:	2401      	movs	r4, #1
 800a11e:	2b00      	cmp	r3, #0
 800a120:	dd00      	ble.n	800a124 <_dtoa_r+0xb40>
 800a122:	001c      	movs	r4, r3
 800a124:	9704      	str	r7, [sp, #16]
 800a126:	2700      	movs	r7, #0
 800a128:	9b08      	ldr	r3, [sp, #32]
 800a12a:	191c      	adds	r4, r3, r4
 800a12c:	9905      	ldr	r1, [sp, #20]
 800a12e:	2201      	movs	r2, #1
 800a130:	9803      	ldr	r0, [sp, #12]
 800a132:	f000 fb67 	bl	800a804 <__lshift>
 800a136:	0031      	movs	r1, r6
 800a138:	9005      	str	r0, [sp, #20]
 800a13a:	f000 fbcf 	bl	800a8dc <__mcmp>
 800a13e:	2800      	cmp	r0, #0
 800a140:	dcb2      	bgt.n	800a0a8 <_dtoa_r+0xac4>
 800a142:	d101      	bne.n	800a148 <_dtoa_r+0xb64>
 800a144:	07ed      	lsls	r5, r5, #31
 800a146:	d4af      	bmi.n	800a0a8 <_dtoa_r+0xac4>
 800a148:	0023      	movs	r3, r4
 800a14a:	001c      	movs	r4, r3
 800a14c:	3b01      	subs	r3, #1
 800a14e:	781a      	ldrb	r2, [r3, #0]
 800a150:	2a30      	cmp	r2, #48	@ 0x30
 800a152:	d0fa      	beq.n	800a14a <_dtoa_r+0xb66>
 800a154:	e4b0      	b.n	8009ab8 <_dtoa_r+0x4d4>
 800a156:	9a08      	ldr	r2, [sp, #32]
 800a158:	429a      	cmp	r2, r3
 800a15a:	d1a6      	bne.n	800a0aa <_dtoa_r+0xac6>
 800a15c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a15e:	3301      	adds	r3, #1
 800a160:	930c      	str	r3, [sp, #48]	@ 0x30
 800a162:	2331      	movs	r3, #49	@ 0x31
 800a164:	7013      	strb	r3, [r2, #0]
 800a166:	e4a7      	b.n	8009ab8 <_dtoa_r+0x4d4>
 800a168:	4b14      	ldr	r3, [pc, #80]	@ (800a1bc <_dtoa_r+0xbd8>)
 800a16a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800a16c:	9308      	str	r3, [sp, #32]
 800a16e:	4b14      	ldr	r3, [pc, #80]	@ (800a1c0 <_dtoa_r+0xbdc>)
 800a170:	2a00      	cmp	r2, #0
 800a172:	d001      	beq.n	800a178 <_dtoa_r+0xb94>
 800a174:	f7ff fa7e 	bl	8009674 <_dtoa_r+0x90>
 800a178:	f7ff fa7e 	bl	8009678 <_dtoa_r+0x94>
 800a17c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a17e:	2b01      	cmp	r3, #1
 800a180:	dc00      	bgt.n	800a184 <_dtoa_r+0xba0>
 800a182:	e648      	b.n	8009e16 <_dtoa_r+0x832>
 800a184:	2001      	movs	r0, #1
 800a186:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800a188:	e665      	b.n	8009e56 <_dtoa_r+0x872>
 800a18a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	dc00      	bgt.n	800a192 <_dtoa_r+0xbae>
 800a190:	e6a9      	b.n	8009ee6 <_dtoa_r+0x902>
 800a192:	2400      	movs	r4, #0
 800a194:	0031      	movs	r1, r6
 800a196:	9805      	ldr	r0, [sp, #20]
 800a198:	f7ff f99f 	bl	80094da <quorem>
 800a19c:	9b08      	ldr	r3, [sp, #32]
 800a19e:	3030      	adds	r0, #48	@ 0x30
 800a1a0:	5518      	strb	r0, [r3, r4]
 800a1a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a1a4:	3401      	adds	r4, #1
 800a1a6:	0005      	movs	r5, r0
 800a1a8:	42a3      	cmp	r3, r4
 800a1aa:	ddb6      	ble.n	800a11a <_dtoa_r+0xb36>
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	220a      	movs	r2, #10
 800a1b0:	9905      	ldr	r1, [sp, #20]
 800a1b2:	9803      	ldr	r0, [sp, #12]
 800a1b4:	f000 f974 	bl	800a4a0 <__multadd>
 800a1b8:	9005      	str	r0, [sp, #20]
 800a1ba:	e7eb      	b.n	800a194 <_dtoa_r+0xbb0>
 800a1bc:	0800da9f 	.word	0x0800da9f
 800a1c0:	0800daa7 	.word	0x0800daa7

0800a1c4 <_free_r>:
 800a1c4:	b570      	push	{r4, r5, r6, lr}
 800a1c6:	0005      	movs	r5, r0
 800a1c8:	1e0c      	subs	r4, r1, #0
 800a1ca:	d010      	beq.n	800a1ee <_free_r+0x2a>
 800a1cc:	3c04      	subs	r4, #4
 800a1ce:	6823      	ldr	r3, [r4, #0]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	da00      	bge.n	800a1d6 <_free_r+0x12>
 800a1d4:	18e4      	adds	r4, r4, r3
 800a1d6:	0028      	movs	r0, r5
 800a1d8:	f000 f8ea 	bl	800a3b0 <__malloc_lock>
 800a1dc:	4a1d      	ldr	r2, [pc, #116]	@ (800a254 <_free_r+0x90>)
 800a1de:	6813      	ldr	r3, [r2, #0]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d105      	bne.n	800a1f0 <_free_r+0x2c>
 800a1e4:	6063      	str	r3, [r4, #4]
 800a1e6:	6014      	str	r4, [r2, #0]
 800a1e8:	0028      	movs	r0, r5
 800a1ea:	f000 f8e9 	bl	800a3c0 <__malloc_unlock>
 800a1ee:	bd70      	pop	{r4, r5, r6, pc}
 800a1f0:	42a3      	cmp	r3, r4
 800a1f2:	d908      	bls.n	800a206 <_free_r+0x42>
 800a1f4:	6820      	ldr	r0, [r4, #0]
 800a1f6:	1821      	adds	r1, r4, r0
 800a1f8:	428b      	cmp	r3, r1
 800a1fa:	d1f3      	bne.n	800a1e4 <_free_r+0x20>
 800a1fc:	6819      	ldr	r1, [r3, #0]
 800a1fe:	685b      	ldr	r3, [r3, #4]
 800a200:	1809      	adds	r1, r1, r0
 800a202:	6021      	str	r1, [r4, #0]
 800a204:	e7ee      	b.n	800a1e4 <_free_r+0x20>
 800a206:	001a      	movs	r2, r3
 800a208:	685b      	ldr	r3, [r3, #4]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d001      	beq.n	800a212 <_free_r+0x4e>
 800a20e:	42a3      	cmp	r3, r4
 800a210:	d9f9      	bls.n	800a206 <_free_r+0x42>
 800a212:	6811      	ldr	r1, [r2, #0]
 800a214:	1850      	adds	r0, r2, r1
 800a216:	42a0      	cmp	r0, r4
 800a218:	d10b      	bne.n	800a232 <_free_r+0x6e>
 800a21a:	6820      	ldr	r0, [r4, #0]
 800a21c:	1809      	adds	r1, r1, r0
 800a21e:	1850      	adds	r0, r2, r1
 800a220:	6011      	str	r1, [r2, #0]
 800a222:	4283      	cmp	r3, r0
 800a224:	d1e0      	bne.n	800a1e8 <_free_r+0x24>
 800a226:	6818      	ldr	r0, [r3, #0]
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	1841      	adds	r1, r0, r1
 800a22c:	6011      	str	r1, [r2, #0]
 800a22e:	6053      	str	r3, [r2, #4]
 800a230:	e7da      	b.n	800a1e8 <_free_r+0x24>
 800a232:	42a0      	cmp	r0, r4
 800a234:	d902      	bls.n	800a23c <_free_r+0x78>
 800a236:	230c      	movs	r3, #12
 800a238:	602b      	str	r3, [r5, #0]
 800a23a:	e7d5      	b.n	800a1e8 <_free_r+0x24>
 800a23c:	6820      	ldr	r0, [r4, #0]
 800a23e:	1821      	adds	r1, r4, r0
 800a240:	428b      	cmp	r3, r1
 800a242:	d103      	bne.n	800a24c <_free_r+0x88>
 800a244:	6819      	ldr	r1, [r3, #0]
 800a246:	685b      	ldr	r3, [r3, #4]
 800a248:	1809      	adds	r1, r1, r0
 800a24a:	6021      	str	r1, [r4, #0]
 800a24c:	6063      	str	r3, [r4, #4]
 800a24e:	6054      	str	r4, [r2, #4]
 800a250:	e7ca      	b.n	800a1e8 <_free_r+0x24>
 800a252:	46c0      	nop			@ (mov r8, r8)
 800a254:	20000858 	.word	0x20000858

0800a258 <malloc>:
 800a258:	b510      	push	{r4, lr}
 800a25a:	4b03      	ldr	r3, [pc, #12]	@ (800a268 <malloc+0x10>)
 800a25c:	0001      	movs	r1, r0
 800a25e:	6818      	ldr	r0, [r3, #0]
 800a260:	f000 f826 	bl	800a2b0 <_malloc_r>
 800a264:	bd10      	pop	{r4, pc}
 800a266:	46c0      	nop			@ (mov r8, r8)
 800a268:	20000040 	.word	0x20000040

0800a26c <sbrk_aligned>:
 800a26c:	b570      	push	{r4, r5, r6, lr}
 800a26e:	4e0f      	ldr	r6, [pc, #60]	@ (800a2ac <sbrk_aligned+0x40>)
 800a270:	000d      	movs	r5, r1
 800a272:	6831      	ldr	r1, [r6, #0]
 800a274:	0004      	movs	r4, r0
 800a276:	2900      	cmp	r1, #0
 800a278:	d102      	bne.n	800a280 <sbrk_aligned+0x14>
 800a27a:	f000 fe67 	bl	800af4c <_sbrk_r>
 800a27e:	6030      	str	r0, [r6, #0]
 800a280:	0029      	movs	r1, r5
 800a282:	0020      	movs	r0, r4
 800a284:	f000 fe62 	bl	800af4c <_sbrk_r>
 800a288:	1c43      	adds	r3, r0, #1
 800a28a:	d103      	bne.n	800a294 <sbrk_aligned+0x28>
 800a28c:	2501      	movs	r5, #1
 800a28e:	426d      	negs	r5, r5
 800a290:	0028      	movs	r0, r5
 800a292:	bd70      	pop	{r4, r5, r6, pc}
 800a294:	2303      	movs	r3, #3
 800a296:	1cc5      	adds	r5, r0, #3
 800a298:	439d      	bics	r5, r3
 800a29a:	42a8      	cmp	r0, r5
 800a29c:	d0f8      	beq.n	800a290 <sbrk_aligned+0x24>
 800a29e:	1a29      	subs	r1, r5, r0
 800a2a0:	0020      	movs	r0, r4
 800a2a2:	f000 fe53 	bl	800af4c <_sbrk_r>
 800a2a6:	3001      	adds	r0, #1
 800a2a8:	d1f2      	bne.n	800a290 <sbrk_aligned+0x24>
 800a2aa:	e7ef      	b.n	800a28c <sbrk_aligned+0x20>
 800a2ac:	20000854 	.word	0x20000854

0800a2b0 <_malloc_r>:
 800a2b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a2b2:	2203      	movs	r2, #3
 800a2b4:	1ccb      	adds	r3, r1, #3
 800a2b6:	4393      	bics	r3, r2
 800a2b8:	3308      	adds	r3, #8
 800a2ba:	0005      	movs	r5, r0
 800a2bc:	001f      	movs	r7, r3
 800a2be:	2b0c      	cmp	r3, #12
 800a2c0:	d234      	bcs.n	800a32c <_malloc_r+0x7c>
 800a2c2:	270c      	movs	r7, #12
 800a2c4:	42b9      	cmp	r1, r7
 800a2c6:	d833      	bhi.n	800a330 <_malloc_r+0x80>
 800a2c8:	0028      	movs	r0, r5
 800a2ca:	f000 f871 	bl	800a3b0 <__malloc_lock>
 800a2ce:	4e37      	ldr	r6, [pc, #220]	@ (800a3ac <_malloc_r+0xfc>)
 800a2d0:	6833      	ldr	r3, [r6, #0]
 800a2d2:	001c      	movs	r4, r3
 800a2d4:	2c00      	cmp	r4, #0
 800a2d6:	d12f      	bne.n	800a338 <_malloc_r+0x88>
 800a2d8:	0039      	movs	r1, r7
 800a2da:	0028      	movs	r0, r5
 800a2dc:	f7ff ffc6 	bl	800a26c <sbrk_aligned>
 800a2e0:	0004      	movs	r4, r0
 800a2e2:	1c43      	adds	r3, r0, #1
 800a2e4:	d15f      	bne.n	800a3a6 <_malloc_r+0xf6>
 800a2e6:	6834      	ldr	r4, [r6, #0]
 800a2e8:	9400      	str	r4, [sp, #0]
 800a2ea:	9b00      	ldr	r3, [sp, #0]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d14a      	bne.n	800a386 <_malloc_r+0xd6>
 800a2f0:	2c00      	cmp	r4, #0
 800a2f2:	d052      	beq.n	800a39a <_malloc_r+0xea>
 800a2f4:	6823      	ldr	r3, [r4, #0]
 800a2f6:	0028      	movs	r0, r5
 800a2f8:	18e3      	adds	r3, r4, r3
 800a2fa:	9900      	ldr	r1, [sp, #0]
 800a2fc:	9301      	str	r3, [sp, #4]
 800a2fe:	f000 fe25 	bl	800af4c <_sbrk_r>
 800a302:	9b01      	ldr	r3, [sp, #4]
 800a304:	4283      	cmp	r3, r0
 800a306:	d148      	bne.n	800a39a <_malloc_r+0xea>
 800a308:	6823      	ldr	r3, [r4, #0]
 800a30a:	0028      	movs	r0, r5
 800a30c:	1aff      	subs	r7, r7, r3
 800a30e:	0039      	movs	r1, r7
 800a310:	f7ff ffac 	bl	800a26c <sbrk_aligned>
 800a314:	3001      	adds	r0, #1
 800a316:	d040      	beq.n	800a39a <_malloc_r+0xea>
 800a318:	6823      	ldr	r3, [r4, #0]
 800a31a:	19db      	adds	r3, r3, r7
 800a31c:	6023      	str	r3, [r4, #0]
 800a31e:	6833      	ldr	r3, [r6, #0]
 800a320:	685a      	ldr	r2, [r3, #4]
 800a322:	2a00      	cmp	r2, #0
 800a324:	d133      	bne.n	800a38e <_malloc_r+0xde>
 800a326:	9b00      	ldr	r3, [sp, #0]
 800a328:	6033      	str	r3, [r6, #0]
 800a32a:	e019      	b.n	800a360 <_malloc_r+0xb0>
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	dac9      	bge.n	800a2c4 <_malloc_r+0x14>
 800a330:	230c      	movs	r3, #12
 800a332:	602b      	str	r3, [r5, #0]
 800a334:	2000      	movs	r0, #0
 800a336:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a338:	6821      	ldr	r1, [r4, #0]
 800a33a:	1bc9      	subs	r1, r1, r7
 800a33c:	d420      	bmi.n	800a380 <_malloc_r+0xd0>
 800a33e:	290b      	cmp	r1, #11
 800a340:	d90a      	bls.n	800a358 <_malloc_r+0xa8>
 800a342:	19e2      	adds	r2, r4, r7
 800a344:	6027      	str	r7, [r4, #0]
 800a346:	42a3      	cmp	r3, r4
 800a348:	d104      	bne.n	800a354 <_malloc_r+0xa4>
 800a34a:	6032      	str	r2, [r6, #0]
 800a34c:	6863      	ldr	r3, [r4, #4]
 800a34e:	6011      	str	r1, [r2, #0]
 800a350:	6053      	str	r3, [r2, #4]
 800a352:	e005      	b.n	800a360 <_malloc_r+0xb0>
 800a354:	605a      	str	r2, [r3, #4]
 800a356:	e7f9      	b.n	800a34c <_malloc_r+0x9c>
 800a358:	6862      	ldr	r2, [r4, #4]
 800a35a:	42a3      	cmp	r3, r4
 800a35c:	d10e      	bne.n	800a37c <_malloc_r+0xcc>
 800a35e:	6032      	str	r2, [r6, #0]
 800a360:	0028      	movs	r0, r5
 800a362:	f000 f82d 	bl	800a3c0 <__malloc_unlock>
 800a366:	0020      	movs	r0, r4
 800a368:	2207      	movs	r2, #7
 800a36a:	300b      	adds	r0, #11
 800a36c:	1d23      	adds	r3, r4, #4
 800a36e:	4390      	bics	r0, r2
 800a370:	1ac2      	subs	r2, r0, r3
 800a372:	4298      	cmp	r0, r3
 800a374:	d0df      	beq.n	800a336 <_malloc_r+0x86>
 800a376:	1a1b      	subs	r3, r3, r0
 800a378:	50a3      	str	r3, [r4, r2]
 800a37a:	e7dc      	b.n	800a336 <_malloc_r+0x86>
 800a37c:	605a      	str	r2, [r3, #4]
 800a37e:	e7ef      	b.n	800a360 <_malloc_r+0xb0>
 800a380:	0023      	movs	r3, r4
 800a382:	6864      	ldr	r4, [r4, #4]
 800a384:	e7a6      	b.n	800a2d4 <_malloc_r+0x24>
 800a386:	9c00      	ldr	r4, [sp, #0]
 800a388:	6863      	ldr	r3, [r4, #4]
 800a38a:	9300      	str	r3, [sp, #0]
 800a38c:	e7ad      	b.n	800a2ea <_malloc_r+0x3a>
 800a38e:	001a      	movs	r2, r3
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	42a3      	cmp	r3, r4
 800a394:	d1fb      	bne.n	800a38e <_malloc_r+0xde>
 800a396:	2300      	movs	r3, #0
 800a398:	e7da      	b.n	800a350 <_malloc_r+0xa0>
 800a39a:	230c      	movs	r3, #12
 800a39c:	0028      	movs	r0, r5
 800a39e:	602b      	str	r3, [r5, #0]
 800a3a0:	f000 f80e 	bl	800a3c0 <__malloc_unlock>
 800a3a4:	e7c6      	b.n	800a334 <_malloc_r+0x84>
 800a3a6:	6007      	str	r7, [r0, #0]
 800a3a8:	e7da      	b.n	800a360 <_malloc_r+0xb0>
 800a3aa:	46c0      	nop			@ (mov r8, r8)
 800a3ac:	20000858 	.word	0x20000858

0800a3b0 <__malloc_lock>:
 800a3b0:	b510      	push	{r4, lr}
 800a3b2:	4802      	ldr	r0, [pc, #8]	@ (800a3bc <__malloc_lock+0xc>)
 800a3b4:	f7ff f873 	bl	800949e <__retarget_lock_acquire_recursive>
 800a3b8:	bd10      	pop	{r4, pc}
 800a3ba:	46c0      	nop			@ (mov r8, r8)
 800a3bc:	20000850 	.word	0x20000850

0800a3c0 <__malloc_unlock>:
 800a3c0:	b510      	push	{r4, lr}
 800a3c2:	4802      	ldr	r0, [pc, #8]	@ (800a3cc <__malloc_unlock+0xc>)
 800a3c4:	f7ff f86c 	bl	80094a0 <__retarget_lock_release_recursive>
 800a3c8:	bd10      	pop	{r4, pc}
 800a3ca:	46c0      	nop			@ (mov r8, r8)
 800a3cc:	20000850 	.word	0x20000850

0800a3d0 <_Balloc>:
 800a3d0:	b570      	push	{r4, r5, r6, lr}
 800a3d2:	69c5      	ldr	r5, [r0, #28]
 800a3d4:	0006      	movs	r6, r0
 800a3d6:	000c      	movs	r4, r1
 800a3d8:	2d00      	cmp	r5, #0
 800a3da:	d10e      	bne.n	800a3fa <_Balloc+0x2a>
 800a3dc:	2010      	movs	r0, #16
 800a3de:	f7ff ff3b 	bl	800a258 <malloc>
 800a3e2:	1e02      	subs	r2, r0, #0
 800a3e4:	61f0      	str	r0, [r6, #28]
 800a3e6:	d104      	bne.n	800a3f2 <_Balloc+0x22>
 800a3e8:	216b      	movs	r1, #107	@ 0x6b
 800a3ea:	4b19      	ldr	r3, [pc, #100]	@ (800a450 <_Balloc+0x80>)
 800a3ec:	4819      	ldr	r0, [pc, #100]	@ (800a454 <_Balloc+0x84>)
 800a3ee:	f000 fdbf 	bl	800af70 <__assert_func>
 800a3f2:	6045      	str	r5, [r0, #4]
 800a3f4:	6085      	str	r5, [r0, #8]
 800a3f6:	6005      	str	r5, [r0, #0]
 800a3f8:	60c5      	str	r5, [r0, #12]
 800a3fa:	69f5      	ldr	r5, [r6, #28]
 800a3fc:	68eb      	ldr	r3, [r5, #12]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d013      	beq.n	800a42a <_Balloc+0x5a>
 800a402:	69f3      	ldr	r3, [r6, #28]
 800a404:	00a2      	lsls	r2, r4, #2
 800a406:	68db      	ldr	r3, [r3, #12]
 800a408:	189b      	adds	r3, r3, r2
 800a40a:	6818      	ldr	r0, [r3, #0]
 800a40c:	2800      	cmp	r0, #0
 800a40e:	d118      	bne.n	800a442 <_Balloc+0x72>
 800a410:	2101      	movs	r1, #1
 800a412:	000d      	movs	r5, r1
 800a414:	40a5      	lsls	r5, r4
 800a416:	1d6a      	adds	r2, r5, #5
 800a418:	0030      	movs	r0, r6
 800a41a:	0092      	lsls	r2, r2, #2
 800a41c:	f000 fdc6 	bl	800afac <_calloc_r>
 800a420:	2800      	cmp	r0, #0
 800a422:	d00c      	beq.n	800a43e <_Balloc+0x6e>
 800a424:	6044      	str	r4, [r0, #4]
 800a426:	6085      	str	r5, [r0, #8]
 800a428:	e00d      	b.n	800a446 <_Balloc+0x76>
 800a42a:	2221      	movs	r2, #33	@ 0x21
 800a42c:	2104      	movs	r1, #4
 800a42e:	0030      	movs	r0, r6
 800a430:	f000 fdbc 	bl	800afac <_calloc_r>
 800a434:	69f3      	ldr	r3, [r6, #28]
 800a436:	60e8      	str	r0, [r5, #12]
 800a438:	68db      	ldr	r3, [r3, #12]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d1e1      	bne.n	800a402 <_Balloc+0x32>
 800a43e:	2000      	movs	r0, #0
 800a440:	bd70      	pop	{r4, r5, r6, pc}
 800a442:	6802      	ldr	r2, [r0, #0]
 800a444:	601a      	str	r2, [r3, #0]
 800a446:	2300      	movs	r3, #0
 800a448:	6103      	str	r3, [r0, #16]
 800a44a:	60c3      	str	r3, [r0, #12]
 800a44c:	e7f8      	b.n	800a440 <_Balloc+0x70>
 800a44e:	46c0      	nop			@ (mov r8, r8)
 800a450:	0800daac 	.word	0x0800daac
 800a454:	0800db2c 	.word	0x0800db2c

0800a458 <_Bfree>:
 800a458:	b570      	push	{r4, r5, r6, lr}
 800a45a:	69c6      	ldr	r6, [r0, #28]
 800a45c:	0005      	movs	r5, r0
 800a45e:	000c      	movs	r4, r1
 800a460:	2e00      	cmp	r6, #0
 800a462:	d10e      	bne.n	800a482 <_Bfree+0x2a>
 800a464:	2010      	movs	r0, #16
 800a466:	f7ff fef7 	bl	800a258 <malloc>
 800a46a:	1e02      	subs	r2, r0, #0
 800a46c:	61e8      	str	r0, [r5, #28]
 800a46e:	d104      	bne.n	800a47a <_Bfree+0x22>
 800a470:	218f      	movs	r1, #143	@ 0x8f
 800a472:	4b09      	ldr	r3, [pc, #36]	@ (800a498 <_Bfree+0x40>)
 800a474:	4809      	ldr	r0, [pc, #36]	@ (800a49c <_Bfree+0x44>)
 800a476:	f000 fd7b 	bl	800af70 <__assert_func>
 800a47a:	6046      	str	r6, [r0, #4]
 800a47c:	6086      	str	r6, [r0, #8]
 800a47e:	6006      	str	r6, [r0, #0]
 800a480:	60c6      	str	r6, [r0, #12]
 800a482:	2c00      	cmp	r4, #0
 800a484:	d007      	beq.n	800a496 <_Bfree+0x3e>
 800a486:	69eb      	ldr	r3, [r5, #28]
 800a488:	6862      	ldr	r2, [r4, #4]
 800a48a:	68db      	ldr	r3, [r3, #12]
 800a48c:	0092      	lsls	r2, r2, #2
 800a48e:	189b      	adds	r3, r3, r2
 800a490:	681a      	ldr	r2, [r3, #0]
 800a492:	6022      	str	r2, [r4, #0]
 800a494:	601c      	str	r4, [r3, #0]
 800a496:	bd70      	pop	{r4, r5, r6, pc}
 800a498:	0800daac 	.word	0x0800daac
 800a49c:	0800db2c 	.word	0x0800db2c

0800a4a0 <__multadd>:
 800a4a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a4a2:	000f      	movs	r7, r1
 800a4a4:	9001      	str	r0, [sp, #4]
 800a4a6:	000c      	movs	r4, r1
 800a4a8:	001e      	movs	r6, r3
 800a4aa:	2000      	movs	r0, #0
 800a4ac:	690d      	ldr	r5, [r1, #16]
 800a4ae:	3714      	adds	r7, #20
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	3001      	adds	r0, #1
 800a4b4:	b299      	uxth	r1, r3
 800a4b6:	4351      	muls	r1, r2
 800a4b8:	0c1b      	lsrs	r3, r3, #16
 800a4ba:	4353      	muls	r3, r2
 800a4bc:	1989      	adds	r1, r1, r6
 800a4be:	0c0e      	lsrs	r6, r1, #16
 800a4c0:	199b      	adds	r3, r3, r6
 800a4c2:	0c1e      	lsrs	r6, r3, #16
 800a4c4:	b289      	uxth	r1, r1
 800a4c6:	041b      	lsls	r3, r3, #16
 800a4c8:	185b      	adds	r3, r3, r1
 800a4ca:	c708      	stmia	r7!, {r3}
 800a4cc:	4285      	cmp	r5, r0
 800a4ce:	dcef      	bgt.n	800a4b0 <__multadd+0x10>
 800a4d0:	2e00      	cmp	r6, #0
 800a4d2:	d022      	beq.n	800a51a <__multadd+0x7a>
 800a4d4:	68a3      	ldr	r3, [r4, #8]
 800a4d6:	42ab      	cmp	r3, r5
 800a4d8:	dc19      	bgt.n	800a50e <__multadd+0x6e>
 800a4da:	6861      	ldr	r1, [r4, #4]
 800a4dc:	9801      	ldr	r0, [sp, #4]
 800a4de:	3101      	adds	r1, #1
 800a4e0:	f7ff ff76 	bl	800a3d0 <_Balloc>
 800a4e4:	1e07      	subs	r7, r0, #0
 800a4e6:	d105      	bne.n	800a4f4 <__multadd+0x54>
 800a4e8:	003a      	movs	r2, r7
 800a4ea:	21ba      	movs	r1, #186	@ 0xba
 800a4ec:	4b0c      	ldr	r3, [pc, #48]	@ (800a520 <__multadd+0x80>)
 800a4ee:	480d      	ldr	r0, [pc, #52]	@ (800a524 <__multadd+0x84>)
 800a4f0:	f000 fd3e 	bl	800af70 <__assert_func>
 800a4f4:	0021      	movs	r1, r4
 800a4f6:	6922      	ldr	r2, [r4, #16]
 800a4f8:	310c      	adds	r1, #12
 800a4fa:	3202      	adds	r2, #2
 800a4fc:	0092      	lsls	r2, r2, #2
 800a4fe:	300c      	adds	r0, #12
 800a500:	f7fe ffe2 	bl	80094c8 <memcpy>
 800a504:	0021      	movs	r1, r4
 800a506:	9801      	ldr	r0, [sp, #4]
 800a508:	f7ff ffa6 	bl	800a458 <_Bfree>
 800a50c:	003c      	movs	r4, r7
 800a50e:	1d2b      	adds	r3, r5, #4
 800a510:	009b      	lsls	r3, r3, #2
 800a512:	18e3      	adds	r3, r4, r3
 800a514:	3501      	adds	r5, #1
 800a516:	605e      	str	r6, [r3, #4]
 800a518:	6125      	str	r5, [r4, #16]
 800a51a:	0020      	movs	r0, r4
 800a51c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a51e:	46c0      	nop			@ (mov r8, r8)
 800a520:	0800db1b 	.word	0x0800db1b
 800a524:	0800db2c 	.word	0x0800db2c

0800a528 <__hi0bits>:
 800a528:	2280      	movs	r2, #128	@ 0x80
 800a52a:	0003      	movs	r3, r0
 800a52c:	0252      	lsls	r2, r2, #9
 800a52e:	2000      	movs	r0, #0
 800a530:	4293      	cmp	r3, r2
 800a532:	d201      	bcs.n	800a538 <__hi0bits+0x10>
 800a534:	041b      	lsls	r3, r3, #16
 800a536:	3010      	adds	r0, #16
 800a538:	2280      	movs	r2, #128	@ 0x80
 800a53a:	0452      	lsls	r2, r2, #17
 800a53c:	4293      	cmp	r3, r2
 800a53e:	d201      	bcs.n	800a544 <__hi0bits+0x1c>
 800a540:	3008      	adds	r0, #8
 800a542:	021b      	lsls	r3, r3, #8
 800a544:	2280      	movs	r2, #128	@ 0x80
 800a546:	0552      	lsls	r2, r2, #21
 800a548:	4293      	cmp	r3, r2
 800a54a:	d201      	bcs.n	800a550 <__hi0bits+0x28>
 800a54c:	3004      	adds	r0, #4
 800a54e:	011b      	lsls	r3, r3, #4
 800a550:	2280      	movs	r2, #128	@ 0x80
 800a552:	05d2      	lsls	r2, r2, #23
 800a554:	4293      	cmp	r3, r2
 800a556:	d201      	bcs.n	800a55c <__hi0bits+0x34>
 800a558:	3002      	adds	r0, #2
 800a55a:	009b      	lsls	r3, r3, #2
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	db03      	blt.n	800a568 <__hi0bits+0x40>
 800a560:	3001      	adds	r0, #1
 800a562:	4213      	tst	r3, r2
 800a564:	d100      	bne.n	800a568 <__hi0bits+0x40>
 800a566:	2020      	movs	r0, #32
 800a568:	4770      	bx	lr

0800a56a <__lo0bits>:
 800a56a:	6803      	ldr	r3, [r0, #0]
 800a56c:	0001      	movs	r1, r0
 800a56e:	2207      	movs	r2, #7
 800a570:	0018      	movs	r0, r3
 800a572:	4010      	ands	r0, r2
 800a574:	4213      	tst	r3, r2
 800a576:	d00d      	beq.n	800a594 <__lo0bits+0x2a>
 800a578:	3a06      	subs	r2, #6
 800a57a:	2000      	movs	r0, #0
 800a57c:	4213      	tst	r3, r2
 800a57e:	d105      	bne.n	800a58c <__lo0bits+0x22>
 800a580:	3002      	adds	r0, #2
 800a582:	4203      	tst	r3, r0
 800a584:	d003      	beq.n	800a58e <__lo0bits+0x24>
 800a586:	40d3      	lsrs	r3, r2
 800a588:	0010      	movs	r0, r2
 800a58a:	600b      	str	r3, [r1, #0]
 800a58c:	4770      	bx	lr
 800a58e:	089b      	lsrs	r3, r3, #2
 800a590:	600b      	str	r3, [r1, #0]
 800a592:	e7fb      	b.n	800a58c <__lo0bits+0x22>
 800a594:	b29a      	uxth	r2, r3
 800a596:	2a00      	cmp	r2, #0
 800a598:	d101      	bne.n	800a59e <__lo0bits+0x34>
 800a59a:	2010      	movs	r0, #16
 800a59c:	0c1b      	lsrs	r3, r3, #16
 800a59e:	b2da      	uxtb	r2, r3
 800a5a0:	2a00      	cmp	r2, #0
 800a5a2:	d101      	bne.n	800a5a8 <__lo0bits+0x3e>
 800a5a4:	3008      	adds	r0, #8
 800a5a6:	0a1b      	lsrs	r3, r3, #8
 800a5a8:	071a      	lsls	r2, r3, #28
 800a5aa:	d101      	bne.n	800a5b0 <__lo0bits+0x46>
 800a5ac:	3004      	adds	r0, #4
 800a5ae:	091b      	lsrs	r3, r3, #4
 800a5b0:	079a      	lsls	r2, r3, #30
 800a5b2:	d101      	bne.n	800a5b8 <__lo0bits+0x4e>
 800a5b4:	3002      	adds	r0, #2
 800a5b6:	089b      	lsrs	r3, r3, #2
 800a5b8:	07da      	lsls	r2, r3, #31
 800a5ba:	d4e9      	bmi.n	800a590 <__lo0bits+0x26>
 800a5bc:	3001      	adds	r0, #1
 800a5be:	085b      	lsrs	r3, r3, #1
 800a5c0:	d1e6      	bne.n	800a590 <__lo0bits+0x26>
 800a5c2:	2020      	movs	r0, #32
 800a5c4:	e7e2      	b.n	800a58c <__lo0bits+0x22>
	...

0800a5c8 <__i2b>:
 800a5c8:	b510      	push	{r4, lr}
 800a5ca:	000c      	movs	r4, r1
 800a5cc:	2101      	movs	r1, #1
 800a5ce:	f7ff feff 	bl	800a3d0 <_Balloc>
 800a5d2:	2800      	cmp	r0, #0
 800a5d4:	d107      	bne.n	800a5e6 <__i2b+0x1e>
 800a5d6:	2146      	movs	r1, #70	@ 0x46
 800a5d8:	4c05      	ldr	r4, [pc, #20]	@ (800a5f0 <__i2b+0x28>)
 800a5da:	0002      	movs	r2, r0
 800a5dc:	4b05      	ldr	r3, [pc, #20]	@ (800a5f4 <__i2b+0x2c>)
 800a5de:	0020      	movs	r0, r4
 800a5e0:	31ff      	adds	r1, #255	@ 0xff
 800a5e2:	f000 fcc5 	bl	800af70 <__assert_func>
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	6144      	str	r4, [r0, #20]
 800a5ea:	6103      	str	r3, [r0, #16]
 800a5ec:	bd10      	pop	{r4, pc}
 800a5ee:	46c0      	nop			@ (mov r8, r8)
 800a5f0:	0800db2c 	.word	0x0800db2c
 800a5f4:	0800db1b 	.word	0x0800db1b

0800a5f8 <__multiply>:
 800a5f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5fa:	0014      	movs	r4, r2
 800a5fc:	690a      	ldr	r2, [r1, #16]
 800a5fe:	6923      	ldr	r3, [r4, #16]
 800a600:	000d      	movs	r5, r1
 800a602:	b089      	sub	sp, #36	@ 0x24
 800a604:	429a      	cmp	r2, r3
 800a606:	db02      	blt.n	800a60e <__multiply+0x16>
 800a608:	0023      	movs	r3, r4
 800a60a:	000c      	movs	r4, r1
 800a60c:	001d      	movs	r5, r3
 800a60e:	6927      	ldr	r7, [r4, #16]
 800a610:	692e      	ldr	r6, [r5, #16]
 800a612:	6861      	ldr	r1, [r4, #4]
 800a614:	19bb      	adds	r3, r7, r6
 800a616:	9300      	str	r3, [sp, #0]
 800a618:	68a3      	ldr	r3, [r4, #8]
 800a61a:	19ba      	adds	r2, r7, r6
 800a61c:	4293      	cmp	r3, r2
 800a61e:	da00      	bge.n	800a622 <__multiply+0x2a>
 800a620:	3101      	adds	r1, #1
 800a622:	f7ff fed5 	bl	800a3d0 <_Balloc>
 800a626:	4684      	mov	ip, r0
 800a628:	2800      	cmp	r0, #0
 800a62a:	d106      	bne.n	800a63a <__multiply+0x42>
 800a62c:	21b1      	movs	r1, #177	@ 0xb1
 800a62e:	4662      	mov	r2, ip
 800a630:	4b44      	ldr	r3, [pc, #272]	@ (800a744 <__multiply+0x14c>)
 800a632:	4845      	ldr	r0, [pc, #276]	@ (800a748 <__multiply+0x150>)
 800a634:	0049      	lsls	r1, r1, #1
 800a636:	f000 fc9b 	bl	800af70 <__assert_func>
 800a63a:	0002      	movs	r2, r0
 800a63c:	19bb      	adds	r3, r7, r6
 800a63e:	3214      	adds	r2, #20
 800a640:	009b      	lsls	r3, r3, #2
 800a642:	18d3      	adds	r3, r2, r3
 800a644:	9301      	str	r3, [sp, #4]
 800a646:	2100      	movs	r1, #0
 800a648:	0013      	movs	r3, r2
 800a64a:	9801      	ldr	r0, [sp, #4]
 800a64c:	4283      	cmp	r3, r0
 800a64e:	d328      	bcc.n	800a6a2 <__multiply+0xaa>
 800a650:	0023      	movs	r3, r4
 800a652:	00bf      	lsls	r7, r7, #2
 800a654:	3314      	adds	r3, #20
 800a656:	9304      	str	r3, [sp, #16]
 800a658:	3514      	adds	r5, #20
 800a65a:	19db      	adds	r3, r3, r7
 800a65c:	00b6      	lsls	r6, r6, #2
 800a65e:	9302      	str	r3, [sp, #8]
 800a660:	19ab      	adds	r3, r5, r6
 800a662:	9307      	str	r3, [sp, #28]
 800a664:	2304      	movs	r3, #4
 800a666:	9305      	str	r3, [sp, #20]
 800a668:	0023      	movs	r3, r4
 800a66a:	9902      	ldr	r1, [sp, #8]
 800a66c:	3315      	adds	r3, #21
 800a66e:	4299      	cmp	r1, r3
 800a670:	d305      	bcc.n	800a67e <__multiply+0x86>
 800a672:	1b0c      	subs	r4, r1, r4
 800a674:	3c15      	subs	r4, #21
 800a676:	08a4      	lsrs	r4, r4, #2
 800a678:	3401      	adds	r4, #1
 800a67a:	00a3      	lsls	r3, r4, #2
 800a67c:	9305      	str	r3, [sp, #20]
 800a67e:	9b07      	ldr	r3, [sp, #28]
 800a680:	429d      	cmp	r5, r3
 800a682:	d310      	bcc.n	800a6a6 <__multiply+0xae>
 800a684:	9b00      	ldr	r3, [sp, #0]
 800a686:	2b00      	cmp	r3, #0
 800a688:	dd05      	ble.n	800a696 <__multiply+0x9e>
 800a68a:	9b01      	ldr	r3, [sp, #4]
 800a68c:	3b04      	subs	r3, #4
 800a68e:	9301      	str	r3, [sp, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d052      	beq.n	800a73c <__multiply+0x144>
 800a696:	4663      	mov	r3, ip
 800a698:	4660      	mov	r0, ip
 800a69a:	9a00      	ldr	r2, [sp, #0]
 800a69c:	611a      	str	r2, [r3, #16]
 800a69e:	b009      	add	sp, #36	@ 0x24
 800a6a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6a2:	c302      	stmia	r3!, {r1}
 800a6a4:	e7d1      	b.n	800a64a <__multiply+0x52>
 800a6a6:	682c      	ldr	r4, [r5, #0]
 800a6a8:	b2a4      	uxth	r4, r4
 800a6aa:	2c00      	cmp	r4, #0
 800a6ac:	d01f      	beq.n	800a6ee <__multiply+0xf6>
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	0017      	movs	r7, r2
 800a6b2:	9e04      	ldr	r6, [sp, #16]
 800a6b4:	9303      	str	r3, [sp, #12]
 800a6b6:	ce08      	ldmia	r6!, {r3}
 800a6b8:	6839      	ldr	r1, [r7, #0]
 800a6ba:	9306      	str	r3, [sp, #24]
 800a6bc:	466b      	mov	r3, sp
 800a6be:	8b1b      	ldrh	r3, [r3, #24]
 800a6c0:	b288      	uxth	r0, r1
 800a6c2:	4363      	muls	r3, r4
 800a6c4:	181b      	adds	r3, r3, r0
 800a6c6:	9803      	ldr	r0, [sp, #12]
 800a6c8:	0c09      	lsrs	r1, r1, #16
 800a6ca:	181b      	adds	r3, r3, r0
 800a6cc:	9806      	ldr	r0, [sp, #24]
 800a6ce:	0c00      	lsrs	r0, r0, #16
 800a6d0:	4360      	muls	r0, r4
 800a6d2:	1840      	adds	r0, r0, r1
 800a6d4:	0c19      	lsrs	r1, r3, #16
 800a6d6:	1841      	adds	r1, r0, r1
 800a6d8:	0c08      	lsrs	r0, r1, #16
 800a6da:	b29b      	uxth	r3, r3
 800a6dc:	0409      	lsls	r1, r1, #16
 800a6de:	4319      	orrs	r1, r3
 800a6e0:	9b02      	ldr	r3, [sp, #8]
 800a6e2:	9003      	str	r0, [sp, #12]
 800a6e4:	c702      	stmia	r7!, {r1}
 800a6e6:	42b3      	cmp	r3, r6
 800a6e8:	d8e5      	bhi.n	800a6b6 <__multiply+0xbe>
 800a6ea:	9b05      	ldr	r3, [sp, #20]
 800a6ec:	50d0      	str	r0, [r2, r3]
 800a6ee:	682c      	ldr	r4, [r5, #0]
 800a6f0:	0c24      	lsrs	r4, r4, #16
 800a6f2:	d020      	beq.n	800a736 <__multiply+0x13e>
 800a6f4:	2100      	movs	r1, #0
 800a6f6:	0010      	movs	r0, r2
 800a6f8:	6813      	ldr	r3, [r2, #0]
 800a6fa:	9e04      	ldr	r6, [sp, #16]
 800a6fc:	9103      	str	r1, [sp, #12]
 800a6fe:	6831      	ldr	r1, [r6, #0]
 800a700:	6807      	ldr	r7, [r0, #0]
 800a702:	b289      	uxth	r1, r1
 800a704:	4361      	muls	r1, r4
 800a706:	0c3f      	lsrs	r7, r7, #16
 800a708:	19c9      	adds	r1, r1, r7
 800a70a:	9f03      	ldr	r7, [sp, #12]
 800a70c:	b29b      	uxth	r3, r3
 800a70e:	19c9      	adds	r1, r1, r7
 800a710:	040f      	lsls	r7, r1, #16
 800a712:	431f      	orrs	r7, r3
 800a714:	6007      	str	r7, [r0, #0]
 800a716:	ce80      	ldmia	r6!, {r7}
 800a718:	6843      	ldr	r3, [r0, #4]
 800a71a:	0c3f      	lsrs	r7, r7, #16
 800a71c:	4367      	muls	r7, r4
 800a71e:	b29b      	uxth	r3, r3
 800a720:	0c09      	lsrs	r1, r1, #16
 800a722:	18fb      	adds	r3, r7, r3
 800a724:	185b      	adds	r3, r3, r1
 800a726:	0c19      	lsrs	r1, r3, #16
 800a728:	9103      	str	r1, [sp, #12]
 800a72a:	9902      	ldr	r1, [sp, #8]
 800a72c:	3004      	adds	r0, #4
 800a72e:	42b1      	cmp	r1, r6
 800a730:	d8e5      	bhi.n	800a6fe <__multiply+0x106>
 800a732:	9905      	ldr	r1, [sp, #20]
 800a734:	5053      	str	r3, [r2, r1]
 800a736:	3504      	adds	r5, #4
 800a738:	3204      	adds	r2, #4
 800a73a:	e7a0      	b.n	800a67e <__multiply+0x86>
 800a73c:	9b00      	ldr	r3, [sp, #0]
 800a73e:	3b01      	subs	r3, #1
 800a740:	9300      	str	r3, [sp, #0]
 800a742:	e79f      	b.n	800a684 <__multiply+0x8c>
 800a744:	0800db1b 	.word	0x0800db1b
 800a748:	0800db2c 	.word	0x0800db2c

0800a74c <__pow5mult>:
 800a74c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a74e:	2303      	movs	r3, #3
 800a750:	0015      	movs	r5, r2
 800a752:	0007      	movs	r7, r0
 800a754:	000e      	movs	r6, r1
 800a756:	401a      	ands	r2, r3
 800a758:	421d      	tst	r5, r3
 800a75a:	d008      	beq.n	800a76e <__pow5mult+0x22>
 800a75c:	4925      	ldr	r1, [pc, #148]	@ (800a7f4 <__pow5mult+0xa8>)
 800a75e:	3a01      	subs	r2, #1
 800a760:	0092      	lsls	r2, r2, #2
 800a762:	5852      	ldr	r2, [r2, r1]
 800a764:	2300      	movs	r3, #0
 800a766:	0031      	movs	r1, r6
 800a768:	f7ff fe9a 	bl	800a4a0 <__multadd>
 800a76c:	0006      	movs	r6, r0
 800a76e:	10ad      	asrs	r5, r5, #2
 800a770:	d03d      	beq.n	800a7ee <__pow5mult+0xa2>
 800a772:	69fc      	ldr	r4, [r7, #28]
 800a774:	2c00      	cmp	r4, #0
 800a776:	d10f      	bne.n	800a798 <__pow5mult+0x4c>
 800a778:	2010      	movs	r0, #16
 800a77a:	f7ff fd6d 	bl	800a258 <malloc>
 800a77e:	1e02      	subs	r2, r0, #0
 800a780:	61f8      	str	r0, [r7, #28]
 800a782:	d105      	bne.n	800a790 <__pow5mult+0x44>
 800a784:	21b4      	movs	r1, #180	@ 0xb4
 800a786:	4b1c      	ldr	r3, [pc, #112]	@ (800a7f8 <__pow5mult+0xac>)
 800a788:	481c      	ldr	r0, [pc, #112]	@ (800a7fc <__pow5mult+0xb0>)
 800a78a:	31ff      	adds	r1, #255	@ 0xff
 800a78c:	f000 fbf0 	bl	800af70 <__assert_func>
 800a790:	6044      	str	r4, [r0, #4]
 800a792:	6084      	str	r4, [r0, #8]
 800a794:	6004      	str	r4, [r0, #0]
 800a796:	60c4      	str	r4, [r0, #12]
 800a798:	69fb      	ldr	r3, [r7, #28]
 800a79a:	689c      	ldr	r4, [r3, #8]
 800a79c:	9301      	str	r3, [sp, #4]
 800a79e:	2c00      	cmp	r4, #0
 800a7a0:	d108      	bne.n	800a7b4 <__pow5mult+0x68>
 800a7a2:	0038      	movs	r0, r7
 800a7a4:	4916      	ldr	r1, [pc, #88]	@ (800a800 <__pow5mult+0xb4>)
 800a7a6:	f7ff ff0f 	bl	800a5c8 <__i2b>
 800a7aa:	9b01      	ldr	r3, [sp, #4]
 800a7ac:	0004      	movs	r4, r0
 800a7ae:	6098      	str	r0, [r3, #8]
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	6003      	str	r3, [r0, #0]
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	421d      	tst	r5, r3
 800a7b8:	d00a      	beq.n	800a7d0 <__pow5mult+0x84>
 800a7ba:	0031      	movs	r1, r6
 800a7bc:	0022      	movs	r2, r4
 800a7be:	0038      	movs	r0, r7
 800a7c0:	f7ff ff1a 	bl	800a5f8 <__multiply>
 800a7c4:	0031      	movs	r1, r6
 800a7c6:	9001      	str	r0, [sp, #4]
 800a7c8:	0038      	movs	r0, r7
 800a7ca:	f7ff fe45 	bl	800a458 <_Bfree>
 800a7ce:	9e01      	ldr	r6, [sp, #4]
 800a7d0:	106d      	asrs	r5, r5, #1
 800a7d2:	d00c      	beq.n	800a7ee <__pow5mult+0xa2>
 800a7d4:	6820      	ldr	r0, [r4, #0]
 800a7d6:	2800      	cmp	r0, #0
 800a7d8:	d107      	bne.n	800a7ea <__pow5mult+0x9e>
 800a7da:	0022      	movs	r2, r4
 800a7dc:	0021      	movs	r1, r4
 800a7de:	0038      	movs	r0, r7
 800a7e0:	f7ff ff0a 	bl	800a5f8 <__multiply>
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	6020      	str	r0, [r4, #0]
 800a7e8:	6003      	str	r3, [r0, #0]
 800a7ea:	0004      	movs	r4, r0
 800a7ec:	e7e2      	b.n	800a7b4 <__pow5mult+0x68>
 800a7ee:	0030      	movs	r0, r6
 800a7f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a7f2:	46c0      	nop			@ (mov r8, r8)
 800a7f4:	0800dc58 	.word	0x0800dc58
 800a7f8:	0800daac 	.word	0x0800daac
 800a7fc:	0800db2c 	.word	0x0800db2c
 800a800:	00000271 	.word	0x00000271

0800a804 <__lshift>:
 800a804:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a806:	000c      	movs	r4, r1
 800a808:	0016      	movs	r6, r2
 800a80a:	6923      	ldr	r3, [r4, #16]
 800a80c:	1157      	asrs	r7, r2, #5
 800a80e:	b085      	sub	sp, #20
 800a810:	18fb      	adds	r3, r7, r3
 800a812:	9301      	str	r3, [sp, #4]
 800a814:	3301      	adds	r3, #1
 800a816:	9300      	str	r3, [sp, #0]
 800a818:	6849      	ldr	r1, [r1, #4]
 800a81a:	68a3      	ldr	r3, [r4, #8]
 800a81c:	9002      	str	r0, [sp, #8]
 800a81e:	9a00      	ldr	r2, [sp, #0]
 800a820:	4293      	cmp	r3, r2
 800a822:	db10      	blt.n	800a846 <__lshift+0x42>
 800a824:	9802      	ldr	r0, [sp, #8]
 800a826:	f7ff fdd3 	bl	800a3d0 <_Balloc>
 800a82a:	2300      	movs	r3, #0
 800a82c:	0001      	movs	r1, r0
 800a82e:	0005      	movs	r5, r0
 800a830:	001a      	movs	r2, r3
 800a832:	3114      	adds	r1, #20
 800a834:	4298      	cmp	r0, r3
 800a836:	d10c      	bne.n	800a852 <__lshift+0x4e>
 800a838:	21ef      	movs	r1, #239	@ 0xef
 800a83a:	002a      	movs	r2, r5
 800a83c:	4b25      	ldr	r3, [pc, #148]	@ (800a8d4 <__lshift+0xd0>)
 800a83e:	4826      	ldr	r0, [pc, #152]	@ (800a8d8 <__lshift+0xd4>)
 800a840:	0049      	lsls	r1, r1, #1
 800a842:	f000 fb95 	bl	800af70 <__assert_func>
 800a846:	3101      	adds	r1, #1
 800a848:	005b      	lsls	r3, r3, #1
 800a84a:	e7e8      	b.n	800a81e <__lshift+0x1a>
 800a84c:	0098      	lsls	r0, r3, #2
 800a84e:	500a      	str	r2, [r1, r0]
 800a850:	3301      	adds	r3, #1
 800a852:	42bb      	cmp	r3, r7
 800a854:	dbfa      	blt.n	800a84c <__lshift+0x48>
 800a856:	43fb      	mvns	r3, r7
 800a858:	17db      	asrs	r3, r3, #31
 800a85a:	401f      	ands	r7, r3
 800a85c:	00bf      	lsls	r7, r7, #2
 800a85e:	0023      	movs	r3, r4
 800a860:	201f      	movs	r0, #31
 800a862:	19c9      	adds	r1, r1, r7
 800a864:	0037      	movs	r7, r6
 800a866:	6922      	ldr	r2, [r4, #16]
 800a868:	3314      	adds	r3, #20
 800a86a:	0092      	lsls	r2, r2, #2
 800a86c:	189a      	adds	r2, r3, r2
 800a86e:	4007      	ands	r7, r0
 800a870:	4206      	tst	r6, r0
 800a872:	d029      	beq.n	800a8c8 <__lshift+0xc4>
 800a874:	3001      	adds	r0, #1
 800a876:	1bc0      	subs	r0, r0, r7
 800a878:	9003      	str	r0, [sp, #12]
 800a87a:	468c      	mov	ip, r1
 800a87c:	2000      	movs	r0, #0
 800a87e:	681e      	ldr	r6, [r3, #0]
 800a880:	40be      	lsls	r6, r7
 800a882:	4306      	orrs	r6, r0
 800a884:	4660      	mov	r0, ip
 800a886:	c040      	stmia	r0!, {r6}
 800a888:	4684      	mov	ip, r0
 800a88a:	9e03      	ldr	r6, [sp, #12]
 800a88c:	cb01      	ldmia	r3!, {r0}
 800a88e:	40f0      	lsrs	r0, r6
 800a890:	429a      	cmp	r2, r3
 800a892:	d8f4      	bhi.n	800a87e <__lshift+0x7a>
 800a894:	0026      	movs	r6, r4
 800a896:	3615      	adds	r6, #21
 800a898:	2304      	movs	r3, #4
 800a89a:	42b2      	cmp	r2, r6
 800a89c:	d304      	bcc.n	800a8a8 <__lshift+0xa4>
 800a89e:	1b13      	subs	r3, r2, r4
 800a8a0:	3b15      	subs	r3, #21
 800a8a2:	089b      	lsrs	r3, r3, #2
 800a8a4:	3301      	adds	r3, #1
 800a8a6:	009b      	lsls	r3, r3, #2
 800a8a8:	50c8      	str	r0, [r1, r3]
 800a8aa:	2800      	cmp	r0, #0
 800a8ac:	d002      	beq.n	800a8b4 <__lshift+0xb0>
 800a8ae:	9b01      	ldr	r3, [sp, #4]
 800a8b0:	3302      	adds	r3, #2
 800a8b2:	9300      	str	r3, [sp, #0]
 800a8b4:	9b00      	ldr	r3, [sp, #0]
 800a8b6:	9802      	ldr	r0, [sp, #8]
 800a8b8:	3b01      	subs	r3, #1
 800a8ba:	0021      	movs	r1, r4
 800a8bc:	612b      	str	r3, [r5, #16]
 800a8be:	f7ff fdcb 	bl	800a458 <_Bfree>
 800a8c2:	0028      	movs	r0, r5
 800a8c4:	b005      	add	sp, #20
 800a8c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8c8:	cb01      	ldmia	r3!, {r0}
 800a8ca:	c101      	stmia	r1!, {r0}
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	d8fb      	bhi.n	800a8c8 <__lshift+0xc4>
 800a8d0:	e7f0      	b.n	800a8b4 <__lshift+0xb0>
 800a8d2:	46c0      	nop			@ (mov r8, r8)
 800a8d4:	0800db1b 	.word	0x0800db1b
 800a8d8:	0800db2c 	.word	0x0800db2c

0800a8dc <__mcmp>:
 800a8dc:	b530      	push	{r4, r5, lr}
 800a8de:	690b      	ldr	r3, [r1, #16]
 800a8e0:	6904      	ldr	r4, [r0, #16]
 800a8e2:	0002      	movs	r2, r0
 800a8e4:	1ae0      	subs	r0, r4, r3
 800a8e6:	429c      	cmp	r4, r3
 800a8e8:	d10f      	bne.n	800a90a <__mcmp+0x2e>
 800a8ea:	3214      	adds	r2, #20
 800a8ec:	009b      	lsls	r3, r3, #2
 800a8ee:	3114      	adds	r1, #20
 800a8f0:	0014      	movs	r4, r2
 800a8f2:	18c9      	adds	r1, r1, r3
 800a8f4:	18d2      	adds	r2, r2, r3
 800a8f6:	3a04      	subs	r2, #4
 800a8f8:	3904      	subs	r1, #4
 800a8fa:	6815      	ldr	r5, [r2, #0]
 800a8fc:	680b      	ldr	r3, [r1, #0]
 800a8fe:	429d      	cmp	r5, r3
 800a900:	d004      	beq.n	800a90c <__mcmp+0x30>
 800a902:	2001      	movs	r0, #1
 800a904:	429d      	cmp	r5, r3
 800a906:	d200      	bcs.n	800a90a <__mcmp+0x2e>
 800a908:	3802      	subs	r0, #2
 800a90a:	bd30      	pop	{r4, r5, pc}
 800a90c:	4294      	cmp	r4, r2
 800a90e:	d3f2      	bcc.n	800a8f6 <__mcmp+0x1a>
 800a910:	e7fb      	b.n	800a90a <__mcmp+0x2e>
	...

0800a914 <__mdiff>:
 800a914:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a916:	000c      	movs	r4, r1
 800a918:	b087      	sub	sp, #28
 800a91a:	9000      	str	r0, [sp, #0]
 800a91c:	0011      	movs	r1, r2
 800a91e:	0020      	movs	r0, r4
 800a920:	0017      	movs	r7, r2
 800a922:	f7ff ffdb 	bl	800a8dc <__mcmp>
 800a926:	1e05      	subs	r5, r0, #0
 800a928:	d110      	bne.n	800a94c <__mdiff+0x38>
 800a92a:	0001      	movs	r1, r0
 800a92c:	9800      	ldr	r0, [sp, #0]
 800a92e:	f7ff fd4f 	bl	800a3d0 <_Balloc>
 800a932:	1e02      	subs	r2, r0, #0
 800a934:	d104      	bne.n	800a940 <__mdiff+0x2c>
 800a936:	4b40      	ldr	r3, [pc, #256]	@ (800aa38 <__mdiff+0x124>)
 800a938:	4840      	ldr	r0, [pc, #256]	@ (800aa3c <__mdiff+0x128>)
 800a93a:	4941      	ldr	r1, [pc, #260]	@ (800aa40 <__mdiff+0x12c>)
 800a93c:	f000 fb18 	bl	800af70 <__assert_func>
 800a940:	2301      	movs	r3, #1
 800a942:	6145      	str	r5, [r0, #20]
 800a944:	6103      	str	r3, [r0, #16]
 800a946:	0010      	movs	r0, r2
 800a948:	b007      	add	sp, #28
 800a94a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a94c:	2600      	movs	r6, #0
 800a94e:	42b0      	cmp	r0, r6
 800a950:	da03      	bge.n	800a95a <__mdiff+0x46>
 800a952:	0023      	movs	r3, r4
 800a954:	003c      	movs	r4, r7
 800a956:	001f      	movs	r7, r3
 800a958:	3601      	adds	r6, #1
 800a95a:	6861      	ldr	r1, [r4, #4]
 800a95c:	9800      	ldr	r0, [sp, #0]
 800a95e:	f7ff fd37 	bl	800a3d0 <_Balloc>
 800a962:	1e02      	subs	r2, r0, #0
 800a964:	d103      	bne.n	800a96e <__mdiff+0x5a>
 800a966:	4b34      	ldr	r3, [pc, #208]	@ (800aa38 <__mdiff+0x124>)
 800a968:	4834      	ldr	r0, [pc, #208]	@ (800aa3c <__mdiff+0x128>)
 800a96a:	4936      	ldr	r1, [pc, #216]	@ (800aa44 <__mdiff+0x130>)
 800a96c:	e7e6      	b.n	800a93c <__mdiff+0x28>
 800a96e:	6923      	ldr	r3, [r4, #16]
 800a970:	3414      	adds	r4, #20
 800a972:	9300      	str	r3, [sp, #0]
 800a974:	009b      	lsls	r3, r3, #2
 800a976:	18e3      	adds	r3, r4, r3
 800a978:	0021      	movs	r1, r4
 800a97a:	9401      	str	r4, [sp, #4]
 800a97c:	003c      	movs	r4, r7
 800a97e:	9302      	str	r3, [sp, #8]
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	3414      	adds	r4, #20
 800a984:	009b      	lsls	r3, r3, #2
 800a986:	18e3      	adds	r3, r4, r3
 800a988:	9303      	str	r3, [sp, #12]
 800a98a:	0003      	movs	r3, r0
 800a98c:	60c6      	str	r6, [r0, #12]
 800a98e:	468c      	mov	ip, r1
 800a990:	2000      	movs	r0, #0
 800a992:	3314      	adds	r3, #20
 800a994:	9304      	str	r3, [sp, #16]
 800a996:	9305      	str	r3, [sp, #20]
 800a998:	4663      	mov	r3, ip
 800a99a:	cb20      	ldmia	r3!, {r5}
 800a99c:	b2a9      	uxth	r1, r5
 800a99e:	000e      	movs	r6, r1
 800a9a0:	469c      	mov	ip, r3
 800a9a2:	cc08      	ldmia	r4!, {r3}
 800a9a4:	0c2d      	lsrs	r5, r5, #16
 800a9a6:	b299      	uxth	r1, r3
 800a9a8:	1a71      	subs	r1, r6, r1
 800a9aa:	1809      	adds	r1, r1, r0
 800a9ac:	0c1b      	lsrs	r3, r3, #16
 800a9ae:	1408      	asrs	r0, r1, #16
 800a9b0:	1aeb      	subs	r3, r5, r3
 800a9b2:	181b      	adds	r3, r3, r0
 800a9b4:	1418      	asrs	r0, r3, #16
 800a9b6:	b289      	uxth	r1, r1
 800a9b8:	041b      	lsls	r3, r3, #16
 800a9ba:	4319      	orrs	r1, r3
 800a9bc:	9b05      	ldr	r3, [sp, #20]
 800a9be:	c302      	stmia	r3!, {r1}
 800a9c0:	9305      	str	r3, [sp, #20]
 800a9c2:	9b03      	ldr	r3, [sp, #12]
 800a9c4:	42a3      	cmp	r3, r4
 800a9c6:	d8e7      	bhi.n	800a998 <__mdiff+0x84>
 800a9c8:	0039      	movs	r1, r7
 800a9ca:	9c03      	ldr	r4, [sp, #12]
 800a9cc:	3115      	adds	r1, #21
 800a9ce:	2304      	movs	r3, #4
 800a9d0:	428c      	cmp	r4, r1
 800a9d2:	d304      	bcc.n	800a9de <__mdiff+0xca>
 800a9d4:	1be3      	subs	r3, r4, r7
 800a9d6:	3b15      	subs	r3, #21
 800a9d8:	089b      	lsrs	r3, r3, #2
 800a9da:	3301      	adds	r3, #1
 800a9dc:	009b      	lsls	r3, r3, #2
 800a9de:	9901      	ldr	r1, [sp, #4]
 800a9e0:	18cd      	adds	r5, r1, r3
 800a9e2:	9904      	ldr	r1, [sp, #16]
 800a9e4:	002e      	movs	r6, r5
 800a9e6:	18cb      	adds	r3, r1, r3
 800a9e8:	001f      	movs	r7, r3
 800a9ea:	9902      	ldr	r1, [sp, #8]
 800a9ec:	428e      	cmp	r6, r1
 800a9ee:	d311      	bcc.n	800aa14 <__mdiff+0x100>
 800a9f0:	9c02      	ldr	r4, [sp, #8]
 800a9f2:	1ee9      	subs	r1, r5, #3
 800a9f4:	2000      	movs	r0, #0
 800a9f6:	428c      	cmp	r4, r1
 800a9f8:	d304      	bcc.n	800aa04 <__mdiff+0xf0>
 800a9fa:	0021      	movs	r1, r4
 800a9fc:	3103      	adds	r1, #3
 800a9fe:	1b49      	subs	r1, r1, r5
 800aa00:	0889      	lsrs	r1, r1, #2
 800aa02:	0088      	lsls	r0, r1, #2
 800aa04:	181b      	adds	r3, r3, r0
 800aa06:	3b04      	subs	r3, #4
 800aa08:	6819      	ldr	r1, [r3, #0]
 800aa0a:	2900      	cmp	r1, #0
 800aa0c:	d010      	beq.n	800aa30 <__mdiff+0x11c>
 800aa0e:	9b00      	ldr	r3, [sp, #0]
 800aa10:	6113      	str	r3, [r2, #16]
 800aa12:	e798      	b.n	800a946 <__mdiff+0x32>
 800aa14:	4684      	mov	ip, r0
 800aa16:	ce02      	ldmia	r6!, {r1}
 800aa18:	b288      	uxth	r0, r1
 800aa1a:	4460      	add	r0, ip
 800aa1c:	1400      	asrs	r0, r0, #16
 800aa1e:	0c0c      	lsrs	r4, r1, #16
 800aa20:	1904      	adds	r4, r0, r4
 800aa22:	4461      	add	r1, ip
 800aa24:	1420      	asrs	r0, r4, #16
 800aa26:	b289      	uxth	r1, r1
 800aa28:	0424      	lsls	r4, r4, #16
 800aa2a:	4321      	orrs	r1, r4
 800aa2c:	c702      	stmia	r7!, {r1}
 800aa2e:	e7dc      	b.n	800a9ea <__mdiff+0xd6>
 800aa30:	9900      	ldr	r1, [sp, #0]
 800aa32:	3901      	subs	r1, #1
 800aa34:	9100      	str	r1, [sp, #0]
 800aa36:	e7e6      	b.n	800aa06 <__mdiff+0xf2>
 800aa38:	0800db1b 	.word	0x0800db1b
 800aa3c:	0800db2c 	.word	0x0800db2c
 800aa40:	00000237 	.word	0x00000237
 800aa44:	00000245 	.word	0x00000245

0800aa48 <__d2b>:
 800aa48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa4a:	2101      	movs	r1, #1
 800aa4c:	0016      	movs	r6, r2
 800aa4e:	001f      	movs	r7, r3
 800aa50:	f7ff fcbe 	bl	800a3d0 <_Balloc>
 800aa54:	1e04      	subs	r4, r0, #0
 800aa56:	d105      	bne.n	800aa64 <__d2b+0x1c>
 800aa58:	0022      	movs	r2, r4
 800aa5a:	4b25      	ldr	r3, [pc, #148]	@ (800aaf0 <__d2b+0xa8>)
 800aa5c:	4825      	ldr	r0, [pc, #148]	@ (800aaf4 <__d2b+0xac>)
 800aa5e:	4926      	ldr	r1, [pc, #152]	@ (800aaf8 <__d2b+0xb0>)
 800aa60:	f000 fa86 	bl	800af70 <__assert_func>
 800aa64:	033b      	lsls	r3, r7, #12
 800aa66:	007d      	lsls	r5, r7, #1
 800aa68:	0b1b      	lsrs	r3, r3, #12
 800aa6a:	0d6d      	lsrs	r5, r5, #21
 800aa6c:	d002      	beq.n	800aa74 <__d2b+0x2c>
 800aa6e:	2280      	movs	r2, #128	@ 0x80
 800aa70:	0352      	lsls	r2, r2, #13
 800aa72:	4313      	orrs	r3, r2
 800aa74:	9301      	str	r3, [sp, #4]
 800aa76:	2e00      	cmp	r6, #0
 800aa78:	d025      	beq.n	800aac6 <__d2b+0x7e>
 800aa7a:	4668      	mov	r0, sp
 800aa7c:	9600      	str	r6, [sp, #0]
 800aa7e:	f7ff fd74 	bl	800a56a <__lo0bits>
 800aa82:	9b01      	ldr	r3, [sp, #4]
 800aa84:	9900      	ldr	r1, [sp, #0]
 800aa86:	2800      	cmp	r0, #0
 800aa88:	d01b      	beq.n	800aac2 <__d2b+0x7a>
 800aa8a:	2220      	movs	r2, #32
 800aa8c:	001e      	movs	r6, r3
 800aa8e:	1a12      	subs	r2, r2, r0
 800aa90:	4096      	lsls	r6, r2
 800aa92:	0032      	movs	r2, r6
 800aa94:	40c3      	lsrs	r3, r0
 800aa96:	430a      	orrs	r2, r1
 800aa98:	6162      	str	r2, [r4, #20]
 800aa9a:	9301      	str	r3, [sp, #4]
 800aa9c:	9e01      	ldr	r6, [sp, #4]
 800aa9e:	61a6      	str	r6, [r4, #24]
 800aaa0:	1e73      	subs	r3, r6, #1
 800aaa2:	419e      	sbcs	r6, r3
 800aaa4:	3601      	adds	r6, #1
 800aaa6:	6126      	str	r6, [r4, #16]
 800aaa8:	2d00      	cmp	r5, #0
 800aaaa:	d014      	beq.n	800aad6 <__d2b+0x8e>
 800aaac:	2635      	movs	r6, #53	@ 0x35
 800aaae:	4b13      	ldr	r3, [pc, #76]	@ (800aafc <__d2b+0xb4>)
 800aab0:	18ed      	adds	r5, r5, r3
 800aab2:	9b08      	ldr	r3, [sp, #32]
 800aab4:	182d      	adds	r5, r5, r0
 800aab6:	601d      	str	r5, [r3, #0]
 800aab8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aaba:	1a36      	subs	r6, r6, r0
 800aabc:	601e      	str	r6, [r3, #0]
 800aabe:	0020      	movs	r0, r4
 800aac0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aac2:	6161      	str	r1, [r4, #20]
 800aac4:	e7ea      	b.n	800aa9c <__d2b+0x54>
 800aac6:	a801      	add	r0, sp, #4
 800aac8:	f7ff fd4f 	bl	800a56a <__lo0bits>
 800aacc:	9b01      	ldr	r3, [sp, #4]
 800aace:	2601      	movs	r6, #1
 800aad0:	6163      	str	r3, [r4, #20]
 800aad2:	3020      	adds	r0, #32
 800aad4:	e7e7      	b.n	800aaa6 <__d2b+0x5e>
 800aad6:	4b0a      	ldr	r3, [pc, #40]	@ (800ab00 <__d2b+0xb8>)
 800aad8:	18c0      	adds	r0, r0, r3
 800aada:	9b08      	ldr	r3, [sp, #32]
 800aadc:	6018      	str	r0, [r3, #0]
 800aade:	4b09      	ldr	r3, [pc, #36]	@ (800ab04 <__d2b+0xbc>)
 800aae0:	18f3      	adds	r3, r6, r3
 800aae2:	009b      	lsls	r3, r3, #2
 800aae4:	18e3      	adds	r3, r4, r3
 800aae6:	6958      	ldr	r0, [r3, #20]
 800aae8:	f7ff fd1e 	bl	800a528 <__hi0bits>
 800aaec:	0176      	lsls	r6, r6, #5
 800aaee:	e7e3      	b.n	800aab8 <__d2b+0x70>
 800aaf0:	0800db1b 	.word	0x0800db1b
 800aaf4:	0800db2c 	.word	0x0800db2c
 800aaf8:	0000030f 	.word	0x0000030f
 800aafc:	fffffbcd 	.word	0xfffffbcd
 800ab00:	fffffbce 	.word	0xfffffbce
 800ab04:	3fffffff 	.word	0x3fffffff

0800ab08 <__ssputs_r>:
 800ab08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab0a:	688e      	ldr	r6, [r1, #8]
 800ab0c:	b085      	sub	sp, #20
 800ab0e:	001f      	movs	r7, r3
 800ab10:	000c      	movs	r4, r1
 800ab12:	680b      	ldr	r3, [r1, #0]
 800ab14:	9002      	str	r0, [sp, #8]
 800ab16:	9203      	str	r2, [sp, #12]
 800ab18:	42be      	cmp	r6, r7
 800ab1a:	d830      	bhi.n	800ab7e <__ssputs_r+0x76>
 800ab1c:	210c      	movs	r1, #12
 800ab1e:	5e62      	ldrsh	r2, [r4, r1]
 800ab20:	2190      	movs	r1, #144	@ 0x90
 800ab22:	00c9      	lsls	r1, r1, #3
 800ab24:	420a      	tst	r2, r1
 800ab26:	d028      	beq.n	800ab7a <__ssputs_r+0x72>
 800ab28:	2003      	movs	r0, #3
 800ab2a:	6921      	ldr	r1, [r4, #16]
 800ab2c:	1a5b      	subs	r3, r3, r1
 800ab2e:	9301      	str	r3, [sp, #4]
 800ab30:	6963      	ldr	r3, [r4, #20]
 800ab32:	4343      	muls	r3, r0
 800ab34:	9801      	ldr	r0, [sp, #4]
 800ab36:	0fdd      	lsrs	r5, r3, #31
 800ab38:	18ed      	adds	r5, r5, r3
 800ab3a:	1c7b      	adds	r3, r7, #1
 800ab3c:	181b      	adds	r3, r3, r0
 800ab3e:	106d      	asrs	r5, r5, #1
 800ab40:	42ab      	cmp	r3, r5
 800ab42:	d900      	bls.n	800ab46 <__ssputs_r+0x3e>
 800ab44:	001d      	movs	r5, r3
 800ab46:	0552      	lsls	r2, r2, #21
 800ab48:	d528      	bpl.n	800ab9c <__ssputs_r+0x94>
 800ab4a:	0029      	movs	r1, r5
 800ab4c:	9802      	ldr	r0, [sp, #8]
 800ab4e:	f7ff fbaf 	bl	800a2b0 <_malloc_r>
 800ab52:	1e06      	subs	r6, r0, #0
 800ab54:	d02c      	beq.n	800abb0 <__ssputs_r+0xa8>
 800ab56:	9a01      	ldr	r2, [sp, #4]
 800ab58:	6921      	ldr	r1, [r4, #16]
 800ab5a:	f7fe fcb5 	bl	80094c8 <memcpy>
 800ab5e:	89a2      	ldrh	r2, [r4, #12]
 800ab60:	4b18      	ldr	r3, [pc, #96]	@ (800abc4 <__ssputs_r+0xbc>)
 800ab62:	401a      	ands	r2, r3
 800ab64:	2380      	movs	r3, #128	@ 0x80
 800ab66:	4313      	orrs	r3, r2
 800ab68:	81a3      	strh	r3, [r4, #12]
 800ab6a:	9b01      	ldr	r3, [sp, #4]
 800ab6c:	6126      	str	r6, [r4, #16]
 800ab6e:	18f6      	adds	r6, r6, r3
 800ab70:	6026      	str	r6, [r4, #0]
 800ab72:	003e      	movs	r6, r7
 800ab74:	6165      	str	r5, [r4, #20]
 800ab76:	1aed      	subs	r5, r5, r3
 800ab78:	60a5      	str	r5, [r4, #8]
 800ab7a:	42be      	cmp	r6, r7
 800ab7c:	d900      	bls.n	800ab80 <__ssputs_r+0x78>
 800ab7e:	003e      	movs	r6, r7
 800ab80:	0032      	movs	r2, r6
 800ab82:	9903      	ldr	r1, [sp, #12]
 800ab84:	6820      	ldr	r0, [r4, #0]
 800ab86:	f000 f9ce 	bl	800af26 <memmove>
 800ab8a:	2000      	movs	r0, #0
 800ab8c:	68a3      	ldr	r3, [r4, #8]
 800ab8e:	1b9b      	subs	r3, r3, r6
 800ab90:	60a3      	str	r3, [r4, #8]
 800ab92:	6823      	ldr	r3, [r4, #0]
 800ab94:	199b      	adds	r3, r3, r6
 800ab96:	6023      	str	r3, [r4, #0]
 800ab98:	b005      	add	sp, #20
 800ab9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab9c:	002a      	movs	r2, r5
 800ab9e:	9802      	ldr	r0, [sp, #8]
 800aba0:	f000 fa43 	bl	800b02a <_realloc_r>
 800aba4:	1e06      	subs	r6, r0, #0
 800aba6:	d1e0      	bne.n	800ab6a <__ssputs_r+0x62>
 800aba8:	6921      	ldr	r1, [r4, #16]
 800abaa:	9802      	ldr	r0, [sp, #8]
 800abac:	f7ff fb0a 	bl	800a1c4 <_free_r>
 800abb0:	230c      	movs	r3, #12
 800abb2:	2001      	movs	r0, #1
 800abb4:	9a02      	ldr	r2, [sp, #8]
 800abb6:	4240      	negs	r0, r0
 800abb8:	6013      	str	r3, [r2, #0]
 800abba:	89a2      	ldrh	r2, [r4, #12]
 800abbc:	3334      	adds	r3, #52	@ 0x34
 800abbe:	4313      	orrs	r3, r2
 800abc0:	81a3      	strh	r3, [r4, #12]
 800abc2:	e7e9      	b.n	800ab98 <__ssputs_r+0x90>
 800abc4:	fffffb7f 	.word	0xfffffb7f

0800abc8 <_svfiprintf_r>:
 800abc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abca:	b0a1      	sub	sp, #132	@ 0x84
 800abcc:	9003      	str	r0, [sp, #12]
 800abce:	001d      	movs	r5, r3
 800abd0:	898b      	ldrh	r3, [r1, #12]
 800abd2:	000f      	movs	r7, r1
 800abd4:	0016      	movs	r6, r2
 800abd6:	061b      	lsls	r3, r3, #24
 800abd8:	d511      	bpl.n	800abfe <_svfiprintf_r+0x36>
 800abda:	690b      	ldr	r3, [r1, #16]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d10e      	bne.n	800abfe <_svfiprintf_r+0x36>
 800abe0:	2140      	movs	r1, #64	@ 0x40
 800abe2:	f7ff fb65 	bl	800a2b0 <_malloc_r>
 800abe6:	6038      	str	r0, [r7, #0]
 800abe8:	6138      	str	r0, [r7, #16]
 800abea:	2800      	cmp	r0, #0
 800abec:	d105      	bne.n	800abfa <_svfiprintf_r+0x32>
 800abee:	230c      	movs	r3, #12
 800abf0:	9a03      	ldr	r2, [sp, #12]
 800abf2:	6013      	str	r3, [r2, #0]
 800abf4:	2001      	movs	r0, #1
 800abf6:	4240      	negs	r0, r0
 800abf8:	e0cf      	b.n	800ad9a <_svfiprintf_r+0x1d2>
 800abfa:	2340      	movs	r3, #64	@ 0x40
 800abfc:	617b      	str	r3, [r7, #20]
 800abfe:	2300      	movs	r3, #0
 800ac00:	ac08      	add	r4, sp, #32
 800ac02:	6163      	str	r3, [r4, #20]
 800ac04:	3320      	adds	r3, #32
 800ac06:	7663      	strb	r3, [r4, #25]
 800ac08:	3310      	adds	r3, #16
 800ac0a:	76a3      	strb	r3, [r4, #26]
 800ac0c:	9507      	str	r5, [sp, #28]
 800ac0e:	0035      	movs	r5, r6
 800ac10:	782b      	ldrb	r3, [r5, #0]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d001      	beq.n	800ac1a <_svfiprintf_r+0x52>
 800ac16:	2b25      	cmp	r3, #37	@ 0x25
 800ac18:	d148      	bne.n	800acac <_svfiprintf_r+0xe4>
 800ac1a:	1bab      	subs	r3, r5, r6
 800ac1c:	9305      	str	r3, [sp, #20]
 800ac1e:	42b5      	cmp	r5, r6
 800ac20:	d00b      	beq.n	800ac3a <_svfiprintf_r+0x72>
 800ac22:	0032      	movs	r2, r6
 800ac24:	0039      	movs	r1, r7
 800ac26:	9803      	ldr	r0, [sp, #12]
 800ac28:	f7ff ff6e 	bl	800ab08 <__ssputs_r>
 800ac2c:	3001      	adds	r0, #1
 800ac2e:	d100      	bne.n	800ac32 <_svfiprintf_r+0x6a>
 800ac30:	e0ae      	b.n	800ad90 <_svfiprintf_r+0x1c8>
 800ac32:	6963      	ldr	r3, [r4, #20]
 800ac34:	9a05      	ldr	r2, [sp, #20]
 800ac36:	189b      	adds	r3, r3, r2
 800ac38:	6163      	str	r3, [r4, #20]
 800ac3a:	782b      	ldrb	r3, [r5, #0]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d100      	bne.n	800ac42 <_svfiprintf_r+0x7a>
 800ac40:	e0a6      	b.n	800ad90 <_svfiprintf_r+0x1c8>
 800ac42:	2201      	movs	r2, #1
 800ac44:	2300      	movs	r3, #0
 800ac46:	4252      	negs	r2, r2
 800ac48:	6062      	str	r2, [r4, #4]
 800ac4a:	a904      	add	r1, sp, #16
 800ac4c:	3254      	adds	r2, #84	@ 0x54
 800ac4e:	1852      	adds	r2, r2, r1
 800ac50:	1c6e      	adds	r6, r5, #1
 800ac52:	6023      	str	r3, [r4, #0]
 800ac54:	60e3      	str	r3, [r4, #12]
 800ac56:	60a3      	str	r3, [r4, #8]
 800ac58:	7013      	strb	r3, [r2, #0]
 800ac5a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800ac5c:	4b54      	ldr	r3, [pc, #336]	@ (800adb0 <_svfiprintf_r+0x1e8>)
 800ac5e:	2205      	movs	r2, #5
 800ac60:	0018      	movs	r0, r3
 800ac62:	7831      	ldrb	r1, [r6, #0]
 800ac64:	9305      	str	r3, [sp, #20]
 800ac66:	f7fe fc24 	bl	80094b2 <memchr>
 800ac6a:	1c75      	adds	r5, r6, #1
 800ac6c:	2800      	cmp	r0, #0
 800ac6e:	d11f      	bne.n	800acb0 <_svfiprintf_r+0xe8>
 800ac70:	6822      	ldr	r2, [r4, #0]
 800ac72:	06d3      	lsls	r3, r2, #27
 800ac74:	d504      	bpl.n	800ac80 <_svfiprintf_r+0xb8>
 800ac76:	2353      	movs	r3, #83	@ 0x53
 800ac78:	a904      	add	r1, sp, #16
 800ac7a:	185b      	adds	r3, r3, r1
 800ac7c:	2120      	movs	r1, #32
 800ac7e:	7019      	strb	r1, [r3, #0]
 800ac80:	0713      	lsls	r3, r2, #28
 800ac82:	d504      	bpl.n	800ac8e <_svfiprintf_r+0xc6>
 800ac84:	2353      	movs	r3, #83	@ 0x53
 800ac86:	a904      	add	r1, sp, #16
 800ac88:	185b      	adds	r3, r3, r1
 800ac8a:	212b      	movs	r1, #43	@ 0x2b
 800ac8c:	7019      	strb	r1, [r3, #0]
 800ac8e:	7833      	ldrb	r3, [r6, #0]
 800ac90:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac92:	d016      	beq.n	800acc2 <_svfiprintf_r+0xfa>
 800ac94:	0035      	movs	r5, r6
 800ac96:	2100      	movs	r1, #0
 800ac98:	200a      	movs	r0, #10
 800ac9a:	68e3      	ldr	r3, [r4, #12]
 800ac9c:	782a      	ldrb	r2, [r5, #0]
 800ac9e:	1c6e      	adds	r6, r5, #1
 800aca0:	3a30      	subs	r2, #48	@ 0x30
 800aca2:	2a09      	cmp	r2, #9
 800aca4:	d950      	bls.n	800ad48 <_svfiprintf_r+0x180>
 800aca6:	2900      	cmp	r1, #0
 800aca8:	d111      	bne.n	800acce <_svfiprintf_r+0x106>
 800acaa:	e017      	b.n	800acdc <_svfiprintf_r+0x114>
 800acac:	3501      	adds	r5, #1
 800acae:	e7af      	b.n	800ac10 <_svfiprintf_r+0x48>
 800acb0:	9b05      	ldr	r3, [sp, #20]
 800acb2:	6822      	ldr	r2, [r4, #0]
 800acb4:	1ac0      	subs	r0, r0, r3
 800acb6:	2301      	movs	r3, #1
 800acb8:	4083      	lsls	r3, r0
 800acba:	4313      	orrs	r3, r2
 800acbc:	002e      	movs	r6, r5
 800acbe:	6023      	str	r3, [r4, #0]
 800acc0:	e7cc      	b.n	800ac5c <_svfiprintf_r+0x94>
 800acc2:	9b07      	ldr	r3, [sp, #28]
 800acc4:	1d19      	adds	r1, r3, #4
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	9107      	str	r1, [sp, #28]
 800acca:	2b00      	cmp	r3, #0
 800accc:	db01      	blt.n	800acd2 <_svfiprintf_r+0x10a>
 800acce:	930b      	str	r3, [sp, #44]	@ 0x2c
 800acd0:	e004      	b.n	800acdc <_svfiprintf_r+0x114>
 800acd2:	425b      	negs	r3, r3
 800acd4:	60e3      	str	r3, [r4, #12]
 800acd6:	2302      	movs	r3, #2
 800acd8:	4313      	orrs	r3, r2
 800acda:	6023      	str	r3, [r4, #0]
 800acdc:	782b      	ldrb	r3, [r5, #0]
 800acde:	2b2e      	cmp	r3, #46	@ 0x2e
 800ace0:	d10c      	bne.n	800acfc <_svfiprintf_r+0x134>
 800ace2:	786b      	ldrb	r3, [r5, #1]
 800ace4:	2b2a      	cmp	r3, #42	@ 0x2a
 800ace6:	d134      	bne.n	800ad52 <_svfiprintf_r+0x18a>
 800ace8:	9b07      	ldr	r3, [sp, #28]
 800acea:	3502      	adds	r5, #2
 800acec:	1d1a      	adds	r2, r3, #4
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	9207      	str	r2, [sp, #28]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	da01      	bge.n	800acfa <_svfiprintf_r+0x132>
 800acf6:	2301      	movs	r3, #1
 800acf8:	425b      	negs	r3, r3
 800acfa:	9309      	str	r3, [sp, #36]	@ 0x24
 800acfc:	4e2d      	ldr	r6, [pc, #180]	@ (800adb4 <_svfiprintf_r+0x1ec>)
 800acfe:	2203      	movs	r2, #3
 800ad00:	0030      	movs	r0, r6
 800ad02:	7829      	ldrb	r1, [r5, #0]
 800ad04:	f7fe fbd5 	bl	80094b2 <memchr>
 800ad08:	2800      	cmp	r0, #0
 800ad0a:	d006      	beq.n	800ad1a <_svfiprintf_r+0x152>
 800ad0c:	2340      	movs	r3, #64	@ 0x40
 800ad0e:	1b80      	subs	r0, r0, r6
 800ad10:	4083      	lsls	r3, r0
 800ad12:	6822      	ldr	r2, [r4, #0]
 800ad14:	3501      	adds	r5, #1
 800ad16:	4313      	orrs	r3, r2
 800ad18:	6023      	str	r3, [r4, #0]
 800ad1a:	7829      	ldrb	r1, [r5, #0]
 800ad1c:	2206      	movs	r2, #6
 800ad1e:	4826      	ldr	r0, [pc, #152]	@ (800adb8 <_svfiprintf_r+0x1f0>)
 800ad20:	1c6e      	adds	r6, r5, #1
 800ad22:	7621      	strb	r1, [r4, #24]
 800ad24:	f7fe fbc5 	bl	80094b2 <memchr>
 800ad28:	2800      	cmp	r0, #0
 800ad2a:	d038      	beq.n	800ad9e <_svfiprintf_r+0x1d6>
 800ad2c:	4b23      	ldr	r3, [pc, #140]	@ (800adbc <_svfiprintf_r+0x1f4>)
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d122      	bne.n	800ad78 <_svfiprintf_r+0x1b0>
 800ad32:	2207      	movs	r2, #7
 800ad34:	9b07      	ldr	r3, [sp, #28]
 800ad36:	3307      	adds	r3, #7
 800ad38:	4393      	bics	r3, r2
 800ad3a:	3308      	adds	r3, #8
 800ad3c:	9307      	str	r3, [sp, #28]
 800ad3e:	6963      	ldr	r3, [r4, #20]
 800ad40:	9a04      	ldr	r2, [sp, #16]
 800ad42:	189b      	adds	r3, r3, r2
 800ad44:	6163      	str	r3, [r4, #20]
 800ad46:	e762      	b.n	800ac0e <_svfiprintf_r+0x46>
 800ad48:	4343      	muls	r3, r0
 800ad4a:	0035      	movs	r5, r6
 800ad4c:	2101      	movs	r1, #1
 800ad4e:	189b      	adds	r3, r3, r2
 800ad50:	e7a4      	b.n	800ac9c <_svfiprintf_r+0xd4>
 800ad52:	2300      	movs	r3, #0
 800ad54:	200a      	movs	r0, #10
 800ad56:	0019      	movs	r1, r3
 800ad58:	3501      	adds	r5, #1
 800ad5a:	6063      	str	r3, [r4, #4]
 800ad5c:	782a      	ldrb	r2, [r5, #0]
 800ad5e:	1c6e      	adds	r6, r5, #1
 800ad60:	3a30      	subs	r2, #48	@ 0x30
 800ad62:	2a09      	cmp	r2, #9
 800ad64:	d903      	bls.n	800ad6e <_svfiprintf_r+0x1a6>
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d0c8      	beq.n	800acfc <_svfiprintf_r+0x134>
 800ad6a:	9109      	str	r1, [sp, #36]	@ 0x24
 800ad6c:	e7c6      	b.n	800acfc <_svfiprintf_r+0x134>
 800ad6e:	4341      	muls	r1, r0
 800ad70:	0035      	movs	r5, r6
 800ad72:	2301      	movs	r3, #1
 800ad74:	1889      	adds	r1, r1, r2
 800ad76:	e7f1      	b.n	800ad5c <_svfiprintf_r+0x194>
 800ad78:	aa07      	add	r2, sp, #28
 800ad7a:	9200      	str	r2, [sp, #0]
 800ad7c:	0021      	movs	r1, r4
 800ad7e:	003a      	movs	r2, r7
 800ad80:	4b0f      	ldr	r3, [pc, #60]	@ (800adc0 <_svfiprintf_r+0x1f8>)
 800ad82:	9803      	ldr	r0, [sp, #12]
 800ad84:	f7fd fe1a 	bl	80089bc <_printf_float>
 800ad88:	9004      	str	r0, [sp, #16]
 800ad8a:	9b04      	ldr	r3, [sp, #16]
 800ad8c:	3301      	adds	r3, #1
 800ad8e:	d1d6      	bne.n	800ad3e <_svfiprintf_r+0x176>
 800ad90:	89bb      	ldrh	r3, [r7, #12]
 800ad92:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800ad94:	065b      	lsls	r3, r3, #25
 800ad96:	d500      	bpl.n	800ad9a <_svfiprintf_r+0x1d2>
 800ad98:	e72c      	b.n	800abf4 <_svfiprintf_r+0x2c>
 800ad9a:	b021      	add	sp, #132	@ 0x84
 800ad9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad9e:	aa07      	add	r2, sp, #28
 800ada0:	9200      	str	r2, [sp, #0]
 800ada2:	0021      	movs	r1, r4
 800ada4:	003a      	movs	r2, r7
 800ada6:	4b06      	ldr	r3, [pc, #24]	@ (800adc0 <_svfiprintf_r+0x1f8>)
 800ada8:	9803      	ldr	r0, [sp, #12]
 800adaa:	f7fe f8b5 	bl	8008f18 <_printf_i>
 800adae:	e7eb      	b.n	800ad88 <_svfiprintf_r+0x1c0>
 800adb0:	0800db85 	.word	0x0800db85
 800adb4:	0800db8b 	.word	0x0800db8b
 800adb8:	0800db8f 	.word	0x0800db8f
 800adbc:	080089bd 	.word	0x080089bd
 800adc0:	0800ab09 	.word	0x0800ab09

0800adc4 <__sflush_r>:
 800adc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800adc6:	220c      	movs	r2, #12
 800adc8:	5e8b      	ldrsh	r3, [r1, r2]
 800adca:	0005      	movs	r5, r0
 800adcc:	000c      	movs	r4, r1
 800adce:	071a      	lsls	r2, r3, #28
 800add0:	d456      	bmi.n	800ae80 <__sflush_r+0xbc>
 800add2:	684a      	ldr	r2, [r1, #4]
 800add4:	2a00      	cmp	r2, #0
 800add6:	dc02      	bgt.n	800adde <__sflush_r+0x1a>
 800add8:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800adda:	2a00      	cmp	r2, #0
 800addc:	dd4e      	ble.n	800ae7c <__sflush_r+0xb8>
 800adde:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800ade0:	2f00      	cmp	r7, #0
 800ade2:	d04b      	beq.n	800ae7c <__sflush_r+0xb8>
 800ade4:	2200      	movs	r2, #0
 800ade6:	2080      	movs	r0, #128	@ 0x80
 800ade8:	682e      	ldr	r6, [r5, #0]
 800adea:	602a      	str	r2, [r5, #0]
 800adec:	001a      	movs	r2, r3
 800adee:	0140      	lsls	r0, r0, #5
 800adf0:	6a21      	ldr	r1, [r4, #32]
 800adf2:	4002      	ands	r2, r0
 800adf4:	4203      	tst	r3, r0
 800adf6:	d033      	beq.n	800ae60 <__sflush_r+0x9c>
 800adf8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800adfa:	89a3      	ldrh	r3, [r4, #12]
 800adfc:	075b      	lsls	r3, r3, #29
 800adfe:	d506      	bpl.n	800ae0e <__sflush_r+0x4a>
 800ae00:	6863      	ldr	r3, [r4, #4]
 800ae02:	1ad2      	subs	r2, r2, r3
 800ae04:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d001      	beq.n	800ae0e <__sflush_r+0x4a>
 800ae0a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ae0c:	1ad2      	subs	r2, r2, r3
 800ae0e:	2300      	movs	r3, #0
 800ae10:	0028      	movs	r0, r5
 800ae12:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800ae14:	6a21      	ldr	r1, [r4, #32]
 800ae16:	47b8      	blx	r7
 800ae18:	89a2      	ldrh	r2, [r4, #12]
 800ae1a:	1c43      	adds	r3, r0, #1
 800ae1c:	d106      	bne.n	800ae2c <__sflush_r+0x68>
 800ae1e:	6829      	ldr	r1, [r5, #0]
 800ae20:	291d      	cmp	r1, #29
 800ae22:	d846      	bhi.n	800aeb2 <__sflush_r+0xee>
 800ae24:	4b29      	ldr	r3, [pc, #164]	@ (800aecc <__sflush_r+0x108>)
 800ae26:	40cb      	lsrs	r3, r1
 800ae28:	07db      	lsls	r3, r3, #31
 800ae2a:	d542      	bpl.n	800aeb2 <__sflush_r+0xee>
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	6063      	str	r3, [r4, #4]
 800ae30:	6923      	ldr	r3, [r4, #16]
 800ae32:	6023      	str	r3, [r4, #0]
 800ae34:	04d2      	lsls	r2, r2, #19
 800ae36:	d505      	bpl.n	800ae44 <__sflush_r+0x80>
 800ae38:	1c43      	adds	r3, r0, #1
 800ae3a:	d102      	bne.n	800ae42 <__sflush_r+0x7e>
 800ae3c:	682b      	ldr	r3, [r5, #0]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d100      	bne.n	800ae44 <__sflush_r+0x80>
 800ae42:	6560      	str	r0, [r4, #84]	@ 0x54
 800ae44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ae46:	602e      	str	r6, [r5, #0]
 800ae48:	2900      	cmp	r1, #0
 800ae4a:	d017      	beq.n	800ae7c <__sflush_r+0xb8>
 800ae4c:	0023      	movs	r3, r4
 800ae4e:	3344      	adds	r3, #68	@ 0x44
 800ae50:	4299      	cmp	r1, r3
 800ae52:	d002      	beq.n	800ae5a <__sflush_r+0x96>
 800ae54:	0028      	movs	r0, r5
 800ae56:	f7ff f9b5 	bl	800a1c4 <_free_r>
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ae5e:	e00d      	b.n	800ae7c <__sflush_r+0xb8>
 800ae60:	2301      	movs	r3, #1
 800ae62:	0028      	movs	r0, r5
 800ae64:	47b8      	blx	r7
 800ae66:	0002      	movs	r2, r0
 800ae68:	1c43      	adds	r3, r0, #1
 800ae6a:	d1c6      	bne.n	800adfa <__sflush_r+0x36>
 800ae6c:	682b      	ldr	r3, [r5, #0]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d0c3      	beq.n	800adfa <__sflush_r+0x36>
 800ae72:	2b1d      	cmp	r3, #29
 800ae74:	d001      	beq.n	800ae7a <__sflush_r+0xb6>
 800ae76:	2b16      	cmp	r3, #22
 800ae78:	d11a      	bne.n	800aeb0 <__sflush_r+0xec>
 800ae7a:	602e      	str	r6, [r5, #0]
 800ae7c:	2000      	movs	r0, #0
 800ae7e:	e01e      	b.n	800aebe <__sflush_r+0xfa>
 800ae80:	690e      	ldr	r6, [r1, #16]
 800ae82:	2e00      	cmp	r6, #0
 800ae84:	d0fa      	beq.n	800ae7c <__sflush_r+0xb8>
 800ae86:	680f      	ldr	r7, [r1, #0]
 800ae88:	600e      	str	r6, [r1, #0]
 800ae8a:	1bba      	subs	r2, r7, r6
 800ae8c:	9201      	str	r2, [sp, #4]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	079b      	lsls	r3, r3, #30
 800ae92:	d100      	bne.n	800ae96 <__sflush_r+0xd2>
 800ae94:	694a      	ldr	r2, [r1, #20]
 800ae96:	60a2      	str	r2, [r4, #8]
 800ae98:	9b01      	ldr	r3, [sp, #4]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	ddee      	ble.n	800ae7c <__sflush_r+0xb8>
 800ae9e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800aea0:	0032      	movs	r2, r6
 800aea2:	001f      	movs	r7, r3
 800aea4:	0028      	movs	r0, r5
 800aea6:	9b01      	ldr	r3, [sp, #4]
 800aea8:	6a21      	ldr	r1, [r4, #32]
 800aeaa:	47b8      	blx	r7
 800aeac:	2800      	cmp	r0, #0
 800aeae:	dc07      	bgt.n	800aec0 <__sflush_r+0xfc>
 800aeb0:	89a2      	ldrh	r2, [r4, #12]
 800aeb2:	2340      	movs	r3, #64	@ 0x40
 800aeb4:	2001      	movs	r0, #1
 800aeb6:	4313      	orrs	r3, r2
 800aeb8:	b21b      	sxth	r3, r3
 800aeba:	81a3      	strh	r3, [r4, #12]
 800aebc:	4240      	negs	r0, r0
 800aebe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aec0:	9b01      	ldr	r3, [sp, #4]
 800aec2:	1836      	adds	r6, r6, r0
 800aec4:	1a1b      	subs	r3, r3, r0
 800aec6:	9301      	str	r3, [sp, #4]
 800aec8:	e7e6      	b.n	800ae98 <__sflush_r+0xd4>
 800aeca:	46c0      	nop			@ (mov r8, r8)
 800aecc:	20400001 	.word	0x20400001

0800aed0 <_fflush_r>:
 800aed0:	690b      	ldr	r3, [r1, #16]
 800aed2:	b570      	push	{r4, r5, r6, lr}
 800aed4:	0005      	movs	r5, r0
 800aed6:	000c      	movs	r4, r1
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d102      	bne.n	800aee2 <_fflush_r+0x12>
 800aedc:	2500      	movs	r5, #0
 800aede:	0028      	movs	r0, r5
 800aee0:	bd70      	pop	{r4, r5, r6, pc}
 800aee2:	2800      	cmp	r0, #0
 800aee4:	d004      	beq.n	800aef0 <_fflush_r+0x20>
 800aee6:	6a03      	ldr	r3, [r0, #32]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d101      	bne.n	800aef0 <_fflush_r+0x20>
 800aeec:	f7fe f9b0 	bl	8009250 <__sinit>
 800aef0:	220c      	movs	r2, #12
 800aef2:	5ea3      	ldrsh	r3, [r4, r2]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d0f1      	beq.n	800aedc <_fflush_r+0xc>
 800aef8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800aefa:	07d2      	lsls	r2, r2, #31
 800aefc:	d404      	bmi.n	800af08 <_fflush_r+0x38>
 800aefe:	059b      	lsls	r3, r3, #22
 800af00:	d402      	bmi.n	800af08 <_fflush_r+0x38>
 800af02:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800af04:	f7fe facb 	bl	800949e <__retarget_lock_acquire_recursive>
 800af08:	0028      	movs	r0, r5
 800af0a:	0021      	movs	r1, r4
 800af0c:	f7ff ff5a 	bl	800adc4 <__sflush_r>
 800af10:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800af12:	0005      	movs	r5, r0
 800af14:	07db      	lsls	r3, r3, #31
 800af16:	d4e2      	bmi.n	800aede <_fflush_r+0xe>
 800af18:	89a3      	ldrh	r3, [r4, #12]
 800af1a:	059b      	lsls	r3, r3, #22
 800af1c:	d4df      	bmi.n	800aede <_fflush_r+0xe>
 800af1e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800af20:	f7fe fabe 	bl	80094a0 <__retarget_lock_release_recursive>
 800af24:	e7db      	b.n	800aede <_fflush_r+0xe>

0800af26 <memmove>:
 800af26:	b510      	push	{r4, lr}
 800af28:	4288      	cmp	r0, r1
 800af2a:	d902      	bls.n	800af32 <memmove+0xc>
 800af2c:	188b      	adds	r3, r1, r2
 800af2e:	4298      	cmp	r0, r3
 800af30:	d308      	bcc.n	800af44 <memmove+0x1e>
 800af32:	2300      	movs	r3, #0
 800af34:	429a      	cmp	r2, r3
 800af36:	d007      	beq.n	800af48 <memmove+0x22>
 800af38:	5ccc      	ldrb	r4, [r1, r3]
 800af3a:	54c4      	strb	r4, [r0, r3]
 800af3c:	3301      	adds	r3, #1
 800af3e:	e7f9      	b.n	800af34 <memmove+0xe>
 800af40:	5c8b      	ldrb	r3, [r1, r2]
 800af42:	5483      	strb	r3, [r0, r2]
 800af44:	3a01      	subs	r2, #1
 800af46:	d2fb      	bcs.n	800af40 <memmove+0x1a>
 800af48:	bd10      	pop	{r4, pc}
	...

0800af4c <_sbrk_r>:
 800af4c:	2300      	movs	r3, #0
 800af4e:	b570      	push	{r4, r5, r6, lr}
 800af50:	4d06      	ldr	r5, [pc, #24]	@ (800af6c <_sbrk_r+0x20>)
 800af52:	0004      	movs	r4, r0
 800af54:	0008      	movs	r0, r1
 800af56:	602b      	str	r3, [r5, #0]
 800af58:	f7fa fcdc 	bl	8005914 <_sbrk>
 800af5c:	1c43      	adds	r3, r0, #1
 800af5e:	d103      	bne.n	800af68 <_sbrk_r+0x1c>
 800af60:	682b      	ldr	r3, [r5, #0]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d000      	beq.n	800af68 <_sbrk_r+0x1c>
 800af66:	6023      	str	r3, [r4, #0]
 800af68:	bd70      	pop	{r4, r5, r6, pc}
 800af6a:	46c0      	nop			@ (mov r8, r8)
 800af6c:	2000084c 	.word	0x2000084c

0800af70 <__assert_func>:
 800af70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800af72:	0014      	movs	r4, r2
 800af74:	001a      	movs	r2, r3
 800af76:	4b09      	ldr	r3, [pc, #36]	@ (800af9c <__assert_func+0x2c>)
 800af78:	0005      	movs	r5, r0
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	000e      	movs	r6, r1
 800af7e:	68d8      	ldr	r0, [r3, #12]
 800af80:	4b07      	ldr	r3, [pc, #28]	@ (800afa0 <__assert_func+0x30>)
 800af82:	2c00      	cmp	r4, #0
 800af84:	d101      	bne.n	800af8a <__assert_func+0x1a>
 800af86:	4b07      	ldr	r3, [pc, #28]	@ (800afa4 <__assert_func+0x34>)
 800af88:	001c      	movs	r4, r3
 800af8a:	4907      	ldr	r1, [pc, #28]	@ (800afa8 <__assert_func+0x38>)
 800af8c:	9301      	str	r3, [sp, #4]
 800af8e:	9402      	str	r4, [sp, #8]
 800af90:	002b      	movs	r3, r5
 800af92:	9600      	str	r6, [sp, #0]
 800af94:	f000 f886 	bl	800b0a4 <fiprintf>
 800af98:	f000 f894 	bl	800b0c4 <abort>
 800af9c:	20000040 	.word	0x20000040
 800afa0:	0800db9e 	.word	0x0800db9e
 800afa4:	0800d9ea 	.word	0x0800d9ea
 800afa8:	0800dbab 	.word	0x0800dbab

0800afac <_calloc_r>:
 800afac:	b570      	push	{r4, r5, r6, lr}
 800afae:	0c0b      	lsrs	r3, r1, #16
 800afb0:	0c15      	lsrs	r5, r2, #16
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d11e      	bne.n	800aff4 <_calloc_r+0x48>
 800afb6:	2d00      	cmp	r5, #0
 800afb8:	d10c      	bne.n	800afd4 <_calloc_r+0x28>
 800afba:	b289      	uxth	r1, r1
 800afbc:	b294      	uxth	r4, r2
 800afbe:	434c      	muls	r4, r1
 800afc0:	0021      	movs	r1, r4
 800afc2:	f7ff f975 	bl	800a2b0 <_malloc_r>
 800afc6:	1e05      	subs	r5, r0, #0
 800afc8:	d01b      	beq.n	800b002 <_calloc_r+0x56>
 800afca:	0022      	movs	r2, r4
 800afcc:	2100      	movs	r1, #0
 800afce:	f7fe f9e1 	bl	8009394 <memset>
 800afd2:	e016      	b.n	800b002 <_calloc_r+0x56>
 800afd4:	1c2b      	adds	r3, r5, #0
 800afd6:	1c0c      	adds	r4, r1, #0
 800afd8:	b289      	uxth	r1, r1
 800afda:	b292      	uxth	r2, r2
 800afdc:	434a      	muls	r2, r1
 800afde:	b29b      	uxth	r3, r3
 800afe0:	b2a1      	uxth	r1, r4
 800afe2:	4359      	muls	r1, r3
 800afe4:	0c14      	lsrs	r4, r2, #16
 800afe6:	190c      	adds	r4, r1, r4
 800afe8:	0c23      	lsrs	r3, r4, #16
 800afea:	d107      	bne.n	800affc <_calloc_r+0x50>
 800afec:	0424      	lsls	r4, r4, #16
 800afee:	b292      	uxth	r2, r2
 800aff0:	4314      	orrs	r4, r2
 800aff2:	e7e5      	b.n	800afc0 <_calloc_r+0x14>
 800aff4:	2d00      	cmp	r5, #0
 800aff6:	d101      	bne.n	800affc <_calloc_r+0x50>
 800aff8:	1c14      	adds	r4, r2, #0
 800affa:	e7ed      	b.n	800afd8 <_calloc_r+0x2c>
 800affc:	230c      	movs	r3, #12
 800affe:	2500      	movs	r5, #0
 800b000:	6003      	str	r3, [r0, #0]
 800b002:	0028      	movs	r0, r5
 800b004:	bd70      	pop	{r4, r5, r6, pc}

0800b006 <__ascii_mbtowc>:
 800b006:	b082      	sub	sp, #8
 800b008:	2900      	cmp	r1, #0
 800b00a:	d100      	bne.n	800b00e <__ascii_mbtowc+0x8>
 800b00c:	a901      	add	r1, sp, #4
 800b00e:	1e10      	subs	r0, r2, #0
 800b010:	d006      	beq.n	800b020 <__ascii_mbtowc+0x1a>
 800b012:	2b00      	cmp	r3, #0
 800b014:	d006      	beq.n	800b024 <__ascii_mbtowc+0x1e>
 800b016:	7813      	ldrb	r3, [r2, #0]
 800b018:	600b      	str	r3, [r1, #0]
 800b01a:	7810      	ldrb	r0, [r2, #0]
 800b01c:	1e43      	subs	r3, r0, #1
 800b01e:	4198      	sbcs	r0, r3
 800b020:	b002      	add	sp, #8
 800b022:	4770      	bx	lr
 800b024:	2002      	movs	r0, #2
 800b026:	4240      	negs	r0, r0
 800b028:	e7fa      	b.n	800b020 <__ascii_mbtowc+0x1a>

0800b02a <_realloc_r>:
 800b02a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b02c:	0006      	movs	r6, r0
 800b02e:	000c      	movs	r4, r1
 800b030:	0015      	movs	r5, r2
 800b032:	2900      	cmp	r1, #0
 800b034:	d105      	bne.n	800b042 <_realloc_r+0x18>
 800b036:	0011      	movs	r1, r2
 800b038:	f7ff f93a 	bl	800a2b0 <_malloc_r>
 800b03c:	0004      	movs	r4, r0
 800b03e:	0020      	movs	r0, r4
 800b040:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b042:	2a00      	cmp	r2, #0
 800b044:	d103      	bne.n	800b04e <_realloc_r+0x24>
 800b046:	f7ff f8bd 	bl	800a1c4 <_free_r>
 800b04a:	002c      	movs	r4, r5
 800b04c:	e7f7      	b.n	800b03e <_realloc_r+0x14>
 800b04e:	f000 f840 	bl	800b0d2 <_malloc_usable_size_r>
 800b052:	0007      	movs	r7, r0
 800b054:	4285      	cmp	r5, r0
 800b056:	d802      	bhi.n	800b05e <_realloc_r+0x34>
 800b058:	0843      	lsrs	r3, r0, #1
 800b05a:	42ab      	cmp	r3, r5
 800b05c:	d3ef      	bcc.n	800b03e <_realloc_r+0x14>
 800b05e:	0029      	movs	r1, r5
 800b060:	0030      	movs	r0, r6
 800b062:	f7ff f925 	bl	800a2b0 <_malloc_r>
 800b066:	9001      	str	r0, [sp, #4]
 800b068:	2800      	cmp	r0, #0
 800b06a:	d101      	bne.n	800b070 <_realloc_r+0x46>
 800b06c:	9c01      	ldr	r4, [sp, #4]
 800b06e:	e7e6      	b.n	800b03e <_realloc_r+0x14>
 800b070:	002a      	movs	r2, r5
 800b072:	42bd      	cmp	r5, r7
 800b074:	d900      	bls.n	800b078 <_realloc_r+0x4e>
 800b076:	003a      	movs	r2, r7
 800b078:	0021      	movs	r1, r4
 800b07a:	9801      	ldr	r0, [sp, #4]
 800b07c:	f7fe fa24 	bl	80094c8 <memcpy>
 800b080:	0021      	movs	r1, r4
 800b082:	0030      	movs	r0, r6
 800b084:	f7ff f89e 	bl	800a1c4 <_free_r>
 800b088:	e7f0      	b.n	800b06c <_realloc_r+0x42>

0800b08a <__ascii_wctomb>:
 800b08a:	0003      	movs	r3, r0
 800b08c:	1e08      	subs	r0, r1, #0
 800b08e:	d005      	beq.n	800b09c <__ascii_wctomb+0x12>
 800b090:	2aff      	cmp	r2, #255	@ 0xff
 800b092:	d904      	bls.n	800b09e <__ascii_wctomb+0x14>
 800b094:	228a      	movs	r2, #138	@ 0x8a
 800b096:	2001      	movs	r0, #1
 800b098:	601a      	str	r2, [r3, #0]
 800b09a:	4240      	negs	r0, r0
 800b09c:	4770      	bx	lr
 800b09e:	2001      	movs	r0, #1
 800b0a0:	700a      	strb	r2, [r1, #0]
 800b0a2:	e7fb      	b.n	800b09c <__ascii_wctomb+0x12>

0800b0a4 <fiprintf>:
 800b0a4:	b40e      	push	{r1, r2, r3}
 800b0a6:	b517      	push	{r0, r1, r2, r4, lr}
 800b0a8:	4c05      	ldr	r4, [pc, #20]	@ (800b0c0 <fiprintf+0x1c>)
 800b0aa:	ab05      	add	r3, sp, #20
 800b0ac:	cb04      	ldmia	r3!, {r2}
 800b0ae:	0001      	movs	r1, r0
 800b0b0:	6820      	ldr	r0, [r4, #0]
 800b0b2:	9301      	str	r3, [sp, #4]
 800b0b4:	f000 f83c 	bl	800b130 <_vfiprintf_r>
 800b0b8:	bc1e      	pop	{r1, r2, r3, r4}
 800b0ba:	bc08      	pop	{r3}
 800b0bc:	b003      	add	sp, #12
 800b0be:	4718      	bx	r3
 800b0c0:	20000040 	.word	0x20000040

0800b0c4 <abort>:
 800b0c4:	2006      	movs	r0, #6
 800b0c6:	b510      	push	{r4, lr}
 800b0c8:	f000 fa18 	bl	800b4fc <raise>
 800b0cc:	2001      	movs	r0, #1
 800b0ce:	f7fa fbf5 	bl	80058bc <_exit>

0800b0d2 <_malloc_usable_size_r>:
 800b0d2:	1f0b      	subs	r3, r1, #4
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	1f18      	subs	r0, r3, #4
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	da01      	bge.n	800b0e0 <_malloc_usable_size_r+0xe>
 800b0dc:	580b      	ldr	r3, [r1, r0]
 800b0de:	18c0      	adds	r0, r0, r3
 800b0e0:	4770      	bx	lr

0800b0e2 <__sfputc_r>:
 800b0e2:	6893      	ldr	r3, [r2, #8]
 800b0e4:	b510      	push	{r4, lr}
 800b0e6:	3b01      	subs	r3, #1
 800b0e8:	6093      	str	r3, [r2, #8]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	da04      	bge.n	800b0f8 <__sfputc_r+0x16>
 800b0ee:	6994      	ldr	r4, [r2, #24]
 800b0f0:	42a3      	cmp	r3, r4
 800b0f2:	db07      	blt.n	800b104 <__sfputc_r+0x22>
 800b0f4:	290a      	cmp	r1, #10
 800b0f6:	d005      	beq.n	800b104 <__sfputc_r+0x22>
 800b0f8:	6813      	ldr	r3, [r2, #0]
 800b0fa:	1c58      	adds	r0, r3, #1
 800b0fc:	6010      	str	r0, [r2, #0]
 800b0fe:	7019      	strb	r1, [r3, #0]
 800b100:	0008      	movs	r0, r1
 800b102:	bd10      	pop	{r4, pc}
 800b104:	f000 f930 	bl	800b368 <__swbuf_r>
 800b108:	0001      	movs	r1, r0
 800b10a:	e7f9      	b.n	800b100 <__sfputc_r+0x1e>

0800b10c <__sfputs_r>:
 800b10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b10e:	0006      	movs	r6, r0
 800b110:	000f      	movs	r7, r1
 800b112:	0014      	movs	r4, r2
 800b114:	18d5      	adds	r5, r2, r3
 800b116:	42ac      	cmp	r4, r5
 800b118:	d101      	bne.n	800b11e <__sfputs_r+0x12>
 800b11a:	2000      	movs	r0, #0
 800b11c:	e007      	b.n	800b12e <__sfputs_r+0x22>
 800b11e:	7821      	ldrb	r1, [r4, #0]
 800b120:	003a      	movs	r2, r7
 800b122:	0030      	movs	r0, r6
 800b124:	f7ff ffdd 	bl	800b0e2 <__sfputc_r>
 800b128:	3401      	adds	r4, #1
 800b12a:	1c43      	adds	r3, r0, #1
 800b12c:	d1f3      	bne.n	800b116 <__sfputs_r+0xa>
 800b12e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b130 <_vfiprintf_r>:
 800b130:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b132:	b0a1      	sub	sp, #132	@ 0x84
 800b134:	000f      	movs	r7, r1
 800b136:	0015      	movs	r5, r2
 800b138:	001e      	movs	r6, r3
 800b13a:	9003      	str	r0, [sp, #12]
 800b13c:	2800      	cmp	r0, #0
 800b13e:	d004      	beq.n	800b14a <_vfiprintf_r+0x1a>
 800b140:	6a03      	ldr	r3, [r0, #32]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d101      	bne.n	800b14a <_vfiprintf_r+0x1a>
 800b146:	f7fe f883 	bl	8009250 <__sinit>
 800b14a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b14c:	07db      	lsls	r3, r3, #31
 800b14e:	d405      	bmi.n	800b15c <_vfiprintf_r+0x2c>
 800b150:	89bb      	ldrh	r3, [r7, #12]
 800b152:	059b      	lsls	r3, r3, #22
 800b154:	d402      	bmi.n	800b15c <_vfiprintf_r+0x2c>
 800b156:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800b158:	f7fe f9a1 	bl	800949e <__retarget_lock_acquire_recursive>
 800b15c:	89bb      	ldrh	r3, [r7, #12]
 800b15e:	071b      	lsls	r3, r3, #28
 800b160:	d502      	bpl.n	800b168 <_vfiprintf_r+0x38>
 800b162:	693b      	ldr	r3, [r7, #16]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d113      	bne.n	800b190 <_vfiprintf_r+0x60>
 800b168:	0039      	movs	r1, r7
 800b16a:	9803      	ldr	r0, [sp, #12]
 800b16c:	f000 f93e 	bl	800b3ec <__swsetup_r>
 800b170:	2800      	cmp	r0, #0
 800b172:	d00d      	beq.n	800b190 <_vfiprintf_r+0x60>
 800b174:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b176:	07db      	lsls	r3, r3, #31
 800b178:	d503      	bpl.n	800b182 <_vfiprintf_r+0x52>
 800b17a:	2001      	movs	r0, #1
 800b17c:	4240      	negs	r0, r0
 800b17e:	b021      	add	sp, #132	@ 0x84
 800b180:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b182:	89bb      	ldrh	r3, [r7, #12]
 800b184:	059b      	lsls	r3, r3, #22
 800b186:	d4f8      	bmi.n	800b17a <_vfiprintf_r+0x4a>
 800b188:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800b18a:	f7fe f989 	bl	80094a0 <__retarget_lock_release_recursive>
 800b18e:	e7f4      	b.n	800b17a <_vfiprintf_r+0x4a>
 800b190:	2300      	movs	r3, #0
 800b192:	ac08      	add	r4, sp, #32
 800b194:	6163      	str	r3, [r4, #20]
 800b196:	3320      	adds	r3, #32
 800b198:	7663      	strb	r3, [r4, #25]
 800b19a:	3310      	adds	r3, #16
 800b19c:	76a3      	strb	r3, [r4, #26]
 800b19e:	9607      	str	r6, [sp, #28]
 800b1a0:	002e      	movs	r6, r5
 800b1a2:	7833      	ldrb	r3, [r6, #0]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d001      	beq.n	800b1ac <_vfiprintf_r+0x7c>
 800b1a8:	2b25      	cmp	r3, #37	@ 0x25
 800b1aa:	d148      	bne.n	800b23e <_vfiprintf_r+0x10e>
 800b1ac:	1b73      	subs	r3, r6, r5
 800b1ae:	9305      	str	r3, [sp, #20]
 800b1b0:	42ae      	cmp	r6, r5
 800b1b2:	d00b      	beq.n	800b1cc <_vfiprintf_r+0x9c>
 800b1b4:	002a      	movs	r2, r5
 800b1b6:	0039      	movs	r1, r7
 800b1b8:	9803      	ldr	r0, [sp, #12]
 800b1ba:	f7ff ffa7 	bl	800b10c <__sfputs_r>
 800b1be:	3001      	adds	r0, #1
 800b1c0:	d100      	bne.n	800b1c4 <_vfiprintf_r+0x94>
 800b1c2:	e0ae      	b.n	800b322 <_vfiprintf_r+0x1f2>
 800b1c4:	6963      	ldr	r3, [r4, #20]
 800b1c6:	9a05      	ldr	r2, [sp, #20]
 800b1c8:	189b      	adds	r3, r3, r2
 800b1ca:	6163      	str	r3, [r4, #20]
 800b1cc:	7833      	ldrb	r3, [r6, #0]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d100      	bne.n	800b1d4 <_vfiprintf_r+0xa4>
 800b1d2:	e0a6      	b.n	800b322 <_vfiprintf_r+0x1f2>
 800b1d4:	2201      	movs	r2, #1
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	4252      	negs	r2, r2
 800b1da:	6062      	str	r2, [r4, #4]
 800b1dc:	a904      	add	r1, sp, #16
 800b1de:	3254      	adds	r2, #84	@ 0x54
 800b1e0:	1852      	adds	r2, r2, r1
 800b1e2:	1c75      	adds	r5, r6, #1
 800b1e4:	6023      	str	r3, [r4, #0]
 800b1e6:	60e3      	str	r3, [r4, #12]
 800b1e8:	60a3      	str	r3, [r4, #8]
 800b1ea:	7013      	strb	r3, [r2, #0]
 800b1ec:	65a3      	str	r3, [r4, #88]	@ 0x58
 800b1ee:	4b59      	ldr	r3, [pc, #356]	@ (800b354 <_vfiprintf_r+0x224>)
 800b1f0:	2205      	movs	r2, #5
 800b1f2:	0018      	movs	r0, r3
 800b1f4:	7829      	ldrb	r1, [r5, #0]
 800b1f6:	9305      	str	r3, [sp, #20]
 800b1f8:	f7fe f95b 	bl	80094b2 <memchr>
 800b1fc:	1c6e      	adds	r6, r5, #1
 800b1fe:	2800      	cmp	r0, #0
 800b200:	d11f      	bne.n	800b242 <_vfiprintf_r+0x112>
 800b202:	6822      	ldr	r2, [r4, #0]
 800b204:	06d3      	lsls	r3, r2, #27
 800b206:	d504      	bpl.n	800b212 <_vfiprintf_r+0xe2>
 800b208:	2353      	movs	r3, #83	@ 0x53
 800b20a:	a904      	add	r1, sp, #16
 800b20c:	185b      	adds	r3, r3, r1
 800b20e:	2120      	movs	r1, #32
 800b210:	7019      	strb	r1, [r3, #0]
 800b212:	0713      	lsls	r3, r2, #28
 800b214:	d504      	bpl.n	800b220 <_vfiprintf_r+0xf0>
 800b216:	2353      	movs	r3, #83	@ 0x53
 800b218:	a904      	add	r1, sp, #16
 800b21a:	185b      	adds	r3, r3, r1
 800b21c:	212b      	movs	r1, #43	@ 0x2b
 800b21e:	7019      	strb	r1, [r3, #0]
 800b220:	782b      	ldrb	r3, [r5, #0]
 800b222:	2b2a      	cmp	r3, #42	@ 0x2a
 800b224:	d016      	beq.n	800b254 <_vfiprintf_r+0x124>
 800b226:	002e      	movs	r6, r5
 800b228:	2100      	movs	r1, #0
 800b22a:	200a      	movs	r0, #10
 800b22c:	68e3      	ldr	r3, [r4, #12]
 800b22e:	7832      	ldrb	r2, [r6, #0]
 800b230:	1c75      	adds	r5, r6, #1
 800b232:	3a30      	subs	r2, #48	@ 0x30
 800b234:	2a09      	cmp	r2, #9
 800b236:	d950      	bls.n	800b2da <_vfiprintf_r+0x1aa>
 800b238:	2900      	cmp	r1, #0
 800b23a:	d111      	bne.n	800b260 <_vfiprintf_r+0x130>
 800b23c:	e017      	b.n	800b26e <_vfiprintf_r+0x13e>
 800b23e:	3601      	adds	r6, #1
 800b240:	e7af      	b.n	800b1a2 <_vfiprintf_r+0x72>
 800b242:	9b05      	ldr	r3, [sp, #20]
 800b244:	6822      	ldr	r2, [r4, #0]
 800b246:	1ac0      	subs	r0, r0, r3
 800b248:	2301      	movs	r3, #1
 800b24a:	4083      	lsls	r3, r0
 800b24c:	4313      	orrs	r3, r2
 800b24e:	0035      	movs	r5, r6
 800b250:	6023      	str	r3, [r4, #0]
 800b252:	e7cc      	b.n	800b1ee <_vfiprintf_r+0xbe>
 800b254:	9b07      	ldr	r3, [sp, #28]
 800b256:	1d19      	adds	r1, r3, #4
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	9107      	str	r1, [sp, #28]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	db01      	blt.n	800b264 <_vfiprintf_r+0x134>
 800b260:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b262:	e004      	b.n	800b26e <_vfiprintf_r+0x13e>
 800b264:	425b      	negs	r3, r3
 800b266:	60e3      	str	r3, [r4, #12]
 800b268:	2302      	movs	r3, #2
 800b26a:	4313      	orrs	r3, r2
 800b26c:	6023      	str	r3, [r4, #0]
 800b26e:	7833      	ldrb	r3, [r6, #0]
 800b270:	2b2e      	cmp	r3, #46	@ 0x2e
 800b272:	d10c      	bne.n	800b28e <_vfiprintf_r+0x15e>
 800b274:	7873      	ldrb	r3, [r6, #1]
 800b276:	2b2a      	cmp	r3, #42	@ 0x2a
 800b278:	d134      	bne.n	800b2e4 <_vfiprintf_r+0x1b4>
 800b27a:	9b07      	ldr	r3, [sp, #28]
 800b27c:	3602      	adds	r6, #2
 800b27e:	1d1a      	adds	r2, r3, #4
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	9207      	str	r2, [sp, #28]
 800b284:	2b00      	cmp	r3, #0
 800b286:	da01      	bge.n	800b28c <_vfiprintf_r+0x15c>
 800b288:	2301      	movs	r3, #1
 800b28a:	425b      	negs	r3, r3
 800b28c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b28e:	4d32      	ldr	r5, [pc, #200]	@ (800b358 <_vfiprintf_r+0x228>)
 800b290:	2203      	movs	r2, #3
 800b292:	0028      	movs	r0, r5
 800b294:	7831      	ldrb	r1, [r6, #0]
 800b296:	f7fe f90c 	bl	80094b2 <memchr>
 800b29a:	2800      	cmp	r0, #0
 800b29c:	d006      	beq.n	800b2ac <_vfiprintf_r+0x17c>
 800b29e:	2340      	movs	r3, #64	@ 0x40
 800b2a0:	1b40      	subs	r0, r0, r5
 800b2a2:	4083      	lsls	r3, r0
 800b2a4:	6822      	ldr	r2, [r4, #0]
 800b2a6:	3601      	adds	r6, #1
 800b2a8:	4313      	orrs	r3, r2
 800b2aa:	6023      	str	r3, [r4, #0]
 800b2ac:	7831      	ldrb	r1, [r6, #0]
 800b2ae:	2206      	movs	r2, #6
 800b2b0:	482a      	ldr	r0, [pc, #168]	@ (800b35c <_vfiprintf_r+0x22c>)
 800b2b2:	1c75      	adds	r5, r6, #1
 800b2b4:	7621      	strb	r1, [r4, #24]
 800b2b6:	f7fe f8fc 	bl	80094b2 <memchr>
 800b2ba:	2800      	cmp	r0, #0
 800b2bc:	d040      	beq.n	800b340 <_vfiprintf_r+0x210>
 800b2be:	4b28      	ldr	r3, [pc, #160]	@ (800b360 <_vfiprintf_r+0x230>)
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d122      	bne.n	800b30a <_vfiprintf_r+0x1da>
 800b2c4:	2207      	movs	r2, #7
 800b2c6:	9b07      	ldr	r3, [sp, #28]
 800b2c8:	3307      	adds	r3, #7
 800b2ca:	4393      	bics	r3, r2
 800b2cc:	3308      	adds	r3, #8
 800b2ce:	9307      	str	r3, [sp, #28]
 800b2d0:	6963      	ldr	r3, [r4, #20]
 800b2d2:	9a04      	ldr	r2, [sp, #16]
 800b2d4:	189b      	adds	r3, r3, r2
 800b2d6:	6163      	str	r3, [r4, #20]
 800b2d8:	e762      	b.n	800b1a0 <_vfiprintf_r+0x70>
 800b2da:	4343      	muls	r3, r0
 800b2dc:	002e      	movs	r6, r5
 800b2de:	2101      	movs	r1, #1
 800b2e0:	189b      	adds	r3, r3, r2
 800b2e2:	e7a4      	b.n	800b22e <_vfiprintf_r+0xfe>
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	200a      	movs	r0, #10
 800b2e8:	0019      	movs	r1, r3
 800b2ea:	3601      	adds	r6, #1
 800b2ec:	6063      	str	r3, [r4, #4]
 800b2ee:	7832      	ldrb	r2, [r6, #0]
 800b2f0:	1c75      	adds	r5, r6, #1
 800b2f2:	3a30      	subs	r2, #48	@ 0x30
 800b2f4:	2a09      	cmp	r2, #9
 800b2f6:	d903      	bls.n	800b300 <_vfiprintf_r+0x1d0>
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d0c8      	beq.n	800b28e <_vfiprintf_r+0x15e>
 800b2fc:	9109      	str	r1, [sp, #36]	@ 0x24
 800b2fe:	e7c6      	b.n	800b28e <_vfiprintf_r+0x15e>
 800b300:	4341      	muls	r1, r0
 800b302:	002e      	movs	r6, r5
 800b304:	2301      	movs	r3, #1
 800b306:	1889      	adds	r1, r1, r2
 800b308:	e7f1      	b.n	800b2ee <_vfiprintf_r+0x1be>
 800b30a:	aa07      	add	r2, sp, #28
 800b30c:	9200      	str	r2, [sp, #0]
 800b30e:	0021      	movs	r1, r4
 800b310:	003a      	movs	r2, r7
 800b312:	4b14      	ldr	r3, [pc, #80]	@ (800b364 <_vfiprintf_r+0x234>)
 800b314:	9803      	ldr	r0, [sp, #12]
 800b316:	f7fd fb51 	bl	80089bc <_printf_float>
 800b31a:	9004      	str	r0, [sp, #16]
 800b31c:	9b04      	ldr	r3, [sp, #16]
 800b31e:	3301      	adds	r3, #1
 800b320:	d1d6      	bne.n	800b2d0 <_vfiprintf_r+0x1a0>
 800b322:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b324:	07db      	lsls	r3, r3, #31
 800b326:	d405      	bmi.n	800b334 <_vfiprintf_r+0x204>
 800b328:	89bb      	ldrh	r3, [r7, #12]
 800b32a:	059b      	lsls	r3, r3, #22
 800b32c:	d402      	bmi.n	800b334 <_vfiprintf_r+0x204>
 800b32e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800b330:	f7fe f8b6 	bl	80094a0 <__retarget_lock_release_recursive>
 800b334:	89bb      	ldrh	r3, [r7, #12]
 800b336:	065b      	lsls	r3, r3, #25
 800b338:	d500      	bpl.n	800b33c <_vfiprintf_r+0x20c>
 800b33a:	e71e      	b.n	800b17a <_vfiprintf_r+0x4a>
 800b33c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800b33e:	e71e      	b.n	800b17e <_vfiprintf_r+0x4e>
 800b340:	aa07      	add	r2, sp, #28
 800b342:	9200      	str	r2, [sp, #0]
 800b344:	0021      	movs	r1, r4
 800b346:	003a      	movs	r2, r7
 800b348:	4b06      	ldr	r3, [pc, #24]	@ (800b364 <_vfiprintf_r+0x234>)
 800b34a:	9803      	ldr	r0, [sp, #12]
 800b34c:	f7fd fde4 	bl	8008f18 <_printf_i>
 800b350:	e7e3      	b.n	800b31a <_vfiprintf_r+0x1ea>
 800b352:	46c0      	nop			@ (mov r8, r8)
 800b354:	0800db85 	.word	0x0800db85
 800b358:	0800db8b 	.word	0x0800db8b
 800b35c:	0800db8f 	.word	0x0800db8f
 800b360:	080089bd 	.word	0x080089bd
 800b364:	0800b10d 	.word	0x0800b10d

0800b368 <__swbuf_r>:
 800b368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b36a:	0006      	movs	r6, r0
 800b36c:	000d      	movs	r5, r1
 800b36e:	0014      	movs	r4, r2
 800b370:	2800      	cmp	r0, #0
 800b372:	d004      	beq.n	800b37e <__swbuf_r+0x16>
 800b374:	6a03      	ldr	r3, [r0, #32]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d101      	bne.n	800b37e <__swbuf_r+0x16>
 800b37a:	f7fd ff69 	bl	8009250 <__sinit>
 800b37e:	69a3      	ldr	r3, [r4, #24]
 800b380:	60a3      	str	r3, [r4, #8]
 800b382:	89a3      	ldrh	r3, [r4, #12]
 800b384:	071b      	lsls	r3, r3, #28
 800b386:	d502      	bpl.n	800b38e <__swbuf_r+0x26>
 800b388:	6923      	ldr	r3, [r4, #16]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d109      	bne.n	800b3a2 <__swbuf_r+0x3a>
 800b38e:	0021      	movs	r1, r4
 800b390:	0030      	movs	r0, r6
 800b392:	f000 f82b 	bl	800b3ec <__swsetup_r>
 800b396:	2800      	cmp	r0, #0
 800b398:	d003      	beq.n	800b3a2 <__swbuf_r+0x3a>
 800b39a:	2501      	movs	r5, #1
 800b39c:	426d      	negs	r5, r5
 800b39e:	0028      	movs	r0, r5
 800b3a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3a2:	6923      	ldr	r3, [r4, #16]
 800b3a4:	6820      	ldr	r0, [r4, #0]
 800b3a6:	b2ef      	uxtb	r7, r5
 800b3a8:	1ac0      	subs	r0, r0, r3
 800b3aa:	6963      	ldr	r3, [r4, #20]
 800b3ac:	b2ed      	uxtb	r5, r5
 800b3ae:	4283      	cmp	r3, r0
 800b3b0:	dc05      	bgt.n	800b3be <__swbuf_r+0x56>
 800b3b2:	0021      	movs	r1, r4
 800b3b4:	0030      	movs	r0, r6
 800b3b6:	f7ff fd8b 	bl	800aed0 <_fflush_r>
 800b3ba:	2800      	cmp	r0, #0
 800b3bc:	d1ed      	bne.n	800b39a <__swbuf_r+0x32>
 800b3be:	68a3      	ldr	r3, [r4, #8]
 800b3c0:	3001      	adds	r0, #1
 800b3c2:	3b01      	subs	r3, #1
 800b3c4:	60a3      	str	r3, [r4, #8]
 800b3c6:	6823      	ldr	r3, [r4, #0]
 800b3c8:	1c5a      	adds	r2, r3, #1
 800b3ca:	6022      	str	r2, [r4, #0]
 800b3cc:	701f      	strb	r7, [r3, #0]
 800b3ce:	6963      	ldr	r3, [r4, #20]
 800b3d0:	4283      	cmp	r3, r0
 800b3d2:	d004      	beq.n	800b3de <__swbuf_r+0x76>
 800b3d4:	89a3      	ldrh	r3, [r4, #12]
 800b3d6:	07db      	lsls	r3, r3, #31
 800b3d8:	d5e1      	bpl.n	800b39e <__swbuf_r+0x36>
 800b3da:	2d0a      	cmp	r5, #10
 800b3dc:	d1df      	bne.n	800b39e <__swbuf_r+0x36>
 800b3de:	0021      	movs	r1, r4
 800b3e0:	0030      	movs	r0, r6
 800b3e2:	f7ff fd75 	bl	800aed0 <_fflush_r>
 800b3e6:	2800      	cmp	r0, #0
 800b3e8:	d0d9      	beq.n	800b39e <__swbuf_r+0x36>
 800b3ea:	e7d6      	b.n	800b39a <__swbuf_r+0x32>

0800b3ec <__swsetup_r>:
 800b3ec:	4b2d      	ldr	r3, [pc, #180]	@ (800b4a4 <__swsetup_r+0xb8>)
 800b3ee:	b570      	push	{r4, r5, r6, lr}
 800b3f0:	0005      	movs	r5, r0
 800b3f2:	6818      	ldr	r0, [r3, #0]
 800b3f4:	000c      	movs	r4, r1
 800b3f6:	2800      	cmp	r0, #0
 800b3f8:	d004      	beq.n	800b404 <__swsetup_r+0x18>
 800b3fa:	6a03      	ldr	r3, [r0, #32]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d101      	bne.n	800b404 <__swsetup_r+0x18>
 800b400:	f7fd ff26 	bl	8009250 <__sinit>
 800b404:	220c      	movs	r2, #12
 800b406:	5ea3      	ldrsh	r3, [r4, r2]
 800b408:	071a      	lsls	r2, r3, #28
 800b40a:	d423      	bmi.n	800b454 <__swsetup_r+0x68>
 800b40c:	06da      	lsls	r2, r3, #27
 800b40e:	d407      	bmi.n	800b420 <__swsetup_r+0x34>
 800b410:	2209      	movs	r2, #9
 800b412:	602a      	str	r2, [r5, #0]
 800b414:	2240      	movs	r2, #64	@ 0x40
 800b416:	2001      	movs	r0, #1
 800b418:	4313      	orrs	r3, r2
 800b41a:	81a3      	strh	r3, [r4, #12]
 800b41c:	4240      	negs	r0, r0
 800b41e:	e03a      	b.n	800b496 <__swsetup_r+0xaa>
 800b420:	075b      	lsls	r3, r3, #29
 800b422:	d513      	bpl.n	800b44c <__swsetup_r+0x60>
 800b424:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b426:	2900      	cmp	r1, #0
 800b428:	d008      	beq.n	800b43c <__swsetup_r+0x50>
 800b42a:	0023      	movs	r3, r4
 800b42c:	3344      	adds	r3, #68	@ 0x44
 800b42e:	4299      	cmp	r1, r3
 800b430:	d002      	beq.n	800b438 <__swsetup_r+0x4c>
 800b432:	0028      	movs	r0, r5
 800b434:	f7fe fec6 	bl	800a1c4 <_free_r>
 800b438:	2300      	movs	r3, #0
 800b43a:	6363      	str	r3, [r4, #52]	@ 0x34
 800b43c:	2224      	movs	r2, #36	@ 0x24
 800b43e:	89a3      	ldrh	r3, [r4, #12]
 800b440:	4393      	bics	r3, r2
 800b442:	81a3      	strh	r3, [r4, #12]
 800b444:	2300      	movs	r3, #0
 800b446:	6063      	str	r3, [r4, #4]
 800b448:	6923      	ldr	r3, [r4, #16]
 800b44a:	6023      	str	r3, [r4, #0]
 800b44c:	2308      	movs	r3, #8
 800b44e:	89a2      	ldrh	r2, [r4, #12]
 800b450:	4313      	orrs	r3, r2
 800b452:	81a3      	strh	r3, [r4, #12]
 800b454:	6923      	ldr	r3, [r4, #16]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d10b      	bne.n	800b472 <__swsetup_r+0x86>
 800b45a:	21a0      	movs	r1, #160	@ 0xa0
 800b45c:	2280      	movs	r2, #128	@ 0x80
 800b45e:	89a3      	ldrh	r3, [r4, #12]
 800b460:	0089      	lsls	r1, r1, #2
 800b462:	0092      	lsls	r2, r2, #2
 800b464:	400b      	ands	r3, r1
 800b466:	4293      	cmp	r3, r2
 800b468:	d003      	beq.n	800b472 <__swsetup_r+0x86>
 800b46a:	0021      	movs	r1, r4
 800b46c:	0028      	movs	r0, r5
 800b46e:	f000 f88f 	bl	800b590 <__smakebuf_r>
 800b472:	220c      	movs	r2, #12
 800b474:	5ea3      	ldrsh	r3, [r4, r2]
 800b476:	2101      	movs	r1, #1
 800b478:	001a      	movs	r2, r3
 800b47a:	400a      	ands	r2, r1
 800b47c:	420b      	tst	r3, r1
 800b47e:	d00b      	beq.n	800b498 <__swsetup_r+0xac>
 800b480:	2200      	movs	r2, #0
 800b482:	60a2      	str	r2, [r4, #8]
 800b484:	6962      	ldr	r2, [r4, #20]
 800b486:	4252      	negs	r2, r2
 800b488:	61a2      	str	r2, [r4, #24]
 800b48a:	2000      	movs	r0, #0
 800b48c:	6922      	ldr	r2, [r4, #16]
 800b48e:	4282      	cmp	r2, r0
 800b490:	d101      	bne.n	800b496 <__swsetup_r+0xaa>
 800b492:	061a      	lsls	r2, r3, #24
 800b494:	d4be      	bmi.n	800b414 <__swsetup_r+0x28>
 800b496:	bd70      	pop	{r4, r5, r6, pc}
 800b498:	0799      	lsls	r1, r3, #30
 800b49a:	d400      	bmi.n	800b49e <__swsetup_r+0xb2>
 800b49c:	6962      	ldr	r2, [r4, #20]
 800b49e:	60a2      	str	r2, [r4, #8]
 800b4a0:	e7f3      	b.n	800b48a <__swsetup_r+0x9e>
 800b4a2:	46c0      	nop			@ (mov r8, r8)
 800b4a4:	20000040 	.word	0x20000040

0800b4a8 <_raise_r>:
 800b4a8:	b570      	push	{r4, r5, r6, lr}
 800b4aa:	0004      	movs	r4, r0
 800b4ac:	000d      	movs	r5, r1
 800b4ae:	291f      	cmp	r1, #31
 800b4b0:	d904      	bls.n	800b4bc <_raise_r+0x14>
 800b4b2:	2316      	movs	r3, #22
 800b4b4:	6003      	str	r3, [r0, #0]
 800b4b6:	2001      	movs	r0, #1
 800b4b8:	4240      	negs	r0, r0
 800b4ba:	bd70      	pop	{r4, r5, r6, pc}
 800b4bc:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d004      	beq.n	800b4cc <_raise_r+0x24>
 800b4c2:	008a      	lsls	r2, r1, #2
 800b4c4:	189b      	adds	r3, r3, r2
 800b4c6:	681a      	ldr	r2, [r3, #0]
 800b4c8:	2a00      	cmp	r2, #0
 800b4ca:	d108      	bne.n	800b4de <_raise_r+0x36>
 800b4cc:	0020      	movs	r0, r4
 800b4ce:	f000 f831 	bl	800b534 <_getpid_r>
 800b4d2:	002a      	movs	r2, r5
 800b4d4:	0001      	movs	r1, r0
 800b4d6:	0020      	movs	r0, r4
 800b4d8:	f000 f81a 	bl	800b510 <_kill_r>
 800b4dc:	e7ed      	b.n	800b4ba <_raise_r+0x12>
 800b4de:	2a01      	cmp	r2, #1
 800b4e0:	d009      	beq.n	800b4f6 <_raise_r+0x4e>
 800b4e2:	1c51      	adds	r1, r2, #1
 800b4e4:	d103      	bne.n	800b4ee <_raise_r+0x46>
 800b4e6:	2316      	movs	r3, #22
 800b4e8:	6003      	str	r3, [r0, #0]
 800b4ea:	2001      	movs	r0, #1
 800b4ec:	e7e5      	b.n	800b4ba <_raise_r+0x12>
 800b4ee:	2100      	movs	r1, #0
 800b4f0:	0028      	movs	r0, r5
 800b4f2:	6019      	str	r1, [r3, #0]
 800b4f4:	4790      	blx	r2
 800b4f6:	2000      	movs	r0, #0
 800b4f8:	e7df      	b.n	800b4ba <_raise_r+0x12>
	...

0800b4fc <raise>:
 800b4fc:	b510      	push	{r4, lr}
 800b4fe:	4b03      	ldr	r3, [pc, #12]	@ (800b50c <raise+0x10>)
 800b500:	0001      	movs	r1, r0
 800b502:	6818      	ldr	r0, [r3, #0]
 800b504:	f7ff ffd0 	bl	800b4a8 <_raise_r>
 800b508:	bd10      	pop	{r4, pc}
 800b50a:	46c0      	nop			@ (mov r8, r8)
 800b50c:	20000040 	.word	0x20000040

0800b510 <_kill_r>:
 800b510:	2300      	movs	r3, #0
 800b512:	b570      	push	{r4, r5, r6, lr}
 800b514:	4d06      	ldr	r5, [pc, #24]	@ (800b530 <_kill_r+0x20>)
 800b516:	0004      	movs	r4, r0
 800b518:	0008      	movs	r0, r1
 800b51a:	0011      	movs	r1, r2
 800b51c:	602b      	str	r3, [r5, #0]
 800b51e:	f7fa f9c5 	bl	80058ac <_kill>
 800b522:	1c43      	adds	r3, r0, #1
 800b524:	d103      	bne.n	800b52e <_kill_r+0x1e>
 800b526:	682b      	ldr	r3, [r5, #0]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d000      	beq.n	800b52e <_kill_r+0x1e>
 800b52c:	6023      	str	r3, [r4, #0]
 800b52e:	bd70      	pop	{r4, r5, r6, pc}
 800b530:	2000084c 	.word	0x2000084c

0800b534 <_getpid_r>:
 800b534:	b510      	push	{r4, lr}
 800b536:	f7fa f9b7 	bl	80058a8 <_getpid>
 800b53a:	bd10      	pop	{r4, pc}

0800b53c <__swhatbuf_r>:
 800b53c:	b570      	push	{r4, r5, r6, lr}
 800b53e:	000e      	movs	r6, r1
 800b540:	001d      	movs	r5, r3
 800b542:	230e      	movs	r3, #14
 800b544:	5ec9      	ldrsh	r1, [r1, r3]
 800b546:	0014      	movs	r4, r2
 800b548:	b096      	sub	sp, #88	@ 0x58
 800b54a:	2900      	cmp	r1, #0
 800b54c:	da0c      	bge.n	800b568 <__swhatbuf_r+0x2c>
 800b54e:	89b2      	ldrh	r2, [r6, #12]
 800b550:	2380      	movs	r3, #128	@ 0x80
 800b552:	0011      	movs	r1, r2
 800b554:	4019      	ands	r1, r3
 800b556:	421a      	tst	r2, r3
 800b558:	d114      	bne.n	800b584 <__swhatbuf_r+0x48>
 800b55a:	2380      	movs	r3, #128	@ 0x80
 800b55c:	00db      	lsls	r3, r3, #3
 800b55e:	2000      	movs	r0, #0
 800b560:	6029      	str	r1, [r5, #0]
 800b562:	6023      	str	r3, [r4, #0]
 800b564:	b016      	add	sp, #88	@ 0x58
 800b566:	bd70      	pop	{r4, r5, r6, pc}
 800b568:	466a      	mov	r2, sp
 800b56a:	f000 f853 	bl	800b614 <_fstat_r>
 800b56e:	2800      	cmp	r0, #0
 800b570:	dbed      	blt.n	800b54e <__swhatbuf_r+0x12>
 800b572:	23f0      	movs	r3, #240	@ 0xf0
 800b574:	9901      	ldr	r1, [sp, #4]
 800b576:	021b      	lsls	r3, r3, #8
 800b578:	4019      	ands	r1, r3
 800b57a:	4b04      	ldr	r3, [pc, #16]	@ (800b58c <__swhatbuf_r+0x50>)
 800b57c:	18c9      	adds	r1, r1, r3
 800b57e:	424b      	negs	r3, r1
 800b580:	4159      	adcs	r1, r3
 800b582:	e7ea      	b.n	800b55a <__swhatbuf_r+0x1e>
 800b584:	2100      	movs	r1, #0
 800b586:	2340      	movs	r3, #64	@ 0x40
 800b588:	e7e9      	b.n	800b55e <__swhatbuf_r+0x22>
 800b58a:	46c0      	nop			@ (mov r8, r8)
 800b58c:	ffffe000 	.word	0xffffe000

0800b590 <__smakebuf_r>:
 800b590:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b592:	2602      	movs	r6, #2
 800b594:	898b      	ldrh	r3, [r1, #12]
 800b596:	0005      	movs	r5, r0
 800b598:	000c      	movs	r4, r1
 800b59a:	b085      	sub	sp, #20
 800b59c:	4233      	tst	r3, r6
 800b59e:	d007      	beq.n	800b5b0 <__smakebuf_r+0x20>
 800b5a0:	0023      	movs	r3, r4
 800b5a2:	3347      	adds	r3, #71	@ 0x47
 800b5a4:	6023      	str	r3, [r4, #0]
 800b5a6:	6123      	str	r3, [r4, #16]
 800b5a8:	2301      	movs	r3, #1
 800b5aa:	6163      	str	r3, [r4, #20]
 800b5ac:	b005      	add	sp, #20
 800b5ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5b0:	ab03      	add	r3, sp, #12
 800b5b2:	aa02      	add	r2, sp, #8
 800b5b4:	f7ff ffc2 	bl	800b53c <__swhatbuf_r>
 800b5b8:	9f02      	ldr	r7, [sp, #8]
 800b5ba:	9001      	str	r0, [sp, #4]
 800b5bc:	0039      	movs	r1, r7
 800b5be:	0028      	movs	r0, r5
 800b5c0:	f7fe fe76 	bl	800a2b0 <_malloc_r>
 800b5c4:	2800      	cmp	r0, #0
 800b5c6:	d108      	bne.n	800b5da <__smakebuf_r+0x4a>
 800b5c8:	220c      	movs	r2, #12
 800b5ca:	5ea3      	ldrsh	r3, [r4, r2]
 800b5cc:	059a      	lsls	r2, r3, #22
 800b5ce:	d4ed      	bmi.n	800b5ac <__smakebuf_r+0x1c>
 800b5d0:	2203      	movs	r2, #3
 800b5d2:	4393      	bics	r3, r2
 800b5d4:	431e      	orrs	r6, r3
 800b5d6:	81a6      	strh	r6, [r4, #12]
 800b5d8:	e7e2      	b.n	800b5a0 <__smakebuf_r+0x10>
 800b5da:	2380      	movs	r3, #128	@ 0x80
 800b5dc:	89a2      	ldrh	r2, [r4, #12]
 800b5de:	6020      	str	r0, [r4, #0]
 800b5e0:	4313      	orrs	r3, r2
 800b5e2:	81a3      	strh	r3, [r4, #12]
 800b5e4:	9b03      	ldr	r3, [sp, #12]
 800b5e6:	6120      	str	r0, [r4, #16]
 800b5e8:	6167      	str	r7, [r4, #20]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d00c      	beq.n	800b608 <__smakebuf_r+0x78>
 800b5ee:	0028      	movs	r0, r5
 800b5f0:	230e      	movs	r3, #14
 800b5f2:	5ee1      	ldrsh	r1, [r4, r3]
 800b5f4:	f000 f820 	bl	800b638 <_isatty_r>
 800b5f8:	2800      	cmp	r0, #0
 800b5fa:	d005      	beq.n	800b608 <__smakebuf_r+0x78>
 800b5fc:	2303      	movs	r3, #3
 800b5fe:	89a2      	ldrh	r2, [r4, #12]
 800b600:	439a      	bics	r2, r3
 800b602:	3b02      	subs	r3, #2
 800b604:	4313      	orrs	r3, r2
 800b606:	81a3      	strh	r3, [r4, #12]
 800b608:	89a3      	ldrh	r3, [r4, #12]
 800b60a:	9a01      	ldr	r2, [sp, #4]
 800b60c:	4313      	orrs	r3, r2
 800b60e:	81a3      	strh	r3, [r4, #12]
 800b610:	e7cc      	b.n	800b5ac <__smakebuf_r+0x1c>
	...

0800b614 <_fstat_r>:
 800b614:	2300      	movs	r3, #0
 800b616:	b570      	push	{r4, r5, r6, lr}
 800b618:	4d06      	ldr	r5, [pc, #24]	@ (800b634 <_fstat_r+0x20>)
 800b61a:	0004      	movs	r4, r0
 800b61c:	0008      	movs	r0, r1
 800b61e:	0011      	movs	r1, r2
 800b620:	602b      	str	r3, [r5, #0]
 800b622:	f7fa f96e 	bl	8005902 <_fstat>
 800b626:	1c43      	adds	r3, r0, #1
 800b628:	d103      	bne.n	800b632 <_fstat_r+0x1e>
 800b62a:	682b      	ldr	r3, [r5, #0]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d000      	beq.n	800b632 <_fstat_r+0x1e>
 800b630:	6023      	str	r3, [r4, #0]
 800b632:	bd70      	pop	{r4, r5, r6, pc}
 800b634:	2000084c 	.word	0x2000084c

0800b638 <_isatty_r>:
 800b638:	2300      	movs	r3, #0
 800b63a:	b570      	push	{r4, r5, r6, lr}
 800b63c:	4d06      	ldr	r5, [pc, #24]	@ (800b658 <_isatty_r+0x20>)
 800b63e:	0004      	movs	r4, r0
 800b640:	0008      	movs	r0, r1
 800b642:	602b      	str	r3, [r5, #0]
 800b644:	f7fa f962 	bl	800590c <_isatty>
 800b648:	1c43      	adds	r3, r0, #1
 800b64a:	d103      	bne.n	800b654 <_isatty_r+0x1c>
 800b64c:	682b      	ldr	r3, [r5, #0]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d000      	beq.n	800b654 <_isatty_r+0x1c>
 800b652:	6023      	str	r3, [r4, #0]
 800b654:	bd70      	pop	{r4, r5, r6, pc}
 800b656:	46c0      	nop			@ (mov r8, r8)
 800b658:	2000084c 	.word	0x2000084c

0800b65c <log>:
 800b65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b65e:	0004      	movs	r4, r0
 800b660:	000d      	movs	r5, r1
 800b662:	f000 f837 	bl	800b6d4 <__ieee754_log>
 800b666:	0022      	movs	r2, r4
 800b668:	0006      	movs	r6, r0
 800b66a:	000f      	movs	r7, r1
 800b66c:	002b      	movs	r3, r5
 800b66e:	0020      	movs	r0, r4
 800b670:	0029      	movs	r1, r5
 800b672:	f7f7 feb3 	bl	80033dc <__aeabi_dcmpun>
 800b676:	2800      	cmp	r0, #0
 800b678:	d115      	bne.n	800b6a6 <log+0x4a>
 800b67a:	2200      	movs	r2, #0
 800b67c:	2300      	movs	r3, #0
 800b67e:	0020      	movs	r0, r4
 800b680:	0029      	movs	r1, r5
 800b682:	f7f4 ff03 	bl	800048c <__aeabi_dcmpgt>
 800b686:	2800      	cmp	r0, #0
 800b688:	d10d      	bne.n	800b6a6 <log+0x4a>
 800b68a:	2200      	movs	r2, #0
 800b68c:	2300      	movs	r3, #0
 800b68e:	0020      	movs	r0, r4
 800b690:	0029      	movs	r1, r5
 800b692:	f7f4 fee1 	bl	8000458 <__aeabi_dcmpeq>
 800b696:	2800      	cmp	r0, #0
 800b698:	d008      	beq.n	800b6ac <log+0x50>
 800b69a:	f7fd fed5 	bl	8009448 <__errno>
 800b69e:	2322      	movs	r3, #34	@ 0x22
 800b6a0:	2600      	movs	r6, #0
 800b6a2:	4f07      	ldr	r7, [pc, #28]	@ (800b6c0 <log+0x64>)
 800b6a4:	6003      	str	r3, [r0, #0]
 800b6a6:	0030      	movs	r0, r6
 800b6a8:	0039      	movs	r1, r7
 800b6aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6ac:	f7fd fecc 	bl	8009448 <__errno>
 800b6b0:	2321      	movs	r3, #33	@ 0x21
 800b6b2:	6003      	str	r3, [r0, #0]
 800b6b4:	4803      	ldr	r0, [pc, #12]	@ (800b6c4 <log+0x68>)
 800b6b6:	f000 f807 	bl	800b6c8 <nan>
 800b6ba:	0006      	movs	r6, r0
 800b6bc:	000f      	movs	r7, r1
 800b6be:	e7f2      	b.n	800b6a6 <log+0x4a>
 800b6c0:	fff00000 	.word	0xfff00000
 800b6c4:	0800d9ea 	.word	0x0800d9ea

0800b6c8 <nan>:
 800b6c8:	2000      	movs	r0, #0
 800b6ca:	4901      	ldr	r1, [pc, #4]	@ (800b6d0 <nan+0x8>)
 800b6cc:	4770      	bx	lr
 800b6ce:	46c0      	nop			@ (mov r8, r8)
 800b6d0:	7ff80000 	.word	0x7ff80000

0800b6d4 <__ieee754_log>:
 800b6d4:	2380      	movs	r3, #128	@ 0x80
 800b6d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6d8:	035b      	lsls	r3, r3, #13
 800b6da:	000e      	movs	r6, r1
 800b6dc:	b08d      	sub	sp, #52	@ 0x34
 800b6de:	4299      	cmp	r1, r3
 800b6e0:	da23      	bge.n	800b72a <__ieee754_log+0x56>
 800b6e2:	004b      	lsls	r3, r1, #1
 800b6e4:	085b      	lsrs	r3, r3, #1
 800b6e6:	4303      	orrs	r3, r0
 800b6e8:	d107      	bne.n	800b6fa <__ieee754_log+0x26>
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	2000      	movs	r0, #0
 800b6f0:	49b4      	ldr	r1, [pc, #720]	@ (800b9c4 <__ieee754_log+0x2f0>)
 800b6f2:	f7f6 fb49 	bl	8001d88 <__aeabi_ddiv>
 800b6f6:	b00d      	add	sp, #52	@ 0x34
 800b6f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6fa:	2900      	cmp	r1, #0
 800b6fc:	da06      	bge.n	800b70c <__ieee754_log+0x38>
 800b6fe:	0002      	movs	r2, r0
 800b700:	000b      	movs	r3, r1
 800b702:	f7f7 fa61 	bl	8002bc8 <__aeabi_dsub>
 800b706:	2200      	movs	r2, #0
 800b708:	2300      	movs	r3, #0
 800b70a:	e7f2      	b.n	800b6f2 <__ieee754_log+0x1e>
 800b70c:	4bae      	ldr	r3, [pc, #696]	@ (800b9c8 <__ieee754_log+0x2f4>)
 800b70e:	2200      	movs	r2, #0
 800b710:	f7f6 ff74 	bl	80025fc <__aeabi_dmul>
 800b714:	2336      	movs	r3, #54	@ 0x36
 800b716:	000e      	movs	r6, r1
 800b718:	425b      	negs	r3, r3
 800b71a:	4aac      	ldr	r2, [pc, #688]	@ (800b9cc <__ieee754_log+0x2f8>)
 800b71c:	4296      	cmp	r6, r2
 800b71e:	dd06      	ble.n	800b72e <__ieee754_log+0x5a>
 800b720:	0002      	movs	r2, r0
 800b722:	000b      	movs	r3, r1
 800b724:	f7f5 ff6a 	bl	80015fc <__aeabi_dadd>
 800b728:	e7e5      	b.n	800b6f6 <__ieee754_log+0x22>
 800b72a:	2300      	movs	r3, #0
 800b72c:	e7f5      	b.n	800b71a <__ieee754_log+0x46>
 800b72e:	4ca8      	ldr	r4, [pc, #672]	@ (800b9d0 <__ieee754_log+0x2fc>)
 800b730:	1532      	asrs	r2, r6, #20
 800b732:	1912      	adds	r2, r2, r4
 800b734:	0336      	lsls	r6, r6, #12
 800b736:	4ca7      	ldr	r4, [pc, #668]	@ (800b9d4 <__ieee754_log+0x300>)
 800b738:	18d2      	adds	r2, r2, r3
 800b73a:	0b33      	lsrs	r3, r6, #12
 800b73c:	9302      	str	r3, [sp, #8]
 800b73e:	191b      	adds	r3, r3, r4
 800b740:	2480      	movs	r4, #128	@ 0x80
 800b742:	0364      	lsls	r4, r4, #13
 800b744:	4023      	ands	r3, r4
 800b746:	4ca4      	ldr	r4, [pc, #656]	@ (800b9d8 <__ieee754_log+0x304>)
 800b748:	9d02      	ldr	r5, [sp, #8]
 800b74a:	405c      	eors	r4, r3
 800b74c:	151b      	asrs	r3, r3, #20
 800b74e:	189b      	adds	r3, r3, r2
 800b750:	4325      	orrs	r5, r4
 800b752:	2200      	movs	r2, #0
 800b754:	9300      	str	r3, [sp, #0]
 800b756:	0029      	movs	r1, r5
 800b758:	4b9f      	ldr	r3, [pc, #636]	@ (800b9d8 <__ieee754_log+0x304>)
 800b75a:	f7f7 fa35 	bl	8002bc8 <__aeabi_dsub>
 800b75e:	9b02      	ldr	r3, [sp, #8]
 800b760:	0006      	movs	r6, r0
 800b762:	3302      	adds	r3, #2
 800b764:	031b      	lsls	r3, r3, #12
 800b766:	000f      	movs	r7, r1
 800b768:	2200      	movs	r2, #0
 800b76a:	0b1b      	lsrs	r3, r3, #12
 800b76c:	2b02      	cmp	r3, #2
 800b76e:	dc64      	bgt.n	800b83a <__ieee754_log+0x166>
 800b770:	2300      	movs	r3, #0
 800b772:	f7f4 fe71 	bl	8000458 <__aeabi_dcmpeq>
 800b776:	2800      	cmp	r0, #0
 800b778:	d019      	beq.n	800b7ae <__ieee754_log+0xda>
 800b77a:	9b00      	ldr	r3, [sp, #0]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d100      	bne.n	800b782 <__ieee754_log+0xae>
 800b780:	e11c      	b.n	800b9bc <__ieee754_log+0x2e8>
 800b782:	0018      	movs	r0, r3
 800b784:	f7f7 fe88 	bl	8003498 <__aeabi_i2d>
 800b788:	4a94      	ldr	r2, [pc, #592]	@ (800b9dc <__ieee754_log+0x308>)
 800b78a:	4b95      	ldr	r3, [pc, #596]	@ (800b9e0 <__ieee754_log+0x30c>)
 800b78c:	0004      	movs	r4, r0
 800b78e:	000d      	movs	r5, r1
 800b790:	f7f6 ff34 	bl	80025fc <__aeabi_dmul>
 800b794:	4a93      	ldr	r2, [pc, #588]	@ (800b9e4 <__ieee754_log+0x310>)
 800b796:	0006      	movs	r6, r0
 800b798:	000f      	movs	r7, r1
 800b79a:	4b93      	ldr	r3, [pc, #588]	@ (800b9e8 <__ieee754_log+0x314>)
 800b79c:	0020      	movs	r0, r4
 800b79e:	0029      	movs	r1, r5
 800b7a0:	f7f6 ff2c 	bl	80025fc <__aeabi_dmul>
 800b7a4:	0002      	movs	r2, r0
 800b7a6:	000b      	movs	r3, r1
 800b7a8:	0030      	movs	r0, r6
 800b7aa:	0039      	movs	r1, r7
 800b7ac:	e7ba      	b.n	800b724 <__ieee754_log+0x50>
 800b7ae:	4a8f      	ldr	r2, [pc, #572]	@ (800b9ec <__ieee754_log+0x318>)
 800b7b0:	4b8f      	ldr	r3, [pc, #572]	@ (800b9f0 <__ieee754_log+0x31c>)
 800b7b2:	0030      	movs	r0, r6
 800b7b4:	0039      	movs	r1, r7
 800b7b6:	f7f6 ff21 	bl	80025fc <__aeabi_dmul>
 800b7ba:	0002      	movs	r2, r0
 800b7bc:	000b      	movs	r3, r1
 800b7be:	2000      	movs	r0, #0
 800b7c0:	498c      	ldr	r1, [pc, #560]	@ (800b9f4 <__ieee754_log+0x320>)
 800b7c2:	f7f7 fa01 	bl	8002bc8 <__aeabi_dsub>
 800b7c6:	0032      	movs	r2, r6
 800b7c8:	0004      	movs	r4, r0
 800b7ca:	000d      	movs	r5, r1
 800b7cc:	003b      	movs	r3, r7
 800b7ce:	0030      	movs	r0, r6
 800b7d0:	0039      	movs	r1, r7
 800b7d2:	f7f6 ff13 	bl	80025fc <__aeabi_dmul>
 800b7d6:	000b      	movs	r3, r1
 800b7d8:	0002      	movs	r2, r0
 800b7da:	0029      	movs	r1, r5
 800b7dc:	0020      	movs	r0, r4
 800b7de:	f7f6 ff0d 	bl	80025fc <__aeabi_dmul>
 800b7e2:	9b00      	ldr	r3, [sp, #0]
 800b7e4:	9002      	str	r0, [sp, #8]
 800b7e6:	9103      	str	r1, [sp, #12]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d106      	bne.n	800b7fa <__ieee754_log+0x126>
 800b7ec:	0002      	movs	r2, r0
 800b7ee:	000b      	movs	r3, r1
 800b7f0:	0030      	movs	r0, r6
 800b7f2:	0039      	movs	r1, r7
 800b7f4:	f7f7 f9e8 	bl	8002bc8 <__aeabi_dsub>
 800b7f8:	e77d      	b.n	800b6f6 <__ieee754_log+0x22>
 800b7fa:	9800      	ldr	r0, [sp, #0]
 800b7fc:	f7f7 fe4c 	bl	8003498 <__aeabi_i2d>
 800b800:	4a76      	ldr	r2, [pc, #472]	@ (800b9dc <__ieee754_log+0x308>)
 800b802:	4b77      	ldr	r3, [pc, #476]	@ (800b9e0 <__ieee754_log+0x30c>)
 800b804:	0004      	movs	r4, r0
 800b806:	000d      	movs	r5, r1
 800b808:	f7f6 fef8 	bl	80025fc <__aeabi_dmul>
 800b80c:	4a75      	ldr	r2, [pc, #468]	@ (800b9e4 <__ieee754_log+0x310>)
 800b80e:	9000      	str	r0, [sp, #0]
 800b810:	9101      	str	r1, [sp, #4]
 800b812:	4b75      	ldr	r3, [pc, #468]	@ (800b9e8 <__ieee754_log+0x314>)
 800b814:	0020      	movs	r0, r4
 800b816:	0029      	movs	r1, r5
 800b818:	f7f6 fef0 	bl	80025fc <__aeabi_dmul>
 800b81c:	0002      	movs	r2, r0
 800b81e:	000b      	movs	r3, r1
 800b820:	9802      	ldr	r0, [sp, #8]
 800b822:	9903      	ldr	r1, [sp, #12]
 800b824:	f7f7 f9d0 	bl	8002bc8 <__aeabi_dsub>
 800b828:	0032      	movs	r2, r6
 800b82a:	003b      	movs	r3, r7
 800b82c:	f7f7 f9cc 	bl	8002bc8 <__aeabi_dsub>
 800b830:	0002      	movs	r2, r0
 800b832:	000b      	movs	r3, r1
 800b834:	9800      	ldr	r0, [sp, #0]
 800b836:	9901      	ldr	r1, [sp, #4]
 800b838:	e7dc      	b.n	800b7f4 <__ieee754_log+0x120>
 800b83a:	2380      	movs	r3, #128	@ 0x80
 800b83c:	05db      	lsls	r3, r3, #23
 800b83e:	f7f5 fedd 	bl	80015fc <__aeabi_dadd>
 800b842:	0002      	movs	r2, r0
 800b844:	000b      	movs	r3, r1
 800b846:	0030      	movs	r0, r6
 800b848:	0039      	movs	r1, r7
 800b84a:	f7f6 fa9d 	bl	8001d88 <__aeabi_ddiv>
 800b84e:	9004      	str	r0, [sp, #16]
 800b850:	9105      	str	r1, [sp, #20]
 800b852:	9800      	ldr	r0, [sp, #0]
 800b854:	f7f7 fe20 	bl	8003498 <__aeabi_i2d>
 800b858:	9a04      	ldr	r2, [sp, #16]
 800b85a:	9b05      	ldr	r3, [sp, #20]
 800b85c:	9006      	str	r0, [sp, #24]
 800b85e:	9107      	str	r1, [sp, #28]
 800b860:	0010      	movs	r0, r2
 800b862:	0019      	movs	r1, r3
 800b864:	f7f6 feca 	bl	80025fc <__aeabi_dmul>
 800b868:	4a63      	ldr	r2, [pc, #396]	@ (800b9f8 <__ieee754_log+0x324>)
 800b86a:	9b02      	ldr	r3, [sp, #8]
 800b86c:	4694      	mov	ip, r2
 800b86e:	4463      	add	r3, ip
 800b870:	0002      	movs	r2, r0
 800b872:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b874:	000b      	movs	r3, r1
 800b876:	9008      	str	r0, [sp, #32]
 800b878:	9109      	str	r1, [sp, #36]	@ 0x24
 800b87a:	f7f6 febf 	bl	80025fc <__aeabi_dmul>
 800b87e:	0004      	movs	r4, r0
 800b880:	000d      	movs	r5, r1
 800b882:	4a5e      	ldr	r2, [pc, #376]	@ (800b9fc <__ieee754_log+0x328>)
 800b884:	4b5e      	ldr	r3, [pc, #376]	@ (800ba00 <__ieee754_log+0x32c>)
 800b886:	f7f6 feb9 	bl	80025fc <__aeabi_dmul>
 800b88a:	4a5e      	ldr	r2, [pc, #376]	@ (800ba04 <__ieee754_log+0x330>)
 800b88c:	4b5e      	ldr	r3, [pc, #376]	@ (800ba08 <__ieee754_log+0x334>)
 800b88e:	f7f5 feb5 	bl	80015fc <__aeabi_dadd>
 800b892:	0022      	movs	r2, r4
 800b894:	002b      	movs	r3, r5
 800b896:	f7f6 feb1 	bl	80025fc <__aeabi_dmul>
 800b89a:	4a5c      	ldr	r2, [pc, #368]	@ (800ba0c <__ieee754_log+0x338>)
 800b89c:	4b5c      	ldr	r3, [pc, #368]	@ (800ba10 <__ieee754_log+0x33c>)
 800b89e:	f7f5 fead 	bl	80015fc <__aeabi_dadd>
 800b8a2:	0022      	movs	r2, r4
 800b8a4:	002b      	movs	r3, r5
 800b8a6:	f7f6 fea9 	bl	80025fc <__aeabi_dmul>
 800b8aa:	4a5a      	ldr	r2, [pc, #360]	@ (800ba14 <__ieee754_log+0x340>)
 800b8ac:	4b5a      	ldr	r3, [pc, #360]	@ (800ba18 <__ieee754_log+0x344>)
 800b8ae:	f7f5 fea5 	bl	80015fc <__aeabi_dadd>
 800b8b2:	9a08      	ldr	r2, [sp, #32]
 800b8b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8b6:	f7f6 fea1 	bl	80025fc <__aeabi_dmul>
 800b8ba:	4a58      	ldr	r2, [pc, #352]	@ (800ba1c <__ieee754_log+0x348>)
 800b8bc:	9008      	str	r0, [sp, #32]
 800b8be:	9109      	str	r1, [sp, #36]	@ 0x24
 800b8c0:	4b57      	ldr	r3, [pc, #348]	@ (800ba20 <__ieee754_log+0x34c>)
 800b8c2:	0020      	movs	r0, r4
 800b8c4:	0029      	movs	r1, r5
 800b8c6:	f7f6 fe99 	bl	80025fc <__aeabi_dmul>
 800b8ca:	4a56      	ldr	r2, [pc, #344]	@ (800ba24 <__ieee754_log+0x350>)
 800b8cc:	4b56      	ldr	r3, [pc, #344]	@ (800ba28 <__ieee754_log+0x354>)
 800b8ce:	f7f5 fe95 	bl	80015fc <__aeabi_dadd>
 800b8d2:	0022      	movs	r2, r4
 800b8d4:	002b      	movs	r3, r5
 800b8d6:	f7f6 fe91 	bl	80025fc <__aeabi_dmul>
 800b8da:	4a54      	ldr	r2, [pc, #336]	@ (800ba2c <__ieee754_log+0x358>)
 800b8dc:	4b54      	ldr	r3, [pc, #336]	@ (800ba30 <__ieee754_log+0x35c>)
 800b8de:	f7f5 fe8d 	bl	80015fc <__aeabi_dadd>
 800b8e2:	0022      	movs	r2, r4
 800b8e4:	002b      	movs	r3, r5
 800b8e6:	f7f6 fe89 	bl	80025fc <__aeabi_dmul>
 800b8ea:	0002      	movs	r2, r0
 800b8ec:	000b      	movs	r3, r1
 800b8ee:	9808      	ldr	r0, [sp, #32]
 800b8f0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b8f2:	f7f5 fe83 	bl	80015fc <__aeabi_dadd>
 800b8f6:	9a02      	ldr	r2, [sp, #8]
 800b8f8:	4b4e      	ldr	r3, [pc, #312]	@ (800ba34 <__ieee754_log+0x360>)
 800b8fa:	0004      	movs	r4, r0
 800b8fc:	1a9b      	subs	r3, r3, r2
 800b8fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b900:	000d      	movs	r5, r1
 800b902:	4313      	orrs	r3, r2
 800b904:	2b00      	cmp	r3, #0
 800b906:	dd34      	ble.n	800b972 <__ieee754_log+0x29e>
 800b908:	2200      	movs	r2, #0
 800b90a:	4b3a      	ldr	r3, [pc, #232]	@ (800b9f4 <__ieee754_log+0x320>)
 800b90c:	0030      	movs	r0, r6
 800b90e:	0039      	movs	r1, r7
 800b910:	f7f6 fe74 	bl	80025fc <__aeabi_dmul>
 800b914:	0032      	movs	r2, r6
 800b916:	003b      	movs	r3, r7
 800b918:	f7f6 fe70 	bl	80025fc <__aeabi_dmul>
 800b91c:	0002      	movs	r2, r0
 800b91e:	000b      	movs	r3, r1
 800b920:	9002      	str	r0, [sp, #8]
 800b922:	9103      	str	r1, [sp, #12]
 800b924:	0020      	movs	r0, r4
 800b926:	0029      	movs	r1, r5
 800b928:	f7f5 fe68 	bl	80015fc <__aeabi_dadd>
 800b92c:	9a04      	ldr	r2, [sp, #16]
 800b92e:	9b05      	ldr	r3, [sp, #20]
 800b930:	f7f6 fe64 	bl	80025fc <__aeabi_dmul>
 800b934:	9b00      	ldr	r3, [sp, #0]
 800b936:	0004      	movs	r4, r0
 800b938:	000d      	movs	r5, r1
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d106      	bne.n	800b94c <__ieee754_log+0x278>
 800b93e:	0002      	movs	r2, r0
 800b940:	000b      	movs	r3, r1
 800b942:	9802      	ldr	r0, [sp, #8]
 800b944:	9903      	ldr	r1, [sp, #12]
 800b946:	f7f7 f93f 	bl	8002bc8 <__aeabi_dsub>
 800b94a:	e74f      	b.n	800b7ec <__ieee754_log+0x118>
 800b94c:	4a23      	ldr	r2, [pc, #140]	@ (800b9dc <__ieee754_log+0x308>)
 800b94e:	4b24      	ldr	r3, [pc, #144]	@ (800b9e0 <__ieee754_log+0x30c>)
 800b950:	9806      	ldr	r0, [sp, #24]
 800b952:	9907      	ldr	r1, [sp, #28]
 800b954:	f7f6 fe52 	bl	80025fc <__aeabi_dmul>
 800b958:	4a22      	ldr	r2, [pc, #136]	@ (800b9e4 <__ieee754_log+0x310>)
 800b95a:	9000      	str	r0, [sp, #0]
 800b95c:	9101      	str	r1, [sp, #4]
 800b95e:	9806      	ldr	r0, [sp, #24]
 800b960:	9907      	ldr	r1, [sp, #28]
 800b962:	4b21      	ldr	r3, [pc, #132]	@ (800b9e8 <__ieee754_log+0x314>)
 800b964:	f7f6 fe4a 	bl	80025fc <__aeabi_dmul>
 800b968:	0022      	movs	r2, r4
 800b96a:	002b      	movs	r3, r5
 800b96c:	f7f5 fe46 	bl	80015fc <__aeabi_dadd>
 800b970:	e754      	b.n	800b81c <__ieee754_log+0x148>
 800b972:	0002      	movs	r2, r0
 800b974:	000b      	movs	r3, r1
 800b976:	0030      	movs	r0, r6
 800b978:	0039      	movs	r1, r7
 800b97a:	f7f7 f925 	bl	8002bc8 <__aeabi_dsub>
 800b97e:	9a04      	ldr	r2, [sp, #16]
 800b980:	9b05      	ldr	r3, [sp, #20]
 800b982:	f7f6 fe3b 	bl	80025fc <__aeabi_dmul>
 800b986:	9b00      	ldr	r3, [sp, #0]
 800b988:	0004      	movs	r4, r0
 800b98a:	000d      	movs	r5, r1
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d102      	bne.n	800b996 <__ieee754_log+0x2c2>
 800b990:	0002      	movs	r2, r0
 800b992:	000b      	movs	r3, r1
 800b994:	e72c      	b.n	800b7f0 <__ieee754_log+0x11c>
 800b996:	4a11      	ldr	r2, [pc, #68]	@ (800b9dc <__ieee754_log+0x308>)
 800b998:	4b11      	ldr	r3, [pc, #68]	@ (800b9e0 <__ieee754_log+0x30c>)
 800b99a:	9806      	ldr	r0, [sp, #24]
 800b99c:	9907      	ldr	r1, [sp, #28]
 800b99e:	f7f6 fe2d 	bl	80025fc <__aeabi_dmul>
 800b9a2:	4a10      	ldr	r2, [pc, #64]	@ (800b9e4 <__ieee754_log+0x310>)
 800b9a4:	9000      	str	r0, [sp, #0]
 800b9a6:	9101      	str	r1, [sp, #4]
 800b9a8:	9806      	ldr	r0, [sp, #24]
 800b9aa:	9907      	ldr	r1, [sp, #28]
 800b9ac:	4b0e      	ldr	r3, [pc, #56]	@ (800b9e8 <__ieee754_log+0x314>)
 800b9ae:	f7f6 fe25 	bl	80025fc <__aeabi_dmul>
 800b9b2:	0002      	movs	r2, r0
 800b9b4:	000b      	movs	r3, r1
 800b9b6:	0020      	movs	r0, r4
 800b9b8:	0029      	movs	r1, r5
 800b9ba:	e733      	b.n	800b824 <__ieee754_log+0x150>
 800b9bc:	2000      	movs	r0, #0
 800b9be:	2100      	movs	r1, #0
 800b9c0:	e699      	b.n	800b6f6 <__ieee754_log+0x22>
 800b9c2:	46c0      	nop			@ (mov r8, r8)
 800b9c4:	c3500000 	.word	0xc3500000
 800b9c8:	43500000 	.word	0x43500000
 800b9cc:	7fefffff 	.word	0x7fefffff
 800b9d0:	fffffc01 	.word	0xfffffc01
 800b9d4:	00095f64 	.word	0x00095f64
 800b9d8:	3ff00000 	.word	0x3ff00000
 800b9dc:	fee00000 	.word	0xfee00000
 800b9e0:	3fe62e42 	.word	0x3fe62e42
 800b9e4:	35793c76 	.word	0x35793c76
 800b9e8:	3dea39ef 	.word	0x3dea39ef
 800b9ec:	55555555 	.word	0x55555555
 800b9f0:	3fd55555 	.word	0x3fd55555
 800b9f4:	3fe00000 	.word	0x3fe00000
 800b9f8:	fff9eb86 	.word	0xfff9eb86
 800b9fc:	df3e5244 	.word	0xdf3e5244
 800ba00:	3fc2f112 	.word	0x3fc2f112
 800ba04:	96cb03de 	.word	0x96cb03de
 800ba08:	3fc74664 	.word	0x3fc74664
 800ba0c:	94229359 	.word	0x94229359
 800ba10:	3fd24924 	.word	0x3fd24924
 800ba14:	55555593 	.word	0x55555593
 800ba18:	3fe55555 	.word	0x3fe55555
 800ba1c:	d078c69f 	.word	0xd078c69f
 800ba20:	3fc39a09 	.word	0x3fc39a09
 800ba24:	1d8e78af 	.word	0x1d8e78af
 800ba28:	3fcc71c5 	.word	0x3fcc71c5
 800ba2c:	9997fa04 	.word	0x9997fa04
 800ba30:	3fd99999 	.word	0x3fd99999
 800ba34:	0006b851 	.word	0x0006b851

0800ba38 <_init>:
 800ba38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba3a:	46c0      	nop			@ (mov r8, r8)
 800ba3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba3e:	bc08      	pop	{r3}
 800ba40:	469e      	mov	lr, r3
 800ba42:	4770      	bx	lr

0800ba44 <_fini>:
 800ba44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba46:	46c0      	nop			@ (mov r8, r8)
 800ba48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba4a:	bc08      	pop	{r3}
 800ba4c:	469e      	mov	lr, r3
 800ba4e:	4770      	bx	lr
